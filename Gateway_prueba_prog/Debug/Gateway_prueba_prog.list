
Gateway_prueba_prog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000953c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  080096cc  080096cc  000196cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e5c  08009e5c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08009e5c  08009e5c  00019e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e64  08009e64  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e64  08009e64  00019e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e68  08009e68  00019e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08009e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  2000020c  0800a078  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  0800a078  000207a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000237e6  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037cf  00000000  00000000  00043a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001610  00000000  00000000  000471f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001478  00000000  00000000  00048808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028e49  00000000  00000000  00049c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012e05  00000000  00000000  00072ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f89e4  00000000  00000000  000858ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e2b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f4  00000000  00000000  0017e330  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096b4 	.word	0x080096b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	080096b4 	.word	0x080096b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b972 	b.w	8000df8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	4688      	mov	r8, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14b      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4615      	mov	r5, r2
 8000b3e:	d967      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0720 	rsb	r7, r2, #32
 8000b4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b52:	4095      	lsls	r5, r2
 8000b54:	ea47 0803 	orr.w	r8, r7, r3
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b64:	fa1f fc85 	uxth.w	ip, r5
 8000b68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b70:	fb07 f10c 	mul.w	r1, r7, ip
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18eb      	adds	r3, r5, r3
 8000b7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b7e:	f080 811b 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8118 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000b88:	3f02      	subs	r7, #2
 8000b8a:	442b      	add	r3, r5
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba0:	45a4      	cmp	ip, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	192c      	adds	r4, r5, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000baa:	f080 8107 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	f240 8104 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	442c      	add	r4, r5
 8000bb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bbc:	eba4 040c 	sub.w	r4, r4, ip
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	b11e      	cbz	r6, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0xbe>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80eb 	beq.w	8000db2 <__udivmoddi4+0x286>
 8000bdc:	2700      	movs	r7, #0
 8000bde:	e9c6 0100 	strd	r0, r1, [r6]
 8000be2:	4638      	mov	r0, r7
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	fab3 f783 	clz	r7, r3
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	d147      	bne.n	8000c82 <__udivmoddi4+0x156>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xd0>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 80fa 	bhi.w	8000df0 <__udivmoddi4+0x2c4>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4698      	mov	r8, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d0e0      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c0e:	e7dd      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c10:	b902      	cbnz	r2, 8000c14 <__udivmoddi4+0xe8>
 8000c12:	deff      	udf	#255	; 0xff
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f040 808f 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1e:	1b49      	subs	r1, r1, r5
 8000c20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c24:	fa1f f885 	uxth.w	r8, r5
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c38:	fb08 f10c 	mul.w	r1, r8, ip
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c40:	18eb      	adds	r3, r5, r3
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x14c>
 8000c68:	192c      	adds	r4, r5, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x14a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80b6 	bhi.w	8000de2 <__udivmoddi4+0x2b6>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e79f      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c82:	f1c7 0c20 	rsb	ip, r7, #32
 8000c86:	40bb      	lsls	r3, r7
 8000c88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c90:	fa01 f407 	lsl.w	r4, r1, r7
 8000c94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca0:	4325      	orrs	r5, r4
 8000ca2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ca6:	0c2c      	lsrs	r4, r5, #16
 8000ca8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cac:	fa1f fa8e 	uxth.w	sl, lr
 8000cb0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	fa02 f207 	lsl.w	r2, r2, r7
 8000cbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	f080 8087 	bcs.w	8000dde <__udivmoddi4+0x2b2>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f240 8084 	bls.w	8000dde <__udivmoddi4+0x2b2>
 8000cd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cda:	4473      	add	r3, lr
 8000cdc:	1b1b      	subs	r3, r3, r4
 8000cde:	b2ad      	uxth	r5, r5
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf0:	45a2      	cmp	sl, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	d26b      	bcs.n	8000dd6 <__udivmoddi4+0x2aa>
 8000cfe:	45a2      	cmp	sl, r4
 8000d00:	d969      	bls.n	8000dd6 <__udivmoddi4+0x2aa>
 8000d02:	3802      	subs	r0, #2
 8000d04:	4474      	add	r4, lr
 8000d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	eba4 040a 	sub.w	r4, r4, sl
 8000d12:	454c      	cmp	r4, r9
 8000d14:	46c2      	mov	sl, r8
 8000d16:	464b      	mov	r3, r9
 8000d18:	d354      	bcc.n	8000dc4 <__udivmoddi4+0x298>
 8000d1a:	d051      	beq.n	8000dc0 <__udivmoddi4+0x294>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d069      	beq.n	8000df4 <__udivmoddi4+0x2c8>
 8000d20:	ebb1 050a 	subs.w	r5, r1, sl
 8000d24:	eb64 0403 	sbc.w	r4, r4, r3
 8000d28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d2c:	40fd      	lsrs	r5, r7
 8000d2e:	40fc      	lsrs	r4, r7
 8000d30:	ea4c 0505 	orr.w	r5, ip, r5
 8000d34:	e9c6 5400 	strd	r5, r4, [r6]
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e747      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f703 	lsr.w	r7, r0, r3
 8000d44:	4095      	lsls	r5, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d52:	4338      	orrs	r0, r7
 8000d54:	0c01      	lsrs	r1, r0, #16
 8000d56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5a:	fa1f f885 	uxth.w	r8, r5
 8000d5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d66:	fb07 f308 	mul.w	r3, r7, r8
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x256>
 8000d72:	1869      	adds	r1, r5, r1
 8000d74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d78:	d22f      	bcs.n	8000dda <__udivmoddi4+0x2ae>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d92d      	bls.n	8000dda <__udivmoddi4+0x2ae>
 8000d7e:	3f02      	subs	r7, #2
 8000d80:	4429      	add	r1, r5
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	b281      	uxth	r1, r0
 8000d86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d92:	fb00 f308 	mul.w	r3, r0, r8
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x27e>
 8000d9a:	1869      	adds	r1, r5, r1
 8000d9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da0:	d217      	bcs.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d915      	bls.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4429      	add	r1, r5
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db0:	e73b      	b.n	8000c2a <__udivmoddi4+0xfe>
 8000db2:	4637      	mov	r7, r6
 8000db4:	4630      	mov	r0, r6
 8000db6:	e709      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db8:	4607      	mov	r7, r0
 8000dba:	e6e7      	b.n	8000b8c <__udivmoddi4+0x60>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6fb      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dc0:	4541      	cmp	r1, r8
 8000dc2:	d2ab      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dc8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dcc:	3801      	subs	r0, #1
 8000dce:	4613      	mov	r3, r2
 8000dd0:	e7a4      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd2:	4660      	mov	r0, ip
 8000dd4:	e7e9      	b.n	8000daa <__udivmoddi4+0x27e>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	e795      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000dda:	4667      	mov	r7, ip
 8000ddc:	e7d1      	b.n	8000d82 <__udivmoddi4+0x256>
 8000dde:	4681      	mov	r9, r0
 8000de0:	e77c      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	442c      	add	r4, r5
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0x14c>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	442b      	add	r3, r5
 8000dee:	e72f      	b.n	8000c50 <__udivmoddi4+0x124>
 8000df0:	4638      	mov	r0, r7
 8000df2:	e708      	b.n	8000c06 <__udivmoddi4+0xda>
 8000df4:	4637      	mov	r7, r6
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0xa0>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e06:	2003      	movs	r0, #3
 8000e08:	f001 fc18 	bl	800263c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 f80d 	bl	8000e2c <HAL_InitTick>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	e001      	b.n	8000e22 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e1e:	f007 fcd1 	bl	80087c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e22:	79fb      	ldrb	r3, [r7, #7]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <HAL_InitTick+0x68>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d022      	beq.n	8000e86 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_InitTick+0x6c>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_InitTick+0x68>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 fc26 	bl	80026a6 <HAL_SYSTICK_Config>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10f      	bne.n	8000e80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b0f      	cmp	r3, #15
 8000e64:	d809      	bhi.n	8000e7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e66:	2200      	movs	r2, #0
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6e:	f001 fbf0 	bl	8002652 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <HAL_InitTick+0x70>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	e007      	b.n	8000e8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e004      	b.n	8000e8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e001      	b.n	8000e8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000004 	.word	0x20000004
 8000e98:	20000038 	.word	0x20000038
 8000e9c:	20000000 	.word	0x20000000

08000ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_IncTick+0x1c>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_IncTick+0x20>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a03      	ldr	r2, [pc, #12]	; (8000ebc <HAL_IncTick+0x1c>)
 8000eb0:	6013      	str	r3, [r2, #0]
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	200002dc 	.word	0x200002dc
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200002dc 	.word	0x200002dc

08000edc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f44:	b490      	push	{r4, r7}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3360      	adds	r3, #96	; 0x60
 8000f56:	461a      	mov	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000f60:	6822      	ldr	r2, [r4, #0]
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <LL_ADC_SetOffset+0x40>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	4313      	orrs	r3, r2
 8000f72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f76:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc90      	pop	{r4, r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	03fff000 	.word	0x03fff000

08000f88 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f88:	b490      	push	{r4, r7}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3360      	adds	r3, #96	; 0x60
 8000f96:	461a      	mov	r2, r3
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fa0:	6823      	ldr	r3, [r4, #0]
 8000fa2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc90      	pop	{r4, r7}
 8000fae:	4770      	bx	lr

08000fb0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fb0:	b490      	push	{r4, r7}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3360      	adds	r3, #96	; 0x60
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc90      	pop	{r4, r7}
 8000fde:	4770      	bx	lr

08000fe0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001006:	b490      	push	{r4, r7}
 8001008:	b084      	sub	sp, #16
 800100a:	af00      	add	r7, sp, #0
 800100c:	60f8      	str	r0, [r7, #12]
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	3330      	adds	r3, #48	; 0x30
 8001016:	461a      	mov	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	f003 030c 	and.w	r3, r3, #12
 8001022:	4413      	add	r3, r2
 8001024:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001026:	6822      	ldr	r2, [r4, #0]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	211f      	movs	r1, #31
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	401a      	ands	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	0e9b      	lsrs	r3, r3, #26
 800103c:	f003 011f 	and.w	r1, r3, #31
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	f003 031f 	and.w	r3, r3, #31
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bc90      	pop	{r4, r7}
 8001056:	4770      	bx	lr

08001058 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001058:	b490      	push	{r4, r7}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3314      	adds	r3, #20
 8001068:	461a      	mov	r2, r3
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	0e5b      	lsrs	r3, r3, #25
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	4413      	add	r3, r2
 8001076:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001078:	6822      	ldr	r2, [r4, #0]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	0d1b      	lsrs	r3, r3, #20
 800107e:	f003 031f 	and.w	r3, r3, #31
 8001082:	2107      	movs	r1, #7
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	401a      	ands	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	0d1b      	lsrs	r3, r3, #20
 8001090:	f003 031f 	and.w	r3, r3, #31
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc90      	pop	{r4, r7}
 80010a6:	4770      	bx	lr

080010a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010c0:	43db      	mvns	r3, r3
 80010c2:	401a      	ands	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0318 	and.w	r3, r3, #24
 80010ca:	4908      	ldr	r1, [pc, #32]	; (80010ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80010cc:	40d9      	lsrs	r1, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	400b      	ands	r3, r1
 80010d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010d6:	431a      	orrs	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	0007ffff 	.word	0x0007ffff

080010f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 031f 	and.w	r3, r3, #31
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001138:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6093      	str	r3, [r2, #8]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800115c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001160:	d101      	bne.n	8001166 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001184:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001188:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011b0:	d101      	bne.n	80011b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d8:	f043 0201 	orr.w	r2, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001200:	f043 0202 	orr.w	r2, r3, #2
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <LL_ADC_IsEnabled+0x18>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <LL_ADC_IsEnabled+0x1a>
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b02      	cmp	r3, #2
 800124c:	d101      	bne.n	8001252 <LL_ADC_IsDisableOngoing+0x18>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <LL_ADC_IsDisableOngoing+0x1a>
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001270:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001274:	f043 0204 	orr.w	r2, r3, #4
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001298:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800129c:	f043 0210 	orr.w	r2, r3, #16
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d101      	bne.n	80012c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012ea:	f043 0220 	orr.w	r2, r3, #32
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b08      	cmp	r3, #8
 8001310:	d101      	bne.n	8001316 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e134      	b.n	80015a8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001348:	2b00      	cmp	r3, #0
 800134a:	d109      	bne.n	8001360 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f007 fa5d 	bl	800880c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fef1 	bl	800114c <LL_ADC_IsDeepPowerDownEnabled>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d004      	beq.n	800137a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fed7 	bl	8001128 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff0c 	bl	800119c <LL_ADC_IsInternalRegulatorEnabled>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d113      	bne.n	80013b2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fef0 	bl	8001174 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001394:	4b86      	ldr	r3, [pc, #536]	; (80015b0 <HAL_ADC_Init+0x28c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	099b      	lsrs	r3, r3, #6
 800139a:	4a86      	ldr	r2, [pc, #536]	; (80015b4 <HAL_ADC_Init+0x290>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013a4:	e002      	b.n	80013ac <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f9      	bne.n	80013a6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fef0 	bl	800119c <LL_ADC_IsInternalRegulatorEnabled>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10d      	bne.n	80013de <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c6:	f043 0210 	orr.w	r2, r3, #16
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	f043 0201 	orr.w	r2, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff64 	bl	80012b0 <LL_ADC_REG_IsConversionOngoing>
 80013e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f040 80cf 	bne.w	8001596 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f040 80cb 	bne.w	8001596 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001404:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001408:	f043 0202 	orr.w	r2, r3, #2
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fefd 	bl	8001214 <LL_ADC_IsEnabled>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d115      	bne.n	800144c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001420:	4865      	ldr	r0, [pc, #404]	; (80015b8 <HAL_ADC_Init+0x294>)
 8001422:	f7ff fef7 	bl	8001214 <LL_ADC_IsEnabled>
 8001426:	4604      	mov	r4, r0
 8001428:	4864      	ldr	r0, [pc, #400]	; (80015bc <HAL_ADC_Init+0x298>)
 800142a:	f7ff fef3 	bl	8001214 <LL_ADC_IsEnabled>
 800142e:	4603      	mov	r3, r0
 8001430:	431c      	orrs	r4, r3
 8001432:	4863      	ldr	r0, [pc, #396]	; (80015c0 <HAL_ADC_Init+0x29c>)
 8001434:	f7ff feee 	bl	8001214 <LL_ADC_IsEnabled>
 8001438:	4603      	mov	r3, r0
 800143a:	4323      	orrs	r3, r4
 800143c:	2b00      	cmp	r3, #0
 800143e:	d105      	bne.n	800144c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4619      	mov	r1, r3
 8001446:	485f      	ldr	r0, [pc, #380]	; (80015c4 <HAL_ADC_Init+0x2a0>)
 8001448:	f7ff fd48 	bl	8000edc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7e5b      	ldrb	r3, [r3, #25]
 8001450:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001456:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800145c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001462:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3020 	ldrb.w	r3, [r3, #32]
 800146a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d106      	bne.n	8001488 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	3b01      	subs	r3, #1
 8001480:	045b      	lsls	r3, r3, #17
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148c:	2b00      	cmp	r3, #0
 800148e:	d009      	beq.n	80014a4 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	4b47      	ldr	r3, [pc, #284]	; (80015c8 <HAL_ADC_Init+0x2a4>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	69b9      	ldr	r1, [r7, #24]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fef7 	bl	80012b0 <LL_ADC_REG_IsConversionOngoing>
 80014c2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff18 	bl	80012fe <LL_ADC_INJ_IsConversionOngoing>
 80014ce:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d13d      	bne.n	8001552 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d13a      	bne.n	8001552 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014e0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014e8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014f8:	f023 0302 	bic.w	r3, r3, #2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	69b9      	ldr	r1, [r7, #24]
 8001502:	430b      	orrs	r3, r1
 8001504:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800150c:	2b01      	cmp	r3, #1
 800150e:	d118      	bne.n	8001542 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800151a:	f023 0304 	bic.w	r3, r3, #4
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001526:	4311      	orrs	r1, r2
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800152c:	4311      	orrs	r1, r2
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001532:	430a      	orrs	r2, r1
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0201 	orr.w	r2, r2, #1
 800153e:	611a      	str	r2, [r3, #16]
 8001540:	e007      	b.n	8001552 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0201 	bic.w	r2, r2, #1
 8001550:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d10c      	bne.n	8001574 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	f023 010f 	bic.w	r1, r3, #15
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	1e5a      	subs	r2, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	631a      	str	r2, [r3, #48]	; 0x30
 8001572:	e007      	b.n	8001584 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 020f 	bic.w	r2, r2, #15
 8001582:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001588:	f023 0303 	bic.w	r3, r3, #3
 800158c:	f043 0201 	orr.w	r2, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	655a      	str	r2, [r3, #84]	; 0x54
 8001594:	e007      	b.n	80015a6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159a:	f043 0210 	orr.w	r2, r3, #16
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3724      	adds	r7, #36	; 0x24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd90      	pop	{r4, r7, pc}
 80015b0:	20000038 	.word	0x20000038
 80015b4:	053e2d63 	.word	0x053e2d63
 80015b8:	50040000 	.word	0x50040000
 80015bc:	50040100 	.word	0x50040100
 80015c0:	50040200 	.word	0x50040200
 80015c4:	50040300 	.word	0x50040300
 80015c8:	fff0c007 	.word	0xfff0c007

080015cc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015d4:	4857      	ldr	r0, [pc, #348]	; (8001734 <HAL_ADC_Start+0x168>)
 80015d6:	f7ff fd8b 	bl	80010f0 <LL_ADC_GetMultimode>
 80015da:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fe65 	bl	80012b0 <LL_ADC_REG_IsConversionOngoing>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f040 809c 	bne.w	8001726 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_ADC_Start+0x30>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e097      	b.n	800172c <HAL_ADC_Start+0x160>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 fdc5 	bl	8002194 <ADC_Enable>
 800160a:	4603      	mov	r3, r0
 800160c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800160e:	7dfb      	ldrb	r3, [r7, #23]
 8001610:	2b00      	cmp	r3, #0
 8001612:	f040 8083 	bne.w	800171c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a42      	ldr	r2, [pc, #264]	; (8001738 <HAL_ADC_Start+0x16c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d002      	beq.n	800163a <HAL_ADC_Start+0x6e>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	e000      	b.n	800163c <HAL_ADC_Start+0x70>
 800163a:	4b40      	ldr	r3, [pc, #256]	; (800173c <HAL_ADC_Start+0x170>)
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	4293      	cmp	r3, r2
 8001642:	d002      	beq.n	800164a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d105      	bne.n	8001656 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800165e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001662:	d106      	bne.n	8001672 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001668:	f023 0206 	bic.w	r2, r3, #6
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	659a      	str	r2, [r3, #88]	; 0x58
 8001670:	e002      	b.n	8001678 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	221c      	movs	r2, #28
 800167e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a2a      	ldr	r2, [pc, #168]	; (8001738 <HAL_ADC_Start+0x16c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d002      	beq.n	8001698 <HAL_ADC_Start+0xcc>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	e000      	b.n	800169a <HAL_ADC_Start+0xce>
 8001698:	4b28      	ldr	r3, [pc, #160]	; (800173c <HAL_ADC_Start+0x170>)
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	4293      	cmp	r3, r2
 80016a0:	d008      	beq.n	80016b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b05      	cmp	r3, #5
 80016ac:	d002      	beq.n	80016b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2b09      	cmp	r3, #9
 80016b2:	d114      	bne.n	80016de <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d007      	beq.n	80016d2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fdc2 	bl	8001260 <LL_ADC_REG_StartConversion>
 80016dc:	e025      	b.n	800172a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <HAL_ADC_Start+0x16c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d002      	beq.n	80016fa <HAL_ADC_Start+0x12e>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	e000      	b.n	80016fc <HAL_ADC_Start+0x130>
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_ADC_Start+0x170>)
 80016fc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00f      	beq.n	800172a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001712:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	655a      	str	r2, [r3, #84]	; 0x54
 800171a:	e006      	b.n	800172a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001724:	e001      	b.n	800172a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001726:	2302      	movs	r3, #2
 8001728:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800172a:	7dfb      	ldrb	r3, [r7, #23]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	50040300 	.word	0x50040300
 8001738:	50040100 	.word	0x50040100
 800173c:	50040000 	.word	0x50040000

08001740 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_ADC_Stop+0x16>
 8001752:	2302      	movs	r3, #2
 8001754:	e023      	b.n	800179e <HAL_ADC_Stop+0x5e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800175e:	2103      	movs	r1, #3
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 fc63 	bl	800202c <ADC_ConversionStop>
 8001766:	4603      	mov	r3, r0
 8001768:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d111      	bne.n	8001794 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 fd69 	bl	8002248 <ADC_Disable>
 8001776:	4603      	mov	r3, r0
 8001778:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d109      	bne.n	8001794 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001784:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	f043 0201 	orr.w	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800179c:	7bfb      	ldrb	r3, [r7, #15]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017b2:	4862      	ldr	r0, [pc, #392]	; (800193c <HAL_ADC_PollForConversion+0x194>)
 80017b4:	f7ff fc9c 	bl	80010f0 <LL_ADC_GetMultimode>
 80017b8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d102      	bne.n	80017c8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80017c2:	2308      	movs	r3, #8
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	e02a      	b.n	800181e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d005      	beq.n	80017da <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	d002      	beq.n	80017da <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	2b09      	cmp	r3, #9
 80017d8:	d111      	bne.n	80017fe <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d007      	beq.n	80017f8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ec:	f043 0220 	orr.w	r2, r3, #32
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e09d      	b.n	8001934 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80017f8:	2304      	movs	r3, #4
 80017fa:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80017fc:	e00f      	b.n	800181e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80017fe:	484f      	ldr	r0, [pc, #316]	; (800193c <HAL_ADC_PollForConversion+0x194>)
 8001800:	f7ff fc84 	bl	800110c <LL_ADC_GetMultiDMATransfer>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d007      	beq.n	800181a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180e:	f043 0220 	orr.w	r2, r3, #32
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e08c      	b.n	8001934 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800181a:	2304      	movs	r3, #4
 800181c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800181e:	f7ff fb51 	bl	8000ec4 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001824:	e01a      	b.n	800185c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182c:	d016      	beq.n	800185c <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800182e:	f7ff fb49 	bl	8000ec4 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d302      	bcc.n	8001844 <HAL_ADC_PollForConversion+0x9c>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10b      	bne.n	800185c <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001848:	f043 0204 	orr.w	r2, r3, #4
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e06b      	b.n	8001934 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0dd      	beq.n	8001826 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fbb0 	bl	8000fe0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d01c      	beq.n	80018c0 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7e5b      	ldrb	r3, [r3, #25]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d118      	bne.n	80018c0 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b08      	cmp	r3, #8
 800189a:	d111      	bne.n	80018c0 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d105      	bne.n	80018c0 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b8:	f043 0201 	orr.w	r2, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1e      	ldr	r2, [pc, #120]	; (8001940 <HAL_ADC_PollForConversion+0x198>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d002      	beq.n	80018d0 <HAL_ADC_PollForConversion+0x128>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	e000      	b.n	80018d2 <HAL_ADC_PollForConversion+0x12a>
 80018d0:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <HAL_ADC_PollForConversion+0x19c>)
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d008      	beq.n	80018ec <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d002      	beq.n	80018ec <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	2b09      	cmp	r3, #9
 80018ea:	d104      	bne.n	80018f6 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	e00c      	b.n	8001910 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a11      	ldr	r2, [pc, #68]	; (8001940 <HAL_ADC_PollForConversion+0x198>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d002      	beq.n	8001906 <HAL_ADC_PollForConversion+0x15e>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	e000      	b.n	8001908 <HAL_ADC_PollForConversion+0x160>
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_ADC_PollForConversion+0x19c>)
 8001908:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	2b08      	cmp	r3, #8
 8001914:	d104      	bne.n	8001920 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2208      	movs	r2, #8
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	e008      	b.n	8001932 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d103      	bne.n	8001932 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3720      	adds	r7, #32
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	50040300 	.word	0x50040300
 8001940:	50040100 	.word	0x50040100
 8001944:	50040000 	.word	0x50040000

08001948 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b0a6      	sub	sp, #152	; 0x98
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x22>
 8001982:	2302      	movs	r3, #2
 8001984:	e348      	b.n	8002018 <HAL_ADC_ConfigChannel+0x6b4>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fc8c 	bl	80012b0 <LL_ADC_REG_IsConversionOngoing>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	f040 8329 	bne.w	8001ff2 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b05      	cmp	r3, #5
 80019a6:	d824      	bhi.n	80019f2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	3b02      	subs	r3, #2
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d81b      	bhi.n	80019ea <HAL_ADC_ConfigChannel+0x86>
 80019b2:	a201      	add	r2, pc, #4	; (adr r2, 80019b8 <HAL_ADC_ConfigChannel+0x54>)
 80019b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b8:	080019c9 	.word	0x080019c9
 80019bc:	080019d1 	.word	0x080019d1
 80019c0:	080019d9 	.word	0x080019d9
 80019c4:	080019e1 	.word	0x080019e1
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	220c      	movs	r2, #12
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	e011      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	2212      	movs	r2, #18
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	e00d      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	2218      	movs	r2, #24
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	e009      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	e004      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2206      	movs	r2, #6
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	e000      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80019f2:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6859      	ldr	r1, [r3, #4]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	f7ff fb00 	bl	8001006 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fc50 	bl	80012b0 <LL_ADC_REG_IsConversionOngoing>
 8001a10:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fc70 	bl	80012fe <LL_ADC_INJ_IsConversionOngoing>
 8001a1e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f040 8148 	bne.w	8001cbc <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f040 8143 	bne.w	8001cbc <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	6819      	ldr	r1, [r3, #0]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	461a      	mov	r2, r3
 8001a44:	f7ff fb08 	bl	8001058 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	08db      	lsrs	r3, r3, #3
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d00a      	beq.n	8001a80 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	6919      	ldr	r1, [r3, #16]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a7a:	f7ff fa63 	bl	8000f44 <LL_ADC_SetOffset>
 8001a7e:	e11d      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fa7e 	bl	8000f88 <LL_ADC_GetOffsetChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10a      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x148>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fa73 	bl	8000f88 <LL_ADC_GetOffsetChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	0e9b      	lsrs	r3, r3, #26
 8001aa6:	f003 021f 	and.w	r2, r3, #31
 8001aaa:	e012      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x16e>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fa68 	bl	8000f88 <LL_ADC_GetOffsetChannel>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ac8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d105      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x186>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	0e9b      	lsrs	r3, r3, #26
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	e00a      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x19c>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001af8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001afa:	fab3 f383 	clz	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d106      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fa4f 	bl	8000fb0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2101      	movs	r1, #1
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fa35 	bl	8000f88 <LL_ADC_GetOffsetChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10a      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x1da>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fa2a 	bl	8000f88 <LL_ADC_GetOffsetChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	0e9b      	lsrs	r3, r3, #26
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	e010      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x1fc>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2101      	movs	r1, #1
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fa1f 	bl	8000f88 <LL_ADC_GetOffsetChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x214>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0e9b      	lsrs	r3, r3, #26
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	e00a      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x22a>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d106      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2200      	movs	r2, #0
 8001b98:	2101      	movs	r1, #1
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fa08 	bl	8000fb0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2102      	movs	r1, #2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff f9ee 	bl	8000f88 <LL_ADC_GetOffsetChannel>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10a      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x268>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2102      	movs	r1, #2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff f9e3 	bl	8000f88 <LL_ADC_GetOffsetChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	0e9b      	lsrs	r3, r3, #26
 8001bc6:	f003 021f 	and.w	r2, r3, #31
 8001bca:	e010      	b.n	8001bee <HAL_ADC_ConfigChannel+0x28a>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2102      	movs	r1, #2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f9d8 	bl	8000f88 <LL_ADC_GetOffsetChannel>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d105      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x2a2>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	0e9b      	lsrs	r3, r3, #26
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	e00a      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x2b8>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d106      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2200      	movs	r2, #0
 8001c26:	2102      	movs	r1, #2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff f9c1 	bl	8000fb0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2103      	movs	r1, #3
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f9a7 	bl	8000f88 <LL_ADC_GetOffsetChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10a      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x2f6>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2103      	movs	r1, #3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f99c 	bl	8000f88 <LL_ADC_GetOffsetChannel>
 8001c50:	4603      	mov	r3, r0
 8001c52:	0e9b      	lsrs	r3, r3, #26
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	e010      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x318>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2103      	movs	r1, #3
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff f991 	bl	8000f88 <LL_ADC_GetOffsetChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x330>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	0e9b      	lsrs	r3, r3, #26
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	e00a      	b.n	8001caa <HAL_ADC_ConfigChannel+0x346>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c9c:	fa93 f3a3 	rbit	r3, r3
 8001ca0:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ca4:	fab3 f383 	clz	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d106      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2103      	movs	r1, #3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff f97a 	bl	8000fb0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff faa7 	bl	8001214 <LL_ADC_IsEnabled>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f040 810c 	bne.w	8001ee6 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6819      	ldr	r1, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f7ff f9e4 	bl	80010a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4aad      	ldr	r2, [pc, #692]	; (8001f9c <HAL_ADC_ConfigChannel+0x638>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	f040 80fd 	bne.w	8001ee6 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10b      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x3b0>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	0e9b      	lsrs	r3, r3, #26
 8001d02:	3301      	adds	r3, #1
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	2b09      	cmp	r3, #9
 8001d0a:	bf94      	ite	ls
 8001d0c:	2301      	movls	r3, #1
 8001d0e:	2300      	movhi	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	e012      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x3d6>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	2b09      	cmp	r3, #9
 8001d32:	bf94      	ite	ls
 8001d34:	2301      	movls	r3, #1
 8001d36:	2300      	movhi	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d064      	beq.n	8001e08 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d107      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x3f6>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	0e9b      	lsrs	r3, r3, #26
 8001d50:	3301      	adds	r3, #1
 8001d52:	069b      	lsls	r3, r3, #26
 8001d54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d58:	e00e      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x414>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	3301      	adds	r3, #1
 8001d72:	069b      	lsls	r3, r3, #26
 8001d74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d109      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x434>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0e9b      	lsrs	r3, r3, #26
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	2101      	movs	r1, #1
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	e010      	b.n	8001dba <HAL_ADC_ConfigChannel+0x456>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da0:	fa93 f3a3 	rbit	r3, r3
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da8:	fab3 f383 	clz	r3, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	3301      	adds	r3, #1
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	2101      	movs	r1, #1
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	ea42 0103 	orr.w	r1, r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10a      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x47c>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0e9b      	lsrs	r3, r3, #26
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	f003 021f 	and.w	r2, r3, #31
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	051b      	lsls	r3, r3, #20
 8001dde:	e011      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x4a0>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	f003 021f 	and.w	r2, r3, #31
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e04:	430b      	orrs	r3, r1
 8001e06:	e069      	b.n	8001edc <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d107      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x4c0>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0e9b      	lsrs	r3, r3, #26
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	069b      	lsls	r3, r3, #26
 8001e1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e22:	e00e      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x4de>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	61fb      	str	r3, [r7, #28]
  return result;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	fab3 f383 	clz	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	069b      	lsls	r3, r3, #26
 8001e3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x4fe>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	0e9b      	lsrs	r3, r3, #26
 8001e54:	3301      	adds	r3, #1
 8001e56:	f003 031f 	and.w	r3, r3, #31
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	e010      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x520>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	617b      	str	r3, [r7, #20]
  return result;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	2101      	movs	r1, #1
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	ea42 0103 	orr.w	r1, r2, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10d      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x54c>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0e9b      	lsrs	r3, r3, #26
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f003 021f 	and.w	r2, r3, #31
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3b1e      	subs	r3, #30
 8001ea8:	051b      	lsls	r3, r3, #20
 8001eaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eae:	e014      	b.n	8001eda <HAL_ADC_ConfigChannel+0x576>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	fa93 f3a3 	rbit	r3, r3
 8001ebc:	60fb      	str	r3, [r7, #12]
  return result;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f003 021f 	and.w	r2, r3, #31
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3b1e      	subs	r3, #30
 8001ed4:	051b      	lsls	r3, r3, #20
 8001ed6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eda:	430b      	orrs	r3, r1
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	6892      	ldr	r2, [r2, #8]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f7ff f8b9 	bl	8001058 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_ADC_ConfigChannel+0x63c>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 808c 	beq.w	800200c <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ef4:	482b      	ldr	r0, [pc, #172]	; (8001fa4 <HAL_ADC_ConfigChannel+0x640>)
 8001ef6:	f7ff f817 	bl	8000f28 <LL_ADC_GetCommonPathInternalCh>
 8001efa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a29      	ldr	r2, [pc, #164]	; (8001fa8 <HAL_ADC_ConfigChannel+0x644>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d12b      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x5fc>
 8001f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d125      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a24      	ldr	r2, [pc, #144]	; (8001fac <HAL_ADC_ConfigChannel+0x648>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <HAL_ADC_ConfigChannel+0x5c4>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a23      	ldr	r2, [pc, #140]	; (8001fb0 <HAL_ADC_ConfigChannel+0x64c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d16e      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f30:	4619      	mov	r1, r3
 8001f32:	481c      	ldr	r0, [pc, #112]	; (8001fa4 <HAL_ADC_ConfigChannel+0x640>)
 8001f34:	f7fe ffe5 	bl	8000f02 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <HAL_ADC_ConfigChannel+0x650>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	099b      	lsrs	r3, r3, #6
 8001f3e:	4a1e      	ldr	r2, [pc, #120]	; (8001fb8 <HAL_ADC_ConfigChannel+0x654>)
 8001f40:	fba2 2303 	umull	r2, r3, r2, r3
 8001f44:	099a      	lsrs	r2, r3, #6
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f50:	e002      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f9      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f5e:	e052      	b.n	8002006 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a15      	ldr	r2, [pc, #84]	; (8001fbc <HAL_ADC_ConfigChannel+0x658>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d12a      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x65c>
 8001f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d124      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <HAL_ADC_ConfigChannel+0x648>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d004      	beq.n	8001f8a <HAL_ADC_ConfigChannel+0x626>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <HAL_ADC_ConfigChannel+0x64c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d13f      	bne.n	800200a <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f92:	4619      	mov	r1, r3
 8001f94:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <HAL_ADC_ConfigChannel+0x640>)
 8001f96:	f7fe ffb4 	bl	8000f02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f9a:	e036      	b.n	800200a <HAL_ADC_ConfigChannel+0x6a6>
 8001f9c:	407f0000 	.word	0x407f0000
 8001fa0:	80080000 	.word	0x80080000
 8001fa4:	50040300 	.word	0x50040300
 8001fa8:	c7520000 	.word	0xc7520000
 8001fac:	50040000 	.word	0x50040000
 8001fb0:	50040200 	.word	0x50040200
 8001fb4:	20000038 	.word	0x20000038
 8001fb8:	053e2d63 	.word	0x053e2d63
 8001fbc:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a16      	ldr	r2, [pc, #88]	; (8002020 <HAL_ADC_ConfigChannel+0x6bc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d120      	bne.n	800200c <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d11a      	bne.n	800200c <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <HAL_ADC_ConfigChannel+0x6c0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d115      	bne.n	800200c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fe4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480f      	ldr	r0, [pc, #60]	; (8002028 <HAL_ADC_ConfigChannel+0x6c4>)
 8001fec:	f7fe ff89 	bl	8000f02 <LL_ADC_SetCommonPathInternalCh>
 8001ff0:	e00c      	b.n	800200c <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	f043 0220 	orr.w	r2, r3, #32
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002004:	e002      	b.n	800200c <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002006:	bf00      	nop
 8002008:	e000      	b.n	800200c <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800200a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002014:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002018:	4618      	mov	r0, r3
 800201a:	3798      	adds	r7, #152	; 0x98
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	80000001 	.word	0x80000001
 8002024:	50040000 	.word	0x50040000
 8002028:	50040300 	.word	0x50040300

0800202c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f934 	bl	80012b0 <LL_ADC_REG_IsConversionOngoing>
 8002048:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff f955 	bl	80012fe <LL_ADC_INJ_IsConversionOngoing>
 8002054:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d103      	bne.n	8002064 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8090 	beq.w	8002184 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d02a      	beq.n	80020c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7e5b      	ldrb	r3, [r3, #25]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d126      	bne.n	80020c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	7e1b      	ldrb	r3, [r3, #24]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d122      	bne.n	80020c8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002082:	2301      	movs	r3, #1
 8002084:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002086:	e014      	b.n	80020b2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	4a41      	ldr	r2, [pc, #260]	; (8002190 <ADC_ConversionStop+0x164>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d90d      	bls.n	80020ac <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002094:	f043 0210 	orr.w	r2, r3, #16
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	f043 0201 	orr.w	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e06c      	b.n	8002186 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	3301      	adds	r3, #1
 80020b0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020bc:	2b40      	cmp	r3, #64	; 0x40
 80020be:	d1e3      	bne.n	8002088 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2240      	movs	r2, #64	; 0x40
 80020c6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d014      	beq.n	80020f8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f8ec 	bl	80012b0 <LL_ADC_REG_IsConversionOngoing>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00c      	beq.n	80020f8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff f8a9 	bl	800123a <LL_ADC_IsDisableOngoing>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d104      	bne.n	80020f8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff f8c8 	bl	8001288 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d014      	beq.n	8002128 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff f8fb 	bl	80012fe <LL_ADC_INJ_IsConversionOngoing>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00c      	beq.n	8002128 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f891 	bl	800123a <LL_ADC_IsDisableOngoing>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d104      	bne.n	8002128 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff f8d7 	bl	80012d6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d004      	beq.n	8002138 <ADC_ConversionStop+0x10c>
 800212e:	2b03      	cmp	r3, #3
 8002130:	d105      	bne.n	800213e <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002132:	230c      	movs	r3, #12
 8002134:	617b      	str	r3, [r7, #20]
        break;
 8002136:	e005      	b.n	8002144 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002138:	2308      	movs	r3, #8
 800213a:	617b      	str	r3, [r7, #20]
        break;
 800213c:	e002      	b.n	8002144 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800213e:	2304      	movs	r3, #4
 8002140:	617b      	str	r3, [r7, #20]
        break;
 8002142:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002144:	f7fe febe 	bl	8000ec4 <HAL_GetTick>
 8002148:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800214a:	e014      	b.n	8002176 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800214c:	f7fe feba 	bl	8000ec4 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b05      	cmp	r3, #5
 8002158:	d90d      	bls.n	8002176 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215e:	f043 0210 	orr.w	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e007      	b.n	8002186 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1e3      	bne.n	800214c <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	a33fffff 	.word	0xa33fffff

08002194 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff f837 	bl	8001214 <LL_ADC_IsEnabled>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d146      	bne.n	800223a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	4b24      	ldr	r3, [pc, #144]	; (8002244 <ADC_Enable+0xb0>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00d      	beq.n	80021d6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	f043 0210 	orr.w	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e032      	b.n	800223c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe fff2 	bl	80011c4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021e0:	f7fe fe70 	bl	8000ec4 <HAL_GetTick>
 80021e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021e6:	e021      	b.n	800222c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff f811 	bl	8001214 <LL_ADC_IsEnabled>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d104      	bne.n	8002202 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe ffe1 	bl	80011c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002202:	f7fe fe5f 	bl	8000ec4 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d90d      	bls.n	800222c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	f043 0210 	orr.w	r2, r3, #16
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	f043 0201 	orr.w	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e007      	b.n	800223c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d1d6      	bne.n	80021e8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	8000003f 	.word	0x8000003f

08002248 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe fff0 	bl	800123a <LL_ADC_IsDisableOngoing>
 800225a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe ffd7 	bl	8001214 <LL_ADC_IsEnabled>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d040      	beq.n	80022ee <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d13d      	bne.n	80022ee <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 030d 	and.w	r3, r3, #13
 800227c:	2b01      	cmp	r3, #1
 800227e:	d10c      	bne.n	800229a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe ffb1 	bl	80011ec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2203      	movs	r2, #3
 8002290:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002292:	f7fe fe17 	bl	8000ec4 <HAL_GetTick>
 8002296:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002298:	e022      	b.n	80022e0 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229e:	f043 0210 	orr.w	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022aa:	f043 0201 	orr.w	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e01c      	b.n	80022f0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022b6:	f7fe fe05 	bl	8000ec4 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d90d      	bls.n	80022e0 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	f043 0210 	orr.w	r2, r3, #16
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	f043 0201 	orr.w	r2, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e007      	b.n	80022f0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1e3      	bne.n	80022b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <LL_ADC_IsEnabled>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <LL_ADC_IsEnabled+0x18>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <LL_ADC_IsEnabled+0x1a>
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <LL_ADC_REG_IsConversionOngoing>:
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b04      	cmp	r3, #4
 8002330:	d101      	bne.n	8002336 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b09f      	sub	sp, #124	; 0x7c
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800235e:	2302      	movs	r3, #2
 8002360:	e08f      	b.n	8002482 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a47      	ldr	r2, [pc, #284]	; (800248c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d102      	bne.n	800237a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002374:	4b46      	ldr	r3, [pc, #280]	; (8002490 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	e001      	b.n	800237e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10b      	bne.n	800239c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002388:	f043 0220 	orr.w	r2, r3, #32
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e072      	b.n	8002482 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ffbd 	bl	800231e <LL_ADC_REG_IsConversionOngoing>
 80023a4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff ffb7 	bl	800231e <LL_ADC_REG_IsConversionOngoing>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d154      	bne.n	8002460 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80023b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d151      	bne.n	8002460 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023bc:	4b35      	ldr	r3, [pc, #212]	; (8002494 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023be:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d02c      	beq.n	8002422 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023da:	035b      	lsls	r3, r3, #13
 80023dc:	430b      	orrs	r3, r1
 80023de:	431a      	orrs	r2, r3
 80023e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023e4:	4829      	ldr	r0, [pc, #164]	; (800248c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80023e6:	f7ff ff87 	bl	80022f8 <LL_ADC_IsEnabled>
 80023ea:	4604      	mov	r4, r0
 80023ec:	4828      	ldr	r0, [pc, #160]	; (8002490 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80023ee:	f7ff ff83 	bl	80022f8 <LL_ADC_IsEnabled>
 80023f2:	4603      	mov	r3, r0
 80023f4:	431c      	orrs	r4, r3
 80023f6:	4828      	ldr	r0, [pc, #160]	; (8002498 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80023f8:	f7ff ff7e 	bl	80022f8 <LL_ADC_IsEnabled>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4323      	orrs	r3, r4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d137      	bne.n	8002474 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800240c:	f023 030f 	bic.w	r3, r3, #15
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	6811      	ldr	r1, [r2, #0]
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	6892      	ldr	r2, [r2, #8]
 8002418:	430a      	orrs	r2, r1
 800241a:	431a      	orrs	r2, r3
 800241c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800241e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002420:	e028      	b.n	8002474 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800242a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800242e:	4817      	ldr	r0, [pc, #92]	; (800248c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002430:	f7ff ff62 	bl	80022f8 <LL_ADC_IsEnabled>
 8002434:	4604      	mov	r4, r0
 8002436:	4816      	ldr	r0, [pc, #88]	; (8002490 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002438:	f7ff ff5e 	bl	80022f8 <LL_ADC_IsEnabled>
 800243c:	4603      	mov	r3, r0
 800243e:	431c      	orrs	r4, r3
 8002440:	4815      	ldr	r0, [pc, #84]	; (8002498 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002442:	f7ff ff59 	bl	80022f8 <LL_ADC_IsEnabled>
 8002446:	4603      	mov	r3, r0
 8002448:	4323      	orrs	r3, r4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d112      	bne.n	8002474 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800244e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002456:	f023 030f 	bic.w	r3, r3, #15
 800245a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800245c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800245e:	e009      	b.n	8002474 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	f043 0220 	orr.w	r2, r3, #32
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002472:	e000      	b.n	8002476 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002474:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800247e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002482:	4618      	mov	r0, r3
 8002484:	377c      	adds	r7, #124	; 0x7c
 8002486:	46bd      	mov	sp, r7
 8002488:	bd90      	pop	{r4, r7, pc}
 800248a:	bf00      	nop
 800248c:	50040000 	.word	0x50040000
 8002490:	50040100 	.word	0x50040100
 8002494:	50040300 	.word	0x50040300
 8002498:	50040200 	.word	0x50040200

0800249c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b8:	4013      	ands	r3, r2
 80024ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ce:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	60d3      	str	r3, [r2, #12]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e8:	4b04      	ldr	r3, [pc, #16]	; (80024fc <__NVIC_GetPriorityGrouping+0x18>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	f003 0307 	and.w	r3, r3, #7
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	2b00      	cmp	r3, #0
 8002510:	db0b      	blt.n	800252a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	f003 021f 	and.w	r2, r3, #31
 8002518:	4907      	ldr	r1, [pc, #28]	; (8002538 <__NVIC_EnableIRQ+0x38>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	2001      	movs	r0, #1
 8002522:	fa00 f202 	lsl.w	r2, r0, r2
 8002526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000e100 	.word	0xe000e100

0800253c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	2b00      	cmp	r3, #0
 800254e:	db0a      	blt.n	8002566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	490c      	ldr	r1, [pc, #48]	; (8002588 <__NVIC_SetPriority+0x4c>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	0112      	lsls	r2, r2, #4
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	440b      	add	r3, r1
 8002560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002564:	e00a      	b.n	800257c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4908      	ldr	r1, [pc, #32]	; (800258c <__NVIC_SetPriority+0x50>)
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	3b04      	subs	r3, #4
 8002574:	0112      	lsls	r2, r2, #4
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	440b      	add	r3, r1
 800257a:	761a      	strb	r2, [r3, #24]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000e100 	.word	0xe000e100
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	; 0x24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f1c3 0307 	rsb	r3, r3, #7
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	bf28      	it	cs
 80025ae:	2304      	movcs	r3, #4
 80025b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3304      	adds	r3, #4
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	d902      	bls.n	80025c0 <NVIC_EncodePriority+0x30>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3b03      	subs	r3, #3
 80025be:	e000      	b.n	80025c2 <NVIC_EncodePriority+0x32>
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	f04f 32ff 	mov.w	r2, #4294967295
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43da      	mvns	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	401a      	ands	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d8:	f04f 31ff 	mov.w	r1, #4294967295
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	43d9      	mvns	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	4313      	orrs	r3, r2
         );
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3724      	adds	r7, #36	; 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002608:	d301      	bcc.n	800260e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800260a:	2301      	movs	r3, #1
 800260c:	e00f      	b.n	800262e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260e:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <SysTick_Config+0x40>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002616:	210f      	movs	r1, #15
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	f7ff ff8e 	bl	800253c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <SysTick_Config+0x40>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002626:	4b04      	ldr	r3, [pc, #16]	; (8002638 <SysTick_Config+0x40>)
 8002628:	2207      	movs	r2, #7
 800262a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	e000e010 	.word	0xe000e010

0800263c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ff29 	bl	800249c <__NVIC_SetPriorityGrouping>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002664:	f7ff ff3e 	bl	80024e4 <__NVIC_GetPriorityGrouping>
 8002668:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	6978      	ldr	r0, [r7, #20]
 8002670:	f7ff ff8e 	bl	8002590 <NVIC_EncodePriority>
 8002674:	4602      	mov	r2, r0
 8002676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff5d 	bl	800253c <__NVIC_SetPriority>
}
 8002682:	bf00      	nop
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff31 	bl	8002500 <__NVIC_EnableIRQ>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ffa2 	bl	80025f8 <SysTick_Config>
 80026b4:	4603      	mov	r3, r0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d005      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2204      	movs	r2, #4
 80026da:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
 80026e0:	e029      	b.n	8002736 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 020e 	bic.w	r2, r2, #14
 80026f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0201 	bic.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	f003 021c 	and.w	r2, r3, #28
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	2101      	movs	r1, #1
 8002710:	fa01 f202 	lsl.w	r2, r1, r2
 8002714:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	4798      	blx	r3
    }
  }
  return status;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274e:	e17f      	b.n	8002a50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	2101      	movs	r1, #1
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8171 	beq.w	8002a4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x38>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b12      	cmp	r3, #18
 8002776:	d123      	bne.n	80027c0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	08da      	lsrs	r2, r3, #3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3208      	adds	r2, #8
 8002780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002784:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	220f      	movs	r2, #15
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	08da      	lsrs	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3208      	adds	r2, #8
 80027ba:	6939      	ldr	r1, [r7, #16]
 80027bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2203      	movs	r2, #3
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0203 	and.w	r2, r3, #3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d00b      	beq.n	8002814 <HAL_GPIO_Init+0xd4>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d007      	beq.n	8002814 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002808:	2b11      	cmp	r3, #17
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b12      	cmp	r3, #18
 8002812:	d130      	bne.n	8002876 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800284a:	2201      	movs	r2, #1
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4013      	ands	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	f003 0201 	and.w	r2, r3, #1
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b03      	cmp	r3, #3
 8002880:	d118      	bne.n	80028b4 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002888:	2201      	movs	r2, #1
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	08db      	lsrs	r3, r3, #3
 800289e:	f003 0201 	and.w	r2, r3, #1
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80ac 	beq.w	8002a4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f2:	4b5e      	ldr	r3, [pc, #376]	; (8002a6c <HAL_GPIO_Init+0x32c>)
 80028f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f6:	4a5d      	ldr	r2, [pc, #372]	; (8002a6c <HAL_GPIO_Init+0x32c>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6613      	str	r3, [r2, #96]	; 0x60
 80028fe:	4b5b      	ldr	r3, [pc, #364]	; (8002a6c <HAL_GPIO_Init+0x32c>)
 8002900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800290a:	4a59      	ldr	r2, [pc, #356]	; (8002a70 <HAL_GPIO_Init+0x330>)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	089b      	lsrs	r3, r3, #2
 8002910:	3302      	adds	r3, #2
 8002912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	220f      	movs	r2, #15
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002934:	d025      	beq.n	8002982 <HAL_GPIO_Init+0x242>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4e      	ldr	r2, [pc, #312]	; (8002a74 <HAL_GPIO_Init+0x334>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d01f      	beq.n	800297e <HAL_GPIO_Init+0x23e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4d      	ldr	r2, [pc, #308]	; (8002a78 <HAL_GPIO_Init+0x338>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d019      	beq.n	800297a <HAL_GPIO_Init+0x23a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4c      	ldr	r2, [pc, #304]	; (8002a7c <HAL_GPIO_Init+0x33c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0x236>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4b      	ldr	r2, [pc, #300]	; (8002a80 <HAL_GPIO_Init+0x340>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00d      	beq.n	8002972 <HAL_GPIO_Init+0x232>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4a      	ldr	r2, [pc, #296]	; (8002a84 <HAL_GPIO_Init+0x344>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <HAL_GPIO_Init+0x22e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a49      	ldr	r2, [pc, #292]	; (8002a88 <HAL_GPIO_Init+0x348>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_GPIO_Init+0x22a>
 8002966:	2306      	movs	r3, #6
 8002968:	e00c      	b.n	8002984 <HAL_GPIO_Init+0x244>
 800296a:	2307      	movs	r3, #7
 800296c:	e00a      	b.n	8002984 <HAL_GPIO_Init+0x244>
 800296e:	2305      	movs	r3, #5
 8002970:	e008      	b.n	8002984 <HAL_GPIO_Init+0x244>
 8002972:	2304      	movs	r3, #4
 8002974:	e006      	b.n	8002984 <HAL_GPIO_Init+0x244>
 8002976:	2303      	movs	r3, #3
 8002978:	e004      	b.n	8002984 <HAL_GPIO_Init+0x244>
 800297a:	2302      	movs	r3, #2
 800297c:	e002      	b.n	8002984 <HAL_GPIO_Init+0x244>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_GPIO_Init+0x244>
 8002982:	2300      	movs	r3, #0
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	f002 0203 	and.w	r2, r2, #3
 800298a:	0092      	lsls	r2, r2, #2
 800298c:	4093      	lsls	r3, r2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002994:	4936      	ldr	r1, [pc, #216]	; (8002a70 <HAL_GPIO_Init+0x330>)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	089b      	lsrs	r3, r3, #2
 800299a:	3302      	adds	r3, #2
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029a2:	4b3a      	ldr	r3, [pc, #232]	; (8002a8c <HAL_GPIO_Init+0x34c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4013      	ands	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029c6:	4a31      	ldr	r2, [pc, #196]	; (8002a8c <HAL_GPIO_Init+0x34c>)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80029cc:	4b2f      	ldr	r3, [pc, #188]	; (8002a8c <HAL_GPIO_Init+0x34c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4013      	ands	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029f0:	4a26      	ldr	r2, [pc, #152]	; (8002a8c <HAL_GPIO_Init+0x34c>)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029f6:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <HAL_GPIO_Init+0x34c>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4013      	ands	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a1a:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_GPIO_Init+0x34c>)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a20:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <HAL_GPIO_Init+0x34c>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a44:	4a11      	ldr	r2, [pc, #68]	; (8002a8c <HAL_GPIO_Init+0x34c>)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f47f ae78 	bne.w	8002750 <HAL_GPIO_Init+0x10>
  }
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40010000 	.word	0x40010000
 8002a74:	48000400 	.word	0x48000400
 8002a78:	48000800 	.word	0x48000800
 8002a7c:	48000c00 	.word	0x48000c00
 8002a80:	48001000 	.word	0x48001000
 8002a84:	48001400 	.word	0x48001400
 8002a88:	48001800 	.word	0x48001800
 8002a8c:	40010400 	.word	0x40010400

08002a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	887b      	ldrh	r3, [r7, #2]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	e001      	b.n	8002ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
 8002acc:	4613      	mov	r3, r2
 8002ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad0:	787b      	ldrb	r3, [r7, #1]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ad6:	887a      	ldrh	r2, [r7, #2]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002adc:	e002      	b.n	8002ae4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ade:	887a      	ldrh	r2, [r7, #2]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 0307 	bic.w	r3, r3, #7
 8002afc:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002afe:	f043 0303 	orr.w	r3, r3, #3
 8002b02:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	4a05      	ldr	r2, [pc, #20]	; (8002b20 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8002b0a:	f043 0304 	orr.w	r3, r3, #4
 8002b0e:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002b10:	bf30      	wfi
}
 8002b12:	bf00      	nop
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <HAL_PWREx_GetVoltageRange+0x18>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40007000 	.word	0x40007000

08002b40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4e:	d130      	bne.n	8002bb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b50:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b5c:	d038      	beq.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b66:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b6e:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2232      	movs	r2, #50	; 0x32
 8002b74:	fb02 f303 	mul.w	r3, r2, r3
 8002b78:	4a1b      	ldr	r2, [pc, #108]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	0c9b      	lsrs	r3, r3, #18
 8002b80:	3301      	adds	r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b84:	e002      	b.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b98:	d102      	bne.n	8002ba0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f2      	bne.n	8002b86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bac:	d110      	bne.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e00f      	b.n	8002bd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbe:	d007      	beq.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bc0:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bc8:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40007000 	.word	0x40007000
 8002be4:	20000038 	.word	0x20000038
 8002be8:	431bde83 	.word	0x431bde83

08002bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e39d      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bfe:	4ba4      	ldr	r3, [pc, #656]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c08:	4ba1      	ldr	r3, [pc, #644]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 80e1 	beq.w	8002de2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <HAL_RCC_OscConfig+0x4a>
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2b0c      	cmp	r3, #12
 8002c2a:	f040 8088 	bne.w	8002d3e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	f040 8084 	bne.w	8002d3e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c36:	4b96      	ldr	r3, [pc, #600]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_RCC_OscConfig+0x62>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e375      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1a      	ldr	r2, [r3, #32]
 8002c52:	4b8f      	ldr	r3, [pc, #572]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d004      	beq.n	8002c68 <HAL_RCC_OscConfig+0x7c>
 8002c5e:	4b8c      	ldr	r3, [pc, #560]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c66:	e005      	b.n	8002c74 <HAL_RCC_OscConfig+0x88>
 8002c68:	4b89      	ldr	r3, [pc, #548]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d223      	bcs.n	8002cc0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fd09 	bl	8003694 <RCC_SetFlashLatencyFromMSIRange>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e356      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c8c:	4b80      	ldr	r3, [pc, #512]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a7f      	ldr	r2, [pc, #508]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002c92:	f043 0308 	orr.w	r3, r3, #8
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	4b7d      	ldr	r3, [pc, #500]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	497a      	ldr	r1, [pc, #488]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002caa:	4b79      	ldr	r3, [pc, #484]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	4975      	ldr	r1, [pc, #468]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
 8002cbe:	e022      	b.n	8002d06 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cc0:	4b73      	ldr	r3, [pc, #460]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a72      	ldr	r2, [pc, #456]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002cc6:	f043 0308 	orr.w	r3, r3, #8
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4b70      	ldr	r3, [pc, #448]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	496d      	ldr	r1, [pc, #436]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cde:	4b6c      	ldr	r3, [pc, #432]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	4968      	ldr	r1, [pc, #416]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fccc 	bl	8003694 <RCC_SetFlashLatencyFromMSIRange>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e319      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d06:	f000 fc03 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	4b60      	ldr	r3, [pc, #384]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	4a5f      	ldr	r2, [pc, #380]	; (8002e94 <HAL_RCC_OscConfig+0x2a8>)
 8002d18:	5cd3      	ldrb	r3, [r2, r3]
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	fa21 f303 	lsr.w	r3, r1, r3
 8002d22:	4a5d      	ldr	r2, [pc, #372]	; (8002e98 <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d26:	4b5d      	ldr	r3, [pc, #372]	; (8002e9c <HAL_RCC_OscConfig+0x2b0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe f87e 	bl	8000e2c <HAL_InitTick>
 8002d30:	4603      	mov	r3, r0
 8002d32:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d052      	beq.n	8002de0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	e2fd      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d032      	beq.n	8002dac <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d46:	4b52      	ldr	r3, [pc, #328]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a51      	ldr	r2, [pc, #324]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d52:	f7fe f8b7 	bl	8000ec4 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d5a:	f7fe f8b3 	bl	8000ec4 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e2e6      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d6c:	4b48      	ldr	r3, [pc, #288]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d78:	4b45      	ldr	r3, [pc, #276]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a44      	ldr	r2, [pc, #272]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002d7e:	f043 0308 	orr.w	r3, r3, #8
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b42      	ldr	r3, [pc, #264]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	493f      	ldr	r1, [pc, #252]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d96:	4b3e      	ldr	r3, [pc, #248]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	493a      	ldr	r1, [pc, #232]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
 8002daa:	e01a      	b.n	8002de2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002dac:	4b38      	ldr	r3, [pc, #224]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a37      	ldr	r2, [pc, #220]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002db8:	f7fe f884 	bl	8000ec4 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dc0:	f7fe f880 	bl	8000ec4 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e2b3      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1d4>
 8002dde:	e000      	b.n	8002de2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002de0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d074      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_OscConfig+0x214>
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b0c      	cmp	r3, #12
 8002df8:	d10e      	bne.n	8002e18 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d10b      	bne.n	8002e18 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e00:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d064      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x2ea>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d160      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e290      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e20:	d106      	bne.n	8002e30 <HAL_RCC_OscConfig+0x244>
 8002e22:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	e01d      	b.n	8002e6c <HAL_RCC_OscConfig+0x280>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x268>
 8002e3a:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a14      	ldr	r2, [pc, #80]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a11      	ldr	r2, [pc, #68]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e00b      	b.n	8002e6c <HAL_RCC_OscConfig+0x280>
 8002e54:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0d      	ldr	r2, [pc, #52]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01c      	beq.n	8002eae <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7fe f826 	bl	8000ec4 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e7a:	e011      	b.n	8002ea0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e7c:	f7fe f822 	bl	8000ec4 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d90a      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e255      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	08009cd4 	.word	0x08009cd4
 8002e98:	20000038 	.word	0x20000038
 8002e9c:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ea0:	4bae      	ldr	r3, [pc, #696]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0e7      	beq.n	8002e7c <HAL_RCC_OscConfig+0x290>
 8002eac:	e014      	b.n	8002ed8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7fe f809 	bl	8000ec4 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb6:	f7fe f805 	bl	8000ec4 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b64      	cmp	r3, #100	; 0x64
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e238      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ec8:	4ba4      	ldr	r3, [pc, #656]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f0      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x2ca>
 8002ed4:	e000      	b.n	8002ed8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d060      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d005      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x30a>
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	2b0c      	cmp	r3, #12
 8002eee:	d119      	bne.n	8002f24 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d116      	bne.n	8002f24 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef6:	4b99      	ldr	r3, [pc, #612]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <HAL_RCC_OscConfig+0x322>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e215      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0e:	4b93      	ldr	r3, [pc, #588]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	061b      	lsls	r3, r3, #24
 8002f1c:	498f      	ldr	r1, [pc, #572]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f22:	e040      	b.n	8002fa6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d023      	beq.n	8002f74 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f2c:	4b8b      	ldr	r3, [pc, #556]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a8a      	ldr	r2, [pc, #552]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fd ffc4 	bl	8000ec4 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f40:	f7fd ffc0 	bl	8000ec4 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e1f3      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f52:	4b82      	ldr	r3, [pc, #520]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5e:	4b7f      	ldr	r3, [pc, #508]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	061b      	lsls	r3, r3, #24
 8002f6c:	497b      	ldr	r1, [pc, #492]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	604b      	str	r3, [r1, #4]
 8002f72:	e018      	b.n	8002fa6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f74:	4b79      	ldr	r3, [pc, #484]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a78      	ldr	r2, [pc, #480]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002f7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fd ffa0 	bl	8000ec4 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f88:	f7fd ff9c 	bl	8000ec4 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e1cf      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f9a:	4b70      	ldr	r3, [pc, #448]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d03c      	beq.n	800302c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d01c      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fba:	4b68      	ldr	r3, [pc, #416]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc0:	4a66      	ldr	r2, [pc, #408]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fca:	f7fd ff7b 	bl	8000ec4 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd2:	f7fd ff77 	bl	8000ec4 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e1aa      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fe4:	4b5d      	ldr	r3, [pc, #372]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0ef      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x3e6>
 8002ff2:	e01b      	b.n	800302c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff4:	4b59      	ldr	r3, [pc, #356]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffa:	4a58      	ldr	r2, [pc, #352]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fd ff5e 	bl	8000ec4 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300c:	f7fd ff5a 	bl	8000ec4 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e18d      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800301e:	4b4f      	ldr	r3, [pc, #316]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8003020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1ef      	bne.n	800300c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 80a5 	beq.w	8003184 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303a:	2300      	movs	r3, #0
 800303c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800303e:	4b47      	ldr	r3, [pc, #284]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8003040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10d      	bne.n	8003066 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304a:	4b44      	ldr	r3, [pc, #272]	; (800315c <HAL_RCC_OscConfig+0x570>)
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	4a43      	ldr	r2, [pc, #268]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003054:	6593      	str	r3, [r2, #88]	; 0x58
 8003056:	4b41      	ldr	r3, [pc, #260]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003062:	2301      	movs	r3, #1
 8003064:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003066:	4b3e      	ldr	r3, [pc, #248]	; (8003160 <HAL_RCC_OscConfig+0x574>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d118      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003072:	4b3b      	ldr	r3, [pc, #236]	; (8003160 <HAL_RCC_OscConfig+0x574>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a3a      	ldr	r2, [pc, #232]	; (8003160 <HAL_RCC_OscConfig+0x574>)
 8003078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307e:	f7fd ff21 	bl	8000ec4 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003086:	f7fd ff1d 	bl	8000ec4 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e150      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003098:	4b31      	ldr	r3, [pc, #196]	; (8003160 <HAL_RCC_OscConfig+0x574>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d108      	bne.n	80030be <HAL_RCC_OscConfig+0x4d2>
 80030ac:	4b2b      	ldr	r3, [pc, #172]	; (800315c <HAL_RCC_OscConfig+0x570>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b2:	4a2a      	ldr	r2, [pc, #168]	; (800315c <HAL_RCC_OscConfig+0x570>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030bc:	e024      	b.n	8003108 <HAL_RCC_OscConfig+0x51c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b05      	cmp	r3, #5
 80030c4:	d110      	bne.n	80030e8 <HAL_RCC_OscConfig+0x4fc>
 80030c6:	4b25      	ldr	r3, [pc, #148]	; (800315c <HAL_RCC_OscConfig+0x570>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030cc:	4a23      	ldr	r2, [pc, #140]	; (800315c <HAL_RCC_OscConfig+0x570>)
 80030ce:	f043 0304 	orr.w	r3, r3, #4
 80030d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030d6:	4b21      	ldr	r3, [pc, #132]	; (800315c <HAL_RCC_OscConfig+0x570>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	4a1f      	ldr	r2, [pc, #124]	; (800315c <HAL_RCC_OscConfig+0x570>)
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030e6:	e00f      	b.n	8003108 <HAL_RCC_OscConfig+0x51c>
 80030e8:	4b1c      	ldr	r3, [pc, #112]	; (800315c <HAL_RCC_OscConfig+0x570>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ee:	4a1b      	ldr	r2, [pc, #108]	; (800315c <HAL_RCC_OscConfig+0x570>)
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030f8:	4b18      	ldr	r3, [pc, #96]	; (800315c <HAL_RCC_OscConfig+0x570>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	4a17      	ldr	r2, [pc, #92]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8003100:	f023 0304 	bic.w	r3, r3, #4
 8003104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d016      	beq.n	800313e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7fd fed8 	bl	8000ec4 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003116:	e00a      	b.n	800312e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003118:	f7fd fed4 	bl	8000ec4 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e105      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800312e:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_RCC_OscConfig+0x570>)
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0ed      	beq.n	8003118 <HAL_RCC_OscConfig+0x52c>
 800313c:	e019      	b.n	8003172 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313e:	f7fd fec1 	bl	8000ec4 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003144:	e00e      	b.n	8003164 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003146:	f7fd febd 	bl	8000ec4 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f241 3288 	movw	r2, #5000	; 0x1388
 8003154:	4293      	cmp	r3, r2
 8003156:	d905      	bls.n	8003164 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e0ee      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
 800315c:	40021000 	.word	0x40021000
 8003160:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003164:	4b77      	ldr	r3, [pc, #476]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e9      	bne.n	8003146 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003172:	7ffb      	ldrb	r3, [r7, #31]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d105      	bne.n	8003184 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003178:	4b72      	ldr	r3, [pc, #456]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317c:	4a71      	ldr	r2, [pc, #452]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 800317e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003182:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80d5 	beq.w	8003338 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b0c      	cmp	r3, #12
 8003192:	f000 808e 	beq.w	80032b2 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	2b02      	cmp	r3, #2
 800319c:	d15b      	bne.n	8003256 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319e:	4b69      	ldr	r3, [pc, #420]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a68      	ldr	r2, [pc, #416]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 80031a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031aa:	f7fd fe8b 	bl	8000ec4 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b2:	f7fd fe87 	bl	8000ec4 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e0ba      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c4:	4b5f      	ldr	r3, [pc, #380]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f0      	bne.n	80031b2 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031d0:	4b5c      	ldr	r3, [pc, #368]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	4b5c      	ldr	r3, [pc, #368]	; (8003348 <HAL_RCC_OscConfig+0x75c>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031e0:	3a01      	subs	r2, #1
 80031e2:	0112      	lsls	r2, r2, #4
 80031e4:	4311      	orrs	r1, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031ea:	0212      	lsls	r2, r2, #8
 80031ec:	4311      	orrs	r1, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031f2:	0852      	lsrs	r2, r2, #1
 80031f4:	3a01      	subs	r2, #1
 80031f6:	0552      	lsls	r2, r2, #21
 80031f8:	4311      	orrs	r1, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031fe:	0852      	lsrs	r2, r2, #1
 8003200:	3a01      	subs	r2, #1
 8003202:	0652      	lsls	r2, r2, #25
 8003204:	4311      	orrs	r1, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800320a:	0912      	lsrs	r2, r2, #4
 800320c:	0452      	lsls	r2, r2, #17
 800320e:	430a      	orrs	r2, r1
 8003210:	494c      	ldr	r1, [pc, #304]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 8003212:	4313      	orrs	r3, r2
 8003214:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003216:	4b4b      	ldr	r3, [pc, #300]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a4a      	ldr	r2, [pc, #296]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 800321c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003220:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003222:	4b48      	ldr	r3, [pc, #288]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	4a47      	ldr	r2, [pc, #284]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 8003228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800322c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322e:	f7fd fe49 	bl	8000ec4 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003236:	f7fd fe45 	bl	8000ec4 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e078      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003248:	4b3e      	ldr	r3, [pc, #248]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x64a>
 8003254:	e070      	b.n	8003338 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003256:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a3a      	ldr	r2, [pc, #232]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 800325c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003260:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003262:	4b38      	ldr	r3, [pc, #224]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d105      	bne.n	800327a <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800326e:	4b35      	ldr	r3, [pc, #212]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	4a34      	ldr	r2, [pc, #208]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 8003274:	f023 0303 	bic.w	r3, r3, #3
 8003278:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800327a:	4b32      	ldr	r3, [pc, #200]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	4a31      	ldr	r2, [pc, #196]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 8003280:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003288:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328a:	f7fd fe1b 	bl	8000ec4 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003292:	f7fd fe17 	bl	8000ec4 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e04a      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a4:	4b27      	ldr	r3, [pc, #156]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f0      	bne.n	8003292 <HAL_RCC_OscConfig+0x6a6>
 80032b0:	e042      	b.n	8003338 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e03d      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80032be:	4b21      	ldr	r3, [pc, #132]	; (8003344 <HAL_RCC_OscConfig+0x758>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f003 0203 	and.w	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d130      	bne.n	8003334 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	3b01      	subs	r3, #1
 80032de:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d127      	bne.n	8003334 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d11f      	bne.n	8003334 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032fe:	2a07      	cmp	r2, #7
 8003300:	bf14      	ite	ne
 8003302:	2201      	movne	r2, #1
 8003304:	2200      	moveq	r2, #0
 8003306:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003308:	4293      	cmp	r3, r2
 800330a:	d113      	bne.n	8003334 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	3b01      	subs	r3, #1
 800331a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d109      	bne.n	8003334 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	085b      	lsrs	r3, r3, #1
 800332c:	3b01      	subs	r3, #1
 800332e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3720      	adds	r7, #32
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000
 8003348:	f99d808c 	.word	0xf99d808c

0800334c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0c8      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003360:	4b66      	ldr	r3, [pc, #408]	; (80034fc <HAL_RCC_ClockConfig+0x1b0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d910      	bls.n	8003390 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b63      	ldr	r3, [pc, #396]	; (80034fc <HAL_RCC_ClockConfig+0x1b0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f023 0207 	bic.w	r2, r3, #7
 8003376:	4961      	ldr	r1, [pc, #388]	; (80034fc <HAL_RCC_ClockConfig+0x1b0>)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	4313      	orrs	r3, r2
 800337c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337e:	4b5f      	ldr	r3, [pc, #380]	; (80034fc <HAL_RCC_ClockConfig+0x1b0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0b0      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d04c      	beq.n	8003436 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d107      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a4:	4b56      	ldr	r3, [pc, #344]	; (8003500 <HAL_RCC_ClockConfig+0x1b4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d121      	bne.n	80033f4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e09e      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d107      	bne.n	80033cc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033bc:	4b50      	ldr	r3, [pc, #320]	; (8003500 <HAL_RCC_ClockConfig+0x1b4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d115      	bne.n	80033f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e092      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d107      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033d4:	4b4a      	ldr	r3, [pc, #296]	; (8003500 <HAL_RCC_ClockConfig+0x1b4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d109      	bne.n	80033f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e086      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033e4:	4b46      	ldr	r3, [pc, #280]	; (8003500 <HAL_RCC_ClockConfig+0x1b4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e07e      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033f4:	4b42      	ldr	r3, [pc, #264]	; (8003500 <HAL_RCC_ClockConfig+0x1b4>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f023 0203 	bic.w	r2, r3, #3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	493f      	ldr	r1, [pc, #252]	; (8003500 <HAL_RCC_ClockConfig+0x1b4>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003406:	f7fd fd5d 	bl	8000ec4 <HAL_GetTick>
 800340a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340c:	e00a      	b.n	8003424 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340e:	f7fd fd59 	bl	8000ec4 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	; 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e066      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003424:	4b36      	ldr	r3, [pc, #216]	; (8003500 <HAL_RCC_ClockConfig+0x1b4>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 020c 	and.w	r2, r3, #12
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	429a      	cmp	r2, r3
 8003434:	d1eb      	bne.n	800340e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003442:	4b2f      	ldr	r3, [pc, #188]	; (8003500 <HAL_RCC_ClockConfig+0x1b4>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	492c      	ldr	r1, [pc, #176]	; (8003500 <HAL_RCC_ClockConfig+0x1b4>)
 8003450:	4313      	orrs	r3, r2
 8003452:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003454:	4b29      	ldr	r3, [pc, #164]	; (80034fc <HAL_RCC_ClockConfig+0x1b0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d210      	bcs.n	8003484 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003462:	4b26      	ldr	r3, [pc, #152]	; (80034fc <HAL_RCC_ClockConfig+0x1b0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 0207 	bic.w	r2, r3, #7
 800346a:	4924      	ldr	r1, [pc, #144]	; (80034fc <HAL_RCC_ClockConfig+0x1b0>)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b22      	ldr	r3, [pc, #136]	; (80034fc <HAL_RCC_ClockConfig+0x1b0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e036      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003490:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <HAL_RCC_ClockConfig+0x1b4>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4918      	ldr	r1, [pc, #96]	; (8003500 <HAL_RCC_ClockConfig+0x1b4>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ae:	4b14      	ldr	r3, [pc, #80]	; (8003500 <HAL_RCC_ClockConfig+0x1b4>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4910      	ldr	r1, [pc, #64]	; (8003500 <HAL_RCC_ClockConfig+0x1b4>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034c2:	f000 f825 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 80034c6:	4601      	mov	r1, r0
 80034c8:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <HAL_RCC_ClockConfig+0x1b4>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	4a0c      	ldr	r2, [pc, #48]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	5cd3      	ldrb	r3, [r2, r3]
 80034d6:	f003 031f 	and.w	r3, r3, #31
 80034da:	fa21 f303 	lsr.w	r3, r1, r3
 80034de:	4a0a      	ldr	r2, [pc, #40]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <HAL_RCC_ClockConfig+0x1c0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd fca0 	bl	8000e2c <HAL_InitTick>
 80034ec:	4603      	mov	r3, r0
 80034ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80034f0:	7afb      	ldrb	r3, [r7, #11]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40022000 	.word	0x40022000
 8003500:	40021000 	.word	0x40021000
 8003504:	08009cd4 	.word	0x08009cd4
 8003508:	20000038 	.word	0x20000038
 800350c:	20000000 	.word	0x20000000

08003510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	; 0x24
 8003514:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	2300      	movs	r3, #0
 800351c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800351e:	4b3d      	ldr	r3, [pc, #244]	; (8003614 <HAL_RCC_GetSysClockFreq+0x104>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003528:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <HAL_RCC_GetSysClockFreq+0x104>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0303 	and.w	r3, r3, #3
 8003530:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0x34>
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d121      	bne.n	8003582 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d11e      	bne.n	8003582 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003544:	4b33      	ldr	r3, [pc, #204]	; (8003614 <HAL_RCC_GetSysClockFreq+0x104>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d107      	bne.n	8003560 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003550:	4b30      	ldr	r3, [pc, #192]	; (8003614 <HAL_RCC_GetSysClockFreq+0x104>)
 8003552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	e005      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003560:	4b2c      	ldr	r3, [pc, #176]	; (8003614 <HAL_RCC_GetSysClockFreq+0x104>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	091b      	lsrs	r3, r3, #4
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800356c:	4a2a      	ldr	r2, [pc, #168]	; (8003618 <HAL_RCC_GetSysClockFreq+0x108>)
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003574:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10d      	bne.n	8003598 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	2b04      	cmp	r3, #4
 8003586:	d102      	bne.n	800358e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003588:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_RCC_GetSysClockFreq+0x10c>)
 800358a:	61bb      	str	r3, [r7, #24]
 800358c:	e004      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	2b08      	cmp	r3, #8
 8003592:	d101      	bne.n	8003598 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003594:	4b22      	ldr	r3, [pc, #136]	; (8003620 <HAL_RCC_GetSysClockFreq+0x110>)
 8003596:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2b0c      	cmp	r3, #12
 800359c:	d133      	bne.n	8003606 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800359e:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <HAL_RCC_GetSysClockFreq+0x104>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d002      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0xa4>
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_GetSysClockFreq+0xaa>
 80035b2:	e005      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035b4:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_RCC_GetSysClockFreq+0x10c>)
 80035b6:	617b      	str	r3, [r7, #20]
      break;
 80035b8:	e005      	b.n	80035c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035ba:	4b19      	ldr	r3, [pc, #100]	; (8003620 <HAL_RCC_GetSysClockFreq+0x110>)
 80035bc:	617b      	str	r3, [r7, #20]
      break;
 80035be:	e002      	b.n	80035c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	617b      	str	r3, [r7, #20]
      break;
 80035c4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035c6:	4b13      	ldr	r3, [pc, #76]	; (8003614 <HAL_RCC_GetSysClockFreq+0x104>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	3301      	adds	r3, #1
 80035d2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <HAL_RCC_GetSysClockFreq+0x104>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	0a1b      	lsrs	r3, r3, #8
 80035da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	fb02 f203 	mul.w	r2, r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ea:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035ec:	4b09      	ldr	r3, [pc, #36]	; (8003614 <HAL_RCC_GetSysClockFreq+0x104>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	0e5b      	lsrs	r3, r3, #25
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	3301      	adds	r3, #1
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003606:	69bb      	ldr	r3, [r7, #24]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3724      	adds	r7, #36	; 0x24
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40021000 	.word	0x40021000
 8003618:	08009cec 	.word	0x08009cec
 800361c:	00f42400 	.word	0x00f42400
 8003620:	007a1200 	.word	0x007a1200

08003624 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003628:	4b03      	ldr	r3, [pc, #12]	; (8003638 <HAL_RCC_GetHCLKFreq+0x14>)
 800362a:	681b      	ldr	r3, [r3, #0]
}
 800362c:	4618      	mov	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	20000038 	.word	0x20000038

0800363c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003640:	f7ff fff0 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 8003644:	4601      	mov	r1, r0
 8003646:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	0a1b      	lsrs	r3, r3, #8
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4a04      	ldr	r2, [pc, #16]	; (8003664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003652:	5cd3      	ldrb	r3, [r2, r3]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	fa21 f303 	lsr.w	r3, r1, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000
 8003664:	08009ce4 	.word	0x08009ce4

08003668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800366c:	f7ff ffda 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 8003670:	4601      	mov	r1, r0
 8003672:	4b06      	ldr	r3, [pc, #24]	; (800368c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	0adb      	lsrs	r3, r3, #11
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4a04      	ldr	r2, [pc, #16]	; (8003690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800367e:	5cd3      	ldrb	r3, [r2, r3]
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003688:	4618      	mov	r0, r3
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000
 8003690:	08009ce4 	.word	0x08009ce4

08003694 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800369c:	2300      	movs	r3, #0
 800369e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036a0:	4b2a      	ldr	r3, [pc, #168]	; (800374c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036ac:	f7ff fa3a 	bl	8002b24 <HAL_PWREx_GetVoltageRange>
 80036b0:	6178      	str	r0, [r7, #20]
 80036b2:	e014      	b.n	80036de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036b4:	4b25      	ldr	r3, [pc, #148]	; (800374c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b8:	4a24      	ldr	r2, [pc, #144]	; (800374c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036be:	6593      	str	r3, [r2, #88]	; 0x58
 80036c0:	4b22      	ldr	r3, [pc, #136]	; (800374c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036cc:	f7ff fa2a 	bl	8002b24 <HAL_PWREx_GetVoltageRange>
 80036d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036d2:	4b1e      	ldr	r3, [pc, #120]	; (800374c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d6:	4a1d      	ldr	r2, [pc, #116]	; (800374c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e4:	d10b      	bne.n	80036fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b80      	cmp	r3, #128	; 0x80
 80036ea:	d919      	bls.n	8003720 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2ba0      	cmp	r3, #160	; 0xa0
 80036f0:	d902      	bls.n	80036f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036f2:	2302      	movs	r3, #2
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	e013      	b.n	8003720 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036f8:	2301      	movs	r3, #1
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	e010      	b.n	8003720 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b80      	cmp	r3, #128	; 0x80
 8003702:	d902      	bls.n	800370a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003704:	2303      	movs	r3, #3
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	e00a      	b.n	8003720 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b80      	cmp	r3, #128	; 0x80
 800370e:	d102      	bne.n	8003716 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003710:	2302      	movs	r3, #2
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	e004      	b.n	8003720 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b70      	cmp	r3, #112	; 0x70
 800371a:	d101      	bne.n	8003720 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800371c:	2301      	movs	r3, #1
 800371e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 0207 	bic.w	r2, r3, #7
 8003728:	4909      	ldr	r1, [pc, #36]	; (8003750 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003730:	4b07      	ldr	r3, [pc, #28]	; (8003750 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	429a      	cmp	r2, r3
 800373c:	d001      	beq.n	8003742 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	40022000 	.word	0x40022000

08003754 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800375c:	2300      	movs	r3, #0
 800375e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003760:	2300      	movs	r3, #0
 8003762:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800376c:	2b00      	cmp	r3, #0
 800376e:	d03f      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003778:	d01c      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800377a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800377e:	d802      	bhi.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00e      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003784:	e01f      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003786:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800378a:	d003      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800378c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003790:	d01c      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003792:	e018      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003794:	4b85      	ldr	r3, [pc, #532]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4a84      	ldr	r2, [pc, #528]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800379a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037a0:	e015      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2100      	movs	r1, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fa89 	bl	8003cc0 <RCCEx_PLLSAI1_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037b2:	e00c      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3320      	adds	r3, #32
 80037b8:	2100      	movs	r1, #0
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fb70 	bl	8003ea0 <RCCEx_PLLSAI2_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037c4:	e003      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	74fb      	strb	r3, [r7, #19]
      break;
 80037ca:	e000      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80037cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ce:	7cfb      	ldrb	r3, [r7, #19]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10b      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037d4:	4b75      	ldr	r3, [pc, #468]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e2:	4972      	ldr	r1, [pc, #456]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037ea:	e001      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d03f      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003804:	d01c      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003806:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800380a:	d802      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00e      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003810:	e01f      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003812:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003816:	d003      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003818:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800381c:	d01c      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800381e:	e018      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003820:	4b62      	ldr	r3, [pc, #392]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4a61      	ldr	r2, [pc, #388]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800382c:	e015      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3304      	adds	r3, #4
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fa43 	bl	8003cc0 <RCCEx_PLLSAI1_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800383e:	e00c      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3320      	adds	r3, #32
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fb2a 	bl	8003ea0 <RCCEx_PLLSAI2_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003850:	e003      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	74fb      	strb	r3, [r7, #19]
      break;
 8003856:	e000      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800385a:	7cfb      	ldrb	r3, [r7, #19]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10b      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003860:	4b52      	ldr	r3, [pc, #328]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800386e:	494f      	ldr	r1, [pc, #316]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003876:	e001      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80a0 	beq.w	80039ca <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800389e:	2300      	movs	r3, #0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00d      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a4:	4b41      	ldr	r3, [pc, #260]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a8:	4a40      	ldr	r2, [pc, #256]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ae:	6593      	str	r3, [r2, #88]	; 0x58
 80038b0:	4b3e      	ldr	r3, [pc, #248]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038bc:	2301      	movs	r3, #1
 80038be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c0:	4b3b      	ldr	r3, [pc, #236]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a3a      	ldr	r2, [pc, #232]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80038c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038cc:	f7fd fafa 	bl	8000ec4 <HAL_GetTick>
 80038d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038d2:	e009      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d4:	f7fd faf6 	bl	8000ec4 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d902      	bls.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	74fb      	strb	r3, [r7, #19]
        break;
 80038e6:	e005      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038e8:	4b31      	ldr	r3, [pc, #196]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ef      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d15c      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038fa:	4b2c      	ldr	r3, [pc, #176]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003904:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d01f      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	429a      	cmp	r2, r3
 8003916:	d019      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003918:	4b24      	ldr	r3, [pc, #144]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003922:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003924:	4b21      	ldr	r3, [pc, #132]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	4a20      	ldr	r2, [pc, #128]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800392c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003934:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	4a1c      	ldr	r2, [pc, #112]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800393c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003944:	4a19      	ldr	r2, [pc, #100]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d016      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003956:	f7fd fab5 	bl	8000ec4 <HAL_GetTick>
 800395a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800395c:	e00b      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395e:	f7fd fab1 	bl	8000ec4 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f241 3288 	movw	r2, #5000	; 0x1388
 800396c:	4293      	cmp	r3, r2
 800396e:	d902      	bls.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	74fb      	strb	r3, [r7, #19]
            break;
 8003974:	e006      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ec      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003984:	7cfb      	ldrb	r3, [r7, #19]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10c      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800398a:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003990:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800399a:	4904      	ldr	r1, [pc, #16]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039a2:	e009      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	74bb      	strb	r3, [r7, #18]
 80039a8:	e006      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039b8:	7c7b      	ldrb	r3, [r7, #17]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d105      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039be:	4ba1      	ldr	r3, [pc, #644]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	4aa0      	ldr	r2, [pc, #640]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80039c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039d6:	4b9b      	ldr	r3, [pc, #620]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039dc:	f023 0203 	bic.w	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	4997      	ldr	r1, [pc, #604]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039f8:	4b92      	ldr	r3, [pc, #584]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fe:	f023 020c 	bic.w	r2, r3, #12
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a06:	498f      	ldr	r1, [pc, #572]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a1a:	4b8a      	ldr	r3, [pc, #552]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	4986      	ldr	r1, [pc, #536]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a3c:	4b81      	ldr	r3, [pc, #516]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	497e      	ldr	r1, [pc, #504]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a5e:	4b79      	ldr	r3, [pc, #484]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6c:	4975      	ldr	r1, [pc, #468]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a80:	4b70      	ldr	r3, [pc, #448]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8e:	496d      	ldr	r1, [pc, #436]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aa2:	4b68      	ldr	r3, [pc, #416]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab0:	4964      	ldr	r1, [pc, #400]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ac4:	4b5f      	ldr	r3, [pc, #380]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad2:	495c      	ldr	r1, [pc, #368]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ae6:	4b57      	ldr	r3, [pc, #348]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af4:	4953      	ldr	r1, [pc, #332]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b08:	4b4e      	ldr	r3, [pc, #312]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	494b      	ldr	r1, [pc, #300]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b2a:	4b46      	ldr	r3, [pc, #280]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b38:	4942      	ldr	r1, [pc, #264]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d028      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b4c:	4b3d      	ldr	r3, [pc, #244]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b5a:	493a      	ldr	r1, [pc, #232]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b6c:	4b35      	ldr	r3, [pc, #212]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a34      	ldr	r2, [pc, #208]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b76:	60d3      	str	r3, [r2, #12]
 8003b78:	e011      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b82:	d10c      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3304      	adds	r3, #4
 8003b88:	2101      	movs	r1, #1
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 f898 	bl	8003cc0 <RCCEx_PLLSAI1_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* set overall return value */
        status = ret;
 8003b9a:	7cfb      	ldrb	r3, [r7, #19]
 8003b9c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d028      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003baa:	4b26      	ldr	r3, [pc, #152]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb8:	4922      	ldr	r1, [pc, #136]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bc8:	d106      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bca:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	4a1d      	ldr	r2, [pc, #116]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003bd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bd4:	60d3      	str	r3, [r2, #12]
 8003bd6:	e011      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3304      	adds	r3, #4
 8003be6:	2101      	movs	r1, #1
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 f869 	bl	8003cc0 <RCCEx_PLLSAI1_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d031      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x518>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c08:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c16:	490b      	ldr	r1, [pc, #44]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c26:	d10f      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	2102      	movs	r1, #2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f846 	bl	8003cc0 <RCCEx_PLLSAI1_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c38:	7cfb      	ldrb	r3, [r7, #19]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d016      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x518>
      {
        /* set overall return value */
        status = ret;
 8003c3e:	7cfb      	ldrb	r3, [r7, #19]
 8003c40:	74bb      	strb	r3, [r7, #18]
 8003c42:	e013      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c44:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x518>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3320      	adds	r3, #32
 8003c56:	2102      	movs	r1, #2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 f921 	bl	8003ea0 <RCCEx_PLLSAI2_Config>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c62:	7cfb      	ldrb	r3, [r7, #19]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x518>
      {
        /* set overall return value */
        status = ret;
 8003c68:	7cfb      	ldrb	r3, [r7, #19]
 8003c6a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x53a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c78:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c86:	490d      	ldr	r1, [pc, #52]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c9a:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca8:	4904      	ldr	r1, [pc, #16]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000

08003cc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cce:	4b73      	ldr	r3, [pc, #460]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d018      	beq.n	8003d0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cda:	4b70      	ldr	r3, [pc, #448]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f003 0203 	and.w	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d10d      	bne.n	8003d06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
       ||
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d009      	beq.n	8003d06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cf2:	4b6a      	ldr	r3, [pc, #424]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	091b      	lsrs	r3, r3, #4
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
       ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d044      	beq.n	8003d90 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
 8003d0a:	e041      	b.n	8003d90 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d00c      	beq.n	8003d2e <RCCEx_PLLSAI1_Config+0x6e>
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d013      	beq.n	8003d40 <RCCEx_PLLSAI1_Config+0x80>
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d120      	bne.n	8003d5e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d1c:	4b5f      	ldr	r3, [pc, #380]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d11d      	bne.n	8003d64 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d2c:	e01a      	b.n	8003d64 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d2e:	4b5b      	ldr	r3, [pc, #364]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d116      	bne.n	8003d68 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d3e:	e013      	b.n	8003d68 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d40:	4b56      	ldr	r3, [pc, #344]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10f      	bne.n	8003d6c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d4c:	4b53      	ldr	r3, [pc, #332]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d109      	bne.n	8003d6c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d5c:	e006      	b.n	8003d6c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	73fb      	strb	r3, [r7, #15]
      break;
 8003d62:	e004      	b.n	8003d6e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003d64:	bf00      	nop
 8003d66:	e002      	b.n	8003d6e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003d68:	bf00      	nop
 8003d6a:	e000      	b.n	8003d6e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003d6c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10d      	bne.n	8003d90 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d74:	4b49      	ldr	r3, [pc, #292]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	4944      	ldr	r1, [pc, #272]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d17d      	bne.n	8003e92 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d96:	4b41      	ldr	r3, [pc, #260]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a40      	ldr	r2, [pc, #256]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003da0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da2:	f7fd f88f 	bl	8000ec4 <HAL_GetTick>
 8003da6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003da8:	e009      	b.n	8003dbe <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003daa:	f7fd f88b 	bl	8000ec4 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d902      	bls.n	8003dbe <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	73fb      	strb	r3, [r7, #15]
        break;
 8003dbc:	e005      	b.n	8003dca <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dbe:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1ef      	bne.n	8003daa <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d160      	bne.n	8003e92 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d111      	bne.n	8003dfa <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dd6:	4b31      	ldr	r3, [pc, #196]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6892      	ldr	r2, [r2, #8]
 8003de6:	0211      	lsls	r1, r2, #8
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	68d2      	ldr	r2, [r2, #12]
 8003dec:	0912      	lsrs	r2, r2, #4
 8003dee:	0452      	lsls	r2, r2, #17
 8003df0:	430a      	orrs	r2, r1
 8003df2:	492a      	ldr	r1, [pc, #168]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	610b      	str	r3, [r1, #16]
 8003df8:	e027      	b.n	8003e4a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d112      	bne.n	8003e26 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e00:	4b26      	ldr	r3, [pc, #152]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6892      	ldr	r2, [r2, #8]
 8003e10:	0211      	lsls	r1, r2, #8
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6912      	ldr	r2, [r2, #16]
 8003e16:	0852      	lsrs	r2, r2, #1
 8003e18:	3a01      	subs	r2, #1
 8003e1a:	0552      	lsls	r2, r2, #21
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	491f      	ldr	r1, [pc, #124]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	610b      	str	r3, [r1, #16]
 8003e24:	e011      	b.n	8003e4a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e26:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6892      	ldr	r2, [r2, #8]
 8003e36:	0211      	lsls	r1, r2, #8
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6952      	ldr	r2, [r2, #20]
 8003e3c:	0852      	lsrs	r2, r2, #1
 8003e3e:	3a01      	subs	r2, #1
 8003e40:	0652      	lsls	r2, r2, #25
 8003e42:	430a      	orrs	r2, r1
 8003e44:	4915      	ldr	r1, [pc, #84]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e4a:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a13      	ldr	r2, [pc, #76]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e56:	f7fd f835 	bl	8000ec4 <HAL_GetTick>
 8003e5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e5c:	e009      	b.n	8003e72 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e5e:	f7fd f831 	bl	8000ec4 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d902      	bls.n	8003e72 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	73fb      	strb	r3, [r7, #15]
          break;
 8003e70:	e005      	b.n	8003e7e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e72:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0ef      	beq.n	8003e5e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	4903      	ldr	r1, [pc, #12]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40021000 	.word	0x40021000

08003ea0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eae:	4b68      	ldr	r3, [pc, #416]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d018      	beq.n	8003eec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003eba:	4b65      	ldr	r3, [pc, #404]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 0203 	and.w	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d10d      	bne.n	8003ee6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
       ||
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ed2:	4b5f      	ldr	r3, [pc, #380]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d044      	beq.n	8003f70 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
 8003eea:	e041      	b.n	8003f70 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d00c      	beq.n	8003f0e <RCCEx_PLLSAI2_Config+0x6e>
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d013      	beq.n	8003f20 <RCCEx_PLLSAI2_Config+0x80>
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d120      	bne.n	8003f3e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003efc:	4b54      	ldr	r3, [pc, #336]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d11d      	bne.n	8003f44 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f0c:	e01a      	b.n	8003f44 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f0e:	4b50      	ldr	r3, [pc, #320]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d116      	bne.n	8003f48 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f1e:	e013      	b.n	8003f48 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f20:	4b4b      	ldr	r3, [pc, #300]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10f      	bne.n	8003f4c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f2c:	4b48      	ldr	r3, [pc, #288]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d109      	bne.n	8003f4c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f3c:	e006      	b.n	8003f4c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
      break;
 8003f42:	e004      	b.n	8003f4e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f44:	bf00      	nop
 8003f46:	e002      	b.n	8003f4e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f48:	bf00      	nop
 8003f4a:	e000      	b.n	8003f4e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f4c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10d      	bne.n	8003f70 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f54:	4b3e      	ldr	r3, [pc, #248]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6819      	ldr	r1, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	4939      	ldr	r1, [pc, #228]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d167      	bne.n	8004046 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f76:	4b36      	ldr	r3, [pc, #216]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a35      	ldr	r2, [pc, #212]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f82:	f7fc ff9f 	bl	8000ec4 <HAL_GetTick>
 8003f86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f88:	e009      	b.n	8003f9e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f8a:	f7fc ff9b 	bl	8000ec4 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d902      	bls.n	8003f9e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	73fb      	strb	r3, [r7, #15]
        break;
 8003f9c:	e005      	b.n	8003faa <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f9e:	4b2c      	ldr	r3, [pc, #176]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1ef      	bne.n	8003f8a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d14a      	bne.n	8004046 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d111      	bne.n	8003fda <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fb6:	4b26      	ldr	r3, [pc, #152]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6892      	ldr	r2, [r2, #8]
 8003fc6:	0211      	lsls	r1, r2, #8
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	68d2      	ldr	r2, [r2, #12]
 8003fcc:	0912      	lsrs	r2, r2, #4
 8003fce:	0452      	lsls	r2, r2, #17
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	491f      	ldr	r1, [pc, #124]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	614b      	str	r3, [r1, #20]
 8003fd8:	e011      	b.n	8003ffe <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fda:	4b1d      	ldr	r3, [pc, #116]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fe2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6892      	ldr	r2, [r2, #8]
 8003fea:	0211      	lsls	r1, r2, #8
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6912      	ldr	r2, [r2, #16]
 8003ff0:	0852      	lsrs	r2, r2, #1
 8003ff2:	3a01      	subs	r2, #1
 8003ff4:	0652      	lsls	r2, r2, #25
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	4915      	ldr	r1, [pc, #84]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ffe:	4b14      	ldr	r3, [pc, #80]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a13      	ldr	r2, [pc, #76]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004008:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400a:	f7fc ff5b 	bl	8000ec4 <HAL_GetTick>
 800400e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004010:	e009      	b.n	8004026 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004012:	f7fc ff57 	bl	8000ec4 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d902      	bls.n	8004026 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	73fb      	strb	r3, [r7, #15]
          break;
 8004024:	e005      	b.n	8004032 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004026:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0ef      	beq.n	8004012 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 800403a:	695a      	ldr	r2, [r3, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	4903      	ldr	r1, [pc, #12]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004042:	4313      	orrs	r3, r2
 8004044:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004046:	7bfb      	ldrb	r3, [r7, #15]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000

08004054 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d06f      	beq.n	8004146 <HAL_RTC_Init+0xf2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f004 fcfa 	bl	8008a74 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	22ca      	movs	r2, #202	; 0xca
 800408e:	625a      	str	r2, [r3, #36]	; 0x24
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2253      	movs	r2, #83	; 0x53
 8004096:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f87f 	bl	800419c <RTC_EnterInitMode>
 800409e:	4603      	mov	r3, r0
 80040a0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d14e      	bne.n	8004146 <HAL_RTC_Init+0xf2>
#if defined(STM32L412xx) || defined(STM32L422xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80040b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ba:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6899      	ldr	r1, [r3, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68d2      	ldr	r2, [r2, #12]
 80040e2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6919      	ldr	r1, [r3, #16]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	041a      	lsls	r2, r3, #16
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f883 	bl	8004204 <RTC_ExitInitMode>
 80040fe:	4603      	mov	r3, r0
 8004100:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d11e      	bne.n	8004146 <HAL_RTC_Init+0xf2>
      {
#if defined(STM32L412xx) || defined(STM32L422xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0203 	bic.w	r2, r2, #3
 8004116:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69da      	ldr	r2, [r3, #28]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	22ff      	movs	r2, #255	; 0xff
 8004136:	625a      	str	r2, [r3, #36]	; 0x24

        if (status == HAL_OK)
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d103      	bne.n	8004146 <HAL_RTC_Init+0xf2>
        {
          hrtc->State = HAL_RTC_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
      }
    }
  }

  return status;
 8004146:	7bfb      	ldrb	r3, [r7, #15]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004166:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004168:	f7fc feac 	bl	8000ec4 <HAL_GetTick>
 800416c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800416e:	e009      	b.n	8004184 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004170:	f7fc fea8 	bl	8000ec4 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800417e:	d901      	bls.n	8004184 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e007      	b.n	8004194 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0ee      	beq.n	8004170 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d120      	bne.n	80041f8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f04f 32ff 	mov.w	r2, #4294967295
 80041be:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80041c0:	f7fc fe80 	bl	8000ec4 <HAL_GetTick>
 80041c4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041c6:	e00d      	b.n	80041e4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80041c8:	f7fc fe7c 	bl	8000ec4 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d6:	d905      	bls.n	80041e4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2203      	movs	r2, #3
 80041e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <RTC_EnterInitMode+0x5c>
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d1e7      	bne.n	80041c8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004210:	4b1a      	ldr	r3, [pc, #104]	; (800427c <RTC_ExitInitMode+0x78>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a19      	ldr	r2, [pc, #100]	; (800427c <RTC_ExitInitMode+0x78>)
 8004216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <RTC_ExitInitMode+0x78>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 0320 	and.w	r3, r3, #32
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10c      	bne.n	8004242 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff ff91 	bl	8004150 <HAL_RTC_WaitForSynchro>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01e      	beq.n	8004272 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2203      	movs	r2, #3
 8004238:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	73fb      	strb	r3, [r7, #15]
 8004240:	e017      	b.n	8004272 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004242:	4b0e      	ldr	r3, [pc, #56]	; (800427c <RTC_ExitInitMode+0x78>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	4a0d      	ldr	r2, [pc, #52]	; (800427c <RTC_ExitInitMode+0x78>)
 8004248:	f023 0320 	bic.w	r3, r3, #32
 800424c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff ff7e 	bl	8004150 <HAL_RTC_WaitForSynchro>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2203      	movs	r2, #3
 800425e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004266:	4b05      	ldr	r3, [pc, #20]	; (800427c <RTC_ExitInitMode+0x78>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	4a04      	ldr	r2, [pc, #16]	; (800427c <RTC_ExitInitMode+0x78>)
 800426c:	f043 0320 	orr.w	r3, r3, #32
 8004270:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40002800 	.word	0x40002800

08004280 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8004296:	2302      	movs	r3, #2
 8004298:	e07f      	b.n	800439a <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2202      	movs	r2, #2
 80042a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	22ca      	movs	r2, #202	; 0xca
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2253      	movs	r2, #83	; 0x53
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80042da:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d120      	bne.n	800432c <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 80042ea:	f7fc fdeb 	bl	8000ec4 <HAL_GetTick>
 80042ee:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80042f0:	e015      	b.n	800431e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042f2:	f7fc fde7 	bl	8000ec4 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004300:	d90d      	bls.n	800431e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	22ff      	movs	r2, #255	; 0xff
 8004308:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2203      	movs	r2, #3
 800430e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e03d      	b.n	800439a <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0e2      	beq.n	80042f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f023 0107 	bic.w	r1, r3, #7
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	430a      	orrs	r2, r1
 8004346:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004348:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a15      	ldr	r2, [pc, #84]	; (80043a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800434e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004352:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004354:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	4a12      	ldr	r2, [pc, #72]	; (80043a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800435a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800435e:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800436e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800437e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	22ff      	movs	r2, #255	; 0xff
 8004386:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40010400 	.word	0x40010400

080043a8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80043b0:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80043b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80043b6:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80043d6:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f004 f9d3 	bl	8008784 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40010400 	.word	0x40010400

080043f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e040      	b.n	8004488 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440a:	2b00      	cmp	r3, #0
 800440c:	d106      	bne.n	800441c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f004 fa50 	bl	80088bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2224      	movs	r2, #36	; 0x24
 8004420:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0201 	bic.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fa12 	bl	800485c <UART_SetConfig>
 8004438:	4603      	mov	r3, r0
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e022      	b.n	8004488 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fd4e 	bl	8004eec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800445e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800446e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fdd5 	bl	8005030 <UART_CheckIdleState>
 8004486:	4603      	mov	r3, r0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a2:	2b20      	cmp	r3, #32
 80044a4:	f040 808a 	bne.w	80045bc <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <HAL_UART_Receive_IT+0x24>
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e082      	b.n	80045be <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_UART_Receive_IT+0x36>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e07b      	b.n	80045be <HAL_UART_Receive_IT+0x12e>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	88fa      	ldrh	r2, [r7, #6]
 80044d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	88fa      	ldrh	r2, [r7, #6]
 80044e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f2:	d10e      	bne.n	8004512 <HAL_UART_Receive_IT+0x82>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d105      	bne.n	8004508 <HAL_UART_Receive_IT+0x78>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004502:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004506:	e02d      	b.n	8004564 <HAL_UART_Receive_IT+0xd4>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	22ff      	movs	r2, #255	; 0xff
 800450c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004510:	e028      	b.n	8004564 <HAL_UART_Receive_IT+0xd4>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10d      	bne.n	8004536 <HAL_UART_Receive_IT+0xa6>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d104      	bne.n	800452c <HAL_UART_Receive_IT+0x9c>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	22ff      	movs	r2, #255	; 0xff
 8004526:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800452a:	e01b      	b.n	8004564 <HAL_UART_Receive_IT+0xd4>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	227f      	movs	r2, #127	; 0x7f
 8004530:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004534:	e016      	b.n	8004564 <HAL_UART_Receive_IT+0xd4>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800453e:	d10d      	bne.n	800455c <HAL_UART_Receive_IT+0xcc>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d104      	bne.n	8004552 <HAL_UART_Receive_IT+0xc2>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	227f      	movs	r2, #127	; 0x7f
 800454c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004550:	e008      	b.n	8004564 <HAL_UART_Receive_IT+0xd4>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	223f      	movs	r2, #63	; 0x3f
 8004556:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800455a:	e003      	b.n	8004564 <HAL_UART_Receive_IT+0xd4>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2222      	movs	r2, #34	; 0x22
 800456e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004588:	d107      	bne.n	800459a <HAL_UART_Receive_IT+0x10a>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d103      	bne.n	800459a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a0d      	ldr	r2, [pc, #52]	; (80045cc <HAL_UART_Receive_IT+0x13c>)
 8004596:	661a      	str	r2, [r3, #96]	; 0x60
 8004598:	e002      	b.n	80045a0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4a0c      	ldr	r2, [pc, #48]	; (80045d0 <HAL_UART_Receive_IT+0x140>)
 800459e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80045b6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	e000      	b.n	80045be <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80045bc:	2302      	movs	r3, #2
  }
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	08005293 	.word	0x08005293
 80045d0:	080051e9 	.word	0x080051e9

080045d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d113      	bne.n	800462a <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00e      	beq.n	800462a <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80ff 	beq.w	800481e <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	4798      	blx	r3
      }
      return;
 8004628:	e0f9      	b.n	800481e <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80c1 	beq.w	80047b4 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d105      	bne.n	8004648 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 80b6 	beq.w	80047b4 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00e      	beq.n	8004670 <HAL_UART_IRQHandler+0x9c>
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d009      	beq.n	8004670 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2201      	movs	r2, #1
 8004662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004668:	f043 0201 	orr.w	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00e      	beq.n	8004698 <HAL_UART_IRQHandler+0xc4>
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d009      	beq.n	8004698 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2202      	movs	r2, #2
 800468a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004690:	f043 0204 	orr.w	r2, r3, #4
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00e      	beq.n	80046c0 <HAL_UART_IRQHandler+0xec>
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d009      	beq.n	80046c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2204      	movs	r2, #4
 80046b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046b8:	f043 0202 	orr.w	r2, r3, #2
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d013      	beq.n	80046f2 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d104      	bne.n	80046de <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d009      	beq.n	80046f2 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2208      	movs	r2, #8
 80046e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ea:	f043 0208 	orr.w	r2, r3, #8
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 8093 	beq.w	8004822 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00c      	beq.n	8004720 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004724:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004730:	2b40      	cmp	r3, #64	; 0x40
 8004732:	d004      	beq.n	800473e <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800473a:	2b00      	cmp	r3, #0
 800473c:	d031      	beq.n	80047a2 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fd03 	bl	800514a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474e:	2b40      	cmp	r3, #64	; 0x40
 8004750:	d123      	bne.n	800479a <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004760:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004766:	2b00      	cmp	r3, #0
 8004768:	d013      	beq.n	8004792 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800476e:	4a30      	ldr	r2, [pc, #192]	; (8004830 <HAL_UART_IRQHandler+0x25c>)
 8004770:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004776:	4618      	mov	r0, r3
 8004778:	f7fd ffa1 	bl	80026be <HAL_DMA_Abort_IT>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d016      	beq.n	80047b0 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800478c:	4610      	mov	r0, r2
 800478e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004790:	e00e      	b.n	80047b0 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f858 	bl	8004848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004798:	e00a      	b.n	80047b0 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f854 	bl	8004848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a0:	e006      	b.n	80047b0 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f850 	bl	8004848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80047ae:	e038      	b.n	8004822 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b0:	bf00      	nop
    return;
 80047b2:	e036      	b.n	8004822 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00d      	beq.n	80047da <HAL_UART_IRQHandler+0x206>
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80047d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fdb2 	bl	800533c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047d8:	e026      	b.n	8004828 <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00d      	beq.n	8004800 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d008      	beq.n	8004800 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d017      	beq.n	8004826 <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	4798      	blx	r3
    }
    return;
 80047fe:	e012      	b.n	8004826 <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00e      	beq.n	8004828 <HAL_UART_IRQHandler+0x254>
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d009      	beq.n	8004828 <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fcce 	bl	80051b6 <UART_EndTransmit_IT>
    return;
 800481a:	bf00      	nop
 800481c:	e004      	b.n	8004828 <HAL_UART_IRQHandler+0x254>
      return;
 800481e:	bf00      	nop
 8004820:	e002      	b.n	8004828 <HAL_UART_IRQHandler+0x254>
    return;
 8004822:	bf00      	nop
 8004824:	e000      	b.n	8004828 <HAL_UART_IRQHandler+0x254>
    return;
 8004826:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004828:	3720      	adds	r7, #32
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	0800518b 	.word	0x0800518b

08004834 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800485c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004860:	b088      	sub	sp, #32
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	4313      	orrs	r3, r2
 8004888:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4bac      	ldr	r3, [pc, #688]	; (8004b44 <UART_SetConfig+0x2e8>)
 8004892:	4013      	ands	r3, r2
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	69f9      	ldr	r1, [r7, #28]
 800489a:	430b      	orrs	r3, r1
 800489c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4aa2      	ldr	r2, [pc, #648]	; (8004b48 <UART_SetConfig+0x2ec>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	430a      	orrs	r2, r1
 80048e0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a99      	ldr	r2, [pc, #612]	; (8004b4c <UART_SetConfig+0x2f0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d121      	bne.n	8004930 <UART_SetConfig+0xd4>
 80048ec:	4b98      	ldr	r3, [pc, #608]	; (8004b50 <UART_SetConfig+0x2f4>)
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b03      	cmp	r3, #3
 80048f8:	d816      	bhi.n	8004928 <UART_SetConfig+0xcc>
 80048fa:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <UART_SetConfig+0xa4>)
 80048fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004900:	08004911 	.word	0x08004911
 8004904:	0800491d 	.word	0x0800491d
 8004908:	08004917 	.word	0x08004917
 800490c:	08004923 	.word	0x08004923
 8004910:	2301      	movs	r3, #1
 8004912:	76fb      	strb	r3, [r7, #27]
 8004914:	e0e8      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004916:	2302      	movs	r3, #2
 8004918:	76fb      	strb	r3, [r7, #27]
 800491a:	e0e5      	b.n	8004ae8 <UART_SetConfig+0x28c>
 800491c:	2304      	movs	r3, #4
 800491e:	76fb      	strb	r3, [r7, #27]
 8004920:	e0e2      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004922:	2308      	movs	r3, #8
 8004924:	76fb      	strb	r3, [r7, #27]
 8004926:	e0df      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004928:	2310      	movs	r3, #16
 800492a:	76fb      	strb	r3, [r7, #27]
 800492c:	bf00      	nop
 800492e:	e0db      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a87      	ldr	r2, [pc, #540]	; (8004b54 <UART_SetConfig+0x2f8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d134      	bne.n	80049a4 <UART_SetConfig+0x148>
 800493a:	4b85      	ldr	r3, [pc, #532]	; (8004b50 <UART_SetConfig+0x2f4>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	f003 030c 	and.w	r3, r3, #12
 8004944:	2b0c      	cmp	r3, #12
 8004946:	d829      	bhi.n	800499c <UART_SetConfig+0x140>
 8004948:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <UART_SetConfig+0xf4>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004985 	.word	0x08004985
 8004954:	0800499d 	.word	0x0800499d
 8004958:	0800499d 	.word	0x0800499d
 800495c:	0800499d 	.word	0x0800499d
 8004960:	08004991 	.word	0x08004991
 8004964:	0800499d 	.word	0x0800499d
 8004968:	0800499d 	.word	0x0800499d
 800496c:	0800499d 	.word	0x0800499d
 8004970:	0800498b 	.word	0x0800498b
 8004974:	0800499d 	.word	0x0800499d
 8004978:	0800499d 	.word	0x0800499d
 800497c:	0800499d 	.word	0x0800499d
 8004980:	08004997 	.word	0x08004997
 8004984:	2300      	movs	r3, #0
 8004986:	76fb      	strb	r3, [r7, #27]
 8004988:	e0ae      	b.n	8004ae8 <UART_SetConfig+0x28c>
 800498a:	2302      	movs	r3, #2
 800498c:	76fb      	strb	r3, [r7, #27]
 800498e:	e0ab      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004990:	2304      	movs	r3, #4
 8004992:	76fb      	strb	r3, [r7, #27]
 8004994:	e0a8      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004996:	2308      	movs	r3, #8
 8004998:	76fb      	strb	r3, [r7, #27]
 800499a:	e0a5      	b.n	8004ae8 <UART_SetConfig+0x28c>
 800499c:	2310      	movs	r3, #16
 800499e:	76fb      	strb	r3, [r7, #27]
 80049a0:	bf00      	nop
 80049a2:	e0a1      	b.n	8004ae8 <UART_SetConfig+0x28c>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a6b      	ldr	r2, [pc, #428]	; (8004b58 <UART_SetConfig+0x2fc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d120      	bne.n	80049f0 <UART_SetConfig+0x194>
 80049ae:	4b68      	ldr	r3, [pc, #416]	; (8004b50 <UART_SetConfig+0x2f4>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d00f      	beq.n	80049dc <UART_SetConfig+0x180>
 80049bc:	2b10      	cmp	r3, #16
 80049be:	d802      	bhi.n	80049c6 <UART_SetConfig+0x16a>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <UART_SetConfig+0x174>
 80049c4:	e010      	b.n	80049e8 <UART_SetConfig+0x18c>
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d005      	beq.n	80049d6 <UART_SetConfig+0x17a>
 80049ca:	2b30      	cmp	r3, #48	; 0x30
 80049cc:	d009      	beq.n	80049e2 <UART_SetConfig+0x186>
 80049ce:	e00b      	b.n	80049e8 <UART_SetConfig+0x18c>
 80049d0:	2300      	movs	r3, #0
 80049d2:	76fb      	strb	r3, [r7, #27]
 80049d4:	e088      	b.n	8004ae8 <UART_SetConfig+0x28c>
 80049d6:	2302      	movs	r3, #2
 80049d8:	76fb      	strb	r3, [r7, #27]
 80049da:	e085      	b.n	8004ae8 <UART_SetConfig+0x28c>
 80049dc:	2304      	movs	r3, #4
 80049de:	76fb      	strb	r3, [r7, #27]
 80049e0:	e082      	b.n	8004ae8 <UART_SetConfig+0x28c>
 80049e2:	2308      	movs	r3, #8
 80049e4:	76fb      	strb	r3, [r7, #27]
 80049e6:	e07f      	b.n	8004ae8 <UART_SetConfig+0x28c>
 80049e8:	2310      	movs	r3, #16
 80049ea:	76fb      	strb	r3, [r7, #27]
 80049ec:	bf00      	nop
 80049ee:	e07b      	b.n	8004ae8 <UART_SetConfig+0x28c>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a59      	ldr	r2, [pc, #356]	; (8004b5c <UART_SetConfig+0x300>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d120      	bne.n	8004a3c <UART_SetConfig+0x1e0>
 80049fa:	4b55      	ldr	r3, [pc, #340]	; (8004b50 <UART_SetConfig+0x2f4>)
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a04:	2b40      	cmp	r3, #64	; 0x40
 8004a06:	d00f      	beq.n	8004a28 <UART_SetConfig+0x1cc>
 8004a08:	2b40      	cmp	r3, #64	; 0x40
 8004a0a:	d802      	bhi.n	8004a12 <UART_SetConfig+0x1b6>
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <UART_SetConfig+0x1c0>
 8004a10:	e010      	b.n	8004a34 <UART_SetConfig+0x1d8>
 8004a12:	2b80      	cmp	r3, #128	; 0x80
 8004a14:	d005      	beq.n	8004a22 <UART_SetConfig+0x1c6>
 8004a16:	2bc0      	cmp	r3, #192	; 0xc0
 8004a18:	d009      	beq.n	8004a2e <UART_SetConfig+0x1d2>
 8004a1a:	e00b      	b.n	8004a34 <UART_SetConfig+0x1d8>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	76fb      	strb	r3, [r7, #27]
 8004a20:	e062      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004a22:	2302      	movs	r3, #2
 8004a24:	76fb      	strb	r3, [r7, #27]
 8004a26:	e05f      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004a28:	2304      	movs	r3, #4
 8004a2a:	76fb      	strb	r3, [r7, #27]
 8004a2c:	e05c      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004a2e:	2308      	movs	r3, #8
 8004a30:	76fb      	strb	r3, [r7, #27]
 8004a32:	e059      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004a34:	2310      	movs	r3, #16
 8004a36:	76fb      	strb	r3, [r7, #27]
 8004a38:	bf00      	nop
 8004a3a:	e055      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a47      	ldr	r2, [pc, #284]	; (8004b60 <UART_SetConfig+0x304>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d124      	bne.n	8004a90 <UART_SetConfig+0x234>
 8004a46:	4b42      	ldr	r3, [pc, #264]	; (8004b50 <UART_SetConfig+0x2f4>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a54:	d012      	beq.n	8004a7c <UART_SetConfig+0x220>
 8004a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a5a:	d802      	bhi.n	8004a62 <UART_SetConfig+0x206>
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <UART_SetConfig+0x214>
 8004a60:	e012      	b.n	8004a88 <UART_SetConfig+0x22c>
 8004a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a66:	d006      	beq.n	8004a76 <UART_SetConfig+0x21a>
 8004a68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a6c:	d009      	beq.n	8004a82 <UART_SetConfig+0x226>
 8004a6e:	e00b      	b.n	8004a88 <UART_SetConfig+0x22c>
 8004a70:	2300      	movs	r3, #0
 8004a72:	76fb      	strb	r3, [r7, #27]
 8004a74:	e038      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004a76:	2302      	movs	r3, #2
 8004a78:	76fb      	strb	r3, [r7, #27]
 8004a7a:	e035      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	76fb      	strb	r3, [r7, #27]
 8004a80:	e032      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004a82:	2308      	movs	r3, #8
 8004a84:	76fb      	strb	r3, [r7, #27]
 8004a86:	e02f      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004a88:	2310      	movs	r3, #16
 8004a8a:	76fb      	strb	r3, [r7, #27]
 8004a8c:	bf00      	nop
 8004a8e:	e02b      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a2c      	ldr	r2, [pc, #176]	; (8004b48 <UART_SetConfig+0x2ec>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d124      	bne.n	8004ae4 <UART_SetConfig+0x288>
 8004a9a:	4b2d      	ldr	r3, [pc, #180]	; (8004b50 <UART_SetConfig+0x2f4>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa8:	d012      	beq.n	8004ad0 <UART_SetConfig+0x274>
 8004aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aae:	d802      	bhi.n	8004ab6 <UART_SetConfig+0x25a>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <UART_SetConfig+0x268>
 8004ab4:	e012      	b.n	8004adc <UART_SetConfig+0x280>
 8004ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aba:	d006      	beq.n	8004aca <UART_SetConfig+0x26e>
 8004abc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ac0:	d009      	beq.n	8004ad6 <UART_SetConfig+0x27a>
 8004ac2:	e00b      	b.n	8004adc <UART_SetConfig+0x280>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	76fb      	strb	r3, [r7, #27]
 8004ac8:	e00e      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004aca:	2302      	movs	r3, #2
 8004acc:	76fb      	strb	r3, [r7, #27]
 8004ace:	e00b      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	76fb      	strb	r3, [r7, #27]
 8004ad4:	e008      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	76fb      	strb	r3, [r7, #27]
 8004ada:	e005      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004adc:	2310      	movs	r3, #16
 8004ade:	76fb      	strb	r3, [r7, #27]
 8004ae0:	bf00      	nop
 8004ae2:	e001      	b.n	8004ae8 <UART_SetConfig+0x28c>
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a16      	ldr	r2, [pc, #88]	; (8004b48 <UART_SetConfig+0x2ec>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	f040 80fa 	bne.w	8004ce8 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004af4:	7efb      	ldrb	r3, [r7, #27]
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d836      	bhi.n	8004b68 <UART_SetConfig+0x30c>
 8004afa:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <UART_SetConfig+0x2a4>)
 8004afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b00:	08004b25 	.word	0x08004b25
 8004b04:	08004b69 	.word	0x08004b69
 8004b08:	08004b2d 	.word	0x08004b2d
 8004b0c:	08004b69 	.word	0x08004b69
 8004b10:	08004b33 	.word	0x08004b33
 8004b14:	08004b69 	.word	0x08004b69
 8004b18:	08004b69 	.word	0x08004b69
 8004b1c:	08004b69 	.word	0x08004b69
 8004b20:	08004b3b 	.word	0x08004b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004b24:	f7fe fd8a 	bl	800363c <HAL_RCC_GetPCLK1Freq>
 8004b28:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b2a:	e020      	b.n	8004b6e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004b2c:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <UART_SetConfig+0x308>)
 8004b2e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b30:	e01d      	b.n	8004b6e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004b32:	f7fe fced 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 8004b36:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b38:	e019      	b.n	8004b6e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b3e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b40:	e015      	b.n	8004b6e <UART_SetConfig+0x312>
 8004b42:	bf00      	nop
 8004b44:	efff69f3 	.word	0xefff69f3
 8004b48:	40008000 	.word	0x40008000
 8004b4c:	40013800 	.word	0x40013800
 8004b50:	40021000 	.word	0x40021000
 8004b54:	40004400 	.word	0x40004400
 8004b58:	40004800 	.word	0x40004800
 8004b5c:	40004c00 	.word	0x40004c00
 8004b60:	40005000 	.word	0x40005000
 8004b64:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	74fb      	strb	r3, [r7, #19]
        break;
 8004b6c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 81ac 	beq.w	8004ece <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	4413      	add	r3, r2
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d305      	bcc.n	8004b92 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d902      	bls.n	8004b98 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	74fb      	strb	r3, [r7, #19]
 8004b96:	e19a      	b.n	8004ece <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8004b98:	7efb      	ldrb	r3, [r7, #27]
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	f200 8091 	bhi.w	8004cc2 <UART_SetConfig+0x466>
 8004ba0:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <UART_SetConfig+0x34c>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004bcd 	.word	0x08004bcd
 8004bac:	08004cc3 	.word	0x08004cc3
 8004bb0:	08004c19 	.word	0x08004c19
 8004bb4:	08004cc3 	.word	0x08004cc3
 8004bb8:	08004c4d 	.word	0x08004c4d
 8004bbc:	08004cc3 	.word	0x08004cc3
 8004bc0:	08004cc3 	.word	0x08004cc3
 8004bc4:	08004cc3 	.word	0x08004cc3
 8004bc8:	08004c99 	.word	0x08004c99
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004bcc:	f7fe fd36 	bl	800363c <HAL_RCC_GetPCLK1Freq>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	f04f 0400 	mov.w	r4, #0
 8004be0:	0214      	lsls	r4, r2, #8
 8004be2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004be6:	020b      	lsls	r3, r1, #8
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6852      	ldr	r2, [r2, #4]
 8004bec:	0852      	lsrs	r2, r2, #1
 8004bee:	4611      	mov	r1, r2
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	eb13 0b01 	adds.w	fp, r3, r1
 8004bf8:	eb44 0c02 	adc.w	ip, r4, r2
 8004bfc:	4658      	mov	r0, fp
 8004bfe:	4661      	mov	r1, ip
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f04f 0400 	mov.w	r4, #0
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4623      	mov	r3, r4
 8004c0c:	f7fb ff76 	bl	8000afc <__aeabi_uldivmod>
 8004c10:	4603      	mov	r3, r0
 8004c12:	460c      	mov	r4, r1
 8004c14:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c16:	e057      	b.n	8004cc8 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	f04f 0400 	mov.w	r4, #0
 8004c22:	49b1      	ldr	r1, [pc, #708]	; (8004ee8 <UART_SetConfig+0x68c>)
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	eb13 0b01 	adds.w	fp, r3, r1
 8004c2c:	eb44 0c02 	adc.w	ip, r4, r2
 8004c30:	4658      	mov	r0, fp
 8004c32:	4661      	mov	r1, ip
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f04f 0400 	mov.w	r4, #0
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4623      	mov	r3, r4
 8004c40:	f7fb ff5c 	bl	8000afc <__aeabi_uldivmod>
 8004c44:	4603      	mov	r3, r0
 8004c46:	460c      	mov	r4, r1
 8004c48:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c4a:	e03d      	b.n	8004cc8 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004c4c:	f7fe fc60 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 8004c50:	4603      	mov	r3, r0
 8004c52:	4619      	mov	r1, r3
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	f04f 0400 	mov.w	r4, #0
 8004c60:	0214      	lsls	r4, r2, #8
 8004c62:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004c66:	020b      	lsls	r3, r1, #8
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6852      	ldr	r2, [r2, #4]
 8004c6c:	0852      	lsrs	r2, r2, #1
 8004c6e:	4611      	mov	r1, r2
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	eb13 0b01 	adds.w	fp, r3, r1
 8004c78:	eb44 0c02 	adc.w	ip, r4, r2
 8004c7c:	4658      	mov	r0, fp
 8004c7e:	4661      	mov	r1, ip
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f04f 0400 	mov.w	r4, #0
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4623      	mov	r3, r4
 8004c8c:	f7fb ff36 	bl	8000afc <__aeabi_uldivmod>
 8004c90:	4603      	mov	r3, r0
 8004c92:	460c      	mov	r4, r1
 8004c94:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c96:	e017      	b.n	8004cc8 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	f04f 0400 	mov.w	r4, #0
 8004ca2:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004ca6:	f144 0100 	adc.w	r1, r4, #0
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f04f 0400 	mov.w	r4, #0
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	4623      	mov	r3, r4
 8004cb6:	f7fb ff21 	bl	8000afc <__aeabi_uldivmod>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004cc0:	e002      	b.n	8004cc8 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	74fb      	strb	r3, [r7, #19]
            break;
 8004cc6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cce:	d308      	bcc.n	8004ce2 <UART_SetConfig+0x486>
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd6:	d204      	bcs.n	8004ce2 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	60da      	str	r2, [r3, #12]
 8004ce0:	e0f5      	b.n	8004ece <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	74fb      	strb	r3, [r7, #19]
 8004ce6:	e0f2      	b.n	8004ece <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf0:	d17f      	bne.n	8004df2 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8004cf2:	7efb      	ldrb	r3, [r7, #27]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d85c      	bhi.n	8004db2 <UART_SetConfig+0x556>
 8004cf8:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <UART_SetConfig+0x4a4>)
 8004cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfe:	bf00      	nop
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d43 	.word	0x08004d43
 8004d08:	08004d61 	.word	0x08004d61
 8004d0c:	08004db3 	.word	0x08004db3
 8004d10:	08004d7d 	.word	0x08004d7d
 8004d14:	08004db3 	.word	0x08004db3
 8004d18:	08004db3 	.word	0x08004db3
 8004d1c:	08004db3 	.word	0x08004db3
 8004d20:	08004d9b 	.word	0x08004d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004d24:	f7fe fc8a 	bl	800363c <HAL_RCC_GetPCLK1Freq>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	005a      	lsls	r2, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	085b      	lsrs	r3, r3, #1
 8004d32:	441a      	add	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d40:	e03a      	b.n	8004db8 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004d42:	f7fe fc91 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 8004d46:	4603      	mov	r3, r0
 8004d48:	005a      	lsls	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	085b      	lsrs	r3, r3, #1
 8004d50:	441a      	add	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d5e:	e02b      	b.n	8004db8 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	085b      	lsrs	r3, r3, #1
 8004d66:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004d6a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6852      	ldr	r2, [r2, #4]
 8004d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d7a:	e01d      	b.n	8004db8 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004d7c:	f7fe fbc8 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 8004d80:	4603      	mov	r3, r0
 8004d82:	005a      	lsls	r2, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	441a      	add	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d98:	e00e      	b.n	8004db8 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	085b      	lsrs	r3, r3, #1
 8004da0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004db0:	e002      	b.n	8004db8 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	74fb      	strb	r3, [r7, #19]
        break;
 8004db6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2b0f      	cmp	r3, #15
 8004dbc:	d916      	bls.n	8004dec <UART_SetConfig+0x590>
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc4:	d212      	bcs.n	8004dec <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f023 030f 	bic.w	r3, r3, #15
 8004dce:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	085b      	lsrs	r3, r3, #1
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	897b      	ldrh	r3, [r7, #10]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	897a      	ldrh	r2, [r7, #10]
 8004de8:	60da      	str	r2, [r3, #12]
 8004dea:	e070      	b.n	8004ece <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	74fb      	strb	r3, [r7, #19]
 8004df0:	e06d      	b.n	8004ece <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8004df2:	7efb      	ldrb	r3, [r7, #27]
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d859      	bhi.n	8004eac <UART_SetConfig+0x650>
 8004df8:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0x5a4>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e41 	.word	0x08004e41
 8004e08:	08004e5d 	.word	0x08004e5d
 8004e0c:	08004ead 	.word	0x08004ead
 8004e10:	08004e79 	.word	0x08004e79
 8004e14:	08004ead 	.word	0x08004ead
 8004e18:	08004ead 	.word	0x08004ead
 8004e1c:	08004ead 	.word	0x08004ead
 8004e20:	08004e95 	.word	0x08004e95
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004e24:	f7fe fc0a 	bl	800363c <HAL_RCC_GetPCLK1Freq>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	085b      	lsrs	r3, r3, #1
 8004e30:	441a      	add	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e3e:	e038      	b.n	8004eb2 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004e40:	f7fe fc12 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 8004e44:	4602      	mov	r2, r0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	085b      	lsrs	r3, r3, #1
 8004e4c:	441a      	add	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e5a:	e02a      	b.n	8004eb2 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	085b      	lsrs	r3, r3, #1
 8004e62:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004e66:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6852      	ldr	r2, [r2, #4]
 8004e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e76:	e01c      	b.n	8004eb2 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004e78:	f7fe fb4a 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	085b      	lsrs	r3, r3, #1
 8004e84:	441a      	add	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e92:	e00e      	b.n	8004eb2 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004eaa:	e002      	b.n	8004eb2 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	74fb      	strb	r3, [r7, #19]
        break;
 8004eb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2b0f      	cmp	r3, #15
 8004eb6:	d908      	bls.n	8004eca <UART_SetConfig+0x66e>
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ebe:	d204      	bcs.n	8004eca <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	60da      	str	r2, [r3, #12]
 8004ec8:	e001      	b.n	8004ece <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004eda:	7cfb      	ldrb	r3, [r7, #19]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3720      	adds	r7, #32
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004ee6:	bf00      	nop
 8004ee8:	f4240000 	.word	0xf4240000

08004eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00a      	beq.n	8004f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00a      	beq.n	8004f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01a      	beq.n	8005002 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fea:	d10a      	bne.n	8005002 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	605a      	str	r2, [r3, #4]
  }
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af02      	add	r7, sp, #8
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800503e:	f7fb ff41 	bl	8000ec4 <HAL_GetTick>
 8005042:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b08      	cmp	r3, #8
 8005050:	d10e      	bne.n	8005070 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005052:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f82a 	bl	80050ba <UART_WaitOnFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e020      	b.n	80050b2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b04      	cmp	r3, #4
 800507c:	d10e      	bne.n	800509c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800507e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f814 	bl	80050ba <UART_WaitOnFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e00a      	b.n	80050b2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	603b      	str	r3, [r7, #0]
 80050c6:	4613      	mov	r3, r2
 80050c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ca:	e02a      	b.n	8005122 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d2:	d026      	beq.n	8005122 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d4:	f7fb fef6 	bl	8000ec4 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d302      	bcc.n	80050ea <UART_WaitOnFlagUntilTimeout+0x30>
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d11b      	bne.n	8005122 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050f8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2220      	movs	r2, #32
 800510e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2220      	movs	r2, #32
 8005114:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e00f      	b.n	8005142 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4013      	ands	r3, r2
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	429a      	cmp	r2, r3
 8005130:	bf0c      	ite	eq
 8005132:	2301      	moveq	r3, #1
 8005134:	2300      	movne	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	429a      	cmp	r2, r3
 800513e:	d0c5      	beq.n	80050cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005160:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0201 	bic.w	r2, r2, #1
 8005170:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f7ff fb4d 	bl	8004848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051cc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2220      	movs	r2, #32
 80051d2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff fb2a 	bl	8004834 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051f6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051fc:	2b22      	cmp	r3, #34	; 0x22
 80051fe:	d13a      	bne.n	8005276 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005206:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005208:	89bb      	ldrh	r3, [r7, #12]
 800520a:	b2d9      	uxtb	r1, r3
 800520c:	89fb      	ldrh	r3, [r7, #14]
 800520e:	b2da      	uxtb	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005214:	400a      	ands	r2, r1
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d123      	bne.n	800528a <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005250:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0201 	bic.w	r2, r2, #1
 8005260:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f9e0 	bl	8005634 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005274:	e009      	b.n	800528a <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	8b1b      	ldrh	r3, [r3, #24]
 800527c:	b29a      	uxth	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0208 	orr.w	r2, r2, #8
 8005286:	b292      	uxth	r2, r2
 8005288:	831a      	strh	r2, [r3, #24]
}
 800528a:	bf00      	nop
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052a0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052a6:	2b22      	cmp	r3, #34	; 0x22
 80052a8:	d13a      	bne.n	8005320 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80052b0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80052b8:	89ba      	ldrh	r2, [r7, #12]
 80052ba:	89fb      	ldrh	r3, [r7, #14]
 80052bc:	4013      	ands	r3, r2
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c8:	1c9a      	adds	r2, r3, #2
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d123      	bne.n	8005334 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052fa:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0201 	bic.w	r2, r2, #1
 800530a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f98b 	bl	8005634 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800531e:	e009      	b.n	8005334 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	8b1b      	ldrh	r3, [r3, #24]
 8005326:	b29a      	uxth	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0208 	orr.w	r2, r2, #8
 8005330:	b292      	uxth	r2, r2
 8005332:	831a      	strh	r2, [r3, #24]
}
 8005334:	bf00      	nop
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <RSTCtrl_Sigfox>:

UART_BufferData_t UART_RX;
UART_BufferData_t UART_RX3;


void RSTCtrl_Sigfox(uint8_t sValue){
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	71fb      	strb	r3, [r7, #7]
	if(sValue) HAL_GPIO_WritePin(GPIOB, Gpio2_Bus1_Wakeup_Pin, GPIO_PIN_SET);
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d005      	beq.n	800536c <RSTCtrl_Sigfox+0x1c>
 8005360:	2201      	movs	r2, #1
 8005362:	2140      	movs	r1, #64	; 0x40
 8005364:	4806      	ldr	r0, [pc, #24]	; (8005380 <RSTCtrl_Sigfox+0x30>)
 8005366:	f7fd fbab 	bl	8002ac0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOB, Gpio2_Bus1_Wakeup_Pin, GPIO_PIN_RESET);
}
 800536a:	e004      	b.n	8005376 <RSTCtrl_Sigfox+0x26>
	else HAL_GPIO_WritePin(GPIOB, Gpio2_Bus1_Wakeup_Pin, GPIO_PIN_RESET);
 800536c:	2200      	movs	r2, #0
 800536e:	2140      	movs	r1, #64	; 0x40
 8005370:	4803      	ldr	r0, [pc, #12]	; (8005380 <RSTCtrl_Sigfox+0x30>)
 8005372:	f7fd fba5 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 8005376:	bf00      	nop
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	48000400 	.word	0x48000400

08005384 <RST2Ctrl_Sigfox>:
void RST2Ctrl_Sigfox(uint8_t sValue){
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	71fb      	strb	r3, [r7, #7]
	if(sValue) HAL_GPIO_WritePin(GPIOB, Gpio3_Bus1_Rst_Pin, GPIO_PIN_SET);
 800538e:	79fb      	ldrb	r3, [r7, #7]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d006      	beq.n	80053a2 <RST2Ctrl_Sigfox+0x1e>
 8005394:	2201      	movs	r2, #1
 8005396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800539a:	4807      	ldr	r0, [pc, #28]	; (80053b8 <RST2Ctrl_Sigfox+0x34>)
 800539c:	f7fd fb90 	bl	8002ac0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOB, Gpio3_Bus1_Rst_Pin, GPIO_PIN_RESET);
}
 80053a0:	e005      	b.n	80053ae <RST2Ctrl_Sigfox+0x2a>
	else HAL_GPIO_WritePin(GPIOB, Gpio3_Bus1_Rst_Pin, GPIO_PIN_RESET);
 80053a2:	2200      	movs	r2, #0
 80053a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053a8:	4803      	ldr	r0, [pc, #12]	; (80053b8 <RST2Ctrl_Sigfox+0x34>)
 80053aa:	f7fd fb89 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	48000400 	.word	0x48000400

080053bc <PutCharWrapperUart_1>:
}



/*Transmitir uart 1 no hal*/ /*Bus 1 */
void PutCharWrapperUart_1(void *sp, const char c){
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	70fb      	strb	r3, [r7, #3]
	while((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TC) ? SET : RESET) == RESET) {}
 80053c8:	bf00      	nop
 80053ca:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <PutCharWrapperUart_1+0x34>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d1f8      	bne.n	80053ca <PutCharWrapperUart_1+0xe>
	huart2.Instance->TDR = (c & (uint8_t)0xFFU);
 80053d8:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <PutCharWrapperUart_1+0x34>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	78fa      	ldrb	r2, [r7, #3]
 80053de:	b292      	uxth	r2, r2
 80053e0:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	200005a0 	.word	0x200005a0

080053f4 <PutCharWrapperUart_2>:

void PutCharWrapperUart_2(void *sp, const char c){
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	70fb      	strb	r3, [r7, #3]
	while((__HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_TC) ? SET : RESET) == RESET) {}
 8005400:	bf00      	nop
 8005402:	4b09      	ldr	r3, [pc, #36]	; (8005428 <PutCharWrapperUart_2+0x34>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540c:	2b40      	cmp	r3, #64	; 0x40
 800540e:	d1f8      	bne.n	8005402 <PutCharWrapperUart_2+0xe>
	hlpuart1.Instance->TDR = (c & (uint8_t)0xFFU);
 8005410:	4b05      	ldr	r3, [pc, #20]	; (8005428 <PutCharWrapperUart_2+0x34>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	78fa      	ldrb	r2, [r7, #3]
 8005416:	b292      	uxth	r2, r2
 8005418:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	20000450 	.word	0x20000450

0800542c <PutStringWrapperUart_2>:


void PutStringWrapperUart_2(void *sp, const char *s){
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
	while(*s){
 8005436:	e007      	b.n	8005448 <PutStringWrapperUart_2+0x1c>
		PutCharWrapperUart_2(NULL,*s++);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	603a      	str	r2, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	4619      	mov	r1, r3
 8005442:	2000      	movs	r0, #0
 8005444:	f7ff ffd6 	bl	80053f4 <PutCharWrapperUart_2>
	while(*s){
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1f3      	bne.n	8005438 <PutStringWrapperUart_2+0xc>
	}
}
 8005450:	bf00      	nop
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <PrintStringVar>:

/*Tipo de datos*/
tipo_t xtypes;

/*Enviar por tx Debug var ************************************************/
void PrintStringVar(UART_HandleTypeDef *huart,uint8_t *Str, uint16_t  Variable){
 8005458:	b5b0      	push	{r4, r5, r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
 8005466:	466b      	mov	r3, sp
 8005468:	461d      	mov	r5, r3
	uint8_t length;
	length = strlen((const char *)(Str) );
 800546a:	68b8      	ldr	r0, [r7, #8]
 800546c:	f7fa feb0 	bl	80001d0 <strlen>
 8005470:	4603      	mov	r3, r0
 8005472:	77fb      	strb	r3, [r7, #31]
	uint8_t Buf[length];
 8005474:	7ff8      	ldrb	r0, [r7, #31]
 8005476:	4603      	mov	r3, r0
 8005478:	3b01      	subs	r3, #1
 800547a:	61bb      	str	r3, [r7, #24]
 800547c:	b2c1      	uxtb	r1, r0
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	f04f 0300 	mov.w	r3, #0
 8005486:	f04f 0400 	mov.w	r4, #0
 800548a:	00d4      	lsls	r4, r2, #3
 800548c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8005490:	00cb      	lsls	r3, r1, #3
 8005492:	b2c1      	uxtb	r1, r0
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	f04f 0400 	mov.w	r4, #0
 80054a0:	00d4      	lsls	r4, r2, #3
 80054a2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80054a6:	00cb      	lsls	r3, r1, #3
 80054a8:	4603      	mov	r3, r0
 80054aa:	3307      	adds	r3, #7
 80054ac:	08db      	lsrs	r3, r3, #3
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	ebad 0d03 	sub.w	sp, sp, r3
 80054b4:	466b      	mov	r3, sp
 80054b6:	3300      	adds	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
	memset((void *)Buf,0,sizeof(Buf));
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	4602      	mov	r2, r0
 80054be:	2100      	movs	r1, #0
 80054c0:	4618      	mov	r0, r3
 80054c2:	f003 fc25 	bl	8008d10 <memset>
	sprintf((char *)Buf,(const char *)(Str),Variable);
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	88fa      	ldrh	r2, [r7, #6]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f003 fc27 	bl	8008d20 <siprintf>
	PutStringWrapperUart_2(NULL, Buf);
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	4619      	mov	r1, r3
 80054d6:	2000      	movs	r0, #0
 80054d8:	f7ff ffa8 	bl	800542c <PutStringWrapperUart_2>
 80054dc:	46ad      	mov	sp, r5
	//HAL_UART_Transmit(huart,(uint8_t *)Buf,sizeof(Buf),USART_TIMEOUT);
}
 80054de:	bf00      	nop
 80054e0:	3720      	adds	r7, #32
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bdb0      	pop	{r4, r5, r7, pc}

080054e6 <PrintString>:
/** Enviar por tx Debug*****************************************************/
void PrintString(UART_HandleTypeDef *huart,uint8_t *pData){
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b082      	sub	sp, #8
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]
	//uint8_t length;
	//length = strlen((const char *)(pData) );
	PutStringWrapperUart_2(NULL, pData);
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	2000      	movs	r0, #0
 80054f4:	f7ff ff9a 	bl	800542c <PutStringWrapperUart_2>
	//HAL_UART_Transmit(huart,pData,length,USART_TIMEOUT);
}
 80054f8:	bf00      	nop
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <DiscrimateFrameType>:


/** Funcion que decodifica la trama entrante *******************************/
WSSFM1XRX_DL_Return_t DiscrimateFrameType(WSSFM1XRXConfig_t *obj){
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
	uint16_t tempReg;

	/* Discriminate the frame type */
	switch(obj->DL_NumericFrame[WSSFM1XRX_DL_CTRLREG] >> 4){ /* 4 most significant bits */
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800550e:	091b      	lsrs	r3, r3, #4
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b05      	cmp	r3, #5
 8005514:	d000      	beq.n	8005518 <DiscrimateFrameType+0x18>
		}

		break;

	default:
		break;
 8005516:	e01a      	b.n	800554e <DiscrimateFrameType+0x4e>
		tempReg = (obj->DL_NumericFrame[WSSFM1XRX_DL_TREP] << 8) | obj->DL_NumericFrame[WSSFM1XRX_DL_TREP + 1]; 	/* junto los 2 bytes en 1*/
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800551e:	021b      	lsls	r3, r3, #8
 8005520:	b21a      	sxth	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005528:	b21b      	sxth	r3, r3
 800552a:	4313      	orrs	r3, r2
 800552c:	b21b      	sxth	r3, r3
 800552e:	81fb      	strh	r3, [r7, #14]
		if(tempReg >= WSSFM1XRX_DL_MIN_REPORT_TIME){
 8005530:	89fb      	ldrh	r3, [r7, #14]
 8005532:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8005536:	d909      	bls.n	800554c <DiscrimateFrameType+0x4c>
			if(tempReg != obj->UL_ReportTimeS){ /*Si el dato es diferente*/
 8005538:	89fa      	ldrh	r2, [r7, #14]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	429a      	cmp	r2, r3
 8005540:	d002      	beq.n	8005548 <DiscrimateFrameType+0x48>
				obj->UL_ReportTimeS = tempReg;
 8005542:	89fa      	ldrh	r2, [r7, #14]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	621a      	str	r2, [r3, #32]
			return WSSFM1XRX_DL_TIME_OK;
 8005548:	2304      	movs	r3, #4
 800554a:	e001      	b.n	8005550 <DiscrimateFrameType+0x50>
		break;
 800554c:	bf00      	nop
	}/* End switch */

	return WSSFM1XRX_DL_SUCCESS;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <get_system_reset_cause>:
}

GPIO_PinState LedColor(char color, GPIO_PinState state){}
/*======================================================================================================================*/
/*Obtener las fuentes de interrupci�n*/
void get_system_reset_cause(void){
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af02      	add	r7, sp, #8
	__HAL_RCC_PWR_CLK_ENABLE(); /*para detectar sorce*/
 8005562:	4b2e      	ldr	r3, [pc, #184]	; (800561c <get_system_reset_cause+0xc0>)
 8005564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005566:	4a2d      	ldr	r2, [pc, #180]	; (800561c <get_system_reset_cause+0xc0>)
 8005568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800556c:	6593      	str	r3, [r2, #88]	; 0x58
 800556e:	4b2b      	ldr	r3, [pc, #172]	; (800561c <get_system_reset_cause+0xc0>)
 8005570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005576:	607b      	str	r3, [r7, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
//	if(PWR-> CSR  & PWR_FLAG_WU ){
//		qDebugMessage("Wake up Transmision Pin\r\n");
//		PWR-> CR |=  PWR_CR_CWUF;
//		DataFrame.periodic = 1;
//	}else
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)){
 800557a:	4b28      	ldr	r3, [pc, #160]	; (800561c <get_system_reset_cause+0xc0>)
 800557c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d017      	beq.n	80055b8 <get_system_reset_cause+0x5c>
		/*Reset por software*/
		__HAL_RCC_CLEAR_RESET_FLAGS();
 8005588:	4b24      	ldr	r3, [pc, #144]	; (800561c <get_system_reset_cause+0xc0>)
 800558a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800558e:	4a23      	ldr	r2, [pc, #140]	; (800561c <get_system_reset_cause+0xc0>)
 8005590:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005594:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		DataFrame.periodic = 0;
 8005598:	4a21      	ldr	r2, [pc, #132]	; (8005620 <get_system_reset_cause+0xc4>)
 800559a:	7993      	ldrb	r3, [r2, #6]
 800559c:	f36f 1345 	bfc	r3, #5, #1
 80055a0:	7193      	strb	r3, [r2, #6]
		qDebugMessage("SOFTWARE_RESET\r\n");
 80055a2:	2300      	movs	r3, #0
 80055a4:	9301      	str	r3, [sp, #4]
 80055a6:	2300      	movs	r3, #0
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	4b1e      	ldr	r3, [pc, #120]	; (8005624 <get_system_reset_cause+0xc8>)
 80055ac:	4a1e      	ldr	r2, [pc, #120]	; (8005628 <get_system_reset_cause+0xcc>)
 80055ae:	2100      	movs	r1, #0
 80055b0:	481d      	ldr	r0, [pc, #116]	; (8005628 <get_system_reset_cause+0xcc>)
 80055b2:	f002 f875 	bl	80076a0 <__qtrace_func>
		DataFrame.periodic = 1;
		qDebugMessage("Wake up Transmision Time\r\n");

	}

}
 80055b6:	e02d      	b.n	8005614 <get_system_reset_cause+0xb8>
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)){
 80055b8:	4b18      	ldr	r3, [pc, #96]	; (800561c <get_system_reset_cause+0xc0>)
 80055ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d017      	beq.n	80055f6 <get_system_reset_cause+0x9a>
		qDebugMessage("POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)\r\n");
 80055c6:	2300      	movs	r3, #0
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	2300      	movs	r3, #0
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	4b17      	ldr	r3, [pc, #92]	; (800562c <get_system_reset_cause+0xd0>)
 80055d0:	4a15      	ldr	r2, [pc, #84]	; (8005628 <get_system_reset_cause+0xcc>)
 80055d2:	2100      	movs	r1, #0
 80055d4:	4814      	ldr	r0, [pc, #80]	; (8005628 <get_system_reset_cause+0xcc>)
 80055d6:	f002 f863 	bl	80076a0 <__qtrace_func>
		DataFrame.periodic = 0;
 80055da:	4a11      	ldr	r2, [pc, #68]	; (8005620 <get_system_reset_cause+0xc4>)
 80055dc:	7993      	ldrb	r3, [r2, #6]
 80055de:	f36f 1345 	bfc	r3, #5, #1
 80055e2:	7193      	strb	r3, [r2, #6]
		__HAL_RCC_CLEAR_RESET_FLAGS();
 80055e4:	4b0d      	ldr	r3, [pc, #52]	; (800561c <get_system_reset_cause+0xc0>)
 80055e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ea:	4a0c      	ldr	r2, [pc, #48]	; (800561c <get_system_reset_cause+0xc0>)
 80055ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80055f4:	e00e      	b.n	8005614 <get_system_reset_cause+0xb8>
		DataFrame.periodic = 1;
 80055f6:	4a0a      	ldr	r2, [pc, #40]	; (8005620 <get_system_reset_cause+0xc4>)
 80055f8:	7993      	ldrb	r3, [r2, #6]
 80055fa:	f043 0320 	orr.w	r3, r3, #32
 80055fe:	7193      	strb	r3, [r2, #6]
		qDebugMessage("Wake up Transmision Time\r\n");
 8005600:	2300      	movs	r3, #0
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	2300      	movs	r3, #0
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	4b09      	ldr	r3, [pc, #36]	; (8005630 <get_system_reset_cause+0xd4>)
 800560a:	4a07      	ldr	r2, [pc, #28]	; (8005628 <get_system_reset_cause+0xcc>)
 800560c:	2100      	movs	r1, #0
 800560e:	4806      	ldr	r0, [pc, #24]	; (8005628 <get_system_reset_cause+0xcc>)
 8005610:	f002 f846 	bl	80076a0 <__qtrace_func>
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40021000 	.word	0x40021000
 8005620:	20000590 	.word	0x20000590
 8005624:	080096cc 	.word	0x080096cc
 8005628:	080096e0 	.word	0x080096e0
 800562c:	080096e4 	.word	0x080096e4
 8005630:	08009714 	.word	0x08009714

08005634 <HAL_UART_RxCpltCallback>:
/*
===================================================================================
		 	 ### Funcion recibe por interrupcion de recepcion
===================================================================================
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]

	//sigfoxISRRX(&SigfoxModule, UART_RX.Data);
	//qResponseISRHandler(&ResponseObject,rxbyte);

	if(huart->Instance == USART2){
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a24      	ldr	r2, [pc, #144]	; (80056d4 <HAL_UART_RxCpltCallback+0xa0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d10c      	bne.n	8005660 <HAL_UART_RxCpltCallback+0x2c>
		WSSFM1XRX_ISRRX(&SigfoxModule,UART_RX.Data);  // queda almacenado en  UART_RX.Data;
 8005646:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <HAL_UART_RxCpltCallback+0xa4>)
 8005648:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800564c:	b2db      	uxtb	r3, r3
 800564e:	4619      	mov	r1, r3
 8005650:	4822      	ldr	r0, [pc, #136]	; (80056dc <HAL_UART_RxCpltCallback+0xa8>)
 8005652:	f000 fbdf 	bl	8005e14 <WSSFM1XRX_ISRRX>
		HAL_UART_Receive_IT( &huart2,(uint8_t *)&UART_RX.Data,USART_RX_AMOUNT_BYTES);
 8005656:	2201      	movs	r2, #1
 8005658:	4921      	ldr	r1, [pc, #132]	; (80056e0 <HAL_UART_RxCpltCallback+0xac>)
 800565a:	4822      	ldr	r0, [pc, #136]	; (80056e4 <HAL_UART_RxCpltCallback+0xb0>)
 800565c:	f7fe ff18 	bl	8004490 <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART3){
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a20      	ldr	r2, [pc, #128]	; (80056e8 <HAL_UART_RxCpltCallback+0xb4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d12f      	bne.n	80056ca <HAL_UART_RxCpltCallback+0x96>
		qResponseISRHandler(&ResponseObject,UART_RX3.Data);
 800566a:	4b20      	ldr	r3, [pc, #128]	; (80056ec <HAL_UART_RxCpltCallback+0xb8>)
 800566c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005670:	b2db      	uxtb	r3, r3
 8005672:	4619      	mov	r1, r3
 8005674:	481e      	ldr	r0, [pc, #120]	; (80056f0 <HAL_UART_RxCpltCallback+0xbc>)
 8005676:	f001 ffde 	bl	8007636 <qResponseISRHandler>
		if(UART_RX3.Index < sizeof(UART_RX3.Buffer)-1){
 800567a:	4b1c      	ldr	r3, [pc, #112]	; (80056ec <HAL_UART_RxCpltCallback+0xb8>)
 800567c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b26      	cmp	r3, #38	; 0x26
 8005684:	d818      	bhi.n	80056b8 <HAL_UART_RxCpltCallback+0x84>
			UART_RX3.Buffer[UART_RX3.Index++] = UART_RX3.Data;
 8005686:	4b19      	ldr	r3, [pc, #100]	; (80056ec <HAL_UART_RxCpltCallback+0xb8>)
 8005688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800568c:	b2db      	uxtb	r3, r3
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	b2d1      	uxtb	r1, r2
 8005692:	4a16      	ldr	r2, [pc, #88]	; (80056ec <HAL_UART_RxCpltCallback+0xb8>)
 8005694:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
 8005698:	461a      	mov	r2, r3
 800569a:	4b14      	ldr	r3, [pc, #80]	; (80056ec <HAL_UART_RxCpltCallback+0xb8>)
 800569c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80056a0:	b2d9      	uxtb	r1, r3
 80056a2:	4b12      	ldr	r3, [pc, #72]	; (80056ec <HAL_UART_RxCpltCallback+0xb8>)
 80056a4:	5499      	strb	r1, [r3, r2]
			UART_RX3.Buffer[UART_RX3.Index] = '\0';
 80056a6:	4b11      	ldr	r3, [pc, #68]	; (80056ec <HAL_UART_RxCpltCallback+0xb8>)
 80056a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	4b0e      	ldr	r3, [pc, #56]	; (80056ec <HAL_UART_RxCpltCallback+0xb8>)
 80056b2:	2100      	movs	r1, #0
 80056b4:	5499      	strb	r1, [r3, r2]
 80056b6:	e003      	b.n	80056c0 <HAL_UART_RxCpltCallback+0x8c>
		}else UART_RX3.Index = 0;
 80056b8:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <HAL_UART_RxCpltCallback+0xb8>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		HAL_UART_Receive_IT(&huart3,(uint8_t *)&UART_RX3.Data,USART_RX_AMOUNT_BYTES);
 80056c0:	2201      	movs	r2, #1
 80056c2:	490c      	ldr	r1, [pc, #48]	; (80056f4 <HAL_UART_RxCpltCallback+0xc0>)
 80056c4:	480c      	ldr	r0, [pc, #48]	; (80056f8 <HAL_UART_RxCpltCallback+0xc4>)
 80056c6:	f7fe fee3 	bl	8004490 <HAL_UART_Receive_IT>
	}
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	40004400 	.word	0x40004400
 80056d8:	20000620 	.word	0x20000620
 80056dc:	2000064c 	.word	0x2000064c
 80056e0:	20000649 	.word	0x20000649
 80056e4:	200005a0 	.word	0x200005a0
 80056e8:	40004800 	.word	0x40004800
 80056ec:	2000030c 	.word	0x2000030c
 80056f0:	20000338 	.word	0x20000338
 80056f4:	20000335 	.word	0x20000335
 80056f8:	20000350 	.word	0x20000350

080056fc <ProjectInformation>:

void ProjectInformation(void) {
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0

	PutStringWrapperUart_2(NULL,"\r\n=========================================\r\n");
 8005700:	490e      	ldr	r1, [pc, #56]	; (800573c <ProjectInformation+0x40>)
 8005702:	2000      	movs	r0, #0
 8005704:	f7ff fe92 	bl	800542c <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, APP_STRING);
 8005708:	490d      	ldr	r1, [pc, #52]	; (8005740 <ProjectInformation+0x44>)
 800570a:	2000      	movs	r0, #0
 800570c:	f7ff fe8e 	bl	800542c <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, INF_STRING);
 8005710:	490c      	ldr	r1, [pc, #48]	; (8005744 <ProjectInformation+0x48>)
 8005712:	2000      	movs	r0, #0
 8005714:	f7ff fe8a 	bl	800542c <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, REV_STRING);
 8005718:	490b      	ldr	r1, [pc, #44]	; (8005748 <ProjectInformation+0x4c>)
 800571a:	2000      	movs	r0, #0
 800571c:	f7ff fe86 	bl	800542c <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, AUT_STRING);
 8005720:	490a      	ldr	r1, [pc, #40]	; (800574c <ProjectInformation+0x50>)
 8005722:	2000      	movs	r0, #0
 8005724:	f7ff fe82 	bl	800542c <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, URL_STRING);
 8005728:	4909      	ldr	r1, [pc, #36]	; (8005750 <ProjectInformation+0x54>)
 800572a:	2000      	movs	r0, #0
 800572c:	f7ff fe7e 	bl	800542c <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL,"=========================================\r\n\r\n");
 8005730:	4908      	ldr	r1, [pc, #32]	; (8005754 <ProjectInformation+0x58>)
 8005732:	2000      	movs	r0, #0
 8005734:	f7ff fe7a 	bl	800542c <PutStringWrapperUart_2>
}
 8005738:	bf00      	nop
 800573a:	bd80      	pop	{r7, pc}
 800573c:	08009730 	.word	0x08009730
 8005740:	08009760 	.word	0x08009760
 8005744:	08009798 	.word	0x08009798
 8005748:	080097bc 	.word	0x080097bc
 800574c:	080097cc 	.word	0x080097cc
 8005750:	080097f0 	.word	0x080097f0
 8005754:	08009814 	.word	0x08009814

08005758 <App_ADCReadSingleChanne>:

uint32_t App_ADCReadSingleChanne(ADC_HandleTypeDef* hadc, uint32_t Channel){
 8005758:	b580      	push	{r7, lr}
 800575a:	b08a      	sub	sp, #40	; 0x28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
	uint32_t value = 0ul;
 8005762:	2300      	movs	r3, #0
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
	ADC_ChannelConfTypeDef sConfig = {0};
 8005766:	f107 030c 	add.w	r3, r7, #12
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	605a      	str	r2, [r3, #4]
 8005770:	609a      	str	r2, [r3, #8]
 8005772:	60da      	str	r2, [r3, #12]
 8005774:	611a      	str	r2, [r3, #16]
 8005776:	615a      	str	r2, [r3, #20]
	sConfig.Channel = Channel << 26U;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	069b      	lsls	r3, r3, #26
 800577c:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800577e:	2306      	movs	r3, #6
 8005780:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8005782:	2307      	movs	r3, #7
 8005784:	617b      	str	r3, [r7, #20]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005786:	237f      	movs	r3, #127	; 0x7f
 8005788:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800578a:	2304      	movs	r3, #4
 800578c:	61fb      	str	r3, [r7, #28]
	sConfig.Offset = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	623b      	str	r3, [r7, #32]

	HAL_ADC_ConfigChannel(hadc, &sConfig);
 8005792:	f107 030c 	add.w	r3, r7, #12
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7fc f8e3 	bl	8001964 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(hadc);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fb ff14 	bl	80015cc <HAL_ADC_Start>
	while( HAL_ADC_PollForConversion(hadc, 0) == HAL_OK ){}
 80057a4:	bf00      	nop
 80057a6:	2100      	movs	r1, #0
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7fb fffd 	bl	80017a8 <HAL_ADC_PollForConversion>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f8      	beq.n	80057a6 <App_ADCReadSingleChanne+0x4e>
	value = HAL_ADC_GetValue(hadc);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7fc f8c7 	bl	8001948 <HAL_ADC_GetValue>
 80057ba:	6278      	str	r0, [r7, #36]	; 0x24
	HAL_ADC_Stop(hadc);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7fb ffbf 	bl	8001740 <HAL_ADC_Stop>
	return value;
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3728      	adds	r7, #40	; 0x28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <WSSFM1XRX_Init>:
 * @note Example :
 * 		SigfoxModule.StatusFlag = WSSFM1XRX_Init(&SigfoxModule, RSTCtrl_Sigfox, RST2Ctrl_Sigfox, UART_SIGFOX_TX_STM, UART_SIGFOX_RX_STM ,WSSFM1XRX_UL_RCZ4,NULL,GetTick_ms);
 * @param obj Structure containing all data from the Sigfox module.
 * @return Operation result in the form WSSFM1XRX_Return_t.
 */
WSSFM1XRX_Return_t WSSFM1XRX_Init(WSSFM1XRXConfig_t *obj, DigitalFcn_t Reset, DigitalFcn_t Reset2, TxFnc_t Tx_Wssfm1xrx,WSSFM1XRX_FreqUL_t Frequency_Tx, WSSFM1XRX_Callback_t DownlinkCallback ,TickReadFcn_t TickRead,char* Input , uint8_t SizeInput, uint8_t MaxNumberRetries){
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	603b      	str	r3, [r7, #0]
	obj->RST=Reset;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	601a      	str	r2, [r3, #0]
	obj->RST2=Reset2;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	605a      	str	r2, [r3, #4]
	obj->TX_WSSFM1XRX=Tx_Wssfm1xrx;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	609a      	str	r2, [r3, #8]
	obj->CallbackDownlink = DownlinkCallback;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	611a      	str	r2, [r3, #16]
	obj->TICK_READ = TickRead;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a3a      	ldr	r2, [r7, #32]
 80057f6:	60da      	str	r2, [r3, #12]
	obj->RxReady=SF_FALSE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	765a      	strb	r2, [r3, #25]
	obj->RxIndex=0;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	769a      	strb	r2, [r3, #26]
	obj->Frequency=Frequency_Tx;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	7e3a      	ldrb	r2, [r7, #24]
 8005808:	771a      	strb	r2, [r3, #28]
	obj->RxFrame = Input; 
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580e:	615a      	str	r2, [r3, #20]
	obj->SizeBuffRx = SizeInput;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005816:	761a      	strb	r2, [r3, #24]
	obj->State_Api = WSSFM1XRX_IDLE; /**/
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	obj->State_W = WSSFM1XRX_W_IDLE; /*State Idle function Wait non blocking*/
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	memset( (void *) obj->RxFrame,0,obj->SizeBuffRx);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6958      	ldr	r0, [r3, #20]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	7e1b      	ldrb	r3, [r3, #24]
 8005830:	461a      	mov	r2, r3
 8005832:	2100      	movs	r1, #0
 8005834:	f003 fa6c 	bl	8008d10 <memset>
	obj->MaxNumberRetries = MaxNumberRetries;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800583e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	return WSSFM1XRX_INIT_OK;
 8005842:	2305      	movs	r3, #5
}
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <WSSFM1XRX_Wait_NonBlock>:
 * @param time in mili second.
 * @return Operation result in the form WSSFM1XRX_Return_t:
 * 			<< WSSFM1XRX_TIMEOUT >> if the time has expired
 * 			<< WSSFM1XRX_WAITING >> if the time has not expired
 */
WSSFM1XRX_Return_t WSSFM1XRX_Wait_NonBlock(WSSFM1XRXConfig_t *obj, uint32_t msec){
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
	static uint8_t RetValue;
	static uint32_t WSSFM1XRX_StartTick = 0;
	if(obj->State_W == WSSFM1XRX_W_IDLE ){
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800585c:	2b02      	cmp	r3, #2
 800585e:	d10f      	bne.n	8005880 <WSSFM1XRX_Wait_NonBlock+0x34>
		RetValue = WSSFM1XRX_WAITING ;
 8005860:	4b17      	ldr	r3, [pc, #92]	; (80058c0 <WSSFM1XRX_Wait_NonBlock+0x74>)
 8005862:	2201      	movs	r2, #1
 8005864:	701a      	strb	r2, [r3, #0]
		WSSFM1XRX_StartTick = 0;
 8005866:	4b17      	ldr	r3, [pc, #92]	; (80058c4 <WSSFM1XRX_Wait_NonBlock+0x78>)
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]
		WSSFM1XRX_StartTick = obj->TICK_READ() ;/*tickRead_ms();*/
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	4798      	blx	r3
 8005872:	4602      	mov	r2, r0
 8005874:	4b13      	ldr	r3, [pc, #76]	; (80058c4 <WSSFM1XRX_Wait_NonBlock+0x78>)
 8005876:	601a      	str	r2, [r3, #0]
		obj->State_W = WSSFM1XRX_W_RUNNING ;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2203      	movs	r2, #3
 800587c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
	if( ( obj->TICK_READ() - WSSFM1XRX_StartTick) > msec ){ 
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	4798      	blx	r3
 8005886:	4602      	mov	r2, r0
 8005888:	4b0e      	ldr	r3, [pc, #56]	; (80058c4 <WSSFM1XRX_Wait_NonBlock+0x78>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d20b      	bcs.n	80058ac <WSSFM1XRX_Wait_NonBlock+0x60>
		obj->State_W = WSSFM1XRX_W_IDLE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		obj->State_Api = WSSFM1XRX_IDLE; /*Cuando vence el tiempo mando el comando de nuevo*/
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		RetValue = WSSFM1XRX_TIMEOUT ;
 80058a4:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <WSSFM1XRX_Wait_NonBlock+0x74>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	e002      	b.n	80058b2 <WSSFM1XRX_Wait_NonBlock+0x66>
	}else RetValue = WSSFM1XRX_WAITING;
 80058ac:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <WSSFM1XRX_Wait_NonBlock+0x74>)
 80058ae:	2201      	movs	r2, #1
 80058b0:	701a      	strb	r2, [r3, #0]
	return RetValue;
 80058b2:	4b03      	ldr	r3, [pc, #12]	; (80058c0 <WSSFM1XRX_Wait_NonBlock+0x74>)
 80058b4:	781b      	ldrb	r3, [r3, #0]

}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	2000024f 	.word	0x2000024f
 80058c4:	20000250 	.word	0x20000250

080058c8 <WSSFM1XRX_Wait_Block>:
 * @param obj Structure containing all data from the Wisol module.	
 * @param time in mili second.
 * @return Operation result in the form WSSFM1XRX_Return_t:
 * 			<< WSSFM1XRX_TIMEOUT >> if the time has expired
 */
WSSFM1XRX_Return_t WSSFM1XRX_Wait_Block(WSSFM1XRXConfig_t *obj, uint32_t msec){
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
	while( WSSFM1XRX_WAITING == WSSFM1XRX_Wait_NonBlock(obj, msec) ){
 80058d2:	bf00      	nop
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7ff ffb8 	bl	800584c <WSSFM1XRX_Wait_NonBlock>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d0f8      	beq.n	80058d4 <WSSFM1XRX_Wait_Block+0xc>
	}
	return WSSFM1XRX_TIMEOUT ;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <WSSFM1XRX_Sleep>:
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return WSSFM1XRX_Return_t.
 * 			<< WSSFM1XRX_OK_RESPONSE >> If response expected is the correct
 * 			<< WSSFM1XRX_RSP_NOMATCH >> If response expected is not correct
 */
WSSFM1XRX_Return_t WSSFM1XRX_Sleep(WSSFM1XRXConfig_t *obj ,WSSFM1XRX_WaitMode_t Wait ){
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
	obj->RST(1);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2001      	movs	r0, #1
 80058fc:	4798      	blx	r3
	obj->RST2(1);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2001      	movs	r0, #1
 8005904:	4798      	blx	r3
	return WSSFM1XRX_SendRawMessage(obj,"AT$P=2\r","OK",NULL,Wait,WSSFM1XRX_SLEEP_TIME_DELAY_RESP); 
 8005906:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800590a:	9301      	str	r3, [sp, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	2300      	movs	r3, #0
 8005912:	4a05      	ldr	r2, [pc, #20]	; (8005928 <WSSFM1XRX_Sleep+0x3c>)
 8005914:	4905      	ldr	r1, [pc, #20]	; (800592c <WSSFM1XRX_Sleep+0x40>)
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fa24 	bl	8005d64 <WSSFM1XRX_SendRawMessage>
 800591c:	4603      	mov	r3, r0

}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	080098bc 	.word	0x080098bc
 800592c:	080098c0 	.word	0x080098c0

08005930 <WSSFM1XRX_WakeUP>:
 * 		WSSFM1XRX_WakeUP(&SigfoxModule,Wait);
 * @param obj Structure containing all data from the Wisol module.
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return void.
 */
WSSFM1XRX_Return_t WSSFM1XRX_WakeUP(WSSFM1XRXConfig_t *obj ,WSSFM1XRX_WaitMode_t Wait  ) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
	static WSSFM1XRX_Return_t RetValue = WSSFM1XRX_NONE, RetValueAux = WSSFM1XRX_NONE;  
	if( WSSFM1XRX_NONE ==  RetValueAux ) {
 800593a:	4b14      	ldr	r3, [pc, #80]	; (800598c <WSSFM1XRX_WakeUP+0x5c>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b04      	cmp	r3, #4
 8005940:	d106      	bne.n	8005950 <WSSFM1XRX_WakeUP+0x20>
		obj->RST(SF_FALSE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2000      	movs	r0, #0
 8005948:	4798      	blx	r3
		RetValueAux = WSSFM1XRX_WAITING;
 800594a:	4b10      	ldr	r3, [pc, #64]	; (800598c <WSSFM1XRX_WakeUP+0x5c>)
 800594c:	2201      	movs	r2, #1
 800594e:	701a      	strb	r2, [r3, #0]
	}
	RetValue =  Wait(obj,WSSFM1XRX_WAKEUP_TIME_DELAY_PULSE); /*Return WAITING or TIMEOUT*/
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2164      	movs	r1, #100	; 0x64
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	4798      	blx	r3
 8005958:	4603      	mov	r3, r0
 800595a:	461a      	mov	r2, r3
 800595c:	4b0c      	ldr	r3, [pc, #48]	; (8005990 <WSSFM1XRX_WakeUP+0x60>)
 800595e:	701a      	strb	r2, [r3, #0]

	if(WSSFM1XRX_TIMEOUT == RetValue) {
 8005960:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <WSSFM1XRX_WakeUP+0x60>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10a      	bne.n	800597e <WSSFM1XRX_WakeUP+0x4e>
		obj->RST(SF_TRUE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2001      	movs	r0, #1
 800596e:	4798      	blx	r3
		obj->RST2(SF_TRUE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2001      	movs	r0, #1
 8005976:	4798      	blx	r3
		RetValueAux = WSSFM1XRX_NONE;
 8005978:	4b04      	ldr	r3, [pc, #16]	; (800598c <WSSFM1XRX_WakeUP+0x5c>)
 800597a:	2204      	movs	r2, #4
 800597c:	701a      	strb	r2, [r3, #0]
	}
	/*Wait after exit low-power mode*/
	return  RetValue;
 800597e:	4b04      	ldr	r3, [pc, #16]	; (8005990 <WSSFM1XRX_WakeUP+0x60>)
 8005980:	781b      	ldrb	r3, [r3, #0]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000020 	.word	0x20000020
 8005990:	20000021 	.word	0x20000021

08005994 <WSSFM1XRX_ResetModule>:
 * 		WSSFM1XRX_ResetModule(&SigfoxModule,Wait);
 * @param obj Structure containing all data from the Wisol module.
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return void.
 */
WSSFM1XRX_Return_t WSSFM1XRX_ResetModule(WSSFM1XRXConfig_t *obj ,WSSFM1XRX_WaitMode_t Wait  ){
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]

	static WSSFM1XRX_Return_t RetValue = WSSFM1XRX_NONE, RetValueAux = WSSFM1XRX_NONE;
	if( WSSFM1XRX_NONE ==  RetValueAux ) {
 800599e:	4b16      	ldr	r3, [pc, #88]	; (80059f8 <WSSFM1XRX_ResetModule+0x64>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d109      	bne.n	80059ba <WSSFM1XRX_ResetModule+0x26>
		WSSFM1XRX_ResetObject(obj);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fabb 	bl	8005f22 <WSSFM1XRX_ResetObject>
 		obj->RST2(SF_FALSE);  /*Reset*/
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2000      	movs	r0, #0
 80059b2:	4798      	blx	r3
		RetValueAux = WSSFM1XRX_WAITING;
 80059b4:	4b10      	ldr	r3, [pc, #64]	; (80059f8 <WSSFM1XRX_ResetModule+0x64>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	701a      	strb	r2, [r3, #0]
	}
	RetValue =  Wait(obj,WSSFM1XRX_SLEEP_TIME_RESET); /*Return WAITING or TIMEOUT*/
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	4798      	blx	r3
 80059c4:	4603      	mov	r3, r0
 80059c6:	461a      	mov	r2, r3
 80059c8:	4b0c      	ldr	r3, [pc, #48]	; (80059fc <WSSFM1XRX_ResetModule+0x68>)
 80059ca:	701a      	strb	r2, [r3, #0]

	if(WSSFM1XRX_TIMEOUT == RetValue) {
 80059cc:	4b0b      	ldr	r3, [pc, #44]	; (80059fc <WSSFM1XRX_ResetModule+0x68>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <WSSFM1XRX_ResetModule+0x56>
		obj->RST(SF_TRUE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2001      	movs	r0, #1
 80059da:	4798      	blx	r3
		obj->RST2(SF_TRUE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2001      	movs	r0, #1
 80059e2:	4798      	blx	r3
		RetValueAux = WSSFM1XRX_NONE;
 80059e4:	4b04      	ldr	r3, [pc, #16]	; (80059f8 <WSSFM1XRX_ResetModule+0x64>)
 80059e6:	2204      	movs	r2, #4
 80059e8:	701a      	strb	r2, [r3, #0]
	}
	/*Wait despues de salir del modo de bajo consumo*/
	return  RetValue;
 80059ea:	4b04      	ldr	r3, [pc, #16]	; (80059fc <WSSFM1XRX_ResetModule+0x68>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000022 	.word	0x20000022
 80059fc:	20000023 	.word	0x20000023

08005a00 <WSSFM1XRX_CheckModule>:
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return WSSFM1XRX_Return_t.
 * 			<< WSSFM1XRX_OK_RESPONSE >> If response expected is the correct
 * 			<< WSSFM1XRX_RSP_NOMATCH >> If response expected is not correct
 */
WSSFM1XRX_Return_t WSSFM1XRX_CheckModule(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait ){
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
	return WSSFM1XRX_SendRawMessage(obj,"AT\r","OK",NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP); 
 8005a0a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	2300      	movs	r3, #0
 8005a16:	4a05      	ldr	r2, [pc, #20]	; (8005a2c <WSSFM1XRX_CheckModule+0x2c>)
 8005a18:	4905      	ldr	r1, [pc, #20]	; (8005a30 <WSSFM1XRX_CheckModule+0x30>)
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f9a2 	bl	8005d64 <WSSFM1XRX_SendRawMessage>
 8005a20:	4603      	mov	r3, r0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	080098bc 	.word	0x080098bc
 8005a30:	080098c8 	.word	0x080098c8

08005a34 <WSSFM1XRX_GetID>:
 * @return WSSFM1XRX_Return_t
 * 			WSSFM1XRX_OK_RESPONSE
 * 			WSSFM1XRX_FAILURE
 * 			WSSFM1XRX_WAITING
 */
WSSFM1XRX_Return_t WSSFM1XRX_GetID(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait,char *IDStr){
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
	return 	WSSFM1XRX_GetRespNoexpected(obj,Wait,"AT$I=10\r",IDStr);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a05      	ldr	r2, [pc, #20]	; (8005a58 <WSSFM1XRX_GetID+0x24>)
 8005a44:	68b9      	ldr	r1, [r7, #8]
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f000 fb11 	bl	800606e <WSSFM1XRX_GetRespNoexpected>
 8005a4c:	4603      	mov	r3, r0

	/*return NULL;*/
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	080098cc 	.word	0x080098cc

08005a5c <WSSFM1XRX_GetPAC>:
 * @return WSSFM1XRX_Return_t
 * 			WSSFM1XRX_OK_RESPONSE
 * 			WSSFM1XRX_FAILURE
 * 			WSSFM1XRX_WAITING
 */
WSSFM1XRX_Return_t WSSFM1XRX_GetPAC(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait,char *PACStr ){
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
	return 	WSSFM1XRX_GetRespNoexpected(obj,Wait,"AT$I=11\r",PACStr);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a05      	ldr	r2, [pc, #20]	; (8005a80 <WSSFM1XRX_GetPAC+0x24>)
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 fafd 	bl	800606e <WSSFM1XRX_GetRespNoexpected>
 8005a74:	4603      	mov	r3, r0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	080098d8 	.word	0x080098d8

08005a84 <WSSFM1XRX_GetVoltage>:
 * @return WSSFM1XRX_Return_t
 * 			WSSFM1XRX_OK_RESPONSE
 * 			WSSFM1XRX_FAILURE
 * 			WSSFM1XRX_WAITING
 */
WSSFM1XRX_Return_t WSSFM1XRX_GetVoltage(WSSFM1XRXConfig_t *obj, WSSFM1XRX_WaitMode_t Wait,uint16_t *mVolt ){
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
	char mVolStr[10]; /*Stored stringmV*/
	char *ptr = NULL;
 8005a90:	2300      	movs	r3, #0
 8005a92:	613b      	str	r3, [r7, #16]
	WSSFM1XRX_Return_t RetValue;

	RetValue =	WSSFM1XRX_GetRespNoexpected(obj,Wait,"AT$V?\r",mVolStr);
 8005a94:	f107 0314 	add.w	r3, r7, #20
 8005a98:	4a0b      	ldr	r2, [pc, #44]	; (8005ac8 <WSSFM1XRX_GetVoltage+0x44>)
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fae6 	bl	800606e <WSSFM1XRX_GetRespNoexpected>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	77fb      	strb	r3, [r7, #31]
	*mVolt = strtol((const char*)mVolStr , &ptr ,BASE_DECIMAL);
 8005aa6:	f107 0110 	add.w	r1, r7, #16
 8005aaa:	f107 0314 	add.w	r3, r7, #20
 8005aae:	220a      	movs	r2, #10
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f003 f9ff 	bl	8008eb4 <strtol>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	801a      	strh	r2, [r3, #0]
	return RetValue;
 8005abe:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3720      	adds	r7, #32
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	080098e4 	.word	0x080098e4

08005acc <WSSFM1XRX_AskChannels>:
 * 		WSSFM1XRX_AskChannels(&SigfoxModule);
 * @param obj Structure containing all data from the Sigfox module.
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return Pointer to reception buffer
 */
WSSFM1XRX_Return_t WSSFM1XRX_AskChannels(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait,Channels_t *Channels ){
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
	WSSFM1XRX_Return_t RetVal ;
	char* rspPtr;
	RetVal = WSSFM1XRX_SendRawMessage(obj,"AT$GI?\r",NULL,NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP);
 8005ad8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005adc:	9301      	str	r3, [sp, #4]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	4913      	ldr	r1, [pc, #76]	; (8005b34 <WSSFM1XRX_AskChannels+0x68>)
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f93b 	bl	8005d64 <WSSFM1XRX_SendRawMessage>
 8005aee:	4603      	mov	r3, r0
 8005af0:	75fb      	strb	r3, [r7, #23]

	if(WSSFM1XRX_OK_RESPONSE == RetVal){
 8005af2:	7dfb      	ldrb	r3, [r7, #23]
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d117      	bne.n	8005b28 <WSSFM1XRX_AskChannels+0x5c>
		rspPtr=strchr( ((const char *)obj->RxFrame) , ',');
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	212c      	movs	r1, #44	; 0x2c
 8005afe:	4618      	mov	r0, r3
 8005b00:	f003 f92e 	bl	8008d60 <strchr>
 8005b04:	6138      	str	r0, [r7, #16]
		if(rspPtr != NULL){
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00d      	beq.n	8005b28 <WSSFM1XRX_AskChannels+0x5c>
			Channels->x = (*(rspPtr-1))-'0';
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	3b30      	subs	r3, #48	; 0x30
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	701a      	strb	r2, [r3, #0]
			Channels->y = (*(rspPtr+1))-'0';
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	3b30      	subs	r3, #48	; 0x30
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	705a      	strb	r2, [r3, #1]
		}
	}
	return RetVal;
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	080098ec 	.word	0x080098ec

08005b38 <WSSFM1XRX_CheckChannels>:
 * @return Operation result in the form WSSFM1XRX_Return_t.
 * 			WSSFM1XRX_CHANN_NO_OK   : se debe resetear canales
 *			WSSFM1XRX_CHANN_OK      : No se resetea canales
 */
/*hacer getchannels */
WSSFM1XRX_Return_t WSSFM1XRX_CheckChannels(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait ){
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
	Channels_t Channels ={0,0};
 8005b42:	2300      	movs	r3, #0
 8005b44:	733b      	strb	r3, [r7, #12]
 8005b46:	2300      	movs	r3, #0
 8005b48:	737b      	strb	r3, [r7, #13]
	WSSFM1XRX_Return_t retval;
	retval = WSSFM1XRX_AskChannels(obj,Wait,&Channels);
 8005b4a:	f107 030c 	add.w	r3, r7, #12
 8005b4e:	461a      	mov	r2, r3
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff ffba 	bl	8005acc <WSSFM1XRX_AskChannels>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	73fb      	strb	r3, [r7, #15]

	if(WSSFM1XRX_OK_RESPONSE == retval){
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d109      	bne.n	8005b76 <WSSFM1XRX_CheckChannels+0x3e>
		retval = (Channels.x == 0 || Channels.y < 3) ? WSSFM1XRX_CHANN_NO_OK : WSSFM1XRX_CHANN_OK;
 8005b62:	7b3b      	ldrb	r3, [r7, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <WSSFM1XRX_CheckChannels+0x36>
 8005b68:	7b7b      	ldrb	r3, [r7, #13]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d801      	bhi.n	8005b72 <WSSFM1XRX_CheckChannels+0x3a>
 8005b6e:	2308      	movs	r3, #8
 8005b70:	e000      	b.n	8005b74 <WSSFM1XRX_CheckChannels+0x3c>
 8005b72:	2307      	movs	r3, #7
 8005b74:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <WSSFM1XRX_ResetChannels>:
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return WSSFM1XRX_Return_t.
 * 			<< WSSFM1XRX_OK_RESPONSE >> If response expected is the correct
 * 			<< WSSFM1XRX_RSP_NOMATCH >> If response expected is not correct 
 **/
WSSFM1XRX_Return_t WSSFM1XRX_ResetChannels(WSSFM1XRXConfig_t *obj, WSSFM1XRX_WaitMode_t Wait ){
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af02      	add	r7, sp, #8
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
	return WSSFM1XRX_SendRawMessage(obj,"AT$RC\r","OK",NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP); 
 8005b8a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	2300      	movs	r3, #0
 8005b96:	4a05      	ldr	r2, [pc, #20]	; (8005bac <WSSFM1XRX_ResetChannels+0x2c>)
 8005b98:	4905      	ldr	r1, [pc, #20]	; (8005bb0 <WSSFM1XRX_ResetChannels+0x30>)
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f8e2 	bl	8005d64 <WSSFM1XRX_SendRawMessage>
 8005ba0:	4603      	mov	r3, r0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	080098bc 	.word	0x080098bc
 8005bb0:	080098f4 	.word	0x080098f4

08005bb4 <WSSFM1XRX_ChangeFrequencyUL>:
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return WSSFM1XRX_Return_t.
 * 			<< WSSFM1XRX_OK_RESPONSE >> If response expected is the correct
 * 			<< WSSFM1XRX_RSP_NOMATCH >> If response expected is not correct 
 * */
WSSFM1XRX_Return_t WSSFM1XRX_ChangeFrequencyUL(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait , WSSFM1XRX_FreqUL_t Frequency){	
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	71fb      	strb	r3, [r7, #7]
	return WSSFM1XRX_SendRawMessage(obj, (char*)WSSFM1XRX_UL_FREQUENCIES[Frequency]  ,"OK",NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP); 
 8005bc2:	79fb      	ldrb	r3, [r7, #7]
 8005bc4:	4a08      	ldr	r2, [pc, #32]	; (8005be8 <WSSFM1XRX_ChangeFrequencyUL+0x34>)
 8005bc6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005bca:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005bce:	9301      	str	r3, [sp, #4]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	4a05      	ldr	r2, [pc, #20]	; (8005bec <WSSFM1XRX_ChangeFrequencyUL+0x38>)
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f8c3 	bl	8005d64 <WSSFM1XRX_SendRawMessage>
 8005bde:	4603      	mov	r3, r0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000008 	.word	0x20000008
 8005bec:	080098bc 	.word	0x080098bc

08005bf0 <WSSFM1XRX_SaveParameters>:
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return WSSFM1XRX_Return_t.
 * 			<< WSSFM1XRX_OK_RESPONSE >> If response expected is the correct
 * 			<< WSSFM1XRX_RSP_NOMATCH >> If response expected is not correct 
 * */
WSSFM1XRX_Return_t WSSFM1XRX_SaveParameters(WSSFM1XRXConfig_t *obj, WSSFM1XRX_WaitMode_t Wait ){
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
	return WSSFM1XRX_SendRawMessage(obj,"AT$WR\r","OK",NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP); 
 8005bfa:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005bfe:	9301      	str	r3, [sp, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	2300      	movs	r3, #0
 8005c06:	4a05      	ldr	r2, [pc, #20]	; (8005c1c <WSSFM1XRX_SaveParameters+0x2c>)
 8005c08:	4905      	ldr	r1, [pc, #20]	; (8005c20 <WSSFM1XRX_SaveParameters+0x30>)
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f8aa 	bl	8005d64 <WSSFM1XRX_SendRawMessage>
 8005c10:	4603      	mov	r3, r0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	080098bc 	.word	0x080098bc
 8005c20:	08009904 	.word	0x08009904

08005c24 <WSSFM1XRX_SendMessage>:
 * @return WSSFM1XRX_Return_t.
 * 			<< WSSFM1XRX_OK_RESPONSE >> If response expected is the correct
 * 			<< WSSFM1XRX_RSP_NOMATCH >> If response expected is not correct 
 *
 */
WSSFM1XRX_Return_t WSSFM1XRX_SendMessage(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait, void* data, void * CopyDataTx ,uint8_t size, uint8_t eDownlink){
 8005c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c26:	b093      	sub	sp, #76	; 0x4c
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
	WSSFM1XRX_Return_t RetValue;
	uint8_t slen = 2*size + 6;
 8005c32:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8005c36:	3303      	adds	r3, #3
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	char UplinkPayload[WSSFM1XRX_MAX_DATA_SIZE_WITH_DL] = "AT$SF="; /*max length frame with downlink*/
 8005c40:	4a46      	ldr	r2, [pc, #280]	; (8005d5c <WSSFM1XRX_SendMessage+0x138>)
 8005c42:	f107 0310 	add.w	r3, r7, #16
 8005c46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c4a:	6018      	str	r0, [r3, #0]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	8019      	strh	r1, [r3, #0]
 8005c50:	3302      	adds	r3, #2
 8005c52:	0c0a      	lsrs	r2, r1, #16
 8005c54:	701a      	strb	r2, [r3, #0]
 8005c56:	f107 0317 	add.w	r3, r7, #23
 8005c5a:	221e      	movs	r2, #30
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f003 f856 	bl	8008d10 <memset>
	uint32_t timeWait = WSSFM1XRX_SEND_MESSAGE_TIME_DELAY_RESP;
 8005c64:	f241 7370 	movw	r3, #6000	; 0x1770
 8005c68:	63bb      	str	r3, [r7, #56]	; 0x38
	WSSFM1XRX_BuildFrame(UplinkPayload+6, data, size);
 8005c6a:	f107 0310 	add.w	r3, r7, #16
 8005c6e:	3306      	adds	r3, #6
 8005c70:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 f970 	bl	8005f5c <WSSFM1XRX_BuildFrame>
	if(( obj->State_Api == WSSFM1XRX_IDLE)){
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d103      	bne.n	8005c8e <WSSFM1XRX_SendMessage+0x6a>

		obj->DownLink = eDownlink;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8005c8c:	775a      	strb	r2, [r3, #29]
	}
	//qTraceDecimal(obj->DownLink);
	if(obj->DownLink){
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	7f5b      	ldrb	r3, [r3, #29]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d021      	beq.n	8005cda <WSSFM1XRX_SendMessage+0xb6>
		UplinkPayload[slen++]=',';
 8005c96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8005ca0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005ca4:	4413      	add	r3, r2
 8005ca6:	222c      	movs	r2, #44	; 0x2c
 8005ca8:	f803 2c30 	strb.w	r2, [r3, #-48]
		UplinkPayload[slen++]='1';
 8005cac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8005cb6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005cba:	4413      	add	r3, r2
 8005cbc:	2231      	movs	r2, #49	; 0x31
 8005cbe:	f803 2c30 	strb.w	r2, [r3, #-48]
		UplinkPayload[slen++]='\r';
 8005cc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8005ccc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005cd0:	4413      	add	r3, r2
 8005cd2:	220d      	movs	r2, #13
 8005cd4:	f803 2c30 	strb.w	r2, [r3, #-48]
 8005cd8:	e007      	b.n	8005cea <WSSFM1XRX_SendMessage+0xc6>
	}
	else{
		UplinkPayload[slen]='\r';
 8005cda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005cde:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005ce2:	4413      	add	r3, r2
 8005ce4:	220d      	movs	r2, #13
 8005ce6:	f803 2c30 	strb.w	r2, [r3, #-48]
	}
//	qTraceMessage(UplinkPayload);
	if(CopyDataTx != NULL ) memcpy(CopyDataTx,UplinkPayload,37);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d017      	beq.n	8005d20 <WSSFM1XRX_SendMessage+0xfc>
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	f107 0410 	add.w	r4, r7, #16
 8005cf6:	469c      	mov	ip, r3
 8005cf8:	f104 0e20 	add.w	lr, r4, #32
 8005cfc:	4665      	mov	r5, ip
 8005cfe:	4626      	mov	r6, r4
 8005d00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005d02:	6028      	str	r0, [r5, #0]
 8005d04:	6069      	str	r1, [r5, #4]
 8005d06:	60aa      	str	r2, [r5, #8]
 8005d08:	60eb      	str	r3, [r5, #12]
 8005d0a:	3410      	adds	r4, #16
 8005d0c:	f10c 0c10 	add.w	ip, ip, #16
 8005d10:	4574      	cmp	r4, lr
 8005d12:	d1f3      	bne.n	8005cfc <WSSFM1XRX_SendMessage+0xd8>
 8005d14:	4663      	mov	r3, ip
 8005d16:	4622      	mov	r2, r4
 8005d18:	6810      	ldr	r0, [r2, #0]
 8005d1a:	6018      	str	r0, [r3, #0]
 8005d1c:	7912      	ldrb	r2, [r2, #4]
 8005d1e:	711a      	strb	r2, [r3, #4]
	timeWait = eDownlink ? WSSFM1XRX_DL_TIMEOUT : WSSFM1XRX_SEND_MESSAGE_TIME_DELAY_RESP; /*WSSFM1XRX_DL_TIMEOUT*/
 8005d20:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <WSSFM1XRX_SendMessage+0x10a>
 8005d28:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8005d2c:	e001      	b.n	8005d32 <WSSFM1XRX_SendMessage+0x10e>
 8005d2e:	f241 7370 	movw	r3, #6000	; 0x1770
 8005d32:	63bb      	str	r3, [r7, #56]	; 0x38
	RetValue = WSSFM1XRX_SendRawMessage(obj, UplinkPayload, "OK", NULL, Wait, timeWait);
 8005d34:	f107 0110 	add.w	r1, r7, #16
 8005d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	2300      	movs	r3, #0
 8005d42:	4a07      	ldr	r2, [pc, #28]	; (8005d60 <WSSFM1XRX_SendMessage+0x13c>)
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f80d 	bl	8005d64 <WSSFM1XRX_SendRawMessage>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	//qTraceDecimal(RetValue);
	return RetValue;
 8005d50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3744      	adds	r7, #68	; 0x44
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d5c:	0800990c 	.word	0x0800990c
 8005d60:	080098bc 	.word	0x080098bc

08005d64 <WSSFM1XRX_SendRawMessage>:
 * @param ExpectedResponse expectedResponse expected Response from module Wisol .
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return Pointer to reception buffer
 *  @Note : use only if  response expected
 */
WSSFM1XRX_Return_t WSSFM1XRX_SendRawMessage(WSSFM1XRXConfig_t *obj,char* Payload,char* ExpectedResponse,char * BuffStr,WSSFM1XRX_WaitMode_t Wait,uint32_t msec){
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]

	WSSFM1XRX_Return_t RetValue;
	if( ( obj->State_Api == WSSFM1XRX_IDLE) ) { /*Firstentry bloqueante o no bloqueante*/
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d120      	bne.n	8005dbe <WSSFM1XRX_SendRawMessage+0x5a>
		WSSFM1XRX_ResetObject(obj);
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f8d0 	bl	8005f22 <WSSFM1XRX_ResetObject>
		if(Payload != NULL) {
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <WSSFM1XRX_SendRawMessage+0x2c>
			WSSFM1XRX_StringTX(obj,Payload);
 8005d88:	68b9      	ldr	r1, [r7, #8]
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 f8b2 	bl	8005ef4 <WSSFM1XRX_StringTX>
			//qTraceMessage(Payload);
		}
		obj->State_Api = WSSFM1XRX_RUNNING;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

		if(obj->NumberRetries++ > obj->MaxNumberRetries) {
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	b2d1      	uxtb	r1, r2
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d905      	bls.n	8005dbe <WSSFM1XRX_SendRawMessage+0x5a>
			obj->NumberRetries = 0;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
//			qTraceMessage("retires");
//			qTraceDecimal(obj->RxReady);
//			qTraceDecimal(obj->State_Api);
//			qTraceMessage(obj->RxFrame);
			return WSSFM1XRX_MAX_RETRIES_REACHED;
 8005dba:	230b      	movs	r3, #11
 8005dbc:	e026      	b.n	8005e0c <WSSFM1XRX_SendRawMessage+0xa8>
		}

	}
	/*expected is confirmed in to WSSFM1XRX_WaitForResponse*/
	RetValue = WSSFM1XRX_WaitForResponse(obj,ExpectedResponse,Wait,msec);
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	6a3a      	ldr	r2, [r7, #32]
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 f918 	bl	8005ffa <WSSFM1XRX_WaitForResponse>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	75fb      	strb	r3, [r7, #23]

	/*para que funcione block or non block*/
	if(WSSFM1XRX_TIMEOUT == RetValue || WSSFM1XRX_OK_RESPONSE == RetValue){
 8005dce:	7dfb      	ldrb	r3, [r7, #23]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <WSSFM1XRX_SendRawMessage+0x76>
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d117      	bne.n	8005e0a <WSSFM1XRX_SendRawMessage+0xa6>
		//qTraceMessage(obj->RxFrame);
		if( obj->RxReady ){
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	7e5b      	ldrb	r3, [r3, #25]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00e      	beq.n	8005e02 <WSSFM1XRX_SendRawMessage+0x9e>
			if(BuffStr != NULL) strcpy((char*)BuffStr, (char*)obj->RxFrame) ;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <WSSFM1XRX_SendRawMessage+0x92>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	4619      	mov	r1, r3
 8005df0:	6838      	ldr	r0, [r7, #0]
 8005df2:	f002 ffc2 	bl	8008d7a <strcpy>
			RetValue = WSSFM1XRX_OK_RESPONSE;
 8005df6:	2303      	movs	r3, #3
 8005df8:	75fb      	strb	r3, [r7, #23]
			obj->NumberRetries = 0;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		}  //14.6.19 else if(Payload != NULL)	RetValue = WSSFM1XRX_FAILURE;
		obj->State_Api = WSSFM1XRX_IDLE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	return RetValue;
 8005e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <WSSFM1XRX_ISRRX>:
 * the buffer is stored in the structure obj->RxFrame.
 * 
 * @param obj Structure containing all data from the Sigfox module.
 * @return void.
 */
void WSSFM1XRX_ISRRX(WSSFM1XRXConfig_t *obj, const char RxChar){
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	70fb      	strb	r3, [r7, #3]
	if(RxChar < CHAR_PRINT_BELOW  || RxChar > CHAR_PRINT_ABOVE) return ;  /*Char no print*/
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	2b09      	cmp	r3, #9
 8005e24:	d939      	bls.n	8005e9a <WSSFM1XRX_ISRRX+0x86>
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	2b7a      	cmp	r3, #122	; 0x7a
 8005e2a:	d836      	bhi.n	8005e9a <WSSFM1XRX_ISRRX+0x86>
	if(obj->RxReady) return; /* B_uffer reveived*/
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	7e5b      	ldrb	r3, [r3, #25]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d133      	bne.n	8005e9e <WSSFM1XRX_ISRRX+0x8a>
	obj->RxFrame[obj->RxIndex++] = RxChar;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	695a      	ldr	r2, [r3, #20]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	7e9b      	ldrb	r3, [r3, #26]
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	1c59      	adds	r1, r3, #1
 8005e42:	b2c8      	uxtb	r0, r1
 8005e44:	6879      	ldr	r1, [r7, #4]
 8005e46:	7688      	strb	r0, [r1, #26]
 8005e48:	4413      	add	r3, r2
 8005e4a:	78fa      	ldrb	r2, [r7, #3]
 8005e4c:	701a      	strb	r2, [r3, #0]
	if (obj->RxIndex>= obj->SizeBuffRx -1) obj->RxIndex=0;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	7e9b      	ldrb	r3, [r3, #26]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	7e1b      	ldrb	r3, [r3, #24]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	db02      	blt.n	8005e66 <WSSFM1XRX_ISRRX+0x52>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	769a      	strb	r2, [r3, #26]
	obj->RxFrame[obj->RxIndex] = 0;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	7e92      	ldrb	r2, [r2, #26]
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	4413      	add	r3, r2
 8005e72:	2200      	movs	r2, #0
 8005e74:	701a      	strb	r2, [r3, #0]
	if (RxChar =='\r'){
 8005e76:	78fb      	ldrb	r3, [r7, #3]
 8005e78:	2b0d      	cmp	r3, #13
 8005e7a:	d111      	bne.n	8005ea0 <WSSFM1XRX_ISRRX+0x8c>
		/*  Check if there is a downlink request */
		if(!obj->DownLink){
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	7f5b      	ldrb	r3, [r3, #29]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <WSSFM1XRX_ISRRX+0x7e>
			obj->RxIndex = 0;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	769a      	strb	r2, [r3, #26]
			obj->RxReady = SF_TRUE; /* Framed completed*/
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	765a      	strb	r2, [r3, #25]
 8005e90:	e006      	b.n	8005ea0 <WSSFM1XRX_ISRRX+0x8c>
		}else
			obj->DownLink = 0; /* Clear the downlink request */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	775a      	strb	r2, [r3, #29]
 8005e98:	e002      	b.n	8005ea0 <WSSFM1XRX_ISRRX+0x8c>
	if(RxChar < CHAR_PRINT_BELOW  || RxChar > CHAR_PRINT_ABOVE) return ;  /*Char no print*/
 8005e9a:	bf00      	nop
 8005e9c:	e000      	b.n	8005ea0 <WSSFM1XRX_ISRRX+0x8c>
	if(obj->RxReady) return; /* B_uffer reveived*/
 8005e9e:	bf00      	nop
	}
}
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <WSSFM1XRX_MatchResponse>:
 * @return Operation result in the form WSSFM1XRX_Return_t.
 * 			<< WSSFM1XRX_OK_RESPONSE >> If response expected is the correct
 * 			<< WSSFM1XRX_RSP_NOMATCH >> If response expected is not correct 
 */

WSSFM1XRX_Return_t WSSFM1XRX_MatchResponse(WSSFM1XRXConfig_t *obj, char *expectedResponse){
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
	uint8_t Rprocess = WSSFM1XRX_RSP_NOMATCH;
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	73fb      	strb	r3, [r7, #15]
	if(obj->RxReady){
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	7e5b      	ldrb	r3, [r3, #25]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d013      	beq.n	8005eea <WSSFM1XRX_MatchResponse+0x40>
		if(expectedResponse != NULL){
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00e      	beq.n	8005ee6 <WSSFM1XRX_MatchResponse+0x3c>
			if(strstr((const char *) obj->RxFrame,(char *)expectedResponse) != NULL) Rprocess = WSSFM1XRX_OK_RESPONSE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	6839      	ldr	r1, [r7, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f002 ff5b 	bl	8008d8a <strstr>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <WSSFM1XRX_MatchResponse+0x36>
 8005eda:	2303      	movs	r3, #3
 8005edc:	73fb      	strb	r3, [r7, #15]
 8005ede:	e004      	b.n	8005eea <WSSFM1XRX_MatchResponse+0x40>
			else Rprocess = WSSFM1XRX_RSP_NOMATCH;
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	73fb      	strb	r3, [r7, #15]
 8005ee4:	e001      	b.n	8005eea <WSSFM1XRX_MatchResponse+0x40>
		}else Rprocess = WSSFM1XRX_OK_RESPONSE;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	73fb      	strb	r3, [r7, #15]
	}
	return Rprocess;
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <WSSFM1XRX_StringTX>:

	return ( NULL != obj->CallbackDownlink )? obj->CallbackDownlink(obj) : WSSFM1XRX_DL_DISCRIMINATE_ERROR;
}

/*Private Functions ********************************************************************************************************************************/
static void WSSFM1XRX_StringTX(WSSFM1XRXConfig_t *obj, char* WSSFM1XRX_String){
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
	while(*WSSFM1XRX_String) obj->TX_WSSFM1XRX(NULL,*WSSFM1XRX_String++);
 8005efe:	e008      	b.n	8005f12 <WSSFM1XRX_StringTX+0x1e>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	1c59      	adds	r1, r3, #1
 8005f08:	6039      	str	r1, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	2000      	movs	r0, #0
 8005f10:	4790      	blx	r2
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f2      	bne.n	8005f00 <WSSFM1XRX_StringTX+0xc>
}
 8005f1a:	bf00      	nop
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <WSSFM1XRX_ResetObject>:

/*Private Functions ***********************************************************************************************************************************************/
static void WSSFM1XRX_ResetObject(WSSFM1XRXConfig_t *obj){
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b082      	sub	sp, #8
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
	memset( (void *) obj->RxFrame,0,obj->SizeBuffRx);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6958      	ldr	r0, [r3, #20]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	7e1b      	ldrb	r3, [r3, #24]
 8005f32:	461a      	mov	r2, r3
 8005f34:	2100      	movs	r1, #0
 8005f36:	f002 feeb 	bl	8008d10 <memset>
	obj->StatusFlag=WSSFM1XRX_DEFAULT;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2209      	movs	r2, #9
 8005f3e:	76da      	strb	r2, [r3, #27]
	obj->RxIndex=0;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	769a      	strb	r2, [r3, #26]
	obj->RxReady=SF_FALSE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	765a      	strb	r2, [r3, #25]
	obj->State_Api = WSSFM1XRX_IDLE; /*verificar*/
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8005f54:	bf00      	nop
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <WSSFM1XRX_BuildFrame>:
/*Private Functions*/

/**
 * @brief Function order the frame.
 */
static void WSSFM1XRX_BuildFrame(char* str, void* data, uint8_t size){
 8005f5c:	b590      	push	{r4, r7, lr}
 8005f5e:	b089      	sub	sp, #36	; 0x24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	71fb      	strb	r3, [r7, #7]
	int8_t  i,j;   
	uint8_t xbyte, finalsize;
	uint8_t *bdata = (uint8_t*)data;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	61bb      	str	r3, [r7, #24]
	size = (size > WSSFM1XRX_MAX_BYTE_TX_FRAME )? WSSFM1XRX_MAX_BYTE_TX_FRAME : size;
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	2b0c      	cmp	r3, #12
 8005f72:	bf28      	it	cs
 8005f74:	230c      	movcs	r3, #12
 8005f76:	71fb      	strb	r3, [r7, #7]
	finalsize = size*2;
 8005f78:	79fb      	ldrb	r3, [r7, #7]
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	75fb      	strb	r3, [r7, #23]
	str[finalsize]='\0';
 8005f7e:	7dfb      	ldrb	r3, [r7, #23]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	2200      	movs	r2, #0
 8005f86:	701a      	strb	r2, [r3, #0]

	for(i = (size-1) , j = 0; i >= 0; i--){
 8005f88:	79fb      	ldrb	r3, [r7, #7]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	77fb      	strb	r3, [r7, #31]
 8005f90:	2300      	movs	r3, #0
 8005f92:	77bb      	strb	r3, [r7, #30]
 8005f94:	e029      	b.n	8005fea <WSSFM1XRX_BuildFrame+0x8e>
		xbyte = bdata[i];
 8005f96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	75bb      	strb	r3, [r7, #22]
		str[j++]=NibbletoX(xbyte>>4);
 8005fa2:	7dbb      	ldrb	r3, [r7, #22]
 8005fa4:	091b      	lsrs	r3, r3, #4
 8005fa6:	b2d9      	uxtb	r1, r3
 8005fa8:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8005fac:	b2d3      	uxtb	r3, r2
 8005fae:	3301      	adds	r3, #1
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	77bb      	strb	r3, [r7, #30]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	189c      	adds	r4, r3, r2
 8005fb8:	4608      	mov	r0, r1
 8005fba:	f000 f83f 	bl	800603c <NibbletoX>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	7023      	strb	r3, [r4, #0]
		str[j++]=NibbletoX(xbyte);
 8005fc2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8005fc6:	b2d3      	uxtb	r3, r2
 8005fc8:	3301      	adds	r3, #1
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	77bb      	strb	r3, [r7, #30]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	189c      	adds	r4, r3, r2
 8005fd2:	7dbb      	ldrb	r3, [r7, #22]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 f831 	bl	800603c <NibbletoX>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	7023      	strb	r3, [r4, #0]
	for(i = (size-1) , j = 0; i >= 0; i--){
 8005fde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	77fb      	strb	r3, [r7, #31]
 8005fea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dad1      	bge.n	8005f96 <WSSFM1XRX_BuildFrame+0x3a>
	}
}
 8005ff2:	bf00      	nop
 8005ff4:	3724      	adds	r7, #36	; 0x24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd90      	pop	{r4, r7, pc}

08005ffa <WSSFM1XRX_WaitForResponse>:

/**
 * @brief Function wait for response expected.
 */
static WSSFM1XRX_Return_t WSSFM1XRX_WaitForResponse(WSSFM1XRXConfig_t *obj , char *ExpectedResponse, WSSFM1XRX_WaitMode_t Wait ,uint32_t msec){
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b086      	sub	sp, #24
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	607a      	str	r2, [r7, #4]
 8006006:	603b      	str	r3, [r7, #0]
	uint8_t retvalue = WSSFM1XRX_NONE, retvalueM = WSSFM1XRX_NONE;
 8006008:	2304      	movs	r3, #4
 800600a:	75fb      	strb	r3, [r7, #23]
 800600c:	2304      	movs	r3, #4
 800600e:	75bb      	strb	r3, [r7, #22]
	retvalue =  Wait(obj,msec); /*Return WAITING or TIMEOUT*/
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	4798      	blx	r3
 8006018:	4603      	mov	r3, r0
 800601a:	75fb      	strb	r3, [r7, #23]
	retvalueM = WSSFM1XRX_MatchResponse(obj,ExpectedResponse); /*Return Response ok or No match*/
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f7ff ff43 	bl	8005eaa <WSSFM1XRX_MatchResponse>
 8006024:	4603      	mov	r3, r0
 8006026:	75bb      	strb	r3, [r7, #22]
	return (retvalueM == WSSFM1XRX_OK_RESPONSE)? retvalueM  : retvalue  ;/*Delay NonBlocking or Non-blocking*/
 8006028:	7dbb      	ldrb	r3, [r7, #22]
 800602a:	2b03      	cmp	r3, #3
 800602c:	d101      	bne.n	8006032 <WSSFM1XRX_WaitForResponse+0x38>
 800602e:	7dbb      	ldrb	r3, [r7, #22]
 8006030:	e000      	b.n	8006034 <WSSFM1XRX_WaitForResponse+0x3a>
 8006032:	7dfb      	ldrb	r3, [r7, #23]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3718      	adds	r7, #24
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <NibbletoX>:


/*Nible(4bits) decimal to hex string***/

char NibbletoX(uint8_t value){
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	4603      	mov	r3, r0
 8006044:	71fb      	strb	r3, [r7, #7]
	char ch;
	ch = (char)(value & 0x0F) + '0';
 8006046:	79fb      	ldrb	r3, [r7, #7]
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	b2db      	uxtb	r3, r3
 800604e:	3330      	adds	r3, #48	; 0x30
 8006050:	73fb      	strb	r3, [r7, #15]
	return (ch > '9')? ch+7u : ch;
 8006052:	7bfb      	ldrb	r3, [r7, #15]
 8006054:	2b39      	cmp	r3, #57	; 0x39
 8006056:	d903      	bls.n	8006060 <NibbletoX+0x24>
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	3307      	adds	r3, #7
 800605c:	b2db      	uxtb	r3, r3
 800605e:	e000      	b.n	8006062 <NibbletoX+0x26>
 8006060:	7bfb      	ldrb	r3, [r7, #15]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <WSSFM1XRX_GetRespNoexpected>:
 * 
 * @return WSSFM1XRX_Return_t.
 *
 * @Note : use only if not response expected
 */
WSSFM1XRX_Return_t WSSFM1XRX_GetRespNoexpected(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait, char * CommandStr, char *BuffStr){
 800606e:	b580      	push	{r7, lr}
 8006070:	b086      	sub	sp, #24
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	607a      	str	r2, [r7, #4]
 800607a:	603b      	str	r3, [r7, #0]
	WSSFM1XRX_Return_t RetValue;
	if( ( obj->State_Api == WSSFM1XRX_IDLE) ) { /*Firstentry block or Nonblocking*/
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10a      	bne.n	800609c <WSSFM1XRX_GetRespNoexpected+0x2e>
		WSSFM1XRX_ResetObject(obj);
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7ff ff4b 	bl	8005f22 <WSSFM1XRX_ResetObject>
		WSSFM1XRX_StringTX(obj,CommandStr);
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff ff30 	bl	8005ef4 <WSSFM1XRX_StringTX>
		obj->State_Api = WSSFM1XRX_RUNNING;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	RetValue = Wait(obj,WSSFM1XRX_GENERAL_TIME_DELAY_RESP) ;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	4798      	blx	r3
 80060a6:	4603      	mov	r3, r0
 80060a8:	75fb      	strb	r3, [r7, #23]

	if(WSSFM1XRX_TIMEOUT == RetValue || ((RetValue == WSSFM1XRX_WAITING) && (obj->RxReady)) ){
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d007      	beq.n	80060c0 <WSSFM1XRX_GetRespNoexpected+0x52>
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d11b      	bne.n	80060ee <WSSFM1XRX_GetRespNoexpected+0x80>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	7e5b      	ldrb	r3, [r3, #25]
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d016      	beq.n	80060ee <WSSFM1XRX_GetRespNoexpected+0x80>
		if( obj->RxReady ){  
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	7e5b      	ldrb	r3, [r3, #25]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00b      	beq.n	80060e2 <WSSFM1XRX_GetRespNoexpected+0x74>
			if(BuffStr != NULL ) strcpy((char*)BuffStr, (char*)obj->RxFrame) ; /*frame stored in RxFrame*/
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d005      	beq.n	80060dc <WSSFM1XRX_GetRespNoexpected+0x6e>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	4619      	mov	r1, r3
 80060d6:	6838      	ldr	r0, [r7, #0]
 80060d8:	f002 fe4f 	bl	8008d7a <strcpy>
			RetValue = WSSFM1XRX_OK_RESPONSE;
 80060dc:	2303      	movs	r3, #3
 80060de:	75fb      	strb	r3, [r7, #23]
 80060e0:	e001      	b.n	80060e6 <WSSFM1XRX_GetRespNoexpected+0x78>
		}else RetValue = WSSFM1XRX_FAILURE;
 80060e2:	230a      	movs	r3, #10
 80060e4:	75fb      	strb	r3, [r7, #23]
		obj->State_Api = WSSFM1XRX_IDLE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	return RetValue;
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3718      	adds	r7, #24
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <_qScheduler_TimeDeadlineCheck>:

#define qSchedulerStartPoint                    QUARKTS.Flag.Init=qTrue; do
#define qSchedulerEndPoint                      while(!QUARKTS.Flag.ReleaseSched); _qTriggerReleaseSchedEvent()

/*============================================================================*/
qBool_t _qScheduler_TimeDeadlineCheck(qClock_t ti, qClock_t td){
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
    return (qBool_t)((qSchedulerGetTick() - ti)>=td); 
 8006102:	f000 fb97 	bl	8006834 <qSchedulerGetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	bf94      	ite	ls
 8006112:	2301      	movls	r3, #1
 8006114:	2300      	movhi	r3, #0
 8006116:	b2db      	uxtb	r3, r3
}
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <qEnterCritical>:

Enter a critical section. This function invokes the <Disabler> if available.
Please see <qSchedulerSetInterruptsED>

*/  
void qEnterCritical(void){
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
    if(QUARKTS.I_Disable != NULL) QUARKTS.Flag.IntFlags = QUARKTS.I_Disable();
 8006124:	4b05      	ldr	r3, [pc, #20]	; (800613c <qEnterCritical+0x1c>)
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d005      	beq.n	8006138 <qEnterCritical+0x18>
 800612c:	4b03      	ldr	r3, [pc, #12]	; (800613c <qEnterCritical+0x1c>)
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	4798      	blx	r3
 8006132:	4602      	mov	r2, r0
 8006134:	4b01      	ldr	r3, [pc, #4]	; (800613c <qEnterCritical+0x1c>)
 8006136:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006138:	bf00      	nop
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20000254 	.word	0x20000254

08006140 <qExitCritical>:

Enter a critical section. This function invokes the <Enabler> if available.
Please see <qSchedulerSetInterruptsED>

*/ 
void qExitCritical(void){
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
    if(QUARKTS.I_Restorer != NULL) QUARKTS.I_Restorer(QUARKTS.Flag.IntFlags);
 8006144:	4b05      	ldr	r3, [pc, #20]	; (800615c <qExitCritical+0x1c>)
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d005      	beq.n	8006158 <qExitCritical+0x18>
 800614c:	4b03      	ldr	r3, [pc, #12]	; (800615c <qExitCritical+0x1c>)
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	4a02      	ldr	r2, [pc, #8]	; (800615c <qExitCritical+0x1c>)
 8006152:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006154:	4610      	mov	r0, r2
 8006156:	4798      	blx	r3
}
 8006158:	bf00      	nop
 800615a:	bd80      	pop	{r7, pc}
 800615c:	20000254 	.word	0x20000254

08006160 <qTime2Clock>:

Return value:

    time (t) in epochs
*/
qClock_t qTime2Clock(const qTime_t t){
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	ed87 0a01 	vstr	s0, [r7, #4]
        return (qClock_t)t;
    #else 
        #ifdef Q_SETUP_TICK_IN_HERTZ
            return (qClock_t)(t*QUARKTS.TimmingBase);
        #else
            return (qClock_t)(t/QUARKTS.TimmingBase);
 800616a:	4b08      	ldr	r3, [pc, #32]	; (800618c <qTime2Clock+0x2c>)
 800616c:	ed93 7a05 	vldr	s14, [r3, #20]
 8006170:	edd7 6a01 	vldr	s13, [r7, #4]
 8006174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800617c:	ee17 3a90 	vmov	r3, s15
        #endif    
    #endif
}
 8006180:	4618      	mov	r0, r3
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	20000254 	.word	0x20000254

08006190 <qTaskSetState>:
Parameters:

    - Task : A pointer to the task node.
    - State : qEnabled or qDisabled 
*/
void qTaskSetState(qTask_t *Task, const qState_t State){
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	70fb      	strb	r3, [r7, #3]
    if(NULL==Task) return;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d012      	beq.n	80061c8 <qTaskSetState+0x38>
    if(State && Task->Flag[_qIndex_Enabled]) return;
 80061a2:	78fb      	ldrb	r3, [r7, #3]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <qTaskSetState+0x24>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10b      	bne.n	80061cc <qTaskSetState+0x3c>
    Task->Flag[_qIndex_Enabled] = State;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	78fa      	ldrb	r2, [r7, #3]
 80061b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    Task->ClockStart = qSchedulerGetTick();
 80061bc:	f000 fb3a 	bl	8006834 <qSchedulerGetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	61da      	str	r2, [r3, #28]
 80061c6:	e002      	b.n	80061ce <qTaskSetState+0x3e>
    if(NULL==Task) return;
 80061c8:	bf00      	nop
 80061ca:	e000      	b.n	80061ce <qTaskSetState+0x3e>
    if(State && Task->Flag[_qIndex_Enabled]) return;
 80061cc:	bf00      	nop
}
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <_qScheduler_PriorityQueueGet>:
    QUARKTS.I_Restorer = Restorer;
    QUARKTS.I_Disable = Disabler;
}
#ifdef Q_PRIORITY_QUEUE
/*============================================================================*/
static qTask_t* _qScheduler_PriorityQueueGet(void){
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
    qTask_t *Task = NULL;
 80061da:	2300      	movs	r3, #0
 80061dc:	603b      	str	r3, [r7, #0]
    uint8_t i;
    uint8_t IndexTaskToExtract = 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	71bb      	strb	r3, [r7, #6]
    qPriority_t MaxPriorityValue;
    if(QUARKTS.QueueIndex < 0) return NULL; /*Return if no elements available*/
 80061e2:	4b41      	ldr	r3, [pc, #260]	; (80062e8 <_qScheduler_PriorityQueueGet+0x114>)
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b21b      	sxth	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	da01      	bge.n	80061f0 <_qScheduler_PriorityQueueGet+0x1c>
 80061ec:	2300      	movs	r3, #0
 80061ee:	e076      	b.n	80062de <_qScheduler_PriorityQueueGet+0x10a>
    qEnterCritical(); 
 80061f0:	f7ff ff96 	bl	8006120 <qEnterCritical>
    MaxPriorityValue = QUARKTS.QueueStack[0].Task->Priority;
 80061f4:	4b3c      	ldr	r3, [pc, #240]	; (80062e8 <_qScheduler_PriorityQueueGet+0x114>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061fe:	717b      	strb	r3, [r7, #5]
    for( i=1; i<QUARKTS.QueueSize; i++){ /*Find the task with the highest priority*/
 8006200:	2301      	movs	r3, #1
 8006202:	71fb      	strb	r3, [r7, #7]
 8006204:	e021      	b.n	800624a <_qScheduler_PriorityQueueGet+0x76>
        if(NULL == QUARKTS.QueueStack[i].Task ) break; /*break if the tail is reached*/
 8006206:	4b38      	ldr	r3, [pc, #224]	; (80062e8 <_qScheduler_PriorityQueueGet+0x114>)
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	79fb      	ldrb	r3, [r7, #7]
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	4413      	add	r3, r2
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d020      	beq.n	8006258 <_qScheduler_PriorityQueueGet+0x84>
        if(QUARKTS.QueueStack[i].Task->Priority > MaxPriorityValue){ /*check if the queued task has the max priority value*/
 8006216:	4b34      	ldr	r3, [pc, #208]	; (80062e8 <_qScheduler_PriorityQueueGet+0x114>)
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	79fb      	ldrb	r3, [r7, #7]
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	4413      	add	r3, r2
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006226:	b2db      	uxtb	r3, r3
 8006228:	797a      	ldrb	r2, [r7, #5]
 800622a:	429a      	cmp	r2, r3
 800622c:	d20a      	bcs.n	8006244 <_qScheduler_PriorityQueueGet+0x70>
            MaxPriorityValue = QUARKTS.QueueStack[i].Task->Priority; /*Reassign the max value*/
 800622e:	4b2e      	ldr	r3, [pc, #184]	; (80062e8 <_qScheduler_PriorityQueueGet+0x114>)
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	4413      	add	r3, r2
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800623e:	717b      	strb	r3, [r7, #5]
            IndexTaskToExtract = i;  /*save the index*/
 8006240:	79fb      	ldrb	r3, [r7, #7]
 8006242:	71bb      	strb	r3, [r7, #6]
    for( i=1; i<QUARKTS.QueueSize; i++){ /*Find the task with the highest priority*/
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	3301      	adds	r3, #1
 8006248:	71fb      	strb	r3, [r7, #7]
 800624a:	4b27      	ldr	r3, [pc, #156]	; (80062e8 <_qScheduler_PriorityQueueGet+0x114>)
 800624c:	789b      	ldrb	r3, [r3, #2]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	79fa      	ldrb	r2, [r7, #7]
 8006252:	429a      	cmp	r2, r3
 8006254:	d3d7      	bcc.n	8006206 <_qScheduler_PriorityQueueGet+0x32>
 8006256:	e000      	b.n	800625a <_qScheduler_PriorityQueueGet+0x86>
        if(NULL == QUARKTS.QueueStack[i].Task ) break; /*break if the tail is reached*/
 8006258:	bf00      	nop
        }
    }   
    QUARKTS.QueueData = QUARKTS.QueueStack[IndexTaskToExtract].QueueData; /*get the data from the queue*/
 800625a:	4b23      	ldr	r3, [pc, #140]	; (80062e8 <_qScheduler_PriorityQueueGet+0x114>)
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	79bb      	ldrb	r3, [r7, #6]
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	4413      	add	r3, r2
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	4a20      	ldr	r2, [pc, #128]	; (80062e8 <_qScheduler_PriorityQueueGet+0x114>)
 8006268:	6093      	str	r3, [r2, #8]
    Task = QUARKTS.QueueStack[IndexTaskToExtract].Task; /*assign the task to the output*/
 800626a:	4b1f      	ldr	r3, [pc, #124]	; (80062e8 <_qScheduler_PriorityQueueGet+0x114>)
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	79bb      	ldrb	r3, [r7, #6]
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	4413      	add	r3, r2
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	603b      	str	r3, [r7, #0]
    Task->State = qReady; /*set the task as ready*/
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    QUARKTS.QueueStack[IndexTaskToExtract].Task = NULL; /*set the position in the queue as empty*/  
 8006280:	4b19      	ldr	r3, [pc, #100]	; (80062e8 <_qScheduler_PriorityQueueGet+0x114>)
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	79bb      	ldrb	r3, [r7, #6]
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	4413      	add	r3, r2
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
    for(i=IndexTaskToExtract; i<QUARKTS.QueueIndex; i++) QUARKTS.QueueStack[i] = QUARKTS.QueueStack[i+1]; /*shift the queue*/
 800628e:	79bb      	ldrb	r3, [r7, #6]
 8006290:	71fb      	strb	r3, [r7, #7]
 8006292:	e012      	b.n	80062ba <_qScheduler_PriorityQueueGet+0xe6>
 8006294:	4b14      	ldr	r3, [pc, #80]	; (80062e8 <_qScheduler_PriorityQueueGet+0x114>)
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	3301      	adds	r3, #1
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	18d1      	adds	r1, r2, r3
 80062a0:	4b11      	ldr	r3, [pc, #68]	; (80062e8 <_qScheduler_PriorityQueueGet+0x114>)
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	4413      	add	r3, r2
 80062aa:	460a      	mov	r2, r1
 80062ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062b0:	e883 0003 	stmia.w	r3, {r0, r1}
 80062b4:	79fb      	ldrb	r3, [r7, #7]
 80062b6:	3301      	adds	r3, #1
 80062b8:	71fb      	strb	r3, [r7, #7]
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	4a0a      	ldr	r2, [pc, #40]	; (80062e8 <_qScheduler_PriorityQueueGet+0x114>)
 80062be:	8812      	ldrh	r2, [r2, #0]
 80062c0:	b212      	sxth	r2, r2
 80062c2:	4293      	cmp	r3, r2
 80062c4:	dbe6      	blt.n	8006294 <_qScheduler_PriorityQueueGet+0xc0>
    QUARKTS.QueueIndex--;    /*decrease the index*/
 80062c6:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <_qScheduler_PriorityQueueGet+0x114>)
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b21b      	sxth	r3, r3
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	b21a      	sxth	r2, r3
 80062d4:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <_qScheduler_PriorityQueueGet+0x114>)
 80062d6:	801a      	strh	r2, [r3, #0]
    qExitCritical();
 80062d8:	f7ff ff32 	bl	8006140 <qExitCritical>
    return Task;
 80062dc:	683b      	ldr	r3, [r7, #0]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20000254 	.word	0x20000254

080062ec <_qInitScheduler>:
#endif
/*============================================================================*/
#ifdef Q_SETUP_TIME_CANONICAL
    void _qInitScheduler(qGetTickFcn_t TickProvider, qTaskFcn_t IdleCallback, volatile qQueueStack_t *Q_Stack, const uint8_t Size_Q_Stack){
#else
    void _qInitScheduler(qGetTickFcn_t TickProvider, const qTimingBase_type BaseTimming, qTaskFcn_t IdleCallback, volatile qQueueStack_t *Q_Stack, const uint8_t Size_Q_Stack){
 80062ec:	b480      	push	{r7}
 80062ee:	b089      	sub	sp, #36	; 0x24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6178      	str	r0, [r7, #20]
 80062f4:	ed87 0a04 	vstr	s0, [r7, #16]
 80062f8:	60f9      	str	r1, [r7, #12]
 80062fa:	60ba      	str	r2, [r7, #8]
 80062fc:	71fb      	strb	r3, [r7, #7]
#endif
    #ifdef Q_PRIORITY_QUEUE  
        uint8_t i;
    #endif
    QUARKTS.Head = NULL;
 80062fe:	4b26      	ldr	r3, [pc, #152]	; (8006398 <_qInitScheduler+0xac>)
 8006300:	2200      	movs	r2, #0
 8006302:	619a      	str	r2, [r3, #24]
    #ifndef Q_SETUP_TIME_CANONICAL
        QUARKTS.TimmingBase = BaseTimming;
 8006304:	4a24      	ldr	r2, [pc, #144]	; (8006398 <_qInitScheduler+0xac>)
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	6153      	str	r3, [r2, #20]
    #endif
    QUARKTS.IDLECallback = IdleCallback;
 800630a:	4a23      	ldr	r2, [pc, #140]	; (8006398 <_qInitScheduler+0xac>)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	60d3      	str	r3, [r2, #12]
    QUARKTS.ReleaseSchedCallback = NULL;
 8006310:	4b21      	ldr	r3, [pc, #132]	; (8006398 <_qInitScheduler+0xac>)
 8006312:	2200      	movs	r2, #0
 8006314:	611a      	str	r2, [r3, #16]
    #ifdef Q_PRIORITY_QUEUE    
        QUARKTS.QueueStack = (qQueueStack_t*)Q_Stack;
 8006316:	4a20      	ldr	r2, [pc, #128]	; (8006398 <_qInitScheduler+0xac>)
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	6053      	str	r3, [r2, #4]
        QUARKTS.QueueSize = Size_Q_Stack;
 800631c:	4a1e      	ldr	r2, [pc, #120]	; (8006398 <_qInitScheduler+0xac>)
 800631e:	79fb      	ldrb	r3, [r7, #7]
 8006320:	7093      	strb	r3, [r2, #2]
        for(i=0;i<QUARKTS.QueueSize;i++) QUARKTS.QueueStack[i].Task = NULL;  /*set the priority queue as empty*/  
 8006322:	2300      	movs	r3, #0
 8006324:	77fb      	strb	r3, [r7, #31]
 8006326:	e009      	b.n	800633c <_qInitScheduler+0x50>
 8006328:	4b1b      	ldr	r3, [pc, #108]	; (8006398 <_qInitScheduler+0xac>)
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	7ffb      	ldrb	r3, [r7, #31]
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	4413      	add	r3, r2
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	7ffb      	ldrb	r3, [r7, #31]
 8006338:	3301      	adds	r3, #1
 800633a:	77fb      	strb	r3, [r7, #31]
 800633c:	4b16      	ldr	r3, [pc, #88]	; (8006398 <_qInitScheduler+0xac>)
 800633e:	789b      	ldrb	r3, [r3, #2]
 8006340:	b2db      	uxtb	r3, r3
 8006342:	7ffa      	ldrb	r2, [r7, #31]
 8006344:	429a      	cmp	r2, r3
 8006346:	d3ef      	bcc.n	8006328 <_qInitScheduler+0x3c>
        QUARKTS.QueueIndex = -1;     
 8006348:	4b13      	ldr	r3, [pc, #76]	; (8006398 <_qInitScheduler+0xac>)
 800634a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800634e:	801a      	strh	r2, [r3, #0]
        QUARKTS.QueueData = NULL;
 8006350:	4b11      	ldr	r3, [pc, #68]	; (8006398 <_qInitScheduler+0xac>)
 8006352:	2200      	movs	r2, #0
 8006354:	609a      	str	r2, [r3, #8]
    #endif
    QUARKTS.Flag.Init = qFalse;
 8006356:	4b10      	ldr	r3, [pc, #64]	; (8006398 <_qInitScheduler+0xac>)
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    QUARKTS.Flag.ReleaseSched = qFalse;
 800635e:	4b0e      	ldr	r3, [pc, #56]	; (8006398 <_qInitScheduler+0xac>)
 8006360:	2200      	movs	r2, #0
 8006362:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    QUARKTS.Flag.FCallReleased = qFalse;
 8006366:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <_qInitScheduler+0xac>)
 8006368:	2200      	movs	r2, #0
 800636a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    QUARKTS.I_Restorer =  NULL;
 800636e:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <_qInitScheduler+0xac>)
 8006370:	2200      	movs	r2, #0
 8006372:	621a      	str	r2, [r3, #32]
    QUARKTS.I_Disable = NULL;
 8006374:	4b08      	ldr	r3, [pc, #32]	; (8006398 <_qInitScheduler+0xac>)
 8006376:	2200      	movs	r2, #0
 8006378:	61da      	str	r2, [r3, #28]
    QUARKTS.CurrentRunningTask = NULL;
 800637a:	4b07      	ldr	r3, [pc, #28]	; (8006398 <_qInitScheduler+0xac>)
 800637c:	2200      	movs	r2, #0
 800637e:	62da      	str	r2, [r3, #44]	; 0x2c
    QUARKTS.GetSysTick = TickProvider;
 8006380:	4a05      	ldr	r2, [pc, #20]	; (8006398 <_qInitScheduler+0xac>)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	6313      	str	r3, [r2, #48]	; 0x30
    _qSysTick_Epochs_ = 0ul;
 8006386:	4b05      	ldr	r3, [pc, #20]	; (800639c <_qInitScheduler+0xb0>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
}
 800638c:	bf00      	nop
 800638e:	3724      	adds	r7, #36	; 0x24
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	20000254 	.word	0x20000254
 800639c:	20000294 	.word	0x20000294

080063a0 <qSchedulerAdd_Task>:

Return value:

    Returns qTrue on success, otherwise returns qFalse;
    */
qBool_t qSchedulerAdd_Task(qTask_t *Task, qTaskFcn_t CallbackFcn, qPriority_t Priority, qTime_t Time, qIteration_t nExecutions, qState_t InitialState, void* arg){
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	4611      	mov	r1, r2
 80063ac:	ed87 0a00 	vstr	s0, [r7]
 80063b0:	461a      	mov	r2, r3
 80063b2:	460b      	mov	r3, r1
 80063b4:	71fb      	strb	r3, [r7, #7]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80bb      	strh	r3, [r7, #4]
    if(NULL==Task || NULL == CallbackFcn) return qFalse;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <qSchedulerAdd_Task+0x26>
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <qSchedulerAdd_Task+0x2a>
 80063c6:	2300      	movs	r3, #0
 80063c8:	e061      	b.n	800648e <qSchedulerAdd_Task+0xee>
    qSchedulerRemoveTask(Task); /*Remove the task if was previously added to the chain*/
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 f8bc 	bl	8006548 <qSchedulerRemoveTask>
    Task->Callback = CallbackFcn;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	60da      	str	r2, [r3, #12]
    Task->Interval = qTime2Clock(Time);
 80063d6:	ed97 0a00 	vldr	s0, [r7]
 80063da:	f7ff fec1 	bl	8006160 <qTime2Clock>
 80063de:	4602      	mov	r2, r0
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	619a      	str	r2, [r3, #24]
    Task->TaskData = arg;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	605a      	str	r2, [r3, #4]
    Task->Priority = Priority;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	79fa      	ldrb	r2, [r7, #7]
 80063ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    Task->Iterations = (qPeriodic==nExecutions)? qPeriodic : -nExecutions;    
 80063f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80063f6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80063fa:	d004      	beq.n	8006406 <qSchedulerAdd_Task+0x66>
 80063fc:	88bb      	ldrh	r3, [r7, #4]
 80063fe:	425b      	negs	r3, r3
 8006400:	b29b      	uxth	r3, r3
 8006402:	b21a      	sxth	r2, r3
 8006404:	e000      	b.n	8006408 <qSchedulerAdd_Task+0x68>
 8006406:	4a24      	ldr	r2, [pc, #144]	; (8006498 <qSchedulerAdd_Task+0xf8>)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	84da      	strh	r2, [r3, #38]	; 0x26
    Task->Flag[_qIndex_AsyncRun] = qFalse;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    Task->Flag[_qIndex_InitFlag] = qFalse;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    Task->Flag[_qIndex_QueueReceiver] = qFalse; 
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    Task->Flag[_qIndex_QueueFull] = qFalse;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    Task->Flag[_qIndex_QueueCount] = qFalse;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    Task->Flag[_qIndex_QueueEmpty] = qFalse;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    Task->Flag[_qIndex_Enabled] = (qBool_t)(InitialState != qFalse);
 800643c:	7e3b      	ldrb	r3, [r7, #24]
 800643e:	2b00      	cmp	r3, #0
 8006440:	bf14      	ite	ne
 8006442:	2301      	movne	r3, #1
 8006444:	2300      	moveq	r3, #0
 8006446:	b2db      	uxtb	r3, r3
 8006448:	461a      	mov	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    Task->Next = NULL;  
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]
    Task->Cycles = 0;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	621a      	str	r2, [r3, #32]
    Task->ClockStart = qSchedulerGetTick();
 800645c:	f000 f9ea 	bl	8006834 <qSchedulerGetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	61da      	str	r2, [r3, #28]
    #ifdef Q_QUEUES
        Task->Queue = NULL;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	615a      	str	r2, [r3, #20]
    #endif
    Task->StateMachine = NULL;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	611a      	str	r2, [r3, #16]
    Task->State = qSuspended;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2203      	movs	r2, #3
 8006476:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    QUARKTS.Head =  _qScheduler_PriorizedInsert( QUARKTS.Head, Task ); /*put the task on the list according to its priority*/
 800647a:	4b08      	ldr	r3, [pc, #32]	; (800649c <qSchedulerAdd_Task+0xfc>)
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	68f9      	ldr	r1, [r7, #12]
 8006480:	4618      	mov	r0, r3
 8006482:	f000 f89b 	bl	80065bc <_qScheduler_PriorizedInsert>
 8006486:	4602      	mov	r2, r0
 8006488:	4b04      	ldr	r3, [pc, #16]	; (800649c <qSchedulerAdd_Task+0xfc>)
 800648a:	619a      	str	r2, [r3, #24]
    return qTrue;
 800648c:	2301      	movs	r3, #1
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	ffff8000 	.word	0xffff8000
 800649c:	20000254 	.word	0x20000254

080064a0 <qSchedulerAdd_EventTask>:
     
Return value:

    Returns qTrue on success, otherwise returns qFalse;
     */
qBool_t qSchedulerAdd_EventTask(qTask_t *Task, qTaskFcn_t CallbackFcn, qPriority_t Priority, void* arg){
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af02      	add	r7, sp, #8
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	603b      	str	r3, [r7, #0]
 80064ac:	4613      	mov	r3, r2
 80064ae:	71fb      	strb	r3, [r7, #7]
    return qSchedulerAdd_Task(Task, CallbackFcn, Priority, qTimeImmediate, qSingleShot, qDisabled, arg);
 80064b0:	79fa      	ldrb	r2, [r7, #7]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	2300      	movs	r3, #0
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	2301      	movs	r3, #1
 80064bc:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80064d4 <qSchedulerAdd_EventTask+0x34>
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f7ff ff6c 	bl	80063a0 <qSchedulerAdd_Task>
 80064c8:	4603      	mov	r3, r0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	00000000 	.word	0x00000000

080064d8 <qSchedulerAdd_StateMachineTask>:

    Returns qTrue on success, otherwise returns qFalse;
    */
qBool_t qSchedulerAdd_StateMachineTask(qTask_t *Task, qPriority_t Priority, qTime_t Time,
                            qSM_t *StateMachine, qSM_State_t InitState, qSM_SubState_t BeforeAnyState, qSM_SubState_t SuccessState, qSM_SubState_t FailureState, qSM_SubState_t UnexpectedState,
                            qState_t InitialTaskState, void *arg){
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af02      	add	r7, sp, #8
 80064de:	6178      	str	r0, [r7, #20]
 80064e0:	ed87 0a03 	vstr	s0, [r7, #12]
 80064e4:	60ba      	str	r2, [r7, #8]
 80064e6:	607b      	str	r3, [r7, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	74fb      	strb	r3, [r7, #19]
    if(NULL==StateMachine || NULL==InitState) return qFalse;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <qSchedulerAdd_StateMachineTask+0x20>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <qSchedulerAdd_StateMachineTask+0x24>
 80064f8:	2300      	movs	r3, #0
 80064fa:	e01f      	b.n	800653c <qSchedulerAdd_StateMachineTask+0x64>
    if (!qSchedulerAdd_Task(Task, __qFSMCallbackMode, Priority, Time, qPeriodic, InitialTaskState, arg)) return qFalse;    
 80064fc:	7cfa      	ldrb	r2, [r7, #19]
 80064fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	4b0e      	ldr	r3, [pc, #56]	; (8006544 <qSchedulerAdd_StateMachineTask+0x6c>)
 800650a:	ed97 0a03 	vldr	s0, [r7, #12]
 800650e:	2101      	movs	r1, #1
 8006510:	6978      	ldr	r0, [r7, #20]
 8006512:	f7ff ff45 	bl	80063a0 <qSchedulerAdd_Task>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <qSchedulerAdd_StateMachineTask+0x48>
 800651c:	2300      	movs	r3, #0
 800651e:	e00d      	b.n	800653c <qSchedulerAdd_StateMachineTask+0x64>
    qStateMachine_Init(StateMachine, InitState, SuccessState, FailureState, UnexpectedState, BeforeAnyState);
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	9301      	str	r3, [sp, #4]
 8006524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800652c:	6879      	ldr	r1, [r7, #4]
 800652e:	68b8      	ldr	r0, [r7, #8]
 8006530:	f000 fbaa 	bl	8006c88 <qStateMachine_Init>
    Task->StateMachine = StateMachine;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	611a      	str	r2, [r3, #16]
    return qTrue;
 800653a:	2301      	movs	r3, #1
}
 800653c:	4618      	mov	r0, r3
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	ffff8000 	.word	0xffff8000

08006548 <qSchedulerRemoveTask>:
     
Return value:

    Returns qTrue if success, otherwise returns qFalse.;     
    */
qBool_t qSchedulerRemoveTask(qTask_t *Task){
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
    qTask_t *tmp = QUARKTS.Head;
 8006550:	4b19      	ldr	r3, [pc, #100]	; (80065b8 <qSchedulerRemoveTask+0x70>)
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	60fb      	str	r3, [r7, #12]
    qTask_t *prev = NULL;
 8006556:	2300      	movs	r3, #0
 8006558:	60bb      	str	r3, [r7, #8]
    if(NULL == tmp) return qFalse;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d106      	bne.n	800656e <qSchedulerRemoveTask+0x26>
 8006560:	2300      	movs	r3, #0
 8006562:	e022      	b.n	80065aa <qSchedulerRemoveTask+0x62>
    while(tmp != Task && tmp->Next != NULL){ /*find the task to remove*/
        prev = tmp; /*keep on track the previous node*/
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	60bb      	str	r3, [r7, #8]
        tmp = tmp->Next;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60fb      	str	r3, [r7, #12]
    while(tmp != Task && tmp->Next != NULL){ /*find the task to remove*/
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	429a      	cmp	r2, r3
 8006574:	d003      	beq.n	800657e <qSchedulerRemoveTask+0x36>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f2      	bne.n	8006564 <qSchedulerRemoveTask+0x1c>
    }
    if(tmp == Task){ /*remove the task if was found on the chain*/
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	429a      	cmp	r2, r3
 8006584:	d110      	bne.n	80065a8 <qSchedulerRemoveTask+0x60>
        if(prev) prev->Next = tmp->Next; /*make link between adjacent nodes, this cause that the task being removed from the chain*/
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d004      	beq.n	8006596 <qSchedulerRemoveTask+0x4e>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	e003      	b.n	800659e <qSchedulerRemoveTask+0x56>
        else QUARKTS.Head = tmp->Next; /*if the task is the head of the chain, move the head to the next node*/
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a07      	ldr	r2, [pc, #28]	; (80065b8 <qSchedulerRemoveTask+0x70>)
 800659c:	6193      	str	r3, [r2, #24]
        Task->Next = NULL; /*Just in case the deleted task needs to be added later to the scheduling scheme, otherwise, this would fuck the whole chain*/
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
        return qTrue;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e000      	b.n	80065aa <qSchedulerRemoveTask+0x62>
    }
    return qFalse;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	20000254 	.word	0x20000254

080065bc <_qScheduler_PriorizedInsert>:
/*============================================================================*/
static qTask_t* _qScheduler_PriorizedInsert(qTask_t *head, qTask_t *Task){ /*return the new head if modified*/
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
    if( (NULL == head ) || (Task->Priority > head->Priority) ){ /*Is the first task in the scheme or the task has the highest priority over all */
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d009      	beq.n	80065e0 <_qScheduler_PriorizedInsert+0x24>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	429a      	cmp	r2, r3
 80065de:	d904      	bls.n	80065ea <_qScheduler_PriorizedInsert+0x2e>
        Task->Next = head; /*move the head and just add the task node on top*/
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	601a      	str	r2, [r3, #0]
        return Task; /*this task will be the new head*/
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	e004      	b.n	80065f4 <_qScheduler_PriorizedInsert+0x38>
    }
    _qScheduler_FindPlace( head, Task);
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f805 	bl	80065fc <_qScheduler_FindPlace>
    return head; /*no change in the head, keep it*/
 80065f2:	687b      	ldr	r3, [r7, #4]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <_qScheduler_FindPlace>:
/*============================================================================*/
static void _qScheduler_FindPlace(qTask_t *head, qTask_t *Task){ /*find a new position for the task in the chain, when finded, put the task there*/
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
    qTask_t *tmp_node = NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
    qPriority_t PrioTask = Task->Priority;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006610:	72fb      	strb	r3, [r7, #11]
    tmp_node = head; /*start the head with the highest priority task*/
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60fb      	str	r3, [r7, #12]
    while(tmp_node->Next && (PrioTask <= tmp_node->Next->Priority) ) { 
 8006616:	e002      	b.n	800661e <_qScheduler_FindPlace+0x22>
        tmp_node = tmp_node->Next; /*find the right place for this task according its priority*/
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	60fb      	str	r3, [r7, #12]
    while(tmp_node->Next && (PrioTask <= tmp_node->Next->Priority) ) { 
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d007      	beq.n	8006636 <_qScheduler_FindPlace+0x3a>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800662e:	b2db      	uxtb	r3, r3
 8006630:	7afa      	ldrb	r2, [r7, #11]
 8006632:	429a      	cmp	r2, r3
 8006634:	d9f0      	bls.n	8006618 <_qScheduler_FindPlace+0x1c>
    }
    Task->Next = tmp_node->Next; /*the the new task  will be placed just after tmp*/
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	601a      	str	r2, [r3, #0]
    tmp_node->Next = Task; /*assign the task*/    
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	601a      	str	r2, [r3, #0]
}
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <_qScheduler_RearrangeChain>:
#ifdef Q_AUTO_CHAINREARRANGE
/*============================================================================*/
static qTask_t* _qScheduler_RearrangeChain(qTask_t *head){ /*this method rearrange the chain according the priority of all its nodes*/
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
    qTask_t *new_head = NULL, *tmp = head, *tmp1 = NULL;
 8006658:	2300      	movs	r3, #0
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	613b      	str	r3, [r7, #16]
 8006660:	2300      	movs	r3, #0
 8006662:	60fb      	str	r3, [r7, #12]
    qEnterCritical();
 8006664:	f7ff fd5c 	bl	8006120 <qEnterCritical>
    while(tmp){ /*start with a new head and re-insert the entire chain*/
 8006668:	e009      	b.n	800667e <_qScheduler_RearrangeChain+0x2e>
        tmp1 = tmp;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	60fb      	str	r3, [r7, #12]
        tmp = tmp->Next;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	613b      	str	r3, [r7, #16]
        new_head = _qScheduler_PriorizedInsert( new_head, tmp1);  
 8006674:	68f9      	ldr	r1, [r7, #12]
 8006676:	6978      	ldr	r0, [r7, #20]
 8006678:	f7ff ffa0 	bl	80065bc <_qScheduler_PriorizedInsert>
 800667c:	6178      	str	r0, [r7, #20]
    while(tmp){ /*start with a new head and re-insert the entire chain*/
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f2      	bne.n	800666a <_qScheduler_RearrangeChain+0x1a>
    }
    QUARKTS.Flag.Init= qTrue; /*set the initialization flag*/
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <_qScheduler_RearrangeChain+0x4c>)
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    qExitCritical();
 800668c:	f7ff fd58 	bl	8006140 <qExitCritical>
    return new_head; /*return the new head*/
 8006690:	697b      	ldr	r3, [r7, #20]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20000254 	.word	0x20000254

080066a0 <qTaskAttachQueue>:
Return value:

    Returns qTrue on success, otherwise returns qFalse;
*/
#ifdef Q_QUEUES
qBool_t qTaskAttachQueue(qTask_t *Task, qQueue_t *Queue, const qRBLinkMode_t Mode, uint8_t arg){
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	4611      	mov	r1, r2
 80066ac:	461a      	mov	r2, r3
 80066ae:	460b      	mov	r3, r1
 80066b0:	71fb      	strb	r3, [r7, #7]
 80066b2:	4613      	mov	r3, r2
 80066b4:	71bb      	strb	r3, [r7, #6]
    if(NULL==Queue || NULL==Task || Mode<qQUEUE_RECEIVER || Mode>qQUEUE_EMPTY) return qFalse;   /*Validate*/
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d008      	beq.n	80066ce <qTaskAttachQueue+0x2e>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d005      	beq.n	80066ce <qTaskAttachQueue+0x2e>
 80066c2:	79fb      	ldrb	r3, [r7, #7]
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d902      	bls.n	80066ce <qTaskAttachQueue+0x2e>
 80066c8:	79fb      	ldrb	r3, [r7, #7]
 80066ca:	2b06      	cmp	r3, #6
 80066cc:	d901      	bls.n	80066d2 <qTaskAttachQueue+0x32>
 80066ce:	2300      	movs	r3, #0
 80066d0:	e020      	b.n	8006714 <qTaskAttachQueue+0x74>
    if(NULL==Queue->pHead) return qFalse;    
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <qTaskAttachQueue+0x3e>
 80066da:	2300      	movs	r3, #0
 80066dc:	e01a      	b.n	8006714 <qTaskAttachQueue+0x74>
    Task->Flag[Mode] = (qBool_t)((Mode==qQUEUE_COUNT)? arg : (arg!=qFalse)); /*if mode is qQUEUE_COUNT, use their arg value as count*/
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	2b05      	cmp	r3, #5
 80066e2:	d007      	beq.n	80066f4 <qTaskAttachQueue+0x54>
 80066e4:	79bb      	ldrb	r3, [r7, #6]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	bf14      	ite	ne
 80066ea:	2301      	movne	r3, #1
 80066ec:	2300      	moveq	r3, #0
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	4619      	mov	r1, r3
 80066f2:	e000      	b.n	80066f6 <qTaskAttachQueue+0x56>
 80066f4:	79b9      	ldrb	r1, [r7, #6]
 80066f6:	79fb      	ldrb	r3, [r7, #7]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	460a      	mov	r2, r1
 80066fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    Task->Queue = (arg>0)? Queue : NULL; /*reject, no valid arg input*/
 8006702:	79bb      	ldrb	r3, [r7, #6]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <qTaskAttachQueue+0x6c>
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	e000      	b.n	800670e <qTaskAttachQueue+0x6e>
 800670c:	2300      	movs	r3, #0
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	6153      	str	r3, [r2, #20]
    return qTrue;
 8006712:	2301      	movs	r3, #1
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <_qCheckQueueEvents>:
/*============================================================================*/
static qTrigger_t _qCheckQueueEvents(qTask_t *Task){
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
    if(NULL==Task) return qTriggerNULL;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <_qCheckQueueEvents+0x12>
 800672e:	2300      	movs	r3, #0
 8006730:	e04c      	b.n	80067cc <_qCheckQueueEvents+0xac>
    if(NULL==Task->Queue) return qTriggerNULL;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <_qCheckQueueEvents+0x1e>
 800673a:	2300      	movs	r3, #0
 800673c:	e046      	b.n	80067cc <_qCheckQueueEvents+0xac>
    if(Task->Flag[_qIndex_QueueFull])       if(qQueueIsFull(Task->Queue))                                       return byQueueFull;           
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <_qCheckQueueEvents+0x3e>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fc29 	bl	8006fa6 <qQueueIsFull>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <_qCheckQueueEvents+0x3e>
 800675a:	2305      	movs	r3, #5
 800675c:	e036      	b.n	80067cc <_qCheckQueueEvents+0xac>
    if(Task->Flag[_qIndex_QueueCount]>0)    if(qQueueCount(Task->Queue) >= Task->Flag[_qIndex_QueueCount] )     return byQueueCount;            
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00f      	beq.n	800678a <_qCheckQueueEvents+0x6a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fc05 	bl	8006f7e <qQueueCount>
 8006774:	4603      	mov	r3, r0
 8006776:	461a      	mov	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800677e:	b2db      	uxtb	r3, r3
 8006780:	b29b      	uxth	r3, r3
 8006782:	429a      	cmp	r2, r3
 8006784:	d301      	bcc.n	800678a <_qCheckQueueEvents+0x6a>
 8006786:	2306      	movs	r3, #6
 8006788:	e020      	b.n	80067cc <_qCheckQueueEvents+0xac>
    if(Task->Flag[_qIndex_QueueReceiver])   if(qQueueCount(Task->Queue) >0)                                     return byQueueReceiver;   
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d009      	beq.n	80067aa <_qCheckQueueEvents+0x8a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fbef 	bl	8006f7e <qQueueCount>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <_qCheckQueueEvents+0x8a>
 80067a6:	2304      	movs	r3, #4
 80067a8:	e010      	b.n	80067cc <_qCheckQueueEvents+0xac>
    if(Task->Flag[_qIndex_QueueEmpty])      if(qQueueIsEmpty(Task->Queue))                                      return byQueueEmpty;       
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d009      	beq.n	80067ca <_qCheckQueueEvents+0xaa>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fbc7 	bl	8006f4e <qQueueIsEmpty>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <_qCheckQueueEvents+0xaa>
 80067c6:	2307      	movs	r3, #7
 80067c8:	e000      	b.n	80067cc <_qCheckQueueEvents+0xac>
    return qTriggerNULL;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <_qTriggerReleaseSchedEvent>:
#endif
/*============================================================================*/
static void _qTriggerReleaseSchedEvent(void){
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
    QUARKTS.Flag.Init = qFalse;
 80067d8:	4b14      	ldr	r3, [pc, #80]	; (800682c <_qTriggerReleaseSchedEvent+0x58>)
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    QUARKTS.Flag.ReleaseSched = qFalse;   
 80067e0:	4b12      	ldr	r3, [pc, #72]	; (800682c <_qTriggerReleaseSchedEvent+0x58>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    QUARKTS.EventInfo.FirstCall = (qBool_t)(!QUARKTS.Flag.FCallReleased);    
 80067e8:	4b10      	ldr	r3, [pc, #64]	; (800682c <_qTriggerReleaseSchedEvent+0x58>)
 80067ea:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bf0c      	ite	eq
 80067f4:	2301      	moveq	r3, #1
 80067f6:	2300      	movne	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	461a      	mov	r2, r3
 80067fc:	4b0b      	ldr	r3, [pc, #44]	; (800682c <_qTriggerReleaseSchedEvent+0x58>)
 80067fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    QUARKTS.EventInfo.Trigger = bySchedulingRelease;
 8006802:	4b0a      	ldr	r3, [pc, #40]	; (800682c <_qTriggerReleaseSchedEvent+0x58>)
 8006804:	2208      	movs	r2, #8
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    QUARKTS.EventInfo.TaskData = NULL;
 800680a:	4b08      	ldr	r3, [pc, #32]	; (800682c <_qTriggerReleaseSchedEvent+0x58>)
 800680c:	2200      	movs	r2, #0
 800680e:	635a      	str	r2, [r3, #52]	; 0x34
    if(QUARKTS.ReleaseSchedCallback!=NULL) QUARKTS.ReleaseSchedCallback((qEvent_t)&QUARKTS.EventInfo);
 8006810:	4b06      	ldr	r3, [pc, #24]	; (800682c <_qTriggerReleaseSchedEvent+0x58>)
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <_qTriggerReleaseSchedEvent+0x4c>
 8006818:	4b04      	ldr	r3, [pc, #16]	; (800682c <_qTriggerReleaseSchedEvent+0x58>)
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	4804      	ldr	r0, [pc, #16]	; (8006830 <_qTriggerReleaseSchedEvent+0x5c>)
 800681e:	4798      	blx	r3
    QUARKTS.Flag.FCallIdle = qTrue;      
 8006820:	4b02      	ldr	r3, [pc, #8]	; (800682c <_qTriggerReleaseSchedEvent+0x58>)
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8006828:	bf00      	nop
 800682a:	bd80      	pop	{r7, pc}
 800682c:	20000254 	.word	0x20000254
 8006830:	20000288 	.word	0x20000288

08006834 <qSchedulerGetTick>:
Feed the scheduler system tick. If TickProviderFcn is not provided in qSchedulerSetup, this 
call is mandatory and must be called once inside the dedicated timer interrupt service routine (ISR). 
*/    
void qSchedulerSysTick(void){_qSysTick_Epochs_++;}
/*============================================================================*/
qClock_t qSchedulerGetTick(void){   
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
	return ( NULL != QUARKTS.GetSysTick )? QUARKTS.GetSysTick() : _qSysTick_Epochs_;
 8006838:	4b06      	ldr	r3, [pc, #24]	; (8006854 <qSchedulerGetTick+0x20>)
 800683a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683c:	2b00      	cmp	r3, #0
 800683e:	d004      	beq.n	800684a <qSchedulerGetTick+0x16>
 8006840:	4b04      	ldr	r3, [pc, #16]	; (8006854 <qSchedulerGetTick+0x20>)
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006844:	4798      	blx	r3
 8006846:	4603      	mov	r3, r0
 8006848:	e001      	b.n	800684e <qSchedulerGetTick+0x1a>
 800684a:	4b03      	ldr	r3, [pc, #12]	; (8006858 <qSchedulerGetTick+0x24>)
 800684c:	681b      	ldr	r3, [r3, #0]
}
 800684e:	4618      	mov	r0, r3
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20000254 	.word	0x20000254
 8006858:	20000294 	.word	0x20000294

0800685c <qSchedulerRun>:
Executes the task-scheduler scheme. It must be called once after the task
pool has been defined.

  Note : qScheduleRun keeps the application in an endless loop
*/
void qSchedulerRun(void){
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
    qTask_t *Task = NULL; /*this pointer will hold the current node from the chain and/or the top enqueue node if available*/
 8006862:	2300      	movs	r3, #0
 8006864:	607b      	str	r3, [r7, #4]
    qSchedulerStartPoint{
 8006866:	4b2d      	ldr	r3, [pc, #180]	; (800691c <qSchedulerRun+0xc0>)
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        #ifdef Q_AUTO_CHAINREARRANGE
        if(!QUARKTS.Flag.Init) QUARKTS.Head = _qScheduler_RearrangeChain(QUARKTS.Head); /*if initial scheduling conditions changed, sort the chain by priority (init flag internally set)*/
 800686e:	4b2b      	ldr	r3, [pc, #172]	; (800691c <qSchedulerRun+0xc0>)
 8006870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d107      	bne.n	800688a <qSchedulerRun+0x2e>
 800687a:	4b28      	ldr	r3, [pc, #160]	; (800691c <qSchedulerRun+0xc0>)
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff fee6 	bl	8006650 <_qScheduler_RearrangeChain>
 8006884:	4602      	mov	r2, r0
 8006886:	4b25      	ldr	r3, [pc, #148]	; (800691c <qSchedulerRun+0xc0>)
 8006888:	619a      	str	r2, [r3, #24]
        #endif
        #ifdef Q_PRIORITY_QUEUE
        if((Task = _qScheduler_PriorityQueueGet())) Task->State = _qScheduler_Dispatch(Task, byQueueExtraction);  /*Available queueded task will be dispatched in every scheduling cycle : the queue has the higher precedence*/    
 800688a:	f7ff fca3 	bl	80061d4 <_qScheduler_PriorityQueueGet>
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d008      	beq.n	80068a8 <qSchedulerRun+0x4c>
 8006896:	2102      	movs	r1, #2
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f869 	bl	8006970 <_qScheduler_Dispatch>
 800689e:	4603      	mov	r3, r0
 80068a0:	461a      	mov	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        #endif
        if(_qScheduler_ReadyTasksAvailable()){  /*Check if all the tasks from the chain fulfill the conditions to get the qReady state, if at least one gained it,  enter here*/
 80068a8:	f000 f962 	bl	8006b70 <_qScheduler_ReadyTasksAvailable>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d01c      	beq.n	80068ec <qSchedulerRun+0x90>
            while((Task = _qScheduler_GetNodeFromChain())) /*Get node by node from the chain until no more available*/
 80068b2:	e014      	b.n	80068de <qSchedulerRun+0x82>
                Task->State = (qTaskState_t) ((qReady == Task->State) ? _qScheduler_Dispatch(Task, Task->Trigger) : qWaiting);  /*Dispatch the qReady tasks, otherwise put it in qWaiting State*/
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d10a      	bne.n	80068d6 <qSchedulerRun+0x7a>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f850 	bl	8006970 <_qScheduler_Dispatch>
 80068d0:	4603      	mov	r3, r0
 80068d2:	461a      	mov	r2, r3
 80068d4:	e000      	b.n	80068d8 <qSchedulerRun+0x7c>
 80068d6:	2200      	movs	r2, #0
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            while((Task = _qScheduler_GetNodeFromChain())) /*Get node by node from the chain until no more available*/
 80068de:	f000 f81f 	bl	8006920 <_qScheduler_GetNodeFromChain>
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e4      	bne.n	80068b4 <qSchedulerRun+0x58>
 80068ea:	e00a      	b.n	8006902 <qSchedulerRun+0xa6>
        }
        else if( NULL==Task && QUARKTS.IDLECallback) _qScheduler_Dispatch(NULL, byNoReadyTasks); /*no tasks are available for execution, run the idle task*/
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d107      	bne.n	8006902 <qSchedulerRun+0xa6>
 80068f2:	4b0a      	ldr	r3, [pc, #40]	; (800691c <qSchedulerRun+0xc0>)
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <qSchedulerRun+0xa6>
 80068fa:	2109      	movs	r1, #9
 80068fc:	2000      	movs	r0, #0
 80068fe:	f000 f837 	bl	8006970 <_qScheduler_Dispatch>
    }qSchedulerEndPoint; /*scheduling end-point (also check for scheduling-release request)*/
 8006902:	4b06      	ldr	r3, [pc, #24]	; (800691c <qSchedulerRun+0xc0>)
 8006904:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0af      	beq.n	800686e <qSchedulerRun+0x12>
 800690e:	f7ff ff61 	bl	80067d4 <_qTriggerReleaseSchedEvent>
}
 8006912:	bf00      	nop
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20000254 	.word	0x20000254

08006920 <_qScheduler_GetNodeFromChain>:
/*============================================================================*/
static qTask_t* _qScheduler_GetNodeFromChain(void){ 
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
    static qTask_t *ChainIterator = __qChainInitializer; /*used to keep on track the current chain position*/
    qTask_t *Node;  /*used the hold the node*/
    if(__qChainInitializer == ChainIterator) ChainIterator = QUARKTS.Head; /*First call, start from the head*/
 8006926:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <_qScheduler_GetNodeFromChain+0x44>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a0f      	ldr	r2, [pc, #60]	; (8006968 <_qScheduler_GetNodeFromChain+0x48>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d103      	bne.n	8006938 <_qScheduler_GetNodeFromChain+0x18>
 8006930:	4b0e      	ldr	r3, [pc, #56]	; (800696c <_qScheduler_GetNodeFromChain+0x4c>)
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	4a0b      	ldr	r2, [pc, #44]	; (8006964 <_qScheduler_GetNodeFromChain+0x44>)
 8006936:	6013      	str	r3, [r2, #0]
    Node = ChainIterator; /*obtain the current node from the chain*/
 8006938:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <_qScheduler_GetNodeFromChain+0x44>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	607b      	str	r3, [r7, #4]
    ChainIterator = (ChainIterator)? ChainIterator->Next : QUARKTS.Head; /*Tail reached, reset the iterator to the head*/
 800693e:	4b09      	ldr	r3, [pc, #36]	; (8006964 <_qScheduler_GetNodeFromChain+0x44>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <_qScheduler_GetNodeFromChain+0x2e>
 8006946:	4b07      	ldr	r3, [pc, #28]	; (8006964 <_qScheduler_GetNodeFromChain+0x44>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	e001      	b.n	8006952 <_qScheduler_GetNodeFromChain+0x32>
 800694e:	4b07      	ldr	r3, [pc, #28]	; (800696c <_qScheduler_GetNodeFromChain+0x4c>)
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	4a04      	ldr	r2, [pc, #16]	; (8006964 <_qScheduler_GetNodeFromChain+0x44>)
 8006954:	6013      	str	r3, [r2, #0]
    return Node; /*return the task node at current chain position*/
 8006956:	687b      	ldr	r3, [r7, #4]
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	20000024 	.word	0x20000024
 8006968:	20000294 	.word	0x20000294
 800696c:	20000254 	.word	0x20000254

08006970 <_qScheduler_Dispatch>:
/*============================================================================*/
static qTaskState_t _qScheduler_Dispatch(qTask_t *Task, const qTrigger_t Event){
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	70fb      	strb	r3, [r7, #3]
    switch(Event){ /*take the necessary actions before dispatching, depending on the event that triggered the task*/
 800697c:	78fb      	ldrb	r3, [r7, #3]
 800697e:	3b01      	subs	r3, #1
 8006980:	2b08      	cmp	r3, #8
 8006982:	f200 8097 	bhi.w	8006ab4 <_qScheduler_Dispatch+0x144>
 8006986:	a201      	add	r2, pc, #4	; (adr r2, 800698c <_qScheduler_Dispatch+0x1c>)
 8006988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698c:	080069b1 	.word	0x080069b1
 8006990:	08006a69 	.word	0x08006a69
 8006994:	08006a3b 	.word	0x08006a3b
 8006998:	08006a4d 	.word	0x08006a4d
 800699c:	08006a5f 	.word	0x08006a5f
 80069a0:	08006a5f 	.word	0x08006a5f
 80069a4:	08006a5f 	.word	0x08006a5f
 80069a8:	08006ab5 	.word	0x08006ab5
 80069ac:	08006a79 	.word	0x08006a79
        case byTimeElapsed:
            /*handle the iteration value and the FirstIteration flag*/
            Task->Iterations = (QUARKTS.EventInfo.FirstIteration = (qBool_t)((Task->Iterations!=qPeriodic) && (Task->Iterations<0)))? -Task->Iterations : Task->Iterations;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069b4:	b21b      	sxth	r3, r3
 80069b6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80069ba:	d006      	beq.n	80069ca <_qScheduler_Dispatch+0x5a>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069c0:	b21b      	sxth	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	da01      	bge.n	80069ca <_qScheduler_Dispatch+0x5a>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <_qScheduler_Dispatch+0x5c>
 80069ca:	2300      	movs	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	4a66      	ldr	r2, [pc, #408]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 80069d0:	4619      	mov	r1, r3
 80069d2:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d007      	beq.n	80069ea <_qScheduler_Dispatch+0x7a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069de:	b21b      	sxth	r3, r3
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	425b      	negs	r3, r3
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	b21b      	sxth	r3, r3
 80069e8:	e002      	b.n	80069f0 <_qScheduler_Dispatch+0x80>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069ee:	b21b      	sxth	r3, r3
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	84d3      	strh	r3, [r2, #38]	; 0x26
            if( qPeriodic!= Task->Iterations) Task->Iterations--; /*Decrease the iteration value*/
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069f8:	b21b      	sxth	r3, r3
 80069fa:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80069fe:	d008      	beq.n	8006a12 <_qScheduler_Dispatch+0xa2>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a04:	b21b      	sxth	r3, r3
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	b21a      	sxth	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	84da      	strh	r2, [r3, #38]	; 0x26
            if( (QUARKTS.EventInfo.LastIteration = (qBool_t)(0 == Task->Iterations)) ) Task->Flag[_qIndex_Enabled] = qFalse; /*When the iteration value is reached, the task will be disabled*/            
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a16:	b21b      	sxth	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	bf0c      	ite	eq
 8006a1c:	2301      	moveq	r3, #1
 8006a1e:	2300      	movne	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	461a      	mov	r2, r3
 8006a24:	4b50      	ldr	r3, [pc, #320]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006a26:	4611      	mov	r1, r2
 8006a28:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
 8006a2c:	2a00      	cmp	r2, #0
 8006a2e:	d043      	beq.n	8006ab8 <_qScheduler_Dispatch+0x148>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            break;
 8006a38:	e03e      	b.n	8006ab8 <_qScheduler_Dispatch+0x148>
        case byAsyncEvent:
            QUARKTS.EventInfo.EventData = Task->AsyncData; /*Transfer async-data to the eventinfo structure*/
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	4a4a      	ldr	r2, [pc, #296]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006a40:	6393      	str	r3, [r2, #56]	; 0x38
            Task->Flag[_qIndex_AsyncRun] = qFalse; /*Clear the async flag*/            
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
            break;
 8006a4a:	e036      	b.n	8006aba <_qScheduler_Dispatch+0x14a>
        #ifdef Q_QUEUES    
        case byQueueReceiver:
            QUARKTS.EventInfo.EventData = qQueuePeek(Task->Queue); /*the EventData will point to the RBuffer front-data*/
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 fac2 	bl	8006fda <qQueuePeek>
 8006a56:	4602      	mov	r2, r0
 8006a58:	4b43      	ldr	r3, [pc, #268]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006a5a:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 8006a5c:	e02d      	b.n	8006aba <_qScheduler_Dispatch+0x14a>
        case byQueueFull: case byQueueCount: case byQueueEmpty: 
            QUARKTS.EventInfo.EventData = (void*)Task->Queue;  /*the EventData will point to the the linked RingBuffer*/
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	4a41      	ldr	r2, [pc, #260]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006a64:	6393      	str	r3, [r2, #56]	; 0x38
            break;
 8006a66:	e028      	b.n	8006aba <_qScheduler_Dispatch+0x14a>
        #endif
        #ifdef Q_PRIORITY_QUEUE
        case byQueueExtraction:
            QUARKTS.EventInfo.EventData = QUARKTS.QueueData; /*get the extracted data from queue*/
 8006a68:	4b3f      	ldr	r3, [pc, #252]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	4a3e      	ldr	r2, [pc, #248]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006a6e:	6393      	str	r3, [r2, #56]	; 0x38
            QUARKTS.QueueData = NULL;
 8006a70:	4b3d      	ldr	r3, [pc, #244]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	609a      	str	r2, [r3, #8]
            break;
 8006a76:	e020      	b.n	8006aba <_qScheduler_Dispatch+0x14a>
        #endif
        case byNoReadyTasks: /*only used for the idle task*/
            QUARKTS.EventInfo.FirstCall = (qBool_t)(!QUARKTS.Flag.FCallIdle);
 8006a78:	4b3b      	ldr	r3, [pc, #236]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006a7a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	bf0c      	ite	eq
 8006a84:	2301      	moveq	r3, #1
 8006a86:	2300      	movne	r3, #0
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	4b36      	ldr	r3, [pc, #216]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            QUARKTS.EventInfo.Trigger = Event;
 8006a92:	4a35      	ldr	r2, [pc, #212]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
            QUARKTS.EventInfo.TaskData = NULL;
 8006a9a:	4b33      	ldr	r3, [pc, #204]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	635a      	str	r2, [r3, #52]	; 0x34
            QUARKTS.IDLECallback((qEvent_t)&QUARKTS.EventInfo); /*run the idle callback*/
 8006aa0:	4b31      	ldr	r3, [pc, #196]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	4831      	ldr	r0, [pc, #196]	; (8006b6c <_qScheduler_Dispatch+0x1fc>)
 8006aa6:	4798      	blx	r3
            QUARKTS.Flag.FCallIdle = qTrue;      
 8006aa8:	4b2f      	ldr	r3, [pc, #188]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            return qSuspended; /*No more things to do*/
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e055      	b.n	8006b60 <_qScheduler_Dispatch+0x1f0>
        default: break;
 8006ab4:	bf00      	nop
 8006ab6:	e000      	b.n	8006aba <_qScheduler_Dispatch+0x14a>
            break;
 8006ab8:	bf00      	nop
    }
    Task->State = qRunning; /*put the task in running state*/
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2202      	movs	r2, #2
 8006abe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    /*Fill the event info structure*/
    _qEvent_FillCommonFields(QUARKTS.EventInfo, Event, (qBool_t)(!Task->Flag[_qIndex_InitFlag]), Task->TaskData); /*Fill common fields of EventInfo: Trigger, FirstCall and TaskData*/ 
 8006ac2:	4a29      	ldr	r2, [pc, #164]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	bf0c      	ite	eq
 8006ad6:	2301      	moveq	r3, #1
 8006ad8:	2300      	movne	r3, #0
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	461a      	mov	r2, r3
 8006ade:	4b22      	ldr	r3, [pc, #136]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	4a1f      	ldr	r2, [pc, #124]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006aea:	6353      	str	r3, [r2, #52]	; 0x34
    QUARKTS.CurrentRunningTask = Task; /*needed for qTaskSelf()*/
 8006aec:	4a1e      	ldr	r2, [pc, #120]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if ( NULL != Task->StateMachine  && __qFSMCallbackMode==Task->Callback) qStateMachine_Run(Task->StateMachine, (void*)&QUARKTS.EventInfo);  /*If the task has a FSM attached, just run it*/  
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00a      	beq.n	8006b10 <_qScheduler_Dispatch+0x1a0>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d106      	bne.n	8006b10 <_qScheduler_Dispatch+0x1a0>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	4919      	ldr	r1, [pc, #100]	; (8006b6c <_qScheduler_Dispatch+0x1fc>)
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 f907 	bl	8006d1c <qStateMachine_Run>
 8006b0e:	e007      	b.n	8006b20 <_qScheduler_Dispatch+0x1b0>
    else if ( NULL != Task->Callback ) Task->Callback((qEvent_t)&QUARKTS.EventInfo); /*else, just launch the callback function*/        
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <_qScheduler_Dispatch+0x1b0>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	4813      	ldr	r0, [pc, #76]	; (8006b6c <_qScheduler_Dispatch+0x1fc>)
 8006b1e:	4798      	blx	r3
    QUARKTS.CurrentRunningTask = NULL;
 8006b20:	4b11      	ldr	r3, [pc, #68]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	62da      	str	r2, [r3, #44]	; 0x2c
    #ifdef Q_QUEUES 
        if( byQueueReceiver == Event) qQueueRemoveFront(Task->Queue);  /*remove the data from the Queue, if the event was byQueueDequeue*/
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	d104      	bne.n	8006b36 <_qScheduler_Dispatch+0x1c6>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fa79 	bl	8007028 <qQueueRemoveFront>
    #endif
    Task->Flag[_qIndex_InitFlag] = qTrue; /*clear the init flag*/
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    QUARKTS.EventInfo.FirstIteration = qFalse;
 8006b3e:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    QUARKTS.EventInfo.LastIteration =  qFalse; 
 8006b46:	4b08      	ldr	r3, [pc, #32]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    QUARKTS.EventInfo.EventData = NULL; /*clear the eventdata*/
 8006b4e:	4b06      	ldr	r3, [pc, #24]	; (8006b68 <_qScheduler_Dispatch+0x1f8>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	639a      	str	r2, [r3, #56]	; 0x38
    Task->Cycles++; /*increase the task cycles value*/
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	621a      	str	r2, [r3, #32]
    return qSuspended;
 8006b5e:	2303      	movs	r3, #3
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	20000254 	.word	0x20000254
 8006b6c:	20000288 	.word	0x20000288

08006b70 <_qScheduler_ReadyTasksAvailable>:
/*============================================================================*/
static qBool_t _qScheduler_ReadyTasksAvailable(void){ /*this method checks for tasks that fulfill the conditions to get the qReady state*/
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
    qTask_t *Task = NULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	607b      	str	r3, [r7, #4]
    #ifdef Q_QUEUES 
    qTrigger_t trg = qTriggerNULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	70bb      	strb	r3, [r7, #2]
    #endif
    qBool_t nTaskReady = qFalse; /*the return is to notify that at least one task gained the qReady state*/
 8006b7e:	2300      	movs	r3, #0
 8006b80:	70fb      	strb	r3, [r7, #3]
    for(Task = QUARKTS.Head; Task; Task = Task->Next){ /*loop every task in the chain : only one event will be verified by node*/
 8006b82:	4b40      	ldr	r3, [pc, #256]	; (8006c84 <_qScheduler_ReadyTasksAvailable+0x114>)
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	607b      	str	r3, [r7, #4]
 8006b88:	e073      	b.n	8006c72 <_qScheduler_ReadyTasksAvailable+0x102>
        if(Task->Flag[_qIndex_Enabled]){ /*nested check for timed task, check the first requirement(the task must be enabled)*/
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d042      	beq.n	8006c1c <_qScheduler_ReadyTasksAvailable+0xac>
            if(_qTaskHasPendingIterations(Task)){ /*then task should be periodic or must have available iters*/
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b9a:	b21b      	sxth	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	da0c      	bge.n	8006bba <_qScheduler_ReadyTasksAvailable+0x4a>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ba4:	b21b      	sxth	r3, r3
 8006ba6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8006baa:	d006      	beq.n	8006bba <_qScheduler_ReadyTasksAvailable+0x4a>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bb0:	b21b      	sxth	r3, r3
 8006bb2:	425b      	negs	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	dc0b      	bgt.n	8006bd0 <_qScheduler_ReadyTasksAvailable+0x60>
 8006bb8:	e004      	b.n	8006bc4 <_qScheduler_ReadyTasksAvailable+0x54>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bbe:	b21b      	sxth	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	dc05      	bgt.n	8006bd0 <_qScheduler_ReadyTasksAvailable+0x60>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bc8:	b21b      	sxth	r3, r3
 8006bca:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8006bce:	d125      	bne.n	8006c1c <_qScheduler_ReadyTasksAvailable+0xac>
                if(_qTaskDeadlineReached(Task)){ /*finally, check the time deadline*/
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	ee07 3a90 	vmov	s15, r3
 8006bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bdc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be4:	d00a      	beq.n	8006bfc <_qScheduler_ReadyTasksAvailable+0x8c>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	69da      	ldr	r2, [r3, #28]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	f7ff fa81 	bl	80060f8 <_qScheduler_TimeDeadlineCheck>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00f      	beq.n	8006c1c <_qScheduler_ReadyTasksAvailable+0xac>
                    Task->ClockStart = qSchedulerGetTick(); /*Restart the task time*/
 8006bfc:	f7ff fe1a 	bl	8006834 <qSchedulerGetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	61da      	str	r2, [r3, #28]
                    Task->State = qReady; /*Put the task in ready state*/
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                    Task->Trigger = byTimeElapsed; /*Set the corresponding trigger*/
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                    nTaskReady = qTrue; /*at least one task in the chain is ready to run*/
 8006c16:	2301      	movs	r3, #1
 8006c18:	70fb      	strb	r3, [r7, #3]
                    continue; /*check the next task*/                   
 8006c1a:	e027      	b.n	8006c6c <_qScheduler_ReadyTasksAvailable+0xfc>
                }
            }
        }
        #ifdef Q_QUEUES  
        if((trg=_qCheckQueueEvents(Task)) != qTriggerNULL){ /*If the deadline has not met, check if there is a RBuffer event available*/
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff fd7f 	bl	8006720 <_qCheckQueueEvents>
 8006c22:	4603      	mov	r3, r0
 8006c24:	70bb      	strb	r3, [r7, #2]
 8006c26:	78bb      	ldrb	r3, [r7, #2]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <_qScheduler_ReadyTasksAvailable+0xd2>
            Task->State = qReady; /*Put the task in ready state*/
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            Task->Trigger = trg; /*If a RBuffer event exist, the flag will be available in the <trg> variable*/
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	78ba      	ldrb	r2, [r7, #2]
 8006c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            nTaskReady = qTrue;  /*at least one task in the chain is ready to run*/
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	70fb      	strb	r3, [r7, #3]
            continue; /*check the next task*/
 8006c40:	e014      	b.n	8006c6c <_qScheduler_ReadyTasksAvailable+0xfc>
        }
        #endif
        if( Task->Flag[_qIndex_AsyncRun]){   /*The last check will be if the task has an async event*/
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <_qScheduler_ReadyTasksAvailable+0xf4>
            Task->State = qReady; /*Put the task in ready state*/
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            Task->Trigger = byAsyncEvent; /*Set the corresponding trigger*/
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2203      	movs	r2, #3
 8006c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            nTaskReady = qTrue;  /*at least one task in the chain is ready to run*/
 8006c5e:	2301      	movs	r3, #1
 8006c60:	70fb      	strb	r3, [r7, #3]
            continue; /*check the next task*/
 8006c62:	e003      	b.n	8006c6c <_qScheduler_ReadyTasksAvailable+0xfc>
        }
        Task->State = qSuspended; /*If the task has no available events, put it in a suspended state*/
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2203      	movs	r2, #3
 8006c68:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    for(Task = QUARKTS.Head; Task; Task = Task->Next){ /*loop every task in the chain : only one event will be verified by node*/
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	607b      	str	r3, [r7, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d188      	bne.n	8006b8a <_qScheduler_ReadyTasksAvailable+0x1a>
    }
    return nTaskReady;
 8006c78:	78fb      	ldrb	r3, [r7, #3]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000254 	.word	0x20000254

08006c88 <qStateMachine_Init>:

Return value:

    Returns qTrue on success, otherwise returns qFalse;
*/
qBool_t qStateMachine_Init(qSM_t *obj, qSM_State_t InitState, qSM_SubState_t SuccessState, qSM_SubState_t FailureState, qSM_SubState_t UnexpectedState, qSM_SubState_t BeforeAnyState){
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	603b      	str	r3, [r7, #0]
    if( NULL==obj || NULL==InitState ) return qFalse;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <qStateMachine_Init+0x1a>
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <qStateMachine_Init+0x1e>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	e024      	b.n	8006cf0 <qStateMachine_Init+0x68>
    obj->NextState = InitState;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	601a      	str	r2, [r3, #0]
    qConstField_Set(qSM_State_t, obj->PreviousState)/*obj->PreviousState*/ = NULL;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3304      	adds	r3, #4
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]
    qConstField_Set(qBool_t, obj->StateFirstEntry)/*obj->StateFirstEntry*/ = 0;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	330e      	adds	r3, #14
 8006cb8:	2200      	movs	r2, #0
 8006cba:	701a      	strb	r2, [r3, #0]
    qConstField_Set(qSM_Status_t, obj->PreviousReturnStatus)/*obj->PreviousReturnStatus*/ = qSM_EXIT_SUCCESS;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	330c      	adds	r3, #12
 8006cc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006cc4:	801a      	strh	r2, [r3, #0]
    qConstField_Set(qSM_SubState_t, obj->qPrivate.__Failure)/*obj->qPrivate.__Failure*/ = FailureState;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	3314      	adds	r3, #20
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	601a      	str	r2, [r3, #0]
    qConstField_Set(qSM_SubState_t, obj->qPrivate.__Success)/*obj->qPrivate.__Success*/ = SuccessState;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3318      	adds	r3, #24
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	601a      	str	r2, [r3, #0]
    qConstField_Set(qSM_SubState_t, obj->qPrivate.__Unexpected)/*obj->qPrivate.__Unexpected*/ = UnexpectedState;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	331c      	adds	r3, #28
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	601a      	str	r2, [r3, #0]
    qConstField_Set(qSM_SubState_t, obj->qPrivate.__BeforeAnyState)/*obj->qPrivate.__BeforeAnyState*/ = BeforeAnyState;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3320      	adds	r3, #32
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	601a      	str	r2, [r3, #0]
    qConstField_Set(qSM_State_t, obj->LastState)/*obj->LastState*/ = NULL;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3308      	adds	r3, #8
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
    return qTrue;
 8006cee:	2301      	movs	r3, #1
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <qStatemachine_ExecSubStateIfAvailable>:
/*============================================================================*/
static void qStatemachine_ExecSubStateIfAvailable(qSM_SubState_t substate, qSM_t* obj){
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
    if (NULL != substate) substate(obj);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <qStatemachine_ExecSubStateIfAvailable+0x16>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6838      	ldr	r0, [r7, #0]
 8006d10:	4798      	blx	r3
}
 8006d12:	bf00      	nop
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <qStateMachine_Run>:
    - Data : Represents the FSM arguments. All arguments must be passed by 
             reference and cast to (void *). Only one argument is allowed, so,
             for multiple arguments, create a structure that contains all of 
             the arguments and pass a pointer to that structure.
*/    
void qStateMachine_Run(qSM_t *obj, void *Data){
 8006d1c:	b590      	push	{r4, r7, lr}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
    qSM_State_t prev  = NULL; /*used to hold the previous state*/
 8006d26:	2300      	movs	r3, #0
 8006d28:	60fb      	str	r3, [r7, #12]
    if( NULL == obj ) return;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d057      	beq.n	8006de0 <qStateMachine_Run+0xc4>
    qConstField_Set(void* ,obj->Data)/*obj->Data*/ = Data;   /*pass the data through the fsm*/
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3310      	adds	r3, #16
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	601a      	str	r2, [r3, #0]
    qStatemachine_ExecSubStateIfAvailable( obj->qPrivate.__BeforeAnyState , obj); /*eval the BeforeAnyState if available*/
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	6879      	ldr	r1, [r7, #4]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff ffdc 	bl	8006cfc <qStatemachine_ExecSubStateIfAvailable>
    if( NULL != obj->NextState ){ /*eval nextState if available*/
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d025      	beq.n	8006d98 <qStateMachine_Run+0x7c>
        qConstField_Set(qBool_t, obj->StateFirstEntry)/*obj->StateFirstEntry*/ = (qBool_t)(obj->LastState != obj->NextState);  /*Get the StateFirstEntry flag*/
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	bf14      	ite	ne
 8006d58:	2301      	movne	r3, #1
 8006d5a:	2300      	moveq	r3, #0
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	330e      	adds	r3, #14
 8006d62:	701a      	strb	r2, [r3, #0]
        if(obj->StateFirstEntry) qConstField_Set(qSM_State_t, obj->PreviousState)/*obj->PreviousState*/ = obj->LastState ; /*if StateFistEntry is set, update the PreviousState*/
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	7b9b      	ldrb	r3, [r3, #14]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d004      	beq.n	8006d76 <qStateMachine_Run+0x5a>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6892      	ldr	r2, [r2, #8]
 8006d74:	601a      	str	r2, [r3, #0]
        prev = obj->NextState; /*keep the next state in prev for LastState update*/
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	60fb      	str	r3, [r7, #12]
        qConstField_Set(qSM_Status_t, obj->PreviousReturnStatus)/*obj->PreviousReturnStatus*/ = obj->NextState(obj); /*Eval the current state, and get their return status*/
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	f102 040c 	add.w	r4, r2, #12
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	4798      	blx	r3
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	8023      	strh	r3, [r4, #0]
        qConstField_Set(qSM_State_t, obj->LastState)/*obj->LastState*/ = prev; /*update the LastState*/
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3308      	adds	r3, #8
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	e004      	b.n	8006da2 <qStateMachine_Run+0x86>
    }
    else    qConstField_Set(qSM_Status_t, obj->PreviousReturnStatus)/*obj->PreviousReturnStatus*/ = qSM_EXIT_FAILURE; /*otherwise jump to the failure state*/
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	330c      	adds	r3, #12
 8006d9c:	f248 0201 	movw	r2, #32769	; 0x8001
 8006da0:	801a      	strh	r2, [r3, #0]
    
    switch(obj->PreviousReturnStatus){ /*Check return status to eval extra states*/
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006da8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8006dac:	d009      	beq.n	8006dc2 <qStateMachine_Run+0xa6>
 8006dae:	4a0e      	ldr	r2, [pc, #56]	; (8006de8 <qStateMachine_Run+0xcc>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d10d      	bne.n	8006dd0 <qStateMachine_Run+0xb4>
        case qSM_EXIT_FAILURE:  qStatemachine_ExecSubStateIfAvailable( obj->qPrivate.__Failure, obj); /*Run failure state if available*/
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff ff9e 	bl	8006cfc <qStatemachine_ExecSubStateIfAvailable>
            break;
 8006dc0:	e00f      	b.n	8006de2 <qStateMachine_Run+0xc6>
        case qSM_EXIT_SUCCESS:  qStatemachine_ExecSubStateIfAvailable( obj->qPrivate.__Success, obj); /*Run success state if available*/
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7ff ff97 	bl	8006cfc <qStatemachine_ExecSubStateIfAvailable>
            break;
 8006dce:	e008      	b.n	8006de2 <qStateMachine_Run+0xc6>
        default:                qStatemachine_ExecSubStateIfAvailable( obj->qPrivate.__Unexpected, obj ); /*Run unexpected state if available*/
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7ff ff90 	bl	8006cfc <qStatemachine_ExecSubStateIfAvailable>
            break;
 8006ddc:	bf00      	nop
 8006dde:	e000      	b.n	8006de2 <qStateMachine_Run+0xc6>
    if( NULL == obj ) return;
 8006de0:	bf00      	nop
    }
 }
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd90      	pop	{r4, r7, pc}
 8006de8:	ffff8001 	.word	0xffff8001

08006dec <qSTimerSet>:

Return value:

    Returns qTrue on success, otherwise, returns qFalse.
*/
qBool_t qSTimerSet(qSTimer_t *obj, const qTime_t Time){
 8006dec:	b590      	push	{r4, r7, lr}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	ed87 0a00 	vstr	s0, [r7]
    if(NULL==obj) return qFalse;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <qSTimerSet+0x16>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	e011      	b.n	8006e26 <qSTimerSet+0x3a>
    qConstField_Set(qClock_t, obj->TV)/*obj->TV*/ = qTime2Clock(Time); /*set the STimer time in epochs*/
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	1d1c      	adds	r4, r3, #4
 8006e06:	ed97 0a00 	vldr	s0, [r7]
 8006e0a:	f7ff f9a9 	bl	8006160 <qTime2Clock>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	6023      	str	r3, [r4, #0]
    qConstField_Set(qClock_t, obj->Start)/*obj->Start*/ = qSchedulerGetTick(); /*set the init time of the STimer with the current system epoch value*/
 8006e12:	687c      	ldr	r4, [r7, #4]
 8006e14:	f7ff fd0e 	bl	8006834 <qSchedulerGetTick>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	6023      	str	r3, [r4, #0]
    qConstField_Set(qBool_t, obj->SR)/*obj->SR*/ = qTrue; /*enable the STimer*/
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3308      	adds	r3, #8
 8006e20:	2201      	movs	r2, #1
 8006e22:	701a      	strb	r2, [r3, #0]
    return qTrue;
 8006e24:	2301      	movs	r3, #1
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd90      	pop	{r4, r7, pc}

08006e2e <qSTimerExpired>:

    Returns qTrue when STimer expires, otherwise, returns qFalse.
    > Note 1: A disarmed STimer also returns false.

*/
qBool_t qSTimerExpired(const qSTimer_t *obj){
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b082      	sub	sp, #8
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
    if(NULL==obj) return qFalse;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <qSTimerExpired+0x12>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	e010      	b.n	8006e62 <qSTimerExpired+0x34>
    if(!obj->SR) return qFalse; 
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	7a1b      	ldrb	r3, [r3, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <qSTimerExpired+0x1e>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	e00a      	b.n	8006e62 <qSTimerExpired+0x34>
    return (qBool_t)(qSTimerElapsed(obj)>=obj->TV); 
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f80c 	bl	8006e6a <qSTimerElapsed>
 8006e52:	4602      	mov	r2, r0
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	bf2c      	ite	cs
 8006e5c:	2301      	movcs	r3, #1
 8006e5e:	2300      	movcc	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <qSTimerElapsed>:

Return value:

    The Elapsed time specified in epochs
*/
qClock_t qSTimerElapsed(const qSTimer_t *obj){
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
    if(NULL==obj) return 0ul;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <qSTimerElapsed+0x12>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	e00b      	b.n	8006e94 <qSTimerElapsed+0x2a>
    if(!obj->SR) return 0;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	7a1b      	ldrb	r3, [r3, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <qSTimerElapsed+0x1e>
 8006e84:	2300      	movs	r3, #0
 8006e86:	e005      	b.n	8006e94 <qSTimerElapsed+0x2a>
    return (qSchedulerGetTick()- obj->Start);
 8006e88:	f7ff fcd4 	bl	8006834 <qSchedulerGetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	1ad3      	subs	r3, r2, r3
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <qQueueCreate>:
    Return value:

    qTrue on success, otherwise returns qFalse.

 */
qBool_t qQueueCreate(qQueue_t *obj, void* DataArea, qSize_t ItemSize, qSize_t ItemsCount ){
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	460b      	mov	r3, r1
 8006eac:	80fb      	strh	r3, [r7, #6]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	80bb      	strh	r3, [r7, #4]
    if( NULL == obj || NULL == DataArea || ItemsCount <= 0 || ItemsCount <= 0)  return qFalse;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d008      	beq.n	8006eca <qQueueCreate+0x2e>
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <qQueueCreate+0x2e>
 8006ebe:	88bb      	ldrh	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <qQueueCreate+0x2e>
 8006ec4:	88bb      	ldrh	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <qQueueCreate+0x32>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	e018      	b.n	8006f00 <qQueueCreate+0x64>
    obj->ItemsCount = ItemsCount;   /* Initialise the queue members*/
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	88ba      	ldrh	r2, [r7, #4]
 8006ed2:	825a      	strh	r2, [r3, #18]
    obj->ItemSize = ItemSize;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	88fa      	ldrh	r2, [r7, #6]
 8006ed8:	829a      	strh	r2, [r3, #20]
    obj->pHead = DataArea;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	601a      	str	r2, [r3, #0]
    obj->pTail = obj->pHead + (obj->ItemsCount * obj->ItemSize); 
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	8a52      	ldrh	r2, [r2, #18]
 8006ee8:	4611      	mov	r1, r2
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	8a92      	ldrh	r2, [r2, #20]
 8006eee:	fb02 f201 	mul.w	r2, r2, r1
 8006ef2:	441a      	add	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	605a      	str	r2, [r3, #4]
    qQueueReset(obj);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 f805 	bl	8006f08 <qQueueReset>
    return qTrue;
 8006efe:	2301      	movs	r3, #1
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <qQueueReset>:
 
Parameters:

    - obj : a pointer to the Queue object
*/
void qQueueReset(qQueue_t *obj){
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
    if(NULL == obj) return;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d017      	beq.n	8006f46 <qQueueReset+0x3e>
    qEnterCritical();
 8006f16:	f7ff f903 	bl	8006120 <qEnterCritical>
    obj->ItemsWaiting = 0u;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	821a      	strh	r2, [r3, #16]
    obj->pcWriteTo = obj->pHead;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	609a      	str	r2, [r3, #8]
    obj->pcReadFrom = obj->pHead + ( ( obj->ItemsCount - 1u ) * obj->ItemSize );
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	8a5b      	ldrh	r3, [r3, #18]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	6879      	ldr	r1, [r7, #4]
 8006f34:	8a89      	ldrh	r1, [r1, #20]
 8006f36:	fb01 f303 	mul.w	r3, r1, r3
 8006f3a:	441a      	add	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	60da      	str	r2, [r3, #12]
    qExitCritical();
 8006f40:	f7ff f8fe 	bl	8006140 <qExitCritical>
 8006f44:	e000      	b.n	8006f48 <qQueueReset+0x40>
    if(NULL == obj) return;
 8006f46:	bf00      	nop
}
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <qQueueIsEmpty>:
  
Return value:

    qTrue if the Queue is empty, qFalse if it is not.
 */
qBool_t qQueueIsEmpty(qQueue_t *obj){
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
    return (qBool_t)(obj ?  obj->ItemsWaiting == 0u : qTrue);    
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d009      	beq.n	8006f70 <qQueueIsEmpty+0x22>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	8a1b      	ldrh	r3, [r3, #16]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	bf0c      	ite	eq
 8006f66:	2301      	moveq	r3, #1
 8006f68:	2300      	movne	r3, #0
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	e000      	b.n	8006f72 <qQueueIsEmpty+0x24>
 8006f70:	2301      	movs	r3, #1
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <qQueueCount>:
  
Return value:

    The number of elements in the queue
 */
qSize_t qQueueCount(qQueue_t *obj){
 8006f7e:	b480      	push	{r7}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
    return (qBool_t)(obj ?  obj->ItemsWaiting : 0u);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d005      	beq.n	8006f98 <qQueueCount+0x1a>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	8a1b      	ldrh	r3, [r3, #16]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	e000      	b.n	8006f9a <qQueueCount+0x1c>
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <qQueueIsFull>:
Return value:

    qTrue if the Queue is full, qFalse if it is not.
 */
/*============================================================================*/
qBool_t qQueueIsFull(qQueue_t *obj){
 8006fa6:	b480      	push	{r7}
 8006fa8:	b083      	sub	sp, #12
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
    return (qBool_t)(obj ?  obj->ItemsWaiting == obj->ItemsCount : qFalse);  
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00b      	beq.n	8006fcc <qQueueIsFull+0x26>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	8a1b      	ldrh	r3, [r3, #16]
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	8a5b      	ldrh	r3, [r3, #18]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	bf0c      	ite	eq
 8006fc2:	2301      	moveq	r3, #1
 8006fc4:	2300      	movne	r3, #0
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	e000      	b.n	8006fce <qQueueIsFull+0x28>
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <qQueuePeek>:
  
Return value:

    Pointer to the data, or NULL if there is nothing in the queue
 */
void* qQueuePeek(qQueue_t *obj){
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
    uint8_t *RetValue = NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]
    if(NULL == obj) return RetValue;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <qQueuePeek+0x16>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	e017      	b.n	8007020 <qQueuePeek+0x46>
    if( obj->ItemsWaiting > 0u ){
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	8a1b      	ldrh	r3, [r3, #16]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d011      	beq.n	800701e <qQueuePeek+0x44>
        qEnterCritical();
 8006ffa:	f7ff f891 	bl	8006120 <qEnterCritical>
        RetValue = (void*)(obj->pcReadFrom + obj->ItemSize);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	8a92      	ldrh	r2, [r2, #20]
 8007006:	4413      	add	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]
        if( RetValue >= obj->pTail ) RetValue = obj->pHead;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	429a      	cmp	r2, r3
 8007012:	d302      	bcc.n	800701a <qQueuePeek+0x40>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	60fb      	str	r3, [r7, #12]
        qExitCritical();
 800701a:	f7ff f891 	bl	8006140 <qExitCritical>
    }
    return (void*)RetValue;
 800701e:	68fb      	ldr	r3, [r7, #12]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <qQueueRemoveFront>:
  
Return value:

    qTrue if data was removed from the Queue, otherwise returns qFalse
 */
qBool_t qQueueRemoveFront(qQueue_t *obj){
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
    if (NULL==obj) return qFalse;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <qQueueRemoveFront+0x12>
 8007036:	2300      	movs	r3, #0
 8007038:	e015      	b.n	8007066 <qQueueRemoveFront+0x3e>
    if( obj->ItemsWaiting > 0u ){
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8a1b      	ldrh	r3, [r3, #16]
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00f      	beq.n	8007064 <qQueueRemoveFront+0x3c>
        qEnterCritical();
 8007044:	f7ff f86c 	bl	8006120 <qEnterCritical>
        qQueueMoveReader(obj);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f85d 	bl	8007108 <qQueueMoveReader>
        --( obj->ItemsWaiting ); /* remove the data. */
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	8a1b      	ldrh	r3, [r3, #16]
 8007052:	b29b      	uxth	r3, r3
 8007054:	3b01      	subs	r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	821a      	strh	r2, [r3, #16]
        qExitCritical();
 800705c:	f7ff f870 	bl	8006140 <qExitCritical>
        return qTrue;
 8007060:	2301      	movs	r3, #1
 8007062:	e000      	b.n	8007066 <qQueueRemoveFront+0x3e>
    }
    return qFalse;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <qQueueCopyDataToQueue>:
/*============================================================================*/
static void qQueueCopyDataToQueue(qQueue_t *obj, const void *pvItemToQueue, qBool_t xPosition){
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	4613      	mov	r3, r2
 800707a:	71fb      	strb	r3, [r7, #7]
    if( xPosition == QUEUE_SEND_TO_BACK ){
 800707c:	79fb      	ldrb	r3, [r7, #7]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d119      	bne.n	80070b6 <qQueueCopyDataToQueue+0x48>
        memcpy( (void*) obj->pcWriteTo, pvItemToQueue, (unsigned)obj->ItemSize );
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6898      	ldr	r0, [r3, #8]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8a9b      	ldrh	r3, [r3, #20]
 800708a:	461a      	mov	r2, r3
 800708c:	68b9      	ldr	r1, [r7, #8]
 800708e:	f001 fe34 	bl	8008cfa <memcpy>
        obj->pcWriteTo += obj->ItemSize;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	8a92      	ldrh	r2, [r2, #20]
 800709a:	441a      	add	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	609a      	str	r2, [r3, #8]
        if( obj->pcWriteTo >= obj->pTail ) obj->pcWriteTo = obj->pHead;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d322      	bcc.n	80070f2 <qQueueCopyDataToQueue+0x84>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	609a      	str	r2, [r3, #8]
 80070b4:	e01d      	b.n	80070f2 <qQueueCopyDataToQueue+0x84>
              
    }
    else{
        memcpy( (void*) obj->pcReadFrom, pvItemToQueue, (unsigned)obj->ItemSize );
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68d8      	ldr	r0, [r3, #12]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8a9b      	ldrh	r3, [r3, #20]
 80070be:	461a      	mov	r2, r3
 80070c0:	68b9      	ldr	r1, [r7, #8]
 80070c2:	f001 fe1a 	bl	8008cfa <memcpy>
        obj->pcReadFrom -= obj->ItemSize;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	8a9b      	ldrh	r3, [r3, #20]
 80070ce:	425b      	negs	r3, r3
 80070d0:	441a      	add	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	60da      	str	r2, [r3, #12]
        if( obj->pcReadFrom < obj->pHead ) obj->pcReadFrom = ( obj->pTail - obj->ItemSize );    
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d207      	bcs.n	80070f2 <qQueueCopyDataToQueue+0x84>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8a9b      	ldrh	r3, [r3, #20]
 80070ea:	425b      	negs	r3, r3
 80070ec:	441a      	add	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	60da      	str	r2, [r3, #12]
    }
    ++( obj->ItemsWaiting );
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8a1b      	ldrh	r3, [r3, #16]
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	3301      	adds	r3, #1
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	821a      	strh	r2, [r3, #16]
}
 8007100:	bf00      	nop
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <qQueueMoveReader>:
/*==================================================================================*/
static void qQueueMoveReader(qQueue_t *obj){
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
    obj->pcReadFrom += obj->ItemSize;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	8a92      	ldrh	r2, [r2, #20]
 8007118:	441a      	add	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	60da      	str	r2, [r3, #12]
    if( obj->pcReadFrom >= obj->pTail ) obj->pcReadFrom = obj->pHead;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	429a      	cmp	r2, r3
 8007128:	d303      	bcc.n	8007132 <qQueueMoveReader+0x2a>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	60da      	str	r2, [r3, #12]
}
 8007132:	bf00      	nop
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <qQueueGenericSend>:
  
Return value:

    qTrue on successful add, qFalse if not added
*/
qBool_t qQueueGenericSend(qQueue_t *obj, void *ItemToQueue, uint8_t InsertMode){
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	4613      	mov	r3, r2
 800714a:	71fb      	strb	r3, [r7, #7]
    if( NULL==obj || InsertMode>1u) return qFalse;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <qQueueGenericSend+0x1a>
 8007152:	79fb      	ldrb	r3, [r7, #7]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d901      	bls.n	800715c <qQueueGenericSend+0x1e>
 8007158:	2300      	movs	r3, #0
 800715a:	e013      	b.n	8007184 <qQueueGenericSend+0x46>
    if( obj->ItemsWaiting < obj->ItemsCount ){ /* Is there room on the queue?*/
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8a1b      	ldrh	r3, [r3, #16]
 8007160:	b29a      	uxth	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8a5b      	ldrh	r3, [r3, #18]
 8007166:	429a      	cmp	r2, r3
 8007168:	d20b      	bcs.n	8007182 <qQueueGenericSend+0x44>
        qEnterCritical();
 800716a:	f7fe ffd9 	bl	8006120 <qEnterCritical>
        qQueueCopyDataToQueue( obj, ItemToQueue, InsertMode );
 800716e:	79fb      	ldrb	r3, [r7, #7]
 8007170:	461a      	mov	r2, r3
 8007172:	68b9      	ldr	r1, [r7, #8]
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f7ff ff7a 	bl	800706e <qQueueCopyDataToQueue>
        qExitCritical();
 800717a:	f7fe ffe1 	bl	8006140 <qExitCritical>
        return qTrue;
 800717e:	2301      	movs	r3, #1
 8007180:	e000      	b.n	8007184 <qQueueGenericSend+0x46>
    }
    return qFalse;   
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <qSwapBytes>:

    - data : a pointer to block of data
    - n : the number of bytes to swap
*/
/*============================================================================*/
void qSwapBytes(void *data, const qSize_t n){
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	460b      	mov	r3, r1
 8007196:	807b      	strh	r3, [r7, #2]
    uint8_t *p = data, tmp;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	613b      	str	r3, [r7, #16]
    qSize_t lo, hi;
    for(lo=0, hi=n-1; hi>lo; lo++, hi--){
 800719c:	2300      	movs	r3, #0
 800719e:	82fb      	strh	r3, [r7, #22]
 80071a0:	887b      	ldrh	r3, [r7, #2]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	82bb      	strh	r3, [r7, #20]
 80071a6:	e017      	b.n	80071d8 <qSwapBytes+0x4c>
        tmp=p[lo];
 80071a8:	8afb      	ldrh	r3, [r7, #22]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	4413      	add	r3, r2
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	73fb      	strb	r3, [r7, #15]
        p[lo] = p[hi];
 80071b2:	8abb      	ldrh	r3, [r7, #20]
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	441a      	add	r2, r3
 80071b8:	8afb      	ldrh	r3, [r7, #22]
 80071ba:	6939      	ldr	r1, [r7, #16]
 80071bc:	440b      	add	r3, r1
 80071be:	7812      	ldrb	r2, [r2, #0]
 80071c0:	701a      	strb	r2, [r3, #0]
        p[hi] = tmp;
 80071c2:	8abb      	ldrh	r3, [r7, #20]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	4413      	add	r3, r2
 80071c8:	7bfa      	ldrb	r2, [r7, #15]
 80071ca:	701a      	strb	r2, [r3, #0]
    for(lo=0, hi=n-1; hi>lo; lo++, hi--){
 80071cc:	8afb      	ldrh	r3, [r7, #22]
 80071ce:	3301      	adds	r3, #1
 80071d0:	82fb      	strh	r3, [r7, #22]
 80071d2:	8abb      	ldrh	r3, [r7, #20]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	82bb      	strh	r3, [r7, #20]
 80071d8:	8aba      	ldrh	r2, [r7, #20]
 80071da:	8afb      	ldrh	r3, [r7, #22]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d8e3      	bhi.n	80071a8 <qSwapBytes+0x1c>
    }
}
 80071e0:	bf00      	nop
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <qOutputString>:
    - fcn : The basic output byte function
    - pStorage : The storage pointer passed to fcn
    - s: The string to be written
    - AIP : Auto-Increment the storage-pointer
*/
void qOutputString(qPutChar_t fcn, void* pStorage, const char *s, qBool_t AIP){
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	70fb      	strb	r3, [r7, #3]
    size_t i = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	617b      	str	r3, [r7, #20]
    while(*s)  fcn(((AIP)? (char*)pStorage+(i++): pStorage), *s++);
 80071fe:	e010      	b.n	8007222 <qOutputString+0x36>
 8007200:	78fb      	ldrb	r3, [r7, #3]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d005      	beq.n	8007212 <qOutputString+0x26>
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	1c5a      	adds	r2, r3, #1
 800720a:	617a      	str	r2, [r7, #20]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	441a      	add	r2, r3
 8007210:	e000      	b.n	8007214 <qOutputString+0x28>
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	1c59      	adds	r1, r3, #1
 8007218:	6079      	str	r1, [r7, #4]
 800721a:	7819      	ldrb	r1, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4610      	mov	r0, r2
 8007220:	4798      	blx	r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1ea      	bne.n	8007200 <qOutputString+0x14>
}
 800722a:	bf00      	nop
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <qNibbleToX>:
/*============================================================================*/
static char qNibbleToX(uint8_t value){
 8007232:	b480      	push	{r7}
 8007234:	b085      	sub	sp, #20
 8007236:	af00      	add	r7, sp, #0
 8007238:	4603      	mov	r3, r0
 800723a:	71fb      	strb	r3, [r7, #7]
    char ch;
    ch = (char)(value & 0x0F) + '0';
 800723c:	79fb      	ldrb	r3, [r7, #7]
 800723e:	f003 030f 	and.w	r3, r3, #15
 8007242:	b2db      	uxtb	r3, r3
 8007244:	3330      	adds	r3, #48	; 0x30
 8007246:	73fb      	strb	r3, [r7, #15]
    return (char) ((ch > '9') ? ch + 7u : ch);
 8007248:	7bfb      	ldrb	r3, [r7, #15]
 800724a:	2b39      	cmp	r3, #57	; 0x39
 800724c:	d903      	bls.n	8007256 <qNibbleToX+0x24>
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	3307      	adds	r3, #7
 8007252:	b2db      	uxtb	r3, r3
 8007254:	e000      	b.n	8007258 <qNibbleToX+0x26>
 8007256:	7bfb      	ldrb	r3, [r7, #15]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <qPrintXData>:
/*============================================================================*/
void qPrintXData(qPutChar_t fcn, void* pStorage, void *data, qSize_t n){
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	807b      	strh	r3, [r7, #2]
    uint8_t *pdat =(uint8_t*)data; 
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	613b      	str	r3, [r7, #16]
    int i;
    for(i=0;i<n;i++, fcn(pStorage, ' ')){
 8007276:	2300      	movs	r3, #0
 8007278:	617b      	str	r3, [r7, #20]
 800727a:	e025      	b.n	80072c8 <qPrintXData+0x64>
        fcn(pStorage, qNibbleToX( qByteHighNibble(pdat[i]) ) );
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4413      	add	r3, r2
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	091b      	lsrs	r3, r3, #4
 8007286:	b2db      	uxtb	r3, r3
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff ffd2 	bl	8007232 <qNibbleToX>
 800728e:	4603      	mov	r3, r0
 8007290:	461a      	mov	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4611      	mov	r1, r2
 8007296:	68b8      	ldr	r0, [r7, #8]
 8007298:	4798      	blx	r3
        fcn(pStorage, qNibbleToX( qByteLowNibble(pdat[i]) ) );
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	4413      	add	r3, r2
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	f003 030f 	and.w	r3, r3, #15
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7ff ffc2 	bl	8007232 <qNibbleToX>
 80072ae:	4603      	mov	r3, r0
 80072b0:	461a      	mov	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4611      	mov	r1, r2
 80072b6:	68b8      	ldr	r0, [r7, #8]
 80072b8:	4798      	blx	r3
    for(i=0;i<n;i++, fcn(pStorage, ' ')){
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	3301      	adds	r3, #1
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2120      	movs	r1, #32
 80072c4:	68b8      	ldr	r0, [r7, #8]
 80072c6:	4798      	blx	r3
 80072c8:	887b      	ldrh	r3, [r7, #2]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	dbd5      	blt.n	800727c <qPrintXData+0x18>
    }
    fcn(pStorage, '\r' );
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	210d      	movs	r1, #13
 80072d4:	68b8      	ldr	r0, [r7, #8]
 80072d6:	4798      	blx	r3
    fcn(pStorage, '\n' );
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	210a      	movs	r1, #10
 80072dc:	68b8      	ldr	r0, [r7, #8]
 80072de:	4798      	blx	r3
}
 80072e0:	bf00      	nop
 80072e2:	3718      	adds	r7, #24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <__q_revuta>:
}
/*============================================================================*/
/*this method makes the basic conversion of unsigned integer to ASCII
NULL Terminator not included
*/
static uint8_t __q_revuta(uint32_t num, char* str, uint8_t base){
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	4613      	mov	r3, r2
 80072f4:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 80072f6:	2300      	movs	r3, #0
 80072f8:	75fb      	strb	r3, [r7, #23]
    int rem;
    if (0 == num){ /* Handle 0 explicitly, otherwise empty string is printed for 0 */
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d129      	bne.n	8007354 <__q_revuta+0x6c>
        str[i++] = '0';        
 8007300:	7dfb      	ldrb	r3, [r7, #23]
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	75fa      	strb	r2, [r7, #23]
 8007306:	461a      	mov	r2, r3
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	4413      	add	r3, r2
 800730c:	2230      	movs	r2, #48	; 0x30
 800730e:	701a      	strb	r2, [r3, #0]
        return i;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	e029      	b.n	8007368 <__q_revuta+0x80>
    }

    while (0 != num){ /*Process individual digits*/
        rem = num % base;
 8007314:	79fa      	ldrb	r2, [r7, #7]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	fbb3 f1f2 	udiv	r1, r3, r2
 800731c:	fb02 f201 	mul.w	r2, r2, r1
 8007320:	1a9b      	subs	r3, r3, r2
 8007322:	613b      	str	r3, [r7, #16]
        str[i++] = (rem > 9)? (char)(rem-10) + 'A' : (char)rem + '0';
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	2b09      	cmp	r3, #9
 8007328:	dd04      	ble.n	8007334 <__q_revuta+0x4c>
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	3337      	adds	r3, #55	; 0x37
 8007330:	b2db      	uxtb	r3, r3
 8007332:	e003      	b.n	800733c <__q_revuta+0x54>
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	b2db      	uxtb	r3, r3
 8007338:	3330      	adds	r3, #48	; 0x30
 800733a:	b2db      	uxtb	r3, r3
 800733c:	7dfa      	ldrb	r2, [r7, #23]
 800733e:	1c51      	adds	r1, r2, #1
 8007340:	75f9      	strb	r1, [r7, #23]
 8007342:	4611      	mov	r1, r2
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	440a      	add	r2, r1
 8007348:	7013      	strb	r3, [r2, #0]
        num = num/base;
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007352:	60fb      	str	r3, [r7, #12]
    while (0 != num){ /*Process individual digits*/
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1dc      	bne.n	8007314 <__q_revuta+0x2c>
    }
    qSwapBytes(str, (qSize_t)i);/*Reverse the string*/
 800735a:	7dfb      	ldrb	r3, [r7, #23]
 800735c:	b29b      	uxth	r3, r3
 800735e:	4619      	mov	r1, r3
 8007360:	68b8      	ldr	r0, [r7, #8]
 8007362:	f7ff ff13 	bl	800718c <qSwapBytes>
    return i;       
 8007366:	7dfb      	ldrb	r3, [r7, #23]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <qItoA>:

Return value:

  A pointer to the resulting null-terminated string, same as parameter str
*/
char* qItoA(int32_t num, char* str, uint8_t base){
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	4613      	mov	r3, r2
 800737c:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	75fb      	strb	r3, [r7, #23]
    if(NULL == str) return str;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <qItoA+0x1c>
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	e023      	b.n	80073d4 <qItoA+0x64>
    if( num < 0 ){ 
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	da0d      	bge.n	80073ae <qItoA+0x3e>
        if(10 == base){ /*handle negative numbers only with 10-base*/
 8007392:	79fb      	ldrb	r3, [r7, #7]
 8007394:	2b0a      	cmp	r3, #10
 8007396:	d107      	bne.n	80073a8 <qItoA+0x38>
            str[i++]='-';/*put the sign at the begining*/
 8007398:	7dfb      	ldrb	r3, [r7, #23]
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	75fa      	strb	r2, [r7, #23]
 800739e:	461a      	mov	r2, r3
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	4413      	add	r3, r2
 80073a4:	222d      	movs	r2, #45	; 0x2d
 80073a6:	701a      	strb	r2, [r3, #0]
        } 
        num = -num;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	425b      	negs	r3, r3
 80073ac:	60fb      	str	r3, [r7, #12]
    }
    i += __q_revuta((uint32_t)num, str+i, base); /*make the unsigned conversion without the null terminator*/   
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	7dfb      	ldrb	r3, [r7, #23]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	4413      	add	r3, r2
 80073b6:	79fa      	ldrb	r2, [r7, #7]
 80073b8:	4619      	mov	r1, r3
 80073ba:	f7ff ff95 	bl	80072e8 <__q_revuta>
 80073be:	4603      	mov	r3, r0
 80073c0:	461a      	mov	r2, r3
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
 80073c4:	4413      	add	r3, r2
 80073c6:	75fb      	strb	r3, [r7, #23]
    str[i] = '\0'; /*Append string terminator*/
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	4413      	add	r3, r2
 80073ce:	2200      	movs	r2, #0
 80073d0:	701a      	strb	r2, [r3, #0]
    return str;
 80073d2:	68bb      	ldr	r3, [r7, #8]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <qIsNan>:

Return value:

    qTrue is argument is NaN, otherwise qFalse
*/
qBool_t qIsNan(float f){
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t u;
    void *p;
    p = &f;
 80073e6:	1d3b      	adds	r3, r7, #4
 80073e8:	60fb      	str	r3, [r7, #12]
    u = *(uint32_t*)p;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60bb      	str	r3, [r7, #8]
    return (qBool_t)((qBool_t) ((u & 0x7F800000) == 0x7F800000 && (u & 0x7FFFFF)));
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 80073f6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80073fa:	d106      	bne.n	800740a <qIsNan+0x2e>
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <qIsNan+0x2e>
 8007406:	2301      	movs	r3, #1
 8007408:	e000      	b.n	800740c <qIsNan+0x30>
 800740a:	2300      	movs	r3, #0
 800740c:	b2db      	uxtb	r3, r3
}
 800740e:	4618      	mov	r0, r3
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <qIsInf>:

Return value:
 
    qTrue is argument has an infinite value, otherwise qFalse
*/
qBool_t qIsInf(float f){
 800741a:	b480      	push	{r7}
 800741c:	b085      	sub	sp, #20
 800741e:	af00      	add	r7, sp, #0
 8007420:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t u;
    void *p;
    p = &f;
 8007424:	1d3b      	adds	r3, r7, #4
 8007426:	60fb      	str	r3, [r7, #12]
    u = *(uint32_t*)p;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	60bb      	str	r3, [r7, #8]
    if(0x7f800000ul == u ) return qTrue;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007434:	d101      	bne.n	800743a <qIsInf+0x20>
 8007436:	2301      	movs	r3, #1
 8007438:	e006      	b.n	8007448 <qIsInf+0x2e>
    if(0xff800000ul == u ) return qTrue;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8007440:	d101      	bne.n	8007446 <qIsInf+0x2c>
 8007442:	2301      	movs	r3, #1
 8007444:	e000      	b.n	8007448 <qIsInf+0x2e>
    return qFalse;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <qFtoA>:

Return value:

  A pointer to the resulting null-terminated string, same as parameter str
*/
char* qFtoA(float num, char *str, uint8_t precision){ /*limited to precision=10*/
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	ed87 0a03 	vstr	s0, [r7, #12]
 800745e:	60b8      	str	r0, [r7, #8]
 8007460:	460b      	mov	r3, r1
 8007462:	71fb      	strb	r3, [r7, #7]
    char c;
    uint8_t i = 0;
 8007464:	2300      	movs	r3, #0
 8007466:	75fb      	strb	r3, [r7, #23]
    uint32_t intPart;
    if(NULL == str) return str;
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <qFtoA+0x1e>
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	e0c7      	b.n	8007602 <qFtoA+0x1ae>
    if(0.0f == num){ /*handle the 0.0f*/
 8007472:	edd7 7a03 	vldr	s15, [r7, #12]
 8007476:	eef5 7a40 	vcmp.f32	s15, #0.0
 800747a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747e:	d110      	bne.n	80074a2 <qFtoA+0x4e>
        _qSetfStringTo_0(str);      
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2230      	movs	r2, #48	; 0x30
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	3301      	adds	r3, #1
 800748a:	222e      	movs	r2, #46	; 0x2e
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	3302      	adds	r3, #2
 8007492:	2230      	movs	r2, #48	; 0x30
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	3303      	adds	r3, #3
 800749a:	2200      	movs	r2, #0
 800749c:	701a      	strb	r2, [r3, #0]
        return str;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	e0af      	b.n	8007602 <qFtoA+0x1ae>
    }
    if((c = qIsInf(num))){ /*handle the infinity*/
 80074a2:	ed97 0a03 	vldr	s0, [r7, #12]
 80074a6:	f7ff ffb8 	bl	800741a <qIsInf>
 80074aa:	4603      	mov	r3, r0
 80074ac:	75bb      	strb	r3, [r7, #22]
 80074ae:	7dbb      	ldrb	r3, [r7, #22]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d019      	beq.n	80074e8 <qFtoA+0x94>
        str[0]=(c==1)?'+':'-';
 80074b4:	7dbb      	ldrb	r3, [r7, #22]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d101      	bne.n	80074be <qFtoA+0x6a>
 80074ba:	222b      	movs	r2, #43	; 0x2b
 80074bc:	e000      	b.n	80074c0 <qFtoA+0x6c>
 80074be:	222d      	movs	r2, #45	; 0x2d
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	701a      	strb	r2, [r3, #0]
        _qSetfStringTo_inf(str);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	3301      	adds	r3, #1
 80074c8:	2269      	movs	r2, #105	; 0x69
 80074ca:	701a      	strb	r2, [r3, #0]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	3302      	adds	r3, #2
 80074d0:	226e      	movs	r2, #110	; 0x6e
 80074d2:	701a      	strb	r2, [r3, #0]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	3303      	adds	r3, #3
 80074d8:	2266      	movs	r2, #102	; 0x66
 80074da:	701a      	strb	r2, [r3, #0]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	3304      	adds	r3, #4
 80074e0:	2200      	movs	r2, #0
 80074e2:	701a      	strb	r2, [r3, #0]
        return str;        
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	e08c      	b.n	8007602 <qFtoA+0x1ae>
    }
    if(qIsNan(num)){ /*handle the NAN*/
 80074e8:	ed97 0a03 	vldr	s0, [r7, #12]
 80074ec:	f7ff ff76 	bl	80073dc <qIsNan>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d010      	beq.n	8007518 <qFtoA+0xc4>
        _qSetfStringTo_nan(str);
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	226e      	movs	r2, #110	; 0x6e
 80074fa:	701a      	strb	r2, [r3, #0]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	3301      	adds	r3, #1
 8007500:	2261      	movs	r2, #97	; 0x61
 8007502:	701a      	strb	r2, [r3, #0]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	3302      	adds	r3, #2
 8007508:	226e      	movs	r2, #110	; 0x6e
 800750a:	701a      	strb	r2, [r3, #0]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	3303      	adds	r3, #3
 8007510:	2200      	movs	r2, #0
 8007512:	701a      	strb	r2, [r3, #0]
        return str;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	e074      	b.n	8007602 <qFtoA+0x1ae>
    }
    
    if(precision > Q_MAX_FTOA_PRECISION) precision = Q_MAX_FTOA_PRECISION; /*clip the precision*/
 8007518:	79fb      	ldrb	r3, [r7, #7]
 800751a:	2b0a      	cmp	r3, #10
 800751c:	d901      	bls.n	8007522 <qFtoA+0xce>
 800751e:	230a      	movs	r3, #10
 8007520:	71fb      	strb	r3, [r7, #7]
    
    if(num < 0){ /*handle the negative numbers*/
 8007522:	edd7 7a03 	vldr	s15, [r7, #12]
 8007526:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800752a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800752e:	d50d      	bpl.n	800754c <qFtoA+0xf8>
        num = -num; /*leave it positive for the __q_revuta method*/
 8007530:	edd7 7a03 	vldr	s15, [r7, #12]
 8007534:	eef1 7a67 	vneg.f32	s15, s15
 8007538:	edc7 7a03 	vstr	s15, [r7, #12]
        str[i++] = '-'; /*add the negative sign*/
 800753c:	7dfb      	ldrb	r3, [r7, #23]
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	75fa      	strb	r2, [r7, #23]
 8007542:	461a      	mov	r2, r3
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	4413      	add	r3, r2
 8007548:	222d      	movs	r2, #45	; 0x2d
 800754a:	701a      	strb	r2, [r3, #0]
    }
    
    intPart = (uint32_t)num; /*get the integer parts*/
 800754c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007554:	ee17 3a90 	vmov	r3, s15
 8007558:	613b      	str	r3, [r7, #16]
    num -= intPart; /*get the floating-point part subtracting the integer part from the original value*/
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	ee07 3a90 	vmov	s15, r3
 8007560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007564:	ed97 7a03 	vldr	s14, [r7, #12]
 8007568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800756c:	edc7 7a03 	vstr	s15, [r7, #12]
    i += __q_revuta(intPart, str+i, 10); /*convert the integer part in decimal form*/
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	4413      	add	r3, r2
 8007576:	220a      	movs	r2, #10
 8007578:	4619      	mov	r1, r3
 800757a:	6938      	ldr	r0, [r7, #16]
 800757c:	f7ff feb4 	bl	80072e8 <__q_revuta>
 8007580:	4603      	mov	r3, r0
 8007582:	461a      	mov	r2, r3
 8007584:	7dfb      	ldrb	r3, [r7, #23]
 8007586:	4413      	add	r3, r2
 8007588:	75fb      	strb	r3, [r7, #23]
    if (precision){ /*decimal part*/
 800758a:	79fb      	ldrb	r3, [r7, #7]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d032      	beq.n	80075f6 <qFtoA+0x1a2>
        str[i++] = '.'; /*place decimal point*/
 8007590:	7dfb      	ldrb	r3, [r7, #23]
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	75fa      	strb	r2, [r7, #23]
 8007596:	461a      	mov	r2, r3
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4413      	add	r3, r2
 800759c:	222e      	movs	r2, #46	; 0x2e
 800759e:	701a      	strb	r2, [r3, #0]
        while (precision--){ /*convert until precision reached*/
 80075a0:	e024      	b.n	80075ec <qFtoA+0x198>
            num *= 10.0;  /*start moving the floating-point part one by one multiplying by 10*/
 80075a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80075a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80075aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075ae:	edc7 7a03 	vstr	s15, [r7, #12]
            c = (char)num; /*get the bcd byte*/
 80075b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80075b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ba:	edc7 7a00 	vstr	s15, [r7]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	75bb      	strb	r3, [r7, #22]
            str[i++] = c + '0'; /*convert to ASCII and put it inside the buffer*/
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	75fa      	strb	r2, [r7, #23]
 80075c8:	461a      	mov	r2, r3
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	4413      	add	r3, r2
 80075ce:	7dba      	ldrb	r2, [r7, #22]
 80075d0:	3230      	adds	r2, #48	; 0x30
 80075d2:	b2d2      	uxtb	r2, r2
 80075d4:	701a      	strb	r2, [r3, #0]
            num -= c; /*Subtract the processed floating-point digit*/
 80075d6:	7dbb      	ldrb	r3, [r7, #22]
 80075d8:	ee07 3a90 	vmov	s15, r3
 80075dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80075e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075e8:	edc7 7a03 	vstr	s15, [r7, #12]
        while (precision--){ /*convert until precision reached*/
 80075ec:	79fb      	ldrb	r3, [r7, #7]
 80075ee:	1e5a      	subs	r2, r3, #1
 80075f0:	71fa      	strb	r2, [r7, #7]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1d5      	bne.n	80075a2 <qFtoA+0x14e>
        }
    }
    str[i] = '\0'; /*put the null char*/
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	4413      	add	r3, r2
 80075fc:	2200      	movs	r2, #0
 80075fe:	701a      	strb	r2, [r3, #0]
    return str;
 8007600:	68bb      	ldr	r3, [r7, #8]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <qResponseInitialize>:
Parameters:

    - obj : A pointer to the Response Handler object
  
*/
void qResponseInitialize(qResponseHandler_t *obj){
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
    obj->Pattern2Match = NULL;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	601a      	str	r2, [r3, #0]
    obj->PatternLength = 0;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	809a      	strh	r2, [r3, #4]
    obj->MatchedCount = 0;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	80da      	strh	r2, [r3, #6]
    obj->ResponseReceived = qFalse;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	721a      	strb	r2, [r3, #8]
}   
 800762a:	bf00      	nop
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <qResponseISRHandler>:

Return value:

    qTrue when the Response handler match the request from "qResponseReceived"
*/
qBool_t qResponseISRHandler(qResponseHandler_t *obj, const char rxchar){
 8007636:	b480      	push	{r7}
 8007638:	b083      	sub	sp, #12
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	460b      	mov	r3, r1
 8007640:	70fb      	strb	r3, [r7, #3]
    if(qTrue == obj->ResponseReceived || NULL == obj->Pattern2Match) return qFalse; /*wait until the qResponseReceived release the flag*/
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	7a1b      	ldrb	r3, [r3, #8]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b01      	cmp	r3, #1
 800764a:	d003      	beq.n	8007654 <qResponseISRHandler+0x1e>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <qResponseISRHandler+0x22>
 8007654:	2300      	movs	r3, #0
 8007656:	e01d      	b.n	8007694 <qResponseISRHandler+0x5e>
    
    if(obj->Pattern2Match[obj->MatchedCount] == rxchar){ /*if the received char match with the expected*/
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	88d2      	ldrh	r2, [r2, #6]
 8007660:	b292      	uxth	r2, r2
 8007662:	4413      	add	r3, r2
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	78fa      	ldrb	r2, [r7, #3]
 8007668:	429a      	cmp	r2, r3
 800766a:	d110      	bne.n	800768e <qResponseISRHandler+0x58>
        obj->MatchedCount++; /*move to the next char in the expected buffer*/
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	88db      	ldrh	r3, [r3, #6]
 8007670:	b29b      	uxth	r3, r3
 8007672:	3301      	adds	r3, #1
 8007674:	b29a      	uxth	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	80da      	strh	r2, [r3, #6]
        if(obj->MatchedCount == obj->PatternLength)  obj->ResponseReceived = qTrue; /*if all the requested chars match, set the ready flag */
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	88db      	ldrh	r3, [r3, #6]
 800767e:	b29a      	uxth	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	889b      	ldrh	r3, [r3, #4]
 8007684:	429a      	cmp	r2, r3
 8007686:	d102      	bne.n	800768e <qResponseISRHandler+0x58>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	721a      	strb	r2, [r3, #8]
    }
    return obj->ResponseReceived; /*return the ready flag*/
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	7a1b      	ldrb	r3, [r3, #8]
 8007692:	b2db      	uxtb	r3, r3
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <__qtrace_func>:
    }    
    return 0;
}
/*============================================================================*/
#ifdef Q_TRACE_VARIABLES
void __qtrace_func(const char *loc, const char* fcn, const char *varname, const char* varvalue, void* Pointer, qSize_t BlockSize){
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	603b      	str	r3, [r7, #0]
    if(NULL != __qDebugOutputFcn){ /*trace only if the output-function is defined*/
 80076ae:	4b23      	ldr	r3, [pc, #140]	; (800773c <__qtrace_func+0x9c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d03d      	beq.n	8007732 <__qtrace_func+0x92>
        qPrintString(__qDebugOutputFcn, NULL, loc); /*print out the line location*/
 80076b6:	4b21      	ldr	r3, [pc, #132]	; (800773c <__qtrace_func+0x9c>)
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	2300      	movs	r3, #0
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	2100      	movs	r1, #0
 80076c0:	f7ff fd94 	bl	80071ec <qOutputString>
        if(fcn){ /*print out the function if available*/
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d010      	beq.n	80076ec <__qtrace_func+0x4c>
            __qDebugOutputFcn(NULL, '@');
 80076ca:	4b1c      	ldr	r3, [pc, #112]	; (800773c <__qtrace_func+0x9c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2140      	movs	r1, #64	; 0x40
 80076d0:	2000      	movs	r0, #0
 80076d2:	4798      	blx	r3
            qPrintString(__qDebugOutputFcn, NULL, fcn); 
 80076d4:	4b19      	ldr	r3, [pc, #100]	; (800773c <__qtrace_func+0x9c>)
 80076d6:	6818      	ldr	r0, [r3, #0]
 80076d8:	2300      	movs	r3, #0
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	2100      	movs	r1, #0
 80076de:	f7ff fd85 	bl	80071ec <qOutputString>
            __qDebugOutputFcn(NULL, ' ');
 80076e2:	4b16      	ldr	r3, [pc, #88]	; (800773c <__qtrace_func+0x9c>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2120      	movs	r1, #32
 80076e8:	2000      	movs	r0, #0
 80076ea:	4798      	blx	r3
        }
        qPrintString(__qDebugOutputFcn, NULL, varname);
 80076ec:	4b13      	ldr	r3, [pc, #76]	; (800773c <__qtrace_func+0x9c>)
 80076ee:	6818      	ldr	r0, [r3, #0]
 80076f0:	2300      	movs	r3, #0
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	2100      	movs	r1, #0
 80076f6:	f7ff fd79 	bl	80071ec <qOutputString>
        if(NULL == varvalue){ /*if varvalue is not defined, the call must correspond to memory tracing*/
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d107      	bne.n	8007710 <__qtrace_func+0x70>
            qPrintXData(__qDebugOutputFcn, NULL, Pointer, BlockSize); /*print out the memory in hex format*/
 8007700:	4b0e      	ldr	r3, [pc, #56]	; (800773c <__qtrace_func+0x9c>)
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	8bbb      	ldrh	r3, [r7, #28]
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	2100      	movs	r1, #0
 800770a:	f7ff fdab 	bl	8007264 <qPrintXData>
            qPrintString(__qDebugOutputFcn, NULL, varvalue);
            __qDebugOutputFcn(NULL, '\r');
            __qDebugOutputFcn(NULL, '\n');
        }
    }
}
 800770e:	e010      	b.n	8007732 <__qtrace_func+0x92>
            qPrintString(__qDebugOutputFcn, NULL, varvalue);
 8007710:	4b0a      	ldr	r3, [pc, #40]	; (800773c <__qtrace_func+0x9c>)
 8007712:	6818      	ldr	r0, [r3, #0]
 8007714:	2300      	movs	r3, #0
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	2100      	movs	r1, #0
 800771a:	f7ff fd67 	bl	80071ec <qOutputString>
            __qDebugOutputFcn(NULL, '\r');
 800771e:	4b07      	ldr	r3, [pc, #28]	; (800773c <__qtrace_func+0x9c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	210d      	movs	r1, #13
 8007724:	2000      	movs	r0, #0
 8007726:	4798      	blx	r3
            __qDebugOutputFcn(NULL, '\n');
 8007728:	4b04      	ldr	r3, [pc, #16]	; (800773c <__qtrace_func+0x9c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	210a      	movs	r1, #10
 800772e:	2000      	movs	r0, #0
 8007730:	4798      	blx	r3
}
 8007732:	bf00      	nop
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20000298 	.word	0x20000298

08007740 <__qReg_32Bits>:
#endif

/*============================================================================*/
qBool_t __qReg_32Bits(void *Address, qBool_t PinNumber){
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
    uint32_t Register = 0;
 800774c:	2300      	movs	r3, #0
 800774e:	60fb      	str	r3, [r7, #12]
    Register = *((uint32_t*)Address);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	60fb      	str	r3, [r7, #12]
    return qBitRead(Register, PinNumber);
 8007756:	78fb      	ldrb	r3, [r7, #3]
 8007758:	2201      	movs	r2, #1
 800775a:	fa02 f303 	lsl.w	r3, r2, r3
 800775e:	461a      	mov	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4013      	ands	r3, r2
 8007764:	2b00      	cmp	r3, #0
 8007766:	bf14      	ite	ne
 8007768:	2301      	movne	r3, #1
 800776a:	2300      	moveq	r3, #0
 800776c:	b2db      	uxtb	r3, r3
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
	...

0800777c <qEdgeCheck_Initialize>:
  
Return value:

    qTrue on success, otherwise returns qFalse
*/
qBool_t qEdgeCheck_Initialize(qIOEdgeCheck_t *Instance, qCoreRegSize_t RegisterSize, qClock_t DebounceTime){
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
    if(NULL == Instance) return qFalse;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <qEdgeCheck_Initialize+0x16>
 800778e:	2300      	movs	r3, #0
 8007790:	e016      	b.n	80077c0 <qEdgeCheck_Initialize+0x44>
    Instance->Head = NULL;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]
    Instance->DebounceTime = DebounceTime;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	609a      	str	r2, [r3, #8]
    Instance->Reader = (NULL==RegisterSize)? QREG_32BIT  : RegisterSize;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <qEdgeCheck_Initialize+0x2c>
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	e000      	b.n	80077aa <qEdgeCheck_Initialize+0x2e>
 80077a8:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <qEdgeCheck_Initialize+0x4c>)
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	60d3      	str	r3, [r2, #12]
    Instance->State = QEDGECHECK_CHECK;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2202      	movs	r2, #2
 80077b2:	741a      	strb	r2, [r3, #16]
    Instance->Start = qSchedulerGetTick();
 80077b4:	f7ff f83e 	bl	8006834 <qSchedulerGetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	605a      	str	r2, [r3, #4]
    return qTrue;
 80077be:	2301      	movs	r3, #1
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	08007741 	.word	0x08007741

080077cc <qEdgeCheck_InsertNode>:
  
Return value:

    qTrue on success, otherwise returns qFalse
*/
qBool_t qEdgeCheck_InsertNode(qIOEdgeCheck_t *Instance, qIONode_t *Node, void *PortAddress, qBool_t PinNumber){
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	70fb      	strb	r3, [r7, #3]
    if(NULL == Node || NULL == Instance) return qFalse;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <qEdgeCheck_InsertNode+0x1a>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <qEdgeCheck_InsertNode+0x1e>
 80077e6:	2300      	movs	r3, #0
 80077e8:	e019      	b.n	800781e <qEdgeCheck_InsertNode+0x52>
    Node->Port = PortAddress;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	609a      	str	r2, [r3, #8]
    Node->Pin = PinNumber;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	78fa      	ldrb	r2, [r7, #3]
 80077f4:	701a      	strb	r2, [r3, #0]
    Node->Next = Instance->Head;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	605a      	str	r2, [r3, #4]
    Node->PreviousPinValue = Instance->Reader( Node->Port, Node->Pin );
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	6890      	ldr	r0, [r2, #8]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	7812      	ldrb	r2, [r2, #0]
 800780a:	4611      	mov	r1, r2
 800780c:	4798      	blx	r3
 800780e:	4603      	mov	r3, r0
 8007810:	461a      	mov	r2, r3
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	705a      	strb	r2, [r3, #1]
    Instance->Head = Node;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	601a      	str	r2, [r3, #0]
    return qTrue;
 800781c:	2301      	movs	r3, #1
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <State_Failure>:

#include "../Inc/State/State.h"


/***********************************************************************************************/
void State_Failure(qSM_t *fsm){
 8007826:	b480      	push	{r7}
 8007828:	b083      	sub	sp, #12
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
}
 800782e:	bf00      	nop
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
	...

0800783c <State_Sleep>:

/***********************************************************************************************/
qSM_Status_t State_Sleep(qSM_t *fsm){
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af02      	add	r7, sp, #8
 8007842:	6078      	str	r0, [r7, #4]
	WSSFM1XRX_Return_t RetValue;
	int Ret;
	if(fsm->StateFirstEntry){
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	7b9b      	ldrb	r3, [r3, #14]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00f      	beq.n	800786c <State_Sleep+0x30>
		RetValue = WSSFM1XRX_WakeUP(&SigfoxModule,WSSFM1XRX_Wait_Block);
 800784c:	4925      	ldr	r1, [pc, #148]	; (80078e4 <State_Sleep+0xa8>)
 800784e:	4826      	ldr	r0, [pc, #152]	; (80078e8 <State_Sleep+0xac>)
 8007850:	f7fe f86e 	bl	8005930 <WSSFM1XRX_WakeUP>
 8007854:	4603      	mov	r3, r0
 8007856:	73fb      	strb	r3, [r7, #15]
		qTraceMessage("[STATE] : State_Sleep\r\n");
 8007858:	2300      	movs	r3, #0
 800785a:	9301      	str	r3, [sp, #4]
 800785c:	2300      	movs	r3, #0
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	4b22      	ldr	r3, [pc, #136]	; (80078ec <State_Sleep+0xb0>)
 8007862:	4a23      	ldr	r2, [pc, #140]	; (80078f0 <State_Sleep+0xb4>)
 8007864:	4923      	ldr	r1, [pc, #140]	; (80078f4 <State_Sleep+0xb8>)
 8007866:	4824      	ldr	r0, [pc, #144]	; (80078f8 <State_Sleep+0xbc>)
 8007868:	f7ff ff1a 	bl	80076a0 <__qtrace_func>

	}

	if(SigFoxData.WilsolService_Status  == WSSFM1XRX_STATUS_MODULE_NOT_INITIALIZED || SigFoxData.WilsolService_Status  == WSSFM1XRX_STATUS_MODULE_INITIALIZED || SigFoxData.WilsolService_Status  == WSSFM1XRX_STATUS_SENT_MESSAGE)
 800786c:	4b23      	ldr	r3, [pc, #140]	; (80078fc <State_Sleep+0xc0>)
 800786e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007872:	2b0e      	cmp	r3, #14
 8007874:	d009      	beq.n	800788a <State_Sleep+0x4e>
 8007876:	4b21      	ldr	r3, [pc, #132]	; (80078fc <State_Sleep+0xc0>)
 8007878:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800787c:	2b08      	cmp	r3, #8
 800787e:	d004      	beq.n	800788a <State_Sleep+0x4e>
 8007880:	4b1e      	ldr	r3, [pc, #120]	; (80078fc <State_Sleep+0xc0>)
 8007882:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007886:	2b0c      	cmp	r3, #12
 8007888:	d127      	bne.n	80078da <State_Sleep+0x9e>
	{
		if(WSSFM1XRX_OK_RESPONSE ==  WSSFM1XRX_Sleep(&SigfoxModule,WAIT) ){
 800788a:	491d      	ldr	r1, [pc, #116]	; (8007900 <State_Sleep+0xc4>)
 800788c:	4816      	ldr	r0, [pc, #88]	; (80078e8 <State_Sleep+0xac>)
 800788e:	f7fe f82d 	bl	80058ec <WSSFM1XRX_Sleep>
 8007892:	4603      	mov	r3, r0
 8007894:	2b03      	cmp	r3, #3
 8007896:	d120      	bne.n	80078da <State_Sleep+0x9e>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2 , GPIO_PIN_SET);
 8007898:	2201      	movs	r2, #1
 800789a:	2104      	movs	r1, #4
 800789c:	4819      	ldr	r0, [pc, #100]	; (8007904 <State_Sleep+0xc8>)
 800789e:	f7fb f90f 	bl	8002ac0 <HAL_GPIO_WritePin>
			PrintString(&hlpuart1,(uint8_t *)"-----------------------Core Sleep-------------------\r\n");
 80078a2:	4919      	ldr	r1, [pc, #100]	; (8007908 <State_Sleep+0xcc>)
 80078a4:	4819      	ldr	r0, [pc, #100]	; (800790c <State_Sleep+0xd0>)
 80078a6:	f7fd fe1e 	bl	80054e6 <PrintString>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2 , GPIO_PIN_SET);
 80078aa:	2201      	movs	r2, #1
 80078ac:	2104      	movs	r1, #4
 80078ae:	4815      	ldr	r0, [pc, #84]	; (8007904 <State_Sleep+0xc8>)
 80078b0:	f7fb f906 	bl	8002ac0 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOC, Gpio4_Bus1_Shutdown_Pin, GPIO_PIN_RESET);
 80078b4:	2200      	movs	r2, #0
 80078b6:	2140      	movs	r1, #64	; 0x40
 80078b8:	4815      	ldr	r0, [pc, #84]	; (8007910 <State_Sleep+0xd4>)
 80078ba:	f7fb f901 	bl	8002ac0 <HAL_GPIO_WritePin>
			__HAL_RCC_PWR_CLK_ENABLE();
 80078be:	4b15      	ldr	r3, [pc, #84]	; (8007914 <State_Sleep+0xd8>)
 80078c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c2:	4a14      	ldr	r2, [pc, #80]	; (8007914 <State_Sleep+0xd8>)
 80078c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078c8:	6593      	str	r3, [r2, #88]	; 0x58
 80078ca:	4b12      	ldr	r3, [pc, #72]	; (8007914 <State_Sleep+0xd8>)
 80078cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078d2:	60bb      	str	r3, [r7, #8]
 80078d4:	68bb      	ldr	r3, [r7, #8]
			HAL_PWR_EnterSTANDBYMode();
 80078d6:	f7fb f90b 	bl	8002af0 <HAL_PWR_EnterSTANDBYMode>
		}
	}
	return qSM_EXIT_SUCCESS;
 80078da:	4b0f      	ldr	r3, [pc, #60]	; (8007918 <State_Sleep+0xdc>)
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	080058c9 	.word	0x080058c9
 80078e8:	2000064c 	.word	0x2000064c
 80078ec:	08009938 	.word	0x08009938
 80078f0:	08009950 	.word	0x08009950
 80078f4:	08009cbc 	.word	0x08009cbc
 80078f8:	08009954 	.word	0x08009954
 80078fc:	200003d0 	.word	0x200003d0
 8007900:	0800584d 	.word	0x0800584d
 8007904:	48000400 	.word	0x48000400
 8007908:	08009970 	.word	0x08009970
 800790c:	20000450 	.word	0x20000450
 8007910:	48000800 	.word	0x48000800
 8007914:	40021000 	.word	0x40021000
 8007918:	ffff8000 	.word	0xffff8000
 800791c:	00000000 	.word	0x00000000

08007920 <State_Init>:
/***********************************************************************************************/
qSM_Status_t State_Init(qSM_t *fsm){
 8007920:	b590      	push	{r4, r7, lr}
 8007922:	b089      	sub	sp, #36	; 0x24
 8007924:	af02      	add	r7, sp, #8
 8007926:	6078      	str	r0, [r7, #4]
	float ADC_0,ADC_1,ADC_2;

	if(fsm->StateFirstEntry){
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	7b9b      	ldrb	r3, [r3, #14]
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 81d5 	beq.w	8007cdc <State_Init+0x3bc>
		qTraceMessage("[STATE] : State_Init\r\n");
 8007932:	2300      	movs	r3, #0
 8007934:	9301      	str	r3, [sp, #4]
 8007936:	2300      	movs	r3, #0
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	4bcd      	ldr	r3, [pc, #820]	; (8007c70 <State_Init+0x350>)
 800793c:	4acd      	ldr	r2, [pc, #820]	; (8007c74 <State_Init+0x354>)
 800793e:	49ce      	ldr	r1, [pc, #824]	; (8007c78 <State_Init+0x358>)
 8007940:	48ce      	ldr	r0, [pc, #824]	; (8007c7c <State_Init+0x35c>)
 8007942:	f7ff fead 	bl	80076a0 <__qtrace_func>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2 , GPIO_PIN_SET);
 8007946:	2201      	movs	r2, #1
 8007948:	2104      	movs	r1, #4
 800794a:	48cd      	ldr	r0, [pc, #820]	; (8007c80 <State_Init+0x360>)
 800794c:	f7fb f8b8 	bl	8002ac0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2 , GPIO_PIN_RESET);
 8007950:	2200      	movs	r2, #0
 8007952:	2104      	movs	r1, #4
 8007954:	48ca      	ldr	r0, [pc, #808]	; (8007c80 <State_Init+0x360>)
 8007956:	f7fb f8b3 	bl	8002ac0 <HAL_GPIO_WritePin>
		 memset(DataFrame.Others,0,12);
 800795a:	220c      	movs	r2, #12
 800795c:	2100      	movs	r1, #0
 800795e:	48c9      	ldr	r0, [pc, #804]	; (8007c84 <State_Init+0x364>)
 8007960:	f001 f9d6 	bl	8008d10 <memset>

		 ADC_0 = App_ADCReadSingleChanne(&hadc1, 4)*(3.3/4095.0)/0.452;
 8007964:	2104      	movs	r1, #4
 8007966:	48c8      	ldr	r0, [pc, #800]	; (8007c88 <State_Init+0x368>)
 8007968:	f7fd fef6 	bl	8005758 <App_ADCReadSingleChanne>
 800796c:	4603      	mov	r3, r0
 800796e:	4618      	mov	r0, r3
 8007970:	f7f8 fdc8 	bl	8000504 <__aeabi_ui2d>
 8007974:	a3b6      	add	r3, pc, #728	; (adr r3, 8007c50 <State_Init+0x330>)
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	f7f8 fe3d 	bl	80005f8 <__aeabi_dmul>
 800797e:	4603      	mov	r3, r0
 8007980:	460c      	mov	r4, r1
 8007982:	4618      	mov	r0, r3
 8007984:	4621      	mov	r1, r4
 8007986:	a3b4      	add	r3, pc, #720	; (adr r3, 8007c58 <State_Init+0x338>)
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	f7f8 ff5e 	bl	800084c <__aeabi_ddiv>
 8007990:	4603      	mov	r3, r0
 8007992:	460c      	mov	r4, r1
 8007994:	4618      	mov	r0, r3
 8007996:	4621      	mov	r1, r4
 8007998:	f7f9 f860 	bl	8000a5c <__aeabi_d2f>
 800799c:	4603      	mov	r3, r0
 800799e:	617b      	str	r3, [r7, #20]
		 ADC_1 = App_ADCReadSingleChanne(&hadc1, 9)*(3.3/4095.0)/0.599;
 80079a0:	2109      	movs	r1, #9
 80079a2:	48b9      	ldr	r0, [pc, #740]	; (8007c88 <State_Init+0x368>)
 80079a4:	f7fd fed8 	bl	8005758 <App_ADCReadSingleChanne>
 80079a8:	4603      	mov	r3, r0
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7f8 fdaa 	bl	8000504 <__aeabi_ui2d>
 80079b0:	a3a7      	add	r3, pc, #668	; (adr r3, 8007c50 <State_Init+0x330>)
 80079b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b6:	f7f8 fe1f 	bl	80005f8 <__aeabi_dmul>
 80079ba:	4603      	mov	r3, r0
 80079bc:	460c      	mov	r4, r1
 80079be:	4618      	mov	r0, r3
 80079c0:	4621      	mov	r1, r4
 80079c2:	a3a7      	add	r3, pc, #668	; (adr r3, 8007c60 <State_Init+0x340>)
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	f7f8 ff40 	bl	800084c <__aeabi_ddiv>
 80079cc:	4603      	mov	r3, r0
 80079ce:	460c      	mov	r4, r1
 80079d0:	4618      	mov	r0, r3
 80079d2:	4621      	mov	r1, r4
 80079d4:	f7f9 f842 	bl	8000a5c <__aeabi_d2f>
 80079d8:	4603      	mov	r3, r0
 80079da:	613b      	str	r3, [r7, #16]
		 ADC_2 = App_ADCReadSingleChanne(&hadc1, 3)*(3.3/4095.0);
 80079dc:	2103      	movs	r1, #3
 80079de:	48aa      	ldr	r0, [pc, #680]	; (8007c88 <State_Init+0x368>)
 80079e0:	f7fd feba 	bl	8005758 <App_ADCReadSingleChanne>
 80079e4:	4603      	mov	r3, r0
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7f8 fd8c 	bl	8000504 <__aeabi_ui2d>
 80079ec:	a398      	add	r3, pc, #608	; (adr r3, 8007c50 <State_Init+0x330>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f7f8 fe01 	bl	80005f8 <__aeabi_dmul>
 80079f6:	4603      	mov	r3, r0
 80079f8:	460c      	mov	r4, r1
 80079fa:	4618      	mov	r0, r3
 80079fc:	4621      	mov	r1, r4
 80079fe:	f7f9 f82d 	bl	8000a5c <__aeabi_d2f>
 8007a02:	4603      	mov	r3, r0
 8007a04:	60fb      	str	r3, [r7, #12]
		 //AN_IN1= ADC123_IN3(CORRIENTE)  AN_IN2 = ADC123_IN4(0-10) AN_IN3 = ADC12_IN9(0-5)
		 DataFrame.ADC_0 = ADC_0*58.5 + 2340; //ADC123_IN4(0-10)
 8007a06:	6978      	ldr	r0, [r7, #20]
 8007a08:	f7f8 fd9e 	bl	8000548 <__aeabi_f2d>
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	4b9e      	ldr	r3, [pc, #632]	; (8007c8c <State_Init+0x36c>)
 8007a12:	f7f8 fdf1 	bl	80005f8 <__aeabi_dmul>
 8007a16:	4603      	mov	r3, r0
 8007a18:	460c      	mov	r4, r1
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	a392      	add	r3, pc, #584	; (adr r3, 8007c68 <State_Init+0x348>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f7f8 fc32 	bl	800028c <__adddf3>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	4621      	mov	r1, r4
 8007a30:	f7f8 fff4 	bl	8000a1c <__aeabi_d2uiz>
 8007a34:	4603      	mov	r3, r0
 8007a36:	b299      	uxth	r1, r3
 8007a38:	4a92      	ldr	r2, [pc, #584]	; (8007c84 <State_Init+0x364>)
 8007a3a:	8813      	ldrh	r3, [r2, #0]
 8007a3c:	f361 030b 	bfi	r3, r1, #0, #12
 8007a40:	8013      	strh	r3, [r2, #0]
		 DataFrame.ADC_1 = ADC_1*58.5 + 2340; //ADC12_IN9(0-5)
 8007a42:	6938      	ldr	r0, [r7, #16]
 8007a44:	f7f8 fd80 	bl	8000548 <__aeabi_f2d>
 8007a48:	f04f 0200 	mov.w	r2, #0
 8007a4c:	4b8f      	ldr	r3, [pc, #572]	; (8007c8c <State_Init+0x36c>)
 8007a4e:	f7f8 fdd3 	bl	80005f8 <__aeabi_dmul>
 8007a52:	4603      	mov	r3, r0
 8007a54:	460c      	mov	r4, r1
 8007a56:	4618      	mov	r0, r3
 8007a58:	4621      	mov	r1, r4
 8007a5a:	a383      	add	r3, pc, #524	; (adr r3, 8007c68 <State_Init+0x348>)
 8007a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a60:	f7f8 fc14 	bl	800028c <__adddf3>
 8007a64:	4603      	mov	r3, r0
 8007a66:	460c      	mov	r4, r1
 8007a68:	4618      	mov	r0, r3
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	f7f8 ffd6 	bl	8000a1c <__aeabi_d2uiz>
 8007a70:	4603      	mov	r3, r0
 8007a72:	b299      	uxth	r1, r3
 8007a74:	4a83      	ldr	r2, [pc, #524]	; (8007c84 <State_Init+0x364>)
 8007a76:	6813      	ldr	r3, [r2, #0]
 8007a78:	f361 3317 	bfi	r3, r1, #12, #12
 8007a7c:	6013      	str	r3, [r2, #0]
		 DataFrame.ADC_2 = ADC_2*58.5 + 2340;
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f7f8 fd62 	bl	8000548 <__aeabi_f2d>
 8007a84:	f04f 0200 	mov.w	r2, #0
 8007a88:	4b80      	ldr	r3, [pc, #512]	; (8007c8c <State_Init+0x36c>)
 8007a8a:	f7f8 fdb5 	bl	80005f8 <__aeabi_dmul>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	460c      	mov	r4, r1
 8007a92:	4618      	mov	r0, r3
 8007a94:	4621      	mov	r1, r4
 8007a96:	a374      	add	r3, pc, #464	; (adr r3, 8007c68 <State_Init+0x348>)
 8007a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9c:	f7f8 fbf6 	bl	800028c <__adddf3>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	f7f8 ffb8 	bl	8000a1c <__aeabi_d2uiz>
 8007aac:	4603      	mov	r3, r0
 8007aae:	b299      	uxth	r1, r3
 8007ab0:	4a74      	ldr	r2, [pc, #464]	; (8007c84 <State_Init+0x364>)
 8007ab2:	8893      	ldrh	r3, [r2, #4]
 8007ab4:	f361 030b 	bfi	r3, r1, #0, #12
 8007ab8:	8093      	strh	r3, [r2, #4]

		 qDebugFloat(ADC_0);
 8007aba:	210a      	movs	r1, #10
 8007abc:	4874      	ldr	r0, [pc, #464]	; (8007c90 <State_Init+0x370>)
 8007abe:	ed97 0a05 	vldr	s0, [r7, #20]
 8007ac2:	f7ff fcc7 	bl	8007454 <qFtoA>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	2300      	movs	r3, #0
 8007aca:	9301      	str	r3, [sp, #4]
 8007acc:	2300      	movs	r3, #0
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	4a70      	ldr	r2, [pc, #448]	; (8007c94 <State_Init+0x374>)
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	4867      	ldr	r0, [pc, #412]	; (8007c74 <State_Init+0x354>)
 8007ad8:	f7ff fde2 	bl	80076a0 <__qtrace_func>
		 qDebugFloat(ADC_1);
 8007adc:	210a      	movs	r1, #10
 8007ade:	486c      	ldr	r0, [pc, #432]	; (8007c90 <State_Init+0x370>)
 8007ae0:	ed97 0a04 	vldr	s0, [r7, #16]
 8007ae4:	f7ff fcb6 	bl	8007454 <qFtoA>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	2300      	movs	r3, #0
 8007aec:	9301      	str	r3, [sp, #4]
 8007aee:	2300      	movs	r3, #0
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	4613      	mov	r3, r2
 8007af4:	4a68      	ldr	r2, [pc, #416]	; (8007c98 <State_Init+0x378>)
 8007af6:	2100      	movs	r1, #0
 8007af8:	485e      	ldr	r0, [pc, #376]	; (8007c74 <State_Init+0x354>)
 8007afa:	f7ff fdd1 	bl	80076a0 <__qtrace_func>
		 qDebugFloat(ADC_2);
 8007afe:	210a      	movs	r1, #10
 8007b00:	4863      	ldr	r0, [pc, #396]	; (8007c90 <State_Init+0x370>)
 8007b02:	ed97 0a03 	vldr	s0, [r7, #12]
 8007b06:	f7ff fca5 	bl	8007454 <qFtoA>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	2300      	movs	r3, #0
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	4613      	mov	r3, r2
 8007b16:	4a61      	ldr	r2, [pc, #388]	; (8007c9c <State_Init+0x37c>)
 8007b18:	2100      	movs	r1, #0
 8007b1a:	4856      	ldr	r0, [pc, #344]	; (8007c74 <State_Init+0x354>)
 8007b1c:	f7ff fdc0 	bl	80076a0 <__qtrace_func>
		 //DataFrame.Others[6] = 0x06;
		 DataFrame.DI0=HAL_GPIO_ReadPin(GPIOA, IN1_Pin);
 8007b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b28:	f7fa ffb2 	bl	8002a90 <HAL_GPIO_ReadPin>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	b2d9      	uxtb	r1, r3
 8007b34:	4a53      	ldr	r2, [pc, #332]	; (8007c84 <State_Init+0x364>)
 8007b36:	7993      	ldrb	r3, [r2, #6]
 8007b38:	f361 0300 	bfi	r3, r1, #0, #1
 8007b3c:	7193      	strb	r3, [r2, #6]
		 DataFrame.DI1=HAL_GPIO_ReadPin(GPIOA, IN2_Pin);
 8007b3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b46:	f7fa ffa3 	bl	8002a90 <HAL_GPIO_ReadPin>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	b2d9      	uxtb	r1, r3
 8007b52:	4a4c      	ldr	r2, [pc, #304]	; (8007c84 <State_Init+0x364>)
 8007b54:	7993      	ldrb	r3, [r2, #6]
 8007b56:	f361 0341 	bfi	r3, r1, #1, #1
 8007b5a:	7193      	strb	r3, [r2, #6]
		 DataFrame.DI2=HAL_GPIO_ReadPin(GPIOA, IN3_Pin);
 8007b5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b64:	f7fa ff94 	bl	8002a90 <HAL_GPIO_ReadPin>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	b2d9      	uxtb	r1, r3
 8007b70:	4a44      	ldr	r2, [pc, #272]	; (8007c84 <State_Init+0x364>)
 8007b72:	7993      	ldrb	r3, [r2, #6]
 8007b74:	f361 0382 	bfi	r3, r1, #2, #1
 8007b78:	7193      	strb	r3, [r2, #6]
		 DataFrame.DI3=HAL_GPIO_ReadPin(IN4_GPIO_Port, IN4_Pin);
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	4840      	ldr	r0, [pc, #256]	; (8007c80 <State_Init+0x360>)
 8007b7e:	f7fa ff87 	bl	8002a90 <HAL_GPIO_ReadPin>
 8007b82:	4603      	mov	r3, r0
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	b2d9      	uxtb	r1, r3
 8007b8a:	4a3e      	ldr	r2, [pc, #248]	; (8007c84 <State_Init+0x364>)
 8007b8c:	7993      	ldrb	r3, [r2, #6]
 8007b8e:	f361 03c3 	bfi	r3, r1, #3, #1
 8007b92:	7193      	strb	r3, [r2, #6]
		 DataFrame.DI4=0;
 8007b94:	4a3b      	ldr	r2, [pc, #236]	; (8007c84 <State_Init+0x364>)
 8007b96:	7993      	ldrb	r3, [r2, #6]
 8007b98:	f36f 1304 	bfc	r3, #4, #1
 8007b9c:	7193      	strb	r3, [r2, #6]
		 qDebugDecimal(DataFrame.DI0);
 8007b9e:	4b39      	ldr	r3, [pc, #228]	; (8007c84 <State_Init+0x364>)
 8007ba0:	799b      	ldrb	r3, [r3, #6]
 8007ba2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	220a      	movs	r2, #10
 8007baa:	4939      	ldr	r1, [pc, #228]	; (8007c90 <State_Init+0x370>)
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7ff fbdf 	bl	8007370 <qItoA>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	4a38      	ldr	r2, [pc, #224]	; (8007ca0 <State_Init+0x380>)
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	482c      	ldr	r0, [pc, #176]	; (8007c74 <State_Init+0x354>)
 8007bc4:	f7ff fd6c 	bl	80076a0 <__qtrace_func>
		 qDebugDecimal(DataFrame.DI1);
 8007bc8:	4b2e      	ldr	r3, [pc, #184]	; (8007c84 <State_Init+0x364>)
 8007bca:	799b      	ldrb	r3, [r3, #6]
 8007bcc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	220a      	movs	r2, #10
 8007bd4:	492e      	ldr	r1, [pc, #184]	; (8007c90 <State_Init+0x370>)
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff fbca 	bl	8007370 <qItoA>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	2300      	movs	r3, #0
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	2300      	movs	r3, #0
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	4613      	mov	r3, r2
 8007be8:	4a2e      	ldr	r2, [pc, #184]	; (8007ca4 <State_Init+0x384>)
 8007bea:	2100      	movs	r1, #0
 8007bec:	4821      	ldr	r0, [pc, #132]	; (8007c74 <State_Init+0x354>)
 8007bee:	f7ff fd57 	bl	80076a0 <__qtrace_func>
		 qDebugDecimal(DataFrame.DI2);
 8007bf2:	4b24      	ldr	r3, [pc, #144]	; (8007c84 <State_Init+0x364>)
 8007bf4:	799b      	ldrb	r3, [r3, #6]
 8007bf6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	220a      	movs	r2, #10
 8007bfe:	4924      	ldr	r1, [pc, #144]	; (8007c90 <State_Init+0x370>)
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7ff fbb5 	bl	8007370 <qItoA>
 8007c06:	4602      	mov	r2, r0
 8007c08:	2300      	movs	r3, #0
 8007c0a:	9301      	str	r3, [sp, #4]
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	4613      	mov	r3, r2
 8007c12:	4a25      	ldr	r2, [pc, #148]	; (8007ca8 <State_Init+0x388>)
 8007c14:	2100      	movs	r1, #0
 8007c16:	4817      	ldr	r0, [pc, #92]	; (8007c74 <State_Init+0x354>)
 8007c18:	f7ff fd42 	bl	80076a0 <__qtrace_func>
		 qDebugDecimal(DataFrame.DI3);
 8007c1c:	4b19      	ldr	r3, [pc, #100]	; (8007c84 <State_Init+0x364>)
 8007c1e:	799b      	ldrb	r3, [r3, #6]
 8007c20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	220a      	movs	r2, #10
 8007c28:	4919      	ldr	r1, [pc, #100]	; (8007c90 <State_Init+0x370>)
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7ff fba0 	bl	8007370 <qItoA>
 8007c30:	4602      	mov	r2, r0
 8007c32:	2300      	movs	r3, #0
 8007c34:	9301      	str	r3, [sp, #4]
 8007c36:	2300      	movs	r3, #0
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	4a1b      	ldr	r2, [pc, #108]	; (8007cac <State_Init+0x38c>)
 8007c3e:	2100      	movs	r1, #0
 8007c40:	480c      	ldr	r0, [pc, #48]	; (8007c74 <State_Init+0x354>)
 8007c42:	f7ff fd2d 	bl	80076a0 <__qtrace_func>
		 qDebugDecimal(DataFrame.DI4);
 8007c46:	4b0f      	ldr	r3, [pc, #60]	; (8007c84 <State_Init+0x364>)
 8007c48:	799b      	ldrb	r3, [r3, #6]
 8007c4a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007c4e:	e02f      	b.n	8007cb0 <State_Init+0x390>
 8007c50:	e734d9b4 	.word	0xe734d9b4
 8007c54:	3f4a680c 	.word	0x3f4a680c
 8007c58:	6872b021 	.word	0x6872b021
 8007c5c:	3fdced91 	.word	0x3fdced91
 8007c60:	0c49ba5e 	.word	0x0c49ba5e
 8007c64:	3fe32b02 	.word	0x3fe32b02
 8007c68:	00000000 	.word	0x00000000
 8007c6c:	40a24800 	.word	0x40a24800
 8007c70:	080099a8 	.word	0x080099a8
 8007c74:	08009950 	.word	0x08009950
 8007c78:	08009cc8 	.word	0x08009cc8
 8007c7c:	080099c0 	.word	0x080099c0
 8007c80:	48000400 	.word	0x48000400
 8007c84:	20000590 	.word	0x20000590
 8007c88:	20000714 	.word	0x20000714
 8007c8c:	404d4000 	.word	0x404d4000
 8007c90:	2000029c 	.word	0x2000029c
 8007c94:	080099dc 	.word	0x080099dc
 8007c98:	080099e4 	.word	0x080099e4
 8007c9c:	080099ec 	.word	0x080099ec
 8007ca0:	080099f4 	.word	0x080099f4
 8007ca4:	08009a04 	.word	0x08009a04
 8007ca8:	08009a14 	.word	0x08009a14
 8007cac:	08009a24 	.word	0x08009a24
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	220a      	movs	r2, #10
 8007cb4:	4917      	ldr	r1, [pc, #92]	; (8007d14 <State_Init+0x3f4>)
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7ff fb5a 	bl	8007370 <qItoA>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	4a13      	ldr	r2, [pc, #76]	; (8007d18 <State_Init+0x3f8>)
 8007cca:	2100      	movs	r1, #0
 8007ccc:	4813      	ldr	r0, [pc, #76]	; (8007d1c <State_Init+0x3fc>)
 8007cce:	f7ff fce7 	bl	80076a0 <__qtrace_func>


		 //DataFrame.periodic = 1;
		//qRBufferPush(&SigFox_UplinkQueue, &DataFrame);
		qRBufferPush(&SigFox_UplinkQueue, &DataFrame);
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	4912      	ldr	r1, [pc, #72]	; (8007d20 <State_Init+0x400>)
 8007cd6:	4813      	ldr	r0, [pc, #76]	; (8007d24 <State_Init+0x404>)
 8007cd8:	f7ff fa31 	bl	800713e <qQueueGenericSend>
	}


	if(qRBufferEmpty(&SigFox_UplinkQueue)){// && LoRaReadyToUplink){
 8007cdc:	4811      	ldr	r0, [pc, #68]	; (8007d24 <State_Init+0x404>)
 8007cde:	f7ff f936 	bl	8006f4e <qQueueIsEmpty>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00f      	beq.n	8007d08 <State_Init+0x3e8>
		//qDebugMessage("mac tx cnf 1 000000000006000000A2B9c7\r\n");  // 06 = di2 =1 di1 = 1 A2B 2603 = 4.5v  de 5    9c7 de 0-5v
		//qDebugMessage("AT$SF=000000000006000000A2B9c7\r\n");
		LoRaReadyToUplink = 0;
 8007ce8:	4b0f      	ldr	r3, [pc, #60]	; (8007d28 <State_Init+0x408>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	701a      	strb	r2, [r3, #0]
		qTraceMem(&DataFrame,sizeof(DataFrame));
 8007cee:	2310      	movs	r3, #16
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <State_Init+0x400>)
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	4a0c      	ldr	r2, [pc, #48]	; (8007d2c <State_Init+0x40c>)
 8007cfa:	490d      	ldr	r1, [pc, #52]	; (8007d30 <State_Init+0x410>)
 8007cfc:	480d      	ldr	r0, [pc, #52]	; (8007d34 <State_Init+0x414>)
 8007cfe:	f7ff fccf 	bl	80076a0 <__qtrace_func>
		fsm->NextState = State_Sleep;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a0c      	ldr	r2, [pc, #48]	; (8007d38 <State_Init+0x418>)
 8007d06:	601a      	str	r2, [r3, #0]

	}
	return qSM_EXIT_SUCCESS;
 8007d08:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <State_Init+0x41c>)
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	371c      	adds	r7, #28
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd90      	pop	{r4, r7, pc}
 8007d12:	bf00      	nop
 8007d14:	2000029c 	.word	0x2000029c
 8007d18:	08009a34 	.word	0x08009a34
 8007d1c:	08009950 	.word	0x08009950
 8007d20:	20000590 	.word	0x20000590
 8007d24:	20000438 	.word	0x20000438
 8007d28:	20000588 	.word	0x20000588
 8007d2c:	08009a44 	.word	0x08009a44
 8007d30:	08009cc8 	.word	0x08009cc8
 8007d34:	08009a4c 	.word	0x08009a4c
 8007d38:	0800783d 	.word	0x0800783d
 8007d3c:	ffff8000 	.word	0xffff8000

08007d40 <IdleTask_Callback>:
void Leds_Callback(qEvent_t e){
	IndicatorBlink(Color.TimeBlink,Color.OneColor);  // 300 mS
}


void IdleTask_Callback(qEvent_t e){
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]


	//	PrintStringVar(&huart2,(uint8_t*) "status = %d ", SigFoxData.WilsolService_Status);
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <UplinkDispatcher_Callback>:

void UplinkDispatcher_Callback(qEvent_t e){
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af02      	add	r7, sp, #8
 8007d5a:	6078      	str	r0, [r7, #4]
	static WSSFM1XRX_Return_t ret;
	qCoroutineBegin{
 8007d5c:	4b4a      	ldr	r3, [pc, #296]	; (8007e88 <UplinkDispatcher_Callback+0x134>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b1e      	cmp	r3, #30
 8007d62:	d023      	beq.n	8007dac <UplinkDispatcher_Callback+0x58>
 8007d64:	2b1e      	cmp	r3, #30
 8007d66:	dc03      	bgt.n	8007d70 <UplinkDispatcher_Callback+0x1c>
 8007d68:	4a48      	ldr	r2, [pc, #288]	; (8007e8c <UplinkDispatcher_Callback+0x138>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d005      	beq.n	8007d7a <UplinkDispatcher_Callback+0x26>
			SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_SENT_MESSAGE;
			qRBufferRemoveFront(e->EventData);
			PrintStringVar(&hlpuart1,(uint8_t*) "%d\r\n", SigFoxData.WilsolService_Status);
		}
	}qCoroutineEnd;
}
 8007d6e:	e086      	b.n	8007e7e <UplinkDispatcher_Callback+0x12a>
	qCoroutineBegin{
 8007d70:	2b22      	cmp	r3, #34	; 0x22
 8007d72:	d032      	beq.n	8007dda <UplinkDispatcher_Callback+0x86>
 8007d74:	2b2c      	cmp	r3, #44	; 0x2c
 8007d76:	d054      	beq.n	8007e22 <UplinkDispatcher_Callback+0xce>
}
 8007d78:	e081      	b.n	8007e7e <UplinkDispatcher_Callback+0x12a>
		if(e->Trigger == byRBufferCount && SigFoxData.ReadyToUplink){
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	7a1b      	ldrb	r3, [r3, #8]
 8007d7e:	2b06      	cmp	r3, #6
 8007d80:	d174      	bne.n	8007e6c <UplinkDispatcher_Callback+0x118>
 8007d82:	4b43      	ldr	r3, [pc, #268]	; (8007e90 <UplinkDispatcher_Callback+0x13c>)
 8007d84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d06f      	beq.n	8007e6c <UplinkDispatcher_Callback+0x118>
			SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_CHK_CHANNELS;
 8007d8c:	4b40      	ldr	r3, [pc, #256]	; (8007e90 <UplinkDispatcher_Callback+0x13c>)
 8007d8e:	2209      	movs	r2, #9
 8007d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PrintStringVar(&hlpuart1,(uint8_t*) "%d " , SigFoxData.WilsolService_Status);
 8007d94:	4b3e      	ldr	r3, [pc, #248]	; (8007e90 <UplinkDispatcher_Callback+0x13c>)
 8007d96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	493d      	ldr	r1, [pc, #244]	; (8007e94 <UplinkDispatcher_Callback+0x140>)
 8007da0:	483d      	ldr	r0, [pc, #244]	; (8007e98 <UplinkDispatcher_Callback+0x144>)
 8007da2:	f7fd fb59 	bl	8005458 <PrintStringVar>
			qCoroutineWaitUntil( (ret = WSSFM1XRX_CheckChannels(&SigfoxModule, WAIT ))  == WSSFM1XRX_CHANN_OK || ret == WSSFM1XRX_CHANN_NO_OK );
 8007da6:	4b38      	ldr	r3, [pc, #224]	; (8007e88 <UplinkDispatcher_Callback+0x134>)
 8007da8:	221e      	movs	r2, #30
 8007daa:	601a      	str	r2, [r3, #0]
 8007dac:	493b      	ldr	r1, [pc, #236]	; (8007e9c <UplinkDispatcher_Callback+0x148>)
 8007dae:	483c      	ldr	r0, [pc, #240]	; (8007ea0 <UplinkDispatcher_Callback+0x14c>)
 8007db0:	f7fd fec2 	bl	8005b38 <WSSFM1XRX_CheckChannels>
 8007db4:	4603      	mov	r3, r0
 8007db6:	461a      	mov	r2, r3
 8007db8:	4b3a      	ldr	r3, [pc, #232]	; (8007ea4 <UplinkDispatcher_Callback+0x150>)
 8007dba:	701a      	strb	r2, [r3, #0]
 8007dbc:	4b39      	ldr	r3, [pc, #228]	; (8007ea4 <UplinkDispatcher_Callback+0x150>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	2b07      	cmp	r3, #7
 8007dc2:	d003      	beq.n	8007dcc <UplinkDispatcher_Callback+0x78>
 8007dc4:	4b37      	ldr	r3, [pc, #220]	; (8007ea4 <UplinkDispatcher_Callback+0x150>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	2b08      	cmp	r3, #8
 8007dca:	d153      	bne.n	8007e74 <UplinkDispatcher_Callback+0x120>
			if(  ret == WSSFM1XRX_CHANN_NO_OK   ){
 8007dcc:	4b35      	ldr	r3, [pc, #212]	; (8007ea4 <UplinkDispatcher_Callback+0x150>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	d116      	bne.n	8007e02 <UplinkDispatcher_Callback+0xae>
				qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE ==  WSSFM1XRX_ResetChannels(&SigfoxModule,WAIT) );  /*Se daña con 0.01 en task pero solo con el at$rc*/ //WSSFM1XRX_Wait_Block
 8007dd4:	4b2c      	ldr	r3, [pc, #176]	; (8007e88 <UplinkDispatcher_Callback+0x134>)
 8007dd6:	2222      	movs	r2, #34	; 0x22
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	4930      	ldr	r1, [pc, #192]	; (8007e9c <UplinkDispatcher_Callback+0x148>)
 8007ddc:	4830      	ldr	r0, [pc, #192]	; (8007ea0 <UplinkDispatcher_Callback+0x14c>)
 8007dde:	f7fd fecf 	bl	8005b80 <WSSFM1XRX_ResetChannels>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d147      	bne.n	8007e78 <UplinkDispatcher_Callback+0x124>
				SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_RST_CHANNELS;
 8007de8:	4b29      	ldr	r3, [pc, #164]	; (8007e90 <UplinkDispatcher_Callback+0x13c>)
 8007dea:	220a      	movs	r2, #10
 8007dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 8007df0:	4b27      	ldr	r3, [pc, #156]	; (8007e90 <UplinkDispatcher_Callback+0x13c>)
 8007df2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	461a      	mov	r2, r3
 8007dfa:	4926      	ldr	r1, [pc, #152]	; (8007e94 <UplinkDispatcher_Callback+0x140>)
 8007dfc:	4826      	ldr	r0, [pc, #152]	; (8007e98 <UplinkDispatcher_Callback+0x144>)
 8007dfe:	f7fd fb2b 	bl	8005458 <PrintStringVar>
			SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_SEND_MESSAGE;
 8007e02:	4b23      	ldr	r3, [pc, #140]	; (8007e90 <UplinkDispatcher_Callback+0x13c>)
 8007e04:	220b      	movs	r2, #11
 8007e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 8007e0a:	4b21      	ldr	r3, [pc, #132]	; (8007e90 <UplinkDispatcher_Callback+0x13c>)
 8007e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	461a      	mov	r2, r3
 8007e14:	491f      	ldr	r1, [pc, #124]	; (8007e94 <UplinkDispatcher_Callback+0x140>)
 8007e16:	4820      	ldr	r0, [pc, #128]	; (8007e98 <UplinkDispatcher_Callback+0x144>)
 8007e18:	f7fd fb1e 	bl	8005458 <PrintStringVar>
			qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_SendMessage(&SigfoxModule,WAIT,qRBufferGetFront(e->EventData) ,BufferTxFrame,MAX_SIZE_IBUTTON_DATA,SigfoxModule.DownLink) );
 8007e1c:	4b1a      	ldr	r3, [pc, #104]	; (8007e88 <UplinkDispatcher_Callback+0x134>)
 8007e1e:	222c      	movs	r2, #44	; 0x2c
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7ff f8d7 	bl	8006fda <qQueuePeek>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	4b1c      	ldr	r3, [pc, #112]	; (8007ea0 <UplinkDispatcher_Callback+0x14c>)
 8007e30:	7f5b      	ldrb	r3, [r3, #29]
 8007e32:	9301      	str	r3, [sp, #4]
 8007e34:	230c      	movs	r3, #12
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	4b1b      	ldr	r3, [pc, #108]	; (8007ea8 <UplinkDispatcher_Callback+0x154>)
 8007e3a:	4918      	ldr	r1, [pc, #96]	; (8007e9c <UplinkDispatcher_Callback+0x148>)
 8007e3c:	4818      	ldr	r0, [pc, #96]	; (8007ea0 <UplinkDispatcher_Callback+0x14c>)
 8007e3e:	f7fd fef1 	bl	8005c24 <WSSFM1XRX_SendMessage>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d119      	bne.n	8007e7c <UplinkDispatcher_Callback+0x128>
			SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_SENT_MESSAGE;
 8007e48:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <UplinkDispatcher_Callback+0x13c>)
 8007e4a:	220c      	movs	r2, #12
 8007e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			qRBufferRemoveFront(e->EventData);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7ff f8e7 	bl	8007028 <qQueueRemoveFront>
			PrintStringVar(&hlpuart1,(uint8_t*) "%d\r\n", SigFoxData.WilsolService_Status);
 8007e5a:	4b0d      	ldr	r3, [pc, #52]	; (8007e90 <UplinkDispatcher_Callback+0x13c>)
 8007e5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	461a      	mov	r2, r3
 8007e64:	4911      	ldr	r1, [pc, #68]	; (8007eac <UplinkDispatcher_Callback+0x158>)
 8007e66:	480c      	ldr	r0, [pc, #48]	; (8007e98 <UplinkDispatcher_Callback+0x144>)
 8007e68:	f7fd faf6 	bl	8005458 <PrintStringVar>
	}qCoroutineEnd;
 8007e6c:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <UplinkDispatcher_Callback+0x134>)
 8007e6e:	4a07      	ldr	r2, [pc, #28]	; (8007e8c <UplinkDispatcher_Callback+0x138>)
 8007e70:	601a      	str	r2, [r3, #0]
}
 8007e72:	e004      	b.n	8007e7e <UplinkDispatcher_Callback+0x12a>
			qCoroutineWaitUntil( (ret = WSSFM1XRX_CheckChannels(&SigfoxModule, WAIT ))  == WSSFM1XRX_CHANN_OK || ret == WSSFM1XRX_CHANN_NO_OK );
 8007e74:	bf00      	nop
 8007e76:	e002      	b.n	8007e7e <UplinkDispatcher_Callback+0x12a>
				qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE ==  WSSFM1XRX_ResetChannels(&SigfoxModule,WAIT) );  /*Se daña con 0.01 en task pero solo con el at$rc*/ //WSSFM1XRX_Wait_Block
 8007e78:	bf00      	nop
 8007e7a:	e000      	b.n	8007e7e <UplinkDispatcher_Callback+0x12a>
			qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_SendMessage(&SigfoxModule,WAIT,qRBufferGetFront(e->EventData) ,BufferTxFrame,MAX_SIZE_IBUTTON_DATA,SigfoxModule.DownLink) );
 8007e7c:	bf00      	nop
}
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20000028 	.word	0x20000028
 8007e8c:	ffff8002 	.word	0xffff8002
 8007e90:	200003d0 	.word	0x200003d0
 8007e94:	08009a68 	.word	0x08009a68
 8007e98:	20000450 	.word	0x20000450
 8007e9c:	0800584d 	.word	0x0800584d
 8007ea0:	2000064c 	.word	0x2000064c
 8007ea4:	200002c0 	.word	0x200002c0
 8007ea8:	200006f4 	.word	0x200006f4
 8007eac:	08009a6c 	.word	0x08009a6c

08007eb0 <WisolService_Callback>:

void WisolService_Callback(qEvent_t e){
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af02      	add	r7, sp, #8
 8007eb6:	6078      	str	r0, [r7, #4]
	static WSSFM1XRX_Return_t ret;
	static qSTimer_t timeout;

	qCoroutineBegin{
 8007eb8:	4b9a      	ldr	r3, [pc, #616]	; (8008124 <WisolService_Callback+0x274>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b52      	cmp	r3, #82	; 0x52
 8007ebe:	f000 80b2 	beq.w	8008026 <WisolService_Callback+0x176>
 8007ec2:	2b52      	cmp	r3, #82	; 0x52
 8007ec4:	dc0d      	bgt.n	8007ee2 <WisolService_Callback+0x32>
 8007ec6:	2b44      	cmp	r3, #68	; 0x44
 8007ec8:	d051      	beq.n	8007f6e <WisolService_Callback+0xbe>
 8007eca:	2b44      	cmp	r3, #68	; 0x44
 8007ecc:	dc03      	bgt.n	8007ed6 <WisolService_Callback+0x26>
 8007ece:	4a96      	ldr	r2, [pc, #600]	; (8008128 <WisolService_Callback+0x278>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d016      	beq.n	8007f02 <WisolService_Callback+0x52>
		SigFoxData.ReadyToUplink = 1;
		//qDebugMessage( SigFoxData.ID);
		qCoroutineWaitUntil( SigFoxData.WilsolService_Status == WSSFM1XRX_STATUS_IDLE  );

	}qCoroutineEnd;
}
 8007ed4:	e122      	b.n	800811c <WisolService_Callback+0x26c>
	qCoroutineBegin{
 8007ed6:	2b47      	cmp	r3, #71	; 0x47
 8007ed8:	d060      	beq.n	8007f9c <WisolService_Callback+0xec>
 8007eda:	2b4e      	cmp	r3, #78	; 0x4e
 8007edc:	f000 808b 	beq.w	8007ff6 <WisolService_Callback+0x146>
}
 8007ee0:	e11c      	b.n	800811c <WisolService_Callback+0x26c>
	qCoroutineBegin{
 8007ee2:	2b5a      	cmp	r3, #90	; 0x5a
 8007ee4:	f000 80ce 	beq.w	8008084 <WisolService_Callback+0x1d4>
 8007ee8:	2b5a      	cmp	r3, #90	; 0x5a
 8007eea:	dc03      	bgt.n	8007ef4 <WisolService_Callback+0x44>
 8007eec:	2b56      	cmp	r3, #86	; 0x56
 8007eee:	f000 80b2 	beq.w	8008056 <WisolService_Callback+0x1a6>
}
 8007ef2:	e113      	b.n	800811c <WisolService_Callback+0x26c>
	qCoroutineBegin{
 8007ef4:	2b5e      	cmp	r3, #94	; 0x5e
 8007ef6:	f000 80dd 	beq.w	80080b4 <WisolService_Callback+0x204>
 8007efa:	2b66      	cmp	r3, #102	; 0x66
 8007efc:	f000 80f6 	beq.w	80080ec <WisolService_Callback+0x23c>
}
 8007f00:	e10c      	b.n	800811c <WisolService_Callback+0x26c>
		HAL_GPIO_WritePin(GPIOC, Gpio4_Bus1_Shutdown_Pin, GPIO_PIN_SET);
 8007f02:	2201      	movs	r2, #1
 8007f04:	2140      	movs	r1, #64	; 0x40
 8007f06:	4889      	ldr	r0, [pc, #548]	; (800812c <WisolService_Callback+0x27c>)
 8007f08:	f7fa fdda 	bl	8002ac0 <HAL_GPIO_WritePin>
		qDebugMessage("Coroutine from Beginning Sigfox");
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	9301      	str	r3, [sp, #4]
 8007f10:	2300      	movs	r3, #0
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	4b86      	ldr	r3, [pc, #536]	; (8008130 <WisolService_Callback+0x280>)
 8007f16:	4a87      	ldr	r2, [pc, #540]	; (8008134 <WisolService_Callback+0x284>)
 8007f18:	2100      	movs	r1, #0
 8007f1a:	4886      	ldr	r0, [pc, #536]	; (8008134 <WisolService_Callback+0x284>)
 8007f1c:	f7ff fbc0 	bl	80076a0 <__qtrace_func>
		qDebugMessage("Coroutine from Beginning Lora");
 8007f20:	2300      	movs	r3, #0
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	2300      	movs	r3, #0
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	4b83      	ldr	r3, [pc, #524]	; (8008138 <WisolService_Callback+0x288>)
 8007f2a:	4a82      	ldr	r2, [pc, #520]	; (8008134 <WisolService_Callback+0x284>)
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	4881      	ldr	r0, [pc, #516]	; (8008134 <WisolService_Callback+0x284>)
 8007f30:	f7ff fbb6 	bl	80076a0 <__qtrace_func>
		SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_WKUP;
 8007f34:	4b81      	ldr	r3, [pc, #516]	; (800813c <WisolService_Callback+0x28c>)
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		PrintStringVar(&hlpuart1,(uint8_t*) "Status = %d ", SigFoxData.WilsolService_Status);
 8007f3c:	4b7f      	ldr	r3, [pc, #508]	; (800813c <WisolService_Callback+0x28c>)
 8007f3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	461a      	mov	r2, r3
 8007f46:	497e      	ldr	r1, [pc, #504]	; (8008140 <WisolService_Callback+0x290>)
 8007f48:	487e      	ldr	r0, [pc, #504]	; (8008144 <WisolService_Callback+0x294>)
 8007f4a:	f7fd fa85 	bl	8005458 <PrintStringVar>
		ret = WSSFM1XRX_WakeUP(&SigfoxModule,WSSFM1XRX_Wait_Block);
 8007f4e:	497e      	ldr	r1, [pc, #504]	; (8008148 <WisolService_Callback+0x298>)
 8007f50:	487e      	ldr	r0, [pc, #504]	; (800814c <WisolService_Callback+0x29c>)
 8007f52:	f7fd fced 	bl	8005930 <WSSFM1XRX_WakeUP>
 8007f56:	4603      	mov	r3, r0
 8007f58:	461a      	mov	r2, r3
 8007f5a:	4b7d      	ldr	r3, [pc, #500]	; (8008150 <WisolService_Callback+0x2a0>)
 8007f5c:	701a      	strb	r2, [r3, #0]
		qSTimerSet(&timeout, 1.0);
 8007f5e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007f62:	487c      	ldr	r0, [pc, #496]	; (8008154 <WisolService_Callback+0x2a4>)
 8007f64:	f7fe ff42 	bl	8006dec <qSTimerSet>
		qCoroutineWaitUntil( qSTimerExpired(&timeout) );
 8007f68:	4b6e      	ldr	r3, [pc, #440]	; (8008124 <WisolService_Callback+0x274>)
 8007f6a:	2244      	movs	r2, #68	; 0x44
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	4879      	ldr	r0, [pc, #484]	; (8008154 <WisolService_Callback+0x2a4>)
 8007f70:	f7fe ff5d 	bl	8006e2e <qSTimerExpired>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f000 80c1 	beq.w	80080fe <WisolService_Callback+0x24e>
		SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_CHK_MODULE;
 8007f7c:	4b6f      	ldr	r3, [pc, #444]	; (800813c <WisolService_Callback+0x28c>)
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 8007f84:	4b6d      	ldr	r3, [pc, #436]	; (800813c <WisolService_Callback+0x28c>)
 8007f86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	4972      	ldr	r1, [pc, #456]	; (8008158 <WisolService_Callback+0x2a8>)
 8007f90:	486c      	ldr	r0, [pc, #432]	; (8008144 <WisolService_Callback+0x294>)
 8007f92:	f7fd fa61 	bl	8005458 <PrintStringVar>
		qCoroutineWaitUntil( ( WSSFM1XRX_OK_RESPONSE == (ret = WSSFM1XRX_CheckModule(&SigfoxModule, WAIT)) )  || (WSSFM1XRX_MAX_RETRIES_REACHED == ret)  );
 8007f96:	4b63      	ldr	r3, [pc, #396]	; (8008124 <WisolService_Callback+0x274>)
 8007f98:	2247      	movs	r2, #71	; 0x47
 8007f9a:	601a      	str	r2, [r3, #0]
 8007f9c:	496f      	ldr	r1, [pc, #444]	; (800815c <WisolService_Callback+0x2ac>)
 8007f9e:	486b      	ldr	r0, [pc, #428]	; (800814c <WisolService_Callback+0x29c>)
 8007fa0:	f7fd fd2e 	bl	8005a00 <WSSFM1XRX_CheckModule>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	4b69      	ldr	r3, [pc, #420]	; (8008150 <WisolService_Callback+0x2a0>)
 8007faa:	701a      	strb	r2, [r3, #0]
 8007fac:	4b68      	ldr	r3, [pc, #416]	; (8008150 <WisolService_Callback+0x2a0>)
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	d004      	beq.n	8007fbe <WisolService_Callback+0x10e>
 8007fb4:	4b66      	ldr	r3, [pc, #408]	; (8008150 <WisolService_Callback+0x2a0>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	2b0b      	cmp	r3, #11
 8007fba:	f040 80a2 	bne.w	8008102 <WisolService_Callback+0x252>
		if(WSSFM1XRX_MAX_RETRIES_REACHED  == ret ){
 8007fbe:	4b64      	ldr	r3, [pc, #400]	; (8008150 <WisolService_Callback+0x2a0>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2b0b      	cmp	r3, #11
 8007fc4:	d107      	bne.n	8007fd6 <WisolService_Callback+0x126>
			WSSFM1XRX_ResetModule(&SigfoxModule,WSSFM1XRX_Wait_Block);
 8007fc6:	4960      	ldr	r1, [pc, #384]	; (8008148 <WisolService_Callback+0x298>)
 8007fc8:	4860      	ldr	r0, [pc, #384]	; (800814c <WisolService_Callback+0x29c>)
 8007fca:	f7fd fce3 	bl	8005994 <WSSFM1XRX_ResetModule>
			qCoroutineRestart;
 8007fce:	4b55      	ldr	r3, [pc, #340]	; (8008124 <WisolService_Callback+0x274>)
 8007fd0:	4a55      	ldr	r2, [pc, #340]	; (8008128 <WisolService_Callback+0x278>)
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	e0a2      	b.n	800811c <WisolService_Callback+0x26c>
		SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_GET_VOLTAGE;
 8007fd6:	4b59      	ldr	r3, [pc, #356]	; (800813c <WisolService_Callback+0x28c>)
 8007fd8:	2203      	movs	r2, #3
 8007fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 8007fde:	4b57      	ldr	r3, [pc, #348]	; (800813c <WisolService_Callback+0x28c>)
 8007fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	495b      	ldr	r1, [pc, #364]	; (8008158 <WisolService_Callback+0x2a8>)
 8007fea:	4856      	ldr	r0, [pc, #344]	; (8008144 <WisolService_Callback+0x294>)
 8007fec:	f7fd fa34 	bl	8005458 <PrintStringVar>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_GetVoltage(&SigfoxModule,WAIT,&SigFoxData.VBatt) );
 8007ff0:	4b4c      	ldr	r3, [pc, #304]	; (8008124 <WisolService_Callback+0x274>)
 8007ff2:	224e      	movs	r2, #78	; 0x4e
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	4a5a      	ldr	r2, [pc, #360]	; (8008160 <WisolService_Callback+0x2b0>)
 8007ff8:	4958      	ldr	r1, [pc, #352]	; (800815c <WisolService_Callback+0x2ac>)
 8007ffa:	4854      	ldr	r0, [pc, #336]	; (800814c <WisolService_Callback+0x29c>)
 8007ffc:	f7fd fd42 	bl	8005a84 <WSSFM1XRX_GetVoltage>
 8008000:	4603      	mov	r3, r0
 8008002:	2b03      	cmp	r3, #3
 8008004:	d17f      	bne.n	8008106 <WisolService_Callback+0x256>
		SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_CHANGE_FREQ_UL;
 8008006:	4b4d      	ldr	r3, [pc, #308]	; (800813c <WisolService_Callback+0x28c>)
 8008008:	2204      	movs	r2, #4
 800800a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 800800e:	4b4b      	ldr	r3, [pc, #300]	; (800813c <WisolService_Callback+0x28c>)
 8008010:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008014:	b29b      	uxth	r3, r3
 8008016:	461a      	mov	r2, r3
 8008018:	494f      	ldr	r1, [pc, #316]	; (8008158 <WisolService_Callback+0x2a8>)
 800801a:	484a      	ldr	r0, [pc, #296]	; (8008144 <WisolService_Callback+0x294>)
 800801c:	f7fd fa1c 	bl	8005458 <PrintStringVar>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_ChangeFrequencyUL(&SigfoxModule,WAIT,WSSFM1XRX_RCZ4)   );
 8008020:	4b40      	ldr	r3, [pc, #256]	; (8008124 <WisolService_Callback+0x274>)
 8008022:	2252      	movs	r2, #82	; 0x52
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	2203      	movs	r2, #3
 8008028:	494c      	ldr	r1, [pc, #304]	; (800815c <WisolService_Callback+0x2ac>)
 800802a:	4848      	ldr	r0, [pc, #288]	; (800814c <WisolService_Callback+0x29c>)
 800802c:	f7fd fdc2 	bl	8005bb4 <WSSFM1XRX_ChangeFrequencyUL>
 8008030:	4603      	mov	r3, r0
 8008032:	2b03      	cmp	r3, #3
 8008034:	d169      	bne.n	800810a <WisolService_Callback+0x25a>
		SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_SAVE_PARM;
 8008036:	4b41      	ldr	r3, [pc, #260]	; (800813c <WisolService_Callback+0x28c>)
 8008038:	2205      	movs	r2, #5
 800803a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 800803e:	4b3f      	ldr	r3, [pc, #252]	; (800813c <WisolService_Callback+0x28c>)
 8008040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008044:	b29b      	uxth	r3, r3
 8008046:	461a      	mov	r2, r3
 8008048:	4943      	ldr	r1, [pc, #268]	; (8008158 <WisolService_Callback+0x2a8>)
 800804a:	483e      	ldr	r0, [pc, #248]	; (8008144 <WisolService_Callback+0x294>)
 800804c:	f7fd fa04 	bl	8005458 <PrintStringVar>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_SaveParameters(&SigfoxModule,WAIT) );
 8008050:	4b34      	ldr	r3, [pc, #208]	; (8008124 <WisolService_Callback+0x274>)
 8008052:	2256      	movs	r2, #86	; 0x56
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	4941      	ldr	r1, [pc, #260]	; (800815c <WisolService_Callback+0x2ac>)
 8008058:	483c      	ldr	r0, [pc, #240]	; (800814c <WisolService_Callback+0x29c>)
 800805a:	f7fd fdc9 	bl	8005bf0 <WSSFM1XRX_SaveParameters>
 800805e:	4603      	mov	r3, r0
 8008060:	2b03      	cmp	r3, #3
 8008062:	d154      	bne.n	800810e <WisolService_Callback+0x25e>
		SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_GET_ID;
 8008064:	4b35      	ldr	r3, [pc, #212]	; (800813c <WisolService_Callback+0x28c>)
 8008066:	2206      	movs	r2, #6
 8008068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 800806c:	4b33      	ldr	r3, [pc, #204]	; (800813c <WisolService_Callback+0x28c>)
 800806e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008072:	b29b      	uxth	r3, r3
 8008074:	461a      	mov	r2, r3
 8008076:	4938      	ldr	r1, [pc, #224]	; (8008158 <WisolService_Callback+0x2a8>)
 8008078:	4832      	ldr	r0, [pc, #200]	; (8008144 <WisolService_Callback+0x294>)
 800807a:	f7fd f9ed 	bl	8005458 <PrintStringVar>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_GetID(&SigfoxModule,WAIT,SigFoxData.ID) );
 800807e:	4b29      	ldr	r3, [pc, #164]	; (8008124 <WisolService_Callback+0x274>)
 8008080:	225a      	movs	r2, #90	; 0x5a
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	4a2d      	ldr	r2, [pc, #180]	; (800813c <WisolService_Callback+0x28c>)
 8008086:	4935      	ldr	r1, [pc, #212]	; (800815c <WisolService_Callback+0x2ac>)
 8008088:	4830      	ldr	r0, [pc, #192]	; (800814c <WisolService_Callback+0x29c>)
 800808a:	f7fd fcd3 	bl	8005a34 <WSSFM1XRX_GetID>
 800808e:	4603      	mov	r3, r0
 8008090:	2b03      	cmp	r3, #3
 8008092:	d13e      	bne.n	8008112 <WisolService_Callback+0x262>
		SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_GET_PAC;
 8008094:	4b29      	ldr	r3, [pc, #164]	; (800813c <WisolService_Callback+0x28c>)
 8008096:	2207      	movs	r2, #7
 8008098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 800809c:	4b27      	ldr	r3, [pc, #156]	; (800813c <WisolService_Callback+0x28c>)
 800809e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	461a      	mov	r2, r3
 80080a6:	492c      	ldr	r1, [pc, #176]	; (8008158 <WisolService_Callback+0x2a8>)
 80080a8:	4826      	ldr	r0, [pc, #152]	; (8008144 <WisolService_Callback+0x294>)
 80080aa:	f7fd f9d5 	bl	8005458 <PrintStringVar>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_GetPAC(&SigfoxModule,WAIT,SigFoxData.PAC) );
 80080ae:	4b1d      	ldr	r3, [pc, #116]	; (8008124 <WisolService_Callback+0x274>)
 80080b0:	225e      	movs	r2, #94	; 0x5e
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	4a2b      	ldr	r2, [pc, #172]	; (8008164 <WisolService_Callback+0x2b4>)
 80080b6:	4929      	ldr	r1, [pc, #164]	; (800815c <WisolService_Callback+0x2ac>)
 80080b8:	4824      	ldr	r0, [pc, #144]	; (800814c <WisolService_Callback+0x29c>)
 80080ba:	f7fd fccf 	bl	8005a5c <WSSFM1XRX_GetPAC>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d128      	bne.n	8008116 <WisolService_Callback+0x266>
		SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_MODULE_INITIALIZED;
 80080c4:	4b1d      	ldr	r3, [pc, #116]	; (800813c <WisolService_Callback+0x28c>)
 80080c6:	2208      	movs	r2, #8
 80080c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 80080cc:	4b1b      	ldr	r3, [pc, #108]	; (800813c <WisolService_Callback+0x28c>)
 80080ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	461a      	mov	r2, r3
 80080d6:	4920      	ldr	r1, [pc, #128]	; (8008158 <WisolService_Callback+0x2a8>)
 80080d8:	481a      	ldr	r0, [pc, #104]	; (8008144 <WisolService_Callback+0x294>)
 80080da:	f7fd f9bd 	bl	8005458 <PrintStringVar>
		SigFoxData.ReadyToUplink = 1;
 80080de:	4b17      	ldr	r3, [pc, #92]	; (800813c <WisolService_Callback+0x28c>)
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		qCoroutineWaitUntil( SigFoxData.WilsolService_Status == WSSFM1XRX_STATUS_IDLE  );
 80080e6:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <WisolService_Callback+0x274>)
 80080e8:	2266      	movs	r2, #102	; 0x66
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	4b13      	ldr	r3, [pc, #76]	; (800813c <WisolService_Callback+0x28c>)
 80080ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080f2:	2b0d      	cmp	r3, #13
 80080f4:	d111      	bne.n	800811a <WisolService_Callback+0x26a>
	}qCoroutineEnd;
 80080f6:	4b0b      	ldr	r3, [pc, #44]	; (8008124 <WisolService_Callback+0x274>)
 80080f8:	4a0b      	ldr	r2, [pc, #44]	; (8008128 <WisolService_Callback+0x278>)
 80080fa:	601a      	str	r2, [r3, #0]
}
 80080fc:	e00e      	b.n	800811c <WisolService_Callback+0x26c>
		qCoroutineWaitUntil( qSTimerExpired(&timeout) );
 80080fe:	bf00      	nop
 8008100:	e00c      	b.n	800811c <WisolService_Callback+0x26c>
		qCoroutineWaitUntil( ( WSSFM1XRX_OK_RESPONSE == (ret = WSSFM1XRX_CheckModule(&SigfoxModule, WAIT)) )  || (WSSFM1XRX_MAX_RETRIES_REACHED == ret)  );
 8008102:	bf00      	nop
 8008104:	e00a      	b.n	800811c <WisolService_Callback+0x26c>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_GetVoltage(&SigfoxModule,WAIT,&SigFoxData.VBatt) );
 8008106:	bf00      	nop
 8008108:	e008      	b.n	800811c <WisolService_Callback+0x26c>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_ChangeFrequencyUL(&SigfoxModule,WAIT,WSSFM1XRX_RCZ4)   );
 800810a:	bf00      	nop
 800810c:	e006      	b.n	800811c <WisolService_Callback+0x26c>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_SaveParameters(&SigfoxModule,WAIT) );
 800810e:	bf00      	nop
 8008110:	e004      	b.n	800811c <WisolService_Callback+0x26c>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_GetID(&SigfoxModule,WAIT,SigFoxData.ID) );
 8008112:	bf00      	nop
 8008114:	e002      	b.n	800811c <WisolService_Callback+0x26c>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_GetPAC(&SigfoxModule,WAIT,SigFoxData.PAC) );
 8008116:	bf00      	nop
 8008118:	e000      	b.n	800811c <WisolService_Callback+0x26c>
		qCoroutineWaitUntil( SigFoxData.WilsolService_Status == WSSFM1XRX_STATUS_IDLE  );
 800811a:	bf00      	nop
}
 800811c:	bf00      	nop
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	20000030 	.word	0x20000030
 8008128:	ffff8002 	.word	0xffff8002
 800812c:	48000800 	.word	0x48000800
 8008130:	08009a74 	.word	0x08009a74
 8008134:	08009a94 	.word	0x08009a94
 8008138:	08009a98 	.word	0x08009a98
 800813c:	200003d0 	.word	0x200003d0
 8008140:	08009ab8 	.word	0x08009ab8
 8008144:	20000450 	.word	0x20000450
 8008148:	080058c9 	.word	0x080058c9
 800814c:	2000064c 	.word	0x2000064c
 8008150:	200002c1 	.word	0x200002c1
 8008154:	200002c4 	.word	0x200002c4
 8008158:	08009a68 	.word	0x08009a68
 800815c:	0800584d 	.word	0x0800584d
 8008160:	200003f2 	.word	0x200003f2
 8008164:	200003dc 	.word	0x200003dc

08008168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af06      	add	r7, sp, #24
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800816e:	f7f8 fe45 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008172:	f000 f8d3 	bl	800831c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008176:	f000 fa87 	bl	8008688 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800817a:	f000 f9c7 	bl	800850c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 800817e:	f000 fa21 	bl	80085c4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8008182:	f000 f9ef 	bl	8008564 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8008186:	f000 f94b 	bl	8008420 <MX_ADC1_Init>
  MX_RTC_Init();
 800818a:	f000 fa4b 	bl	8008624 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart2,(uint8_t *)&UART_RX.Data,USART_RX_AMOUNT_BYTES);
 800818e:	2201      	movs	r2, #1
 8008190:	4940      	ldr	r1, [pc, #256]	; (8008294 <main+0x12c>)
 8008192:	4841      	ldr	r0, [pc, #260]	; (8008298 <main+0x130>)
 8008194:	f7fc f97c 	bl	8004490 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3,(uint8_t *)&UART_RX3.Data,USART_RX_AMOUNT_BYTES);
 8008198:	2201      	movs	r2, #1
 800819a:	4940      	ldr	r1, [pc, #256]	; (800829c <main+0x134>)
 800819c:	4840      	ldr	r0, [pc, #256]	; (80082a0 <main+0x138>)
 800819e:	f7fc f977 	bl	8004490 <HAL_UART_Receive_IT>
	SigfoxModule.StatusFlag = WSSFM1XRX_Init(&SigfoxModule, RSTCtrl_Sigfox,
 80081a2:	2304      	movs	r3, #4
 80081a4:	9305      	str	r3, [sp, #20]
 80081a6:	2325      	movs	r3, #37	; 0x25
 80081a8:	9304      	str	r3, [sp, #16]
 80081aa:	4b3e      	ldr	r3, [pc, #248]	; (80082a4 <main+0x13c>)
 80081ac:	9303      	str	r3, [sp, #12]
 80081ae:	4b3e      	ldr	r3, [pc, #248]	; (80082a8 <main+0x140>)
 80081b0:	9302      	str	r3, [sp, #8]
 80081b2:	4b3e      	ldr	r3, [pc, #248]	; (80082ac <main+0x144>)
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	2303      	movs	r3, #3
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	4b3d      	ldr	r3, [pc, #244]	; (80082b0 <main+0x148>)
 80081bc:	4a3d      	ldr	r2, [pc, #244]	; (80082b4 <main+0x14c>)
 80081be:	493e      	ldr	r1, [pc, #248]	; (80082b8 <main+0x150>)
 80081c0:	483e      	ldr	r0, [pc, #248]	; (80082bc <main+0x154>)
 80081c2:	f7fd fb03 	bl	80057cc <WSSFM1XRX_Init>
 80081c6:	4603      	mov	r3, r0
 80081c8:	461a      	mov	r2, r3
 80081ca:	4b3c      	ldr	r3, [pc, #240]	; (80082bc <main+0x154>)
 80081cc:	76da      	strb	r2, [r3, #27]
			RST2Ctrl_Sigfox, PutCharWrapperUart_1,
			WSSFM1XRX_RCZ4, DiscrimateFrameType, HAL_GetTick,BufferRxFrame,
			sizeof(BufferRxFrame), 4);
	SigFoxData.ReadyToUplink = 0;
 80081ce:	4b3c      	ldr	r3, [pc, #240]	; (80082c0 <main+0x158>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	SigFoxData.ReadyToUplink = 0;
 80081d6:	4b3a      	ldr	r3, [pc, #232]	; (80082c0 <main+0x158>)
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_MODULE_NOT_INITIALIZED;
 80081de:	4b38      	ldr	r3, [pc, #224]	; (80082c0 <main+0x158>)
 80081e0:	220e      	movs	r2, #14
 80081e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	qSetDebugFcn(UART_DEBUG);
 80081e6:	4b37      	ldr	r3, [pc, #220]	; (80082c4 <main+0x15c>)
 80081e8:	4a37      	ldr	r2, [pc, #220]	; (80082c8 <main+0x160>)
 80081ea:	601a      	str	r2, [r3, #0]
	//HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1); // quitar
	qResponseInitialize(&ResponseObject);
 80081ec:	4837      	ldr	r0, [pc, #220]	; (80082cc <main+0x164>)
 80081ee:	f7ff fa0c 	bl	800760a <qResponseInitialize>
	//qResponseInitialize(&ResponseObjectLora);

	ProjectInformation();
 80081f2:	f7fd fa83 	bl	80056fc <ProjectInformation>
	get_system_reset_cause();
 80081f6:	f7fd f9b1 	bl	800555c <get_system_reset_cause>
	qSchedulerSetup(HAL_GetTick, 0.001, IdleTask_Callback, 0);
 80081fa:	2300      	movs	r3, #0
 80081fc:	463a      	mov	r2, r7
 80081fe:	4934      	ldr	r1, [pc, #208]	; (80082d0 <main+0x168>)
 8008200:	ed9f 0a34 	vldr	s0, [pc, #208]	; 80082d4 <main+0x16c>
 8008204:	4828      	ldr	r0, [pc, #160]	; (80082a8 <main+0x140>)
 8008206:	f7fe f871 	bl	80062ec <_qInitScheduler>

	qEdgeCheck_Initialize(&InputCheck, QREG_32BIT, 100);
 800820a:	2264      	movs	r2, #100	; 0x64
 800820c:	4932      	ldr	r1, [pc, #200]	; (80082d8 <main+0x170>)
 800820e:	4833      	ldr	r0, [pc, #204]	; (80082dc <main+0x174>)
 8008210:	f7ff fab4 	bl	800777c <qEdgeCheck_Initialize>
	qEdgeCheck_InsertNode(&InputCheck, &InputButton, GPIOB_BASE, 0);
 8008214:	2300      	movs	r3, #0
 8008216:	4a32      	ldr	r2, [pc, #200]	; (80082e0 <main+0x178>)
 8008218:	4932      	ldr	r1, [pc, #200]	; (80082e4 <main+0x17c>)
 800821a:	4830      	ldr	r0, [pc, #192]	; (80082dc <main+0x174>)
 800821c:	f7ff fad6 	bl	80077cc <qEdgeCheck_InsertNode>

	qQueueCreate(&SigFox_UplinkQueue, mQueue_Stack, sizeof(SigfoxServiceRequest_t), 2);
 8008220:	2302      	movs	r3, #2
 8008222:	220d      	movs	r2, #13
 8008224:	4930      	ldr	r1, [pc, #192]	; (80082e8 <main+0x180>)
 8008226:	4831      	ldr	r0, [pc, #196]	; (80082ec <main+0x184>)
 8008228:	f7fe fe38 	bl	8006e9c <qQueueCreate>
	qTaskSetState(&Task_Wisol_Service,qEnabled);
 800822c:	2101      	movs	r1, #1
 800822e:	4830      	ldr	r0, [pc, #192]	; (80082f0 <main+0x188>)
 8008230:	f7fd ffae 	bl	8006190 <qTaskSetState>

	qSchedulerAddSMTask(&Task_ApplicationFSM, MEDIUM_Priority, 0.01, &StateMachine_ApplicationFSM, State_Init,NULL, NULL, State_Failure, NULL, qEnabled, NULL);
 8008234:	2300      	movs	r3, #0
 8008236:	9305      	str	r3, [sp, #20]
 8008238:	2301      	movs	r3, #1
 800823a:	9304      	str	r3, [sp, #16]
 800823c:	2300      	movs	r3, #0
 800823e:	9303      	str	r3, [sp, #12]
 8008240:	4b2c      	ldr	r3, [pc, #176]	; (80082f4 <main+0x18c>)
 8008242:	9302      	str	r3, [sp, #8]
 8008244:	2300      	movs	r3, #0
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	2300      	movs	r3, #0
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	4b2a      	ldr	r3, [pc, #168]	; (80082f8 <main+0x190>)
 800824e:	4a2b      	ldr	r2, [pc, #172]	; (80082fc <main+0x194>)
 8008250:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8008300 <main+0x198>
 8008254:	217f      	movs	r1, #127	; 0x7f
 8008256:	482b      	ldr	r0, [pc, #172]	; (8008304 <main+0x19c>)
 8008258:	f7fe f93e 	bl	80064d8 <qSchedulerAdd_StateMachineTask>
	qSchedulerAddxTask(&Task_Wisol_Service, WisolService_Callback, MEDIUM_Priority, 0.1, qPeriodic, qEnabled, NULL); /*en el mismo tiempo de la maquina de estados se pega en ATRC?? corutina??*/
 800825c:	2300      	movs	r3, #0
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	2301      	movs	r3, #1
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	4b28      	ldr	r3, [pc, #160]	; (8008308 <main+0x1a0>)
 8008266:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800830c <main+0x1a4>
 800826a:	227f      	movs	r2, #127	; 0x7f
 800826c:	4928      	ldr	r1, [pc, #160]	; (8008310 <main+0x1a8>)
 800826e:	4820      	ldr	r0, [pc, #128]	; (80082f0 <main+0x188>)
 8008270:	f7fe f896 	bl	80063a0 <qSchedulerAdd_Task>
	//qSchedulerAddxTask(&Task_LoRaWANService, LoRaWANService_Callback, MEDIUM_Priority, 0.1, qPeriodic, qDisabled, NULL); /*en el mismo tiempo de la maquina de estados se pega en ATRC?? corutina??*/

	qSchedulerAdd_EventTask(&Task_UplinkDispatcher, UplinkDispatcher_Callback, qHigh_Priority, NULL);
 8008274:	2300      	movs	r3, #0
 8008276:	22fe      	movs	r2, #254	; 0xfe
 8008278:	4926      	ldr	r1, [pc, #152]	; (8008314 <main+0x1ac>)
 800827a:	4827      	ldr	r0, [pc, #156]	; (8008318 <main+0x1b0>)
 800827c:	f7fe f910 	bl	80064a0 <qSchedulerAdd_EventTask>
	qTaskAttachQueue(&Task_UplinkDispatcher, &SigFox_UplinkQueue, qQUEUE_COUNT, 1);
 8008280:	2301      	movs	r3, #1
 8008282:	2205      	movs	r2, #5
 8008284:	4919      	ldr	r1, [pc, #100]	; (80082ec <main+0x184>)
 8008286:	4824      	ldr	r0, [pc, #144]	; (8008318 <main+0x1b0>)
 8008288:	f7fe fa0a 	bl	80066a0 <qTaskAttachQueue>

	qSchedulerRun();
 800828c:	f7fe fae6 	bl	800685c <qSchedulerRun>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8008290:	e7fe      	b.n	8008290 <main+0x128>
 8008292:	bf00      	nop
 8008294:	20000649 	.word	0x20000649
 8008298:	200005a0 	.word	0x200005a0
 800829c:	20000335 	.word	0x20000335
 80082a0:	20000350 	.word	0x20000350
 80082a4:	2000052c 	.word	0x2000052c
 80082a8:	08000ec5 	.word	0x08000ec5
 80082ac:	08005501 	.word	0x08005501
 80082b0:	080053bd 	.word	0x080053bd
 80082b4:	08005385 	.word	0x08005385
 80082b8:	08005351 	.word	0x08005351
 80082bc:	2000064c 	.word	0x2000064c
 80082c0:	200003d0 	.word	0x200003d0
 80082c4:	20000298 	.word	0x20000298
 80082c8:	080053f5 	.word	0x080053f5
 80082cc:	20000338 	.word	0x20000338
 80082d0:	08007d41 	.word	0x08007d41
 80082d4:	3a83126f 	.word	0x3a83126f
 80082d8:	08007741 	.word	0x08007741
 80082dc:	200004d4 	.word	0x200004d4
 80082e0:	48000400 	.word	0x48000400
 80082e4:	20000344 	.word	0x20000344
 80082e8:	20000228 	.word	0x20000228
 80082ec:	20000438 	.word	0x20000438
 80082f0:	200004e8 	.word	0x200004e8
 80082f4:	08007827 	.word	0x08007827
 80082f8:	08007921 	.word	0x08007921
 80082fc:	200002e0 	.word	0x200002e0
 8008300:	3c23d70a 	.word	0x3c23d70a
 8008304:	2000067c 	.word	0x2000067c
 8008308:	ffff8000 	.word	0xffff8000
 800830c:	3dcccccd 	.word	0x3dcccccd
 8008310:	08007eb1 	.word	0x08007eb1
 8008314:	08007d55 	.word	0x08007d55
 8008318:	200006c0 	.word	0x200006c0

0800831c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b0b8      	sub	sp, #224	; 0xe0
 8008320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008322:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008326:	2244      	movs	r2, #68	; 0x44
 8008328:	2100      	movs	r1, #0
 800832a:	4618      	mov	r0, r3
 800832c:	f000 fcf0 	bl	8008d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008330:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008334:	2200      	movs	r2, #0
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	605a      	str	r2, [r3, #4]
 800833a:	609a      	str	r2, [r3, #8]
 800833c:	60da      	str	r2, [r3, #12]
 800833e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008340:	1d3b      	adds	r3, r7, #4
 8008342:	2284      	movs	r2, #132	; 0x84
 8008344:	2100      	movs	r1, #0
 8008346:	4618      	mov	r0, r3
 8008348:	f000 fce2 	bl	8008d10 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800834c:	230a      	movs	r3, #10
 800834e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008356:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800835a:	2310      	movs	r3, #16
 800835c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008360:	2301      	movs	r3, #1
 8008362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008366:	2300      	movs	r3, #0
 8008368:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800836c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008370:	4618      	mov	r0, r3
 8008372:	f7fa fc3b 	bl	8002bec <HAL_RCC_OscConfig>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800837c:	f000 fa1a 	bl	80087b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008380:	230f      	movs	r3, #15
 8008382:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008386:	2301      	movs	r3, #1
 8008388:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800838c:	2300      	movs	r3, #0
 800838e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008392:	2300      	movs	r3, #0
 8008394:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008398:	2300      	movs	r3, #0
 800839a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800839e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80083a2:	2100      	movs	r1, #0
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fa ffd1 	bl	800334c <HAL_RCC_ClockConfig>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80083b0:	f000 fa00 	bl	80087b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80083b4:	4b19      	ldr	r3, [pc, #100]	; (800841c <SystemClock_Config+0x100>)
 80083b6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80083b8:	2300      	movs	r3, #0
 80083ba:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80083bc:	2300      	movs	r3, #0
 80083be:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80083c0:	2300      	movs	r3, #0
 80083c2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80083c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80083c8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80083ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80083d2:	2302      	movs	r3, #2
 80083d4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80083d6:	2301      	movs	r3, #1
 80083d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80083da:	2310      	movs	r3, #16
 80083dc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80083de:	2307      	movs	r3, #7
 80083e0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80083e2:	2302      	movs	r3, #2
 80083e4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 80083e6:	2308      	movs	r3, #8
 80083e8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80083ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083ee:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80083f0:	1d3b      	adds	r3, r7, #4
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fb f9ae 	bl	8003754 <HAL_RCCEx_PeriphCLKConfig>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80083fe:	f000 f9d9 	bl	80087b4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8008402:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008406:	f7fa fb9b 	bl	8002b40 <HAL_PWREx_ControlVoltageScaling>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8008410:	f000 f9d0 	bl	80087b4 <Error_Handler>
  }
}
 8008414:	bf00      	nop
 8008416:	37e0      	adds	r7, #224	; 0xe0
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	00024026 	.word	0x00024026

08008420 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08a      	sub	sp, #40	; 0x28
 8008424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8008426:	f107 031c 	add.w	r3, r7, #28
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	605a      	str	r2, [r3, #4]
 8008430:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8008432:	1d3b      	adds	r3, r7, #4
 8008434:	2200      	movs	r2, #0
 8008436:	601a      	str	r2, [r3, #0]
 8008438:	605a      	str	r2, [r3, #4]
 800843a:	609a      	str	r2, [r3, #8]
 800843c:	60da      	str	r2, [r3, #12]
 800843e:	611a      	str	r2, [r3, #16]
 8008440:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8008442:	4b2f      	ldr	r3, [pc, #188]	; (8008500 <MX_ADC1_Init+0xe0>)
 8008444:	4a2f      	ldr	r2, [pc, #188]	; (8008504 <MX_ADC1_Init+0xe4>)
 8008446:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8008448:	4b2d      	ldr	r3, [pc, #180]	; (8008500 <MX_ADC1_Init+0xe0>)
 800844a:	2200      	movs	r2, #0
 800844c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800844e:	4b2c      	ldr	r3, [pc, #176]	; (8008500 <MX_ADC1_Init+0xe0>)
 8008450:	2200      	movs	r2, #0
 8008452:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008454:	4b2a      	ldr	r3, [pc, #168]	; (8008500 <MX_ADC1_Init+0xe0>)
 8008456:	2200      	movs	r2, #0
 8008458:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800845a:	4b29      	ldr	r3, [pc, #164]	; (8008500 <MX_ADC1_Init+0xe0>)
 800845c:	2200      	movs	r2, #0
 800845e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008460:	4b27      	ldr	r3, [pc, #156]	; (8008500 <MX_ADC1_Init+0xe0>)
 8008462:	2204      	movs	r2, #4
 8008464:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008466:	4b26      	ldr	r3, [pc, #152]	; (8008500 <MX_ADC1_Init+0xe0>)
 8008468:	2200      	movs	r2, #0
 800846a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800846c:	4b24      	ldr	r3, [pc, #144]	; (8008500 <MX_ADC1_Init+0xe0>)
 800846e:	2200      	movs	r2, #0
 8008470:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8008472:	4b23      	ldr	r3, [pc, #140]	; (8008500 <MX_ADC1_Init+0xe0>)
 8008474:	2201      	movs	r2, #1
 8008476:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008478:	4b21      	ldr	r3, [pc, #132]	; (8008500 <MX_ADC1_Init+0xe0>)
 800847a:	2200      	movs	r2, #0
 800847c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008480:	4b1f      	ldr	r3, [pc, #124]	; (8008500 <MX_ADC1_Init+0xe0>)
 8008482:	2200      	movs	r2, #0
 8008484:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008486:	4b1e      	ldr	r3, [pc, #120]	; (8008500 <MX_ADC1_Init+0xe0>)
 8008488:	2200      	movs	r2, #0
 800848a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800848c:	4b1c      	ldr	r3, [pc, #112]	; (8008500 <MX_ADC1_Init+0xe0>)
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008494:	4b1a      	ldr	r3, [pc, #104]	; (8008500 <MX_ADC1_Init+0xe0>)
 8008496:	2200      	movs	r2, #0
 8008498:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800849a:	4b19      	ldr	r3, [pc, #100]	; (8008500 <MX_ADC1_Init+0xe0>)
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80084a2:	4817      	ldr	r0, [pc, #92]	; (8008500 <MX_ADC1_Init+0xe0>)
 80084a4:	f7f8 ff3e 	bl	8001324 <HAL_ADC_Init>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80084ae:	f000 f981 	bl	80087b4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80084b2:	2300      	movs	r3, #0
 80084b4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80084b6:	f107 031c 	add.w	r3, r7, #28
 80084ba:	4619      	mov	r1, r3
 80084bc:	4810      	ldr	r0, [pc, #64]	; (8008500 <MX_ADC1_Init+0xe0>)
 80084be:	f7f9 ff41 	bl	8002344 <HAL_ADCEx_MultiModeConfigChannel>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80084c8:	f000 f974 	bl	80087b4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80084cc:	4b0e      	ldr	r3, [pc, #56]	; (8008508 <MX_ADC1_Init+0xe8>)
 80084ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80084d0:	2306      	movs	r3, #6
 80084d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80084d4:	2305      	movs	r3, #5
 80084d6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80084d8:	237f      	movs	r3, #127	; 0x7f
 80084da:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80084dc:	2304      	movs	r3, #4
 80084de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80084e0:	2300      	movs	r3, #0
 80084e2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80084e4:	1d3b      	adds	r3, r7, #4
 80084e6:	4619      	mov	r1, r3
 80084e8:	4805      	ldr	r0, [pc, #20]	; (8008500 <MX_ADC1_Init+0xe0>)
 80084ea:	f7f9 fa3b 	bl	8001964 <HAL_ADC_ConfigChannel>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d001      	beq.n	80084f8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80084f4:	f000 f95e 	bl	80087b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80084f8:	bf00      	nop
 80084fa:	3728      	adds	r7, #40	; 0x28
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	20000714 	.word	0x20000714
 8008504:	50040000 	.word	0x50040000
 8008508:	25b00200 	.word	0x25b00200

0800850c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8008510:	4b12      	ldr	r3, [pc, #72]	; (800855c <MX_LPUART1_UART_Init+0x50>)
 8008512:	4a13      	ldr	r2, [pc, #76]	; (8008560 <MX_LPUART1_UART_Init+0x54>)
 8008514:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8008516:	4b11      	ldr	r3, [pc, #68]	; (800855c <MX_LPUART1_UART_Init+0x50>)
 8008518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800851c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800851e:	4b0f      	ldr	r3, [pc, #60]	; (800855c <MX_LPUART1_UART_Init+0x50>)
 8008520:	2200      	movs	r2, #0
 8008522:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8008524:	4b0d      	ldr	r3, [pc, #52]	; (800855c <MX_LPUART1_UART_Init+0x50>)
 8008526:	2200      	movs	r2, #0
 8008528:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800852a:	4b0c      	ldr	r3, [pc, #48]	; (800855c <MX_LPUART1_UART_Init+0x50>)
 800852c:	2200      	movs	r2, #0
 800852e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8008530:	4b0a      	ldr	r3, [pc, #40]	; (800855c <MX_LPUART1_UART_Init+0x50>)
 8008532:	220c      	movs	r2, #12
 8008534:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008536:	4b09      	ldr	r3, [pc, #36]	; (800855c <MX_LPUART1_UART_Init+0x50>)
 8008538:	2200      	movs	r2, #0
 800853a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800853c:	4b07      	ldr	r3, [pc, #28]	; (800855c <MX_LPUART1_UART_Init+0x50>)
 800853e:	2200      	movs	r2, #0
 8008540:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008542:	4b06      	ldr	r3, [pc, #24]	; (800855c <MX_LPUART1_UART_Init+0x50>)
 8008544:	2200      	movs	r2, #0
 8008546:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8008548:	4804      	ldr	r0, [pc, #16]	; (800855c <MX_LPUART1_UART_Init+0x50>)
 800854a:	f7fb ff53 	bl	80043f4 <HAL_UART_Init>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8008554:	f000 f92e 	bl	80087b4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8008558:	bf00      	nop
 800855a:	bd80      	pop	{r7, pc}
 800855c:	20000450 	.word	0x20000450
 8008560:	40008000 	.word	0x40008000

08008564 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008568:	4b14      	ldr	r3, [pc, #80]	; (80085bc <MX_USART2_UART_Init+0x58>)
 800856a:	4a15      	ldr	r2, [pc, #84]	; (80085c0 <MX_USART2_UART_Init+0x5c>)
 800856c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800856e:	4b13      	ldr	r3, [pc, #76]	; (80085bc <MX_USART2_UART_Init+0x58>)
 8008570:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008574:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008576:	4b11      	ldr	r3, [pc, #68]	; (80085bc <MX_USART2_UART_Init+0x58>)
 8008578:	2200      	movs	r2, #0
 800857a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800857c:	4b0f      	ldr	r3, [pc, #60]	; (80085bc <MX_USART2_UART_Init+0x58>)
 800857e:	2200      	movs	r2, #0
 8008580:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008582:	4b0e      	ldr	r3, [pc, #56]	; (80085bc <MX_USART2_UART_Init+0x58>)
 8008584:	2200      	movs	r2, #0
 8008586:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008588:	4b0c      	ldr	r3, [pc, #48]	; (80085bc <MX_USART2_UART_Init+0x58>)
 800858a:	220c      	movs	r2, #12
 800858c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800858e:	4b0b      	ldr	r3, [pc, #44]	; (80085bc <MX_USART2_UART_Init+0x58>)
 8008590:	2200      	movs	r2, #0
 8008592:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008594:	4b09      	ldr	r3, [pc, #36]	; (80085bc <MX_USART2_UART_Init+0x58>)
 8008596:	2200      	movs	r2, #0
 8008598:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800859a:	4b08      	ldr	r3, [pc, #32]	; (80085bc <MX_USART2_UART_Init+0x58>)
 800859c:	2200      	movs	r2, #0
 800859e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80085a0:	4b06      	ldr	r3, [pc, #24]	; (80085bc <MX_USART2_UART_Init+0x58>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80085a6:	4805      	ldr	r0, [pc, #20]	; (80085bc <MX_USART2_UART_Init+0x58>)
 80085a8:	f7fb ff24 	bl	80043f4 <HAL_UART_Init>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80085b2:	f000 f8ff 	bl	80087b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80085b6:	bf00      	nop
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	200005a0 	.word	0x200005a0
 80085c0:	40004400 	.word	0x40004400

080085c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80085c8:	4b14      	ldr	r3, [pc, #80]	; (800861c <MX_USART3_UART_Init+0x58>)
 80085ca:	4a15      	ldr	r2, [pc, #84]	; (8008620 <MX_USART3_UART_Init+0x5c>)
 80085cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 80085ce:	4b13      	ldr	r3, [pc, #76]	; (800861c <MX_USART3_UART_Init+0x58>)
 80085d0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80085d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80085d6:	4b11      	ldr	r3, [pc, #68]	; (800861c <MX_USART3_UART_Init+0x58>)
 80085d8:	2200      	movs	r2, #0
 80085da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80085dc:	4b0f      	ldr	r3, [pc, #60]	; (800861c <MX_USART3_UART_Init+0x58>)
 80085de:	2200      	movs	r2, #0
 80085e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80085e2:	4b0e      	ldr	r3, [pc, #56]	; (800861c <MX_USART3_UART_Init+0x58>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80085e8:	4b0c      	ldr	r3, [pc, #48]	; (800861c <MX_USART3_UART_Init+0x58>)
 80085ea:	220c      	movs	r2, #12
 80085ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80085ee:	4b0b      	ldr	r3, [pc, #44]	; (800861c <MX_USART3_UART_Init+0x58>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80085f4:	4b09      	ldr	r3, [pc, #36]	; (800861c <MX_USART3_UART_Init+0x58>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80085fa:	4b08      	ldr	r3, [pc, #32]	; (800861c <MX_USART3_UART_Init+0x58>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008600:	4b06      	ldr	r3, [pc, #24]	; (800861c <MX_USART3_UART_Init+0x58>)
 8008602:	2200      	movs	r2, #0
 8008604:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008606:	4805      	ldr	r0, [pc, #20]	; (800861c <MX_USART3_UART_Init+0x58>)
 8008608:	f7fb fef4 	bl	80043f4 <HAL_UART_Init>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8008612:	f000 f8cf 	bl	80087b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008616:	bf00      	nop
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	20000350 	.word	0x20000350
 8008620:	40004800 	.word	0x40004800

08008624 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8008628:	4b15      	ldr	r3, [pc, #84]	; (8008680 <MX_RTC_Init+0x5c>)
 800862a:	4a16      	ldr	r2, [pc, #88]	; (8008684 <MX_RTC_Init+0x60>)
 800862c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800862e:	4b14      	ldr	r3, [pc, #80]	; (8008680 <MX_RTC_Init+0x5c>)
 8008630:	2200      	movs	r2, #0
 8008632:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008634:	4b12      	ldr	r3, [pc, #72]	; (8008680 <MX_RTC_Init+0x5c>)
 8008636:	227f      	movs	r2, #127	; 0x7f
 8008638:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800863a:	4b11      	ldr	r3, [pc, #68]	; (8008680 <MX_RTC_Init+0x5c>)
 800863c:	22ff      	movs	r2, #255	; 0xff
 800863e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008640:	4b0f      	ldr	r3, [pc, #60]	; (8008680 <MX_RTC_Init+0x5c>)
 8008642:	2200      	movs	r2, #0
 8008644:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008646:	4b0e      	ldr	r3, [pc, #56]	; (8008680 <MX_RTC_Init+0x5c>)
 8008648:	2200      	movs	r2, #0
 800864a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800864c:	4b0c      	ldr	r3, [pc, #48]	; (8008680 <MX_RTC_Init+0x5c>)
 800864e:	2200      	movs	r2, #0
 8008650:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008652:	4b0b      	ldr	r3, [pc, #44]	; (8008680 <MX_RTC_Init+0x5c>)
 8008654:	2200      	movs	r2, #0
 8008656:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008658:	4809      	ldr	r0, [pc, #36]	; (8008680 <MX_RTC_Init+0x5c>)
 800865a:	f7fb fcfb 	bl	8004054 <HAL_RTC_Init>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8008664:	f000 f8a6 	bl	80087b4 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 30, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8008668:	2204      	movs	r2, #4
 800866a:	211e      	movs	r1, #30
 800866c:	4804      	ldr	r0, [pc, #16]	; (8008680 <MX_RTC_Init+0x5c>)
 800866e:	f7fb fe07 	bl	8004280 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8008678:	f000 f89c 	bl	80087b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800867c:	bf00      	nop
 800867e:	bd80      	pop	{r7, pc}
 8008680:	20000778 	.word	0x20000778
 8008684:	40002800 	.word	0x40002800

08008688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b088      	sub	sp, #32
 800868c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800868e:	f107 030c 	add.w	r3, r7, #12
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]
 8008696:	605a      	str	r2, [r3, #4]
 8008698:	609a      	str	r2, [r3, #8]
 800869a:	60da      	str	r2, [r3, #12]
 800869c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800869e:	4b36      	ldr	r3, [pc, #216]	; (8008778 <MX_GPIO_Init+0xf0>)
 80086a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a2:	4a35      	ldr	r2, [pc, #212]	; (8008778 <MX_GPIO_Init+0xf0>)
 80086a4:	f043 0304 	orr.w	r3, r3, #4
 80086a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086aa:	4b33      	ldr	r3, [pc, #204]	; (8008778 <MX_GPIO_Init+0xf0>)
 80086ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ae:	f003 0304 	and.w	r3, r3, #4
 80086b2:	60bb      	str	r3, [r7, #8]
 80086b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80086b6:	4b30      	ldr	r3, [pc, #192]	; (8008778 <MX_GPIO_Init+0xf0>)
 80086b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ba:	4a2f      	ldr	r2, [pc, #188]	; (8008778 <MX_GPIO_Init+0xf0>)
 80086bc:	f043 0301 	orr.w	r3, r3, #1
 80086c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086c2:	4b2d      	ldr	r3, [pc, #180]	; (8008778 <MX_GPIO_Init+0xf0>)
 80086c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	607b      	str	r3, [r7, #4]
 80086cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80086ce:	4b2a      	ldr	r3, [pc, #168]	; (8008778 <MX_GPIO_Init+0xf0>)
 80086d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d2:	4a29      	ldr	r2, [pc, #164]	; (8008778 <MX_GPIO_Init+0xf0>)
 80086d4:	f043 0302 	orr.w	r3, r3, #2
 80086d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086da:	4b27      	ldr	r3, [pc, #156]	; (8008778 <MX_GPIO_Init+0xf0>)
 80086dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086de:	f003 0302 	and.w	r3, r3, #2
 80086e2:	603b      	str	r3, [r7, #0]
 80086e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|Gpio2_Bus1_Wakeup_Pin|Gpio3_Bus1_Rst_Pin, GPIO_PIN_RESET);
 80086e6:	2200      	movs	r2, #0
 80086e8:	f44f 7111 	mov.w	r1, #580	; 0x244
 80086ec:	4823      	ldr	r0, [pc, #140]	; (800877c <MX_GPIO_Init+0xf4>)
 80086ee:	f7fa f9e7 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Gpio4_Bus1_Shutdown_Pin|GPIO_PIN_8|Sigfox_Rst_Pin|Sigfox_shutdown_Pin, GPIO_PIN_RESET);
 80086f2:	2200      	movs	r2, #0
 80086f4:	f44f 61e8 	mov.w	r1, #1856	; 0x740
 80086f8:	4821      	ldr	r0, [pc, #132]	; (8008780 <MX_GPIO_Init+0xf8>)
 80086fa:	f7fa f9e1 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IN4_Pin */
  GPIO_InitStruct.Pin = IN4_Pin;
 80086fe:	2301      	movs	r3, #1
 8008700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008702:	2300      	movs	r3, #0
 8008704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008706:	2300      	movs	r3, #0
 8008708:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IN4_GPIO_Port, &GPIO_InitStruct);
 800870a:	f107 030c 	add.w	r3, r7, #12
 800870e:	4619      	mov	r1, r3
 8008710:	481a      	ldr	r0, [pc, #104]	; (800877c <MX_GPIO_Init+0xf4>)
 8008712:	f7fa f815 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 Gpio2_Bus1_Wakeup_Pin Gpio3_Bus1_Rst_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|Gpio2_Bus1_Wakeup_Pin|Gpio3_Bus1_Rst_Pin;
 8008716:	f44f 7311 	mov.w	r3, #580	; 0x244
 800871a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800871c:	2301      	movs	r3, #1
 800871e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008720:	2300      	movs	r3, #0
 8008722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008724:	2300      	movs	r3, #0
 8008726:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008728:	f107 030c 	add.w	r3, r7, #12
 800872c:	4619      	mov	r1, r3
 800872e:	4813      	ldr	r0, [pc, #76]	; (800877c <MX_GPIO_Init+0xf4>)
 8008730:	f7fa f806 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : Gpio4_Bus1_Shutdown_Pin PC8 Sigfox_Rst_Pin Sigfox_shutdown_Pin */
  GPIO_InitStruct.Pin = Gpio4_Bus1_Shutdown_Pin|GPIO_PIN_8|Sigfox_Rst_Pin|Sigfox_shutdown_Pin;
 8008734:	f44f 63e8 	mov.w	r3, #1856	; 0x740
 8008738:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800873a:	2301      	movs	r3, #1
 800873c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800873e:	2300      	movs	r3, #0
 8008740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008742:	2300      	movs	r3, #0
 8008744:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008746:	f107 030c 	add.w	r3, r7, #12
 800874a:	4619      	mov	r1, r3
 800874c:	480c      	ldr	r0, [pc, #48]	; (8008780 <MX_GPIO_Init+0xf8>)
 800874e:	f7f9 fff7 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin;
 8008752:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008758:	2300      	movs	r3, #0
 800875a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800875c:	2300      	movs	r3, #0
 800875e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008760:	f107 030c 	add.w	r3, r7, #12
 8008764:	4619      	mov	r1, r3
 8008766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800876a:	f7f9 ffe9 	bl	8002740 <HAL_GPIO_Init>

}
 800876e:	bf00      	nop
 8008770:	3720      	adds	r7, #32
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	40021000 	.word	0x40021000
 800877c:	48000400 	.word	0x48000400
 8008780:	48000800 	.word	0x48000800

08008784 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */


void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
	PutStringWrapperUart_2(NULL,"=========================================\r\n");
 800878c:	4907      	ldr	r1, [pc, #28]	; (80087ac <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 800878e:	2000      	movs	r0, #0
 8008790:	f7fc fe4c 	bl	800542c <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, "Wakeup Time\r\n");
 8008794:	4906      	ldr	r1, [pc, #24]	; (80087b0 <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 8008796:	2000      	movs	r0, #0
 8008798:	f7fc fe48 	bl	800542c <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL,"=========================================\r\n");
 800879c:	4903      	ldr	r1, [pc, #12]	; (80087ac <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 800879e:	2000      	movs	r0, #0
 80087a0:	f7fc fe44 	bl	800542c <PutStringWrapperUart_2>
}
 80087a4:	bf00      	nop
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	08009c80 	.word	0x08009c80
 80087b0:	08009cac 	.word	0x08009cac

080087b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80087b4:	b480      	push	{r7}
 80087b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80087b8:	bf00      	nop
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
	...

080087c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087ca:	4b0f      	ldr	r3, [pc, #60]	; (8008808 <HAL_MspInit+0x44>)
 80087cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087ce:	4a0e      	ldr	r2, [pc, #56]	; (8008808 <HAL_MspInit+0x44>)
 80087d0:	f043 0301 	orr.w	r3, r3, #1
 80087d4:	6613      	str	r3, [r2, #96]	; 0x60
 80087d6:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <HAL_MspInit+0x44>)
 80087d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	607b      	str	r3, [r7, #4]
 80087e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80087e2:	4b09      	ldr	r3, [pc, #36]	; (8008808 <HAL_MspInit+0x44>)
 80087e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e6:	4a08      	ldr	r2, [pc, #32]	; (8008808 <HAL_MspInit+0x44>)
 80087e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087ec:	6593      	str	r3, [r2, #88]	; 0x58
 80087ee:	4b06      	ldr	r3, [pc, #24]	; (8008808 <HAL_MspInit+0x44>)
 80087f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087f6:	603b      	str	r3, [r7, #0]
 80087f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	40021000 	.word	0x40021000

0800880c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08a      	sub	sp, #40	; 0x28
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008814:	f107 0314 	add.w	r3, r7, #20
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	605a      	str	r2, [r3, #4]
 800881e:	609a      	str	r2, [r3, #8]
 8008820:	60da      	str	r2, [r3, #12]
 8008822:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a21      	ldr	r2, [pc, #132]	; (80088b0 <HAL_ADC_MspInit+0xa4>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d13c      	bne.n	80088a8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800882e:	4b21      	ldr	r3, [pc, #132]	; (80088b4 <HAL_ADC_MspInit+0xa8>)
 8008830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008832:	4a20      	ldr	r2, [pc, #128]	; (80088b4 <HAL_ADC_MspInit+0xa8>)
 8008834:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800883a:	4b1e      	ldr	r3, [pc, #120]	; (80088b4 <HAL_ADC_MspInit+0xa8>)
 800883c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800883e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008842:	613b      	str	r3, [r7, #16]
 8008844:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008846:	4b1b      	ldr	r3, [pc, #108]	; (80088b4 <HAL_ADC_MspInit+0xa8>)
 8008848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800884a:	4a1a      	ldr	r2, [pc, #104]	; (80088b4 <HAL_ADC_MspInit+0xa8>)
 800884c:	f043 0304 	orr.w	r3, r3, #4
 8008850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008852:	4b18      	ldr	r3, [pc, #96]	; (80088b4 <HAL_ADC_MspInit+0xa8>)
 8008854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008856:	f003 0304 	and.w	r3, r3, #4
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800885e:	4b15      	ldr	r3, [pc, #84]	; (80088b4 <HAL_ADC_MspInit+0xa8>)
 8008860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008862:	4a14      	ldr	r2, [pc, #80]	; (80088b4 <HAL_ADC_MspInit+0xa8>)
 8008864:	f043 0301 	orr.w	r3, r3, #1
 8008868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800886a:	4b12      	ldr	r3, [pc, #72]	; (80088b4 <HAL_ADC_MspInit+0xa8>)
 800886c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800886e:	f003 0301 	and.w	r3, r3, #1
 8008872:	60bb      	str	r3, [r7, #8]
 8008874:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PA4     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008876:	230c      	movs	r3, #12
 8008878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800887a:	230b      	movs	r3, #11
 800887c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800887e:	2300      	movs	r3, #0
 8008880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008882:	f107 0314 	add.w	r3, r7, #20
 8008886:	4619      	mov	r1, r3
 8008888:	480b      	ldr	r0, [pc, #44]	; (80088b8 <HAL_ADC_MspInit+0xac>)
 800888a:	f7f9 ff59 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800888e:	2310      	movs	r3, #16
 8008890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8008892:	230b      	movs	r3, #11
 8008894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008896:	2300      	movs	r3, #0
 8008898:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800889a:	f107 0314 	add.w	r3, r7, #20
 800889e:	4619      	mov	r1, r3
 80088a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088a4:	f7f9 ff4c 	bl	8002740 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80088a8:	bf00      	nop
 80088aa:	3728      	adds	r7, #40	; 0x28
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	50040000 	.word	0x50040000
 80088b4:	40021000 	.word	0x40021000
 80088b8:	48000800 	.word	0x48000800

080088bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08e      	sub	sp, #56	; 0x38
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088c8:	2200      	movs	r2, #0
 80088ca:	601a      	str	r2, [r3, #0]
 80088cc:	605a      	str	r2, [r3, #4]
 80088ce:	609a      	str	r2, [r3, #8]
 80088d0:	60da      	str	r2, [r3, #12]
 80088d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a60      	ldr	r2, [pc, #384]	; (8008a5c <HAL_UART_MspInit+0x1a0>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d14d      	bne.n	800897a <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80088de:	4b60      	ldr	r3, [pc, #384]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 80088e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088e2:	4a5f      	ldr	r2, [pc, #380]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 80088e4:	f043 0301 	orr.w	r3, r3, #1
 80088e8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80088ea:	4b5d      	ldr	r3, [pc, #372]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 80088ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ee:	f003 0301 	and.w	r3, r3, #1
 80088f2:	623b      	str	r3, [r7, #32]
 80088f4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80088f6:	4b5a      	ldr	r3, [pc, #360]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 80088f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088fa:	4a59      	ldr	r2, [pc, #356]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 80088fc:	f043 0304 	orr.w	r3, r3, #4
 8008900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008902:	4b57      	ldr	r3, [pc, #348]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 8008904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008906:	f003 0304 	and.w	r3, r3, #4
 800890a:	61fb      	str	r3, [r7, #28]
 800890c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800890e:	4b54      	ldr	r3, [pc, #336]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 8008910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008912:	4a53      	ldr	r2, [pc, #332]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 8008914:	f043 0302 	orr.w	r3, r3, #2
 8008918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800891a:	4b51      	ldr	r3, [pc, #324]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 800891c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800891e:	f003 0302 	and.w	r3, r3, #2
 8008922:	61bb      	str	r3, [r7, #24]
 8008924:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration    
    PC1     ------> LPUART1_TX
    PB10     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008926:	2302      	movs	r3, #2
 8008928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800892a:	2302      	movs	r3, #2
 800892c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800892e:	2300      	movs	r3, #0
 8008930:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008932:	2303      	movs	r3, #3
 8008934:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8008936:	2308      	movs	r3, #8
 8008938:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800893a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800893e:	4619      	mov	r1, r3
 8008940:	4848      	ldr	r0, [pc, #288]	; (8008a64 <HAL_UART_MspInit+0x1a8>)
 8008942:	f7f9 fefd 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800894a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800894c:	2302      	movs	r3, #2
 800894e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008950:	2300      	movs	r3, #0
 8008952:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008954:	2303      	movs	r3, #3
 8008956:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8008958:	2308      	movs	r3, #8
 800895a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800895c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008960:	4619      	mov	r1, r3
 8008962:	4841      	ldr	r0, [pc, #260]	; (8008a68 <HAL_UART_MspInit+0x1ac>)
 8008964:	f7f9 feec 	bl	8002740 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8008968:	2200      	movs	r2, #0
 800896a:	2100      	movs	r1, #0
 800896c:	2046      	movs	r0, #70	; 0x46
 800896e:	f7f9 fe70 	bl	8002652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8008972:	2046      	movs	r0, #70	; 0x46
 8008974:	f7f9 fe89 	bl	800268a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008978:	e06b      	b.n	8008a52 <HAL_UART_MspInit+0x196>
  else if(huart->Instance==USART2)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a3b      	ldr	r2, [pc, #236]	; (8008a6c <HAL_UART_MspInit+0x1b0>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d131      	bne.n	80089e8 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008984:	4b36      	ldr	r3, [pc, #216]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 8008986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008988:	4a35      	ldr	r2, [pc, #212]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 800898a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800898e:	6593      	str	r3, [r2, #88]	; 0x58
 8008990:	4b33      	ldr	r3, [pc, #204]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 8008992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008998:	617b      	str	r3, [r7, #20]
 800899a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800899c:	4b30      	ldr	r3, [pc, #192]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 800899e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089a0:	4a2f      	ldr	r2, [pc, #188]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 80089a2:	f043 0301 	orr.w	r3, r3, #1
 80089a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089a8:	4b2d      	ldr	r3, [pc, #180]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 80089aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ac:	f003 0301 	and.w	r3, r3, #1
 80089b0:	613b      	str	r3, [r7, #16]
 80089b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80089b4:	230c      	movs	r3, #12
 80089b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089b8:	2302      	movs	r3, #2
 80089ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089bc:	2300      	movs	r3, #0
 80089be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089c0:	2303      	movs	r3, #3
 80089c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80089c4:	2307      	movs	r3, #7
 80089c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089cc:	4619      	mov	r1, r3
 80089ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80089d2:	f7f9 feb5 	bl	8002740 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80089d6:	2200      	movs	r2, #0
 80089d8:	2100      	movs	r1, #0
 80089da:	2026      	movs	r0, #38	; 0x26
 80089dc:	f7f9 fe39 	bl	8002652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80089e0:	2026      	movs	r0, #38	; 0x26
 80089e2:	f7f9 fe52 	bl	800268a <HAL_NVIC_EnableIRQ>
}
 80089e6:	e034      	b.n	8008a52 <HAL_UART_MspInit+0x196>
  else if(huart->Instance==USART3)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a20      	ldr	r2, [pc, #128]	; (8008a70 <HAL_UART_MspInit+0x1b4>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d12f      	bne.n	8008a52 <HAL_UART_MspInit+0x196>
    __HAL_RCC_USART3_CLK_ENABLE();
 80089f2:	4b1b      	ldr	r3, [pc, #108]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 80089f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f6:	4a1a      	ldr	r2, [pc, #104]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 80089f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089fc:	6593      	str	r3, [r2, #88]	; 0x58
 80089fe:	4b18      	ldr	r3, [pc, #96]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 8008a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a06:	60fb      	str	r3, [r7, #12]
 8008a08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a0a:	4b15      	ldr	r3, [pc, #84]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 8008a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a0e:	4a14      	ldr	r2, [pc, #80]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 8008a10:	f043 0304 	orr.w	r3, r3, #4
 8008a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a16:	4b12      	ldr	r3, [pc, #72]	; (8008a60 <HAL_UART_MspInit+0x1a4>)
 8008a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a1a:	f003 0304 	and.w	r3, r3, #4
 8008a1e:	60bb      	str	r3, [r7, #8]
 8008a20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8008a22:	2330      	movs	r3, #48	; 0x30
 8008a24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a26:	2302      	movs	r3, #2
 8008a28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008a32:	2307      	movs	r3, #7
 8008a34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4809      	ldr	r0, [pc, #36]	; (8008a64 <HAL_UART_MspInit+0x1a8>)
 8008a3e:	f7f9 fe7f 	bl	8002740 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8008a42:	2200      	movs	r2, #0
 8008a44:	2100      	movs	r1, #0
 8008a46:	2027      	movs	r0, #39	; 0x27
 8008a48:	f7f9 fe03 	bl	8002652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008a4c:	2027      	movs	r0, #39	; 0x27
 8008a4e:	f7f9 fe1c 	bl	800268a <HAL_NVIC_EnableIRQ>
}
 8008a52:	bf00      	nop
 8008a54:	3738      	adds	r7, #56	; 0x38
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	40008000 	.word	0x40008000
 8008a60:	40021000 	.word	0x40021000
 8008a64:	48000800 	.word	0x48000800
 8008a68:	48000400 	.word	0x48000400
 8008a6c:	40004400 	.word	0x40004400
 8008a70:	40004800 	.word	0x40004800

08008a74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a0b      	ldr	r2, [pc, #44]	; (8008ab0 <HAL_RTC_MspInit+0x3c>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d10f      	bne.n	8008aa6 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008a86:	4b0b      	ldr	r3, [pc, #44]	; (8008ab4 <HAL_RTC_MspInit+0x40>)
 8008a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a8c:	4a09      	ldr	r2, [pc, #36]	; (8008ab4 <HAL_RTC_MspInit+0x40>)
 8008a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8008a96:	2200      	movs	r2, #0
 8008a98:	2100      	movs	r1, #0
 8008a9a:	2003      	movs	r0, #3
 8008a9c:	f7f9 fdd9 	bl	8002652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8008aa0:	2003      	movs	r0, #3
 8008aa2:	f7f9 fdf2 	bl	800268a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8008aa6:	bf00      	nop
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	40002800 	.word	0x40002800
 8008ab4:	40021000 	.word	0x40021000

08008ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008abc:	bf00      	nop
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008aca:	e7fe      	b.n	8008aca <HardFault_Handler+0x4>

08008acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008acc:	b480      	push	{r7}
 8008ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008ad0:	e7fe      	b.n	8008ad0 <MemManage_Handler+0x4>

08008ad2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008ad6:	e7fe      	b.n	8008ad6 <BusFault_Handler+0x4>

08008ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008adc:	e7fe      	b.n	8008adc <UsageFault_Handler+0x4>

08008ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008ade:	b480      	push	{r7}
 8008ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008ae2:	bf00      	nop
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008aec:	b480      	push	{r7}
 8008aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008af0:	bf00      	nop
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr

08008afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008afa:	b480      	push	{r7}
 8008afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008afe:	bf00      	nop
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b0c:	f7f8 f9c8 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b10:	bf00      	nop
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8008b18:	4802      	ldr	r0, [pc, #8]	; (8008b24 <RTC_WKUP_IRQHandler+0x10>)
 8008b1a:	f7fb fc45 	bl	80043a8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8008b1e:	bf00      	nop
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20000778 	.word	0x20000778

08008b28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008b2c:	4802      	ldr	r0, [pc, #8]	; (8008b38 <USART2_IRQHandler+0x10>)
 8008b2e:	f7fb fd51 	bl	80045d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008b32:	bf00      	nop
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	200005a0 	.word	0x200005a0

08008b3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008b40:	4802      	ldr	r0, [pc, #8]	; (8008b4c <USART3_IRQHandler+0x10>)
 8008b42:	f7fb fd47 	bl	80045d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008b46:	bf00      	nop
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20000350 	.word	0x20000350

08008b50 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8008b54:	4802      	ldr	r0, [pc, #8]	; (8008b60 <LPUART1_IRQHandler+0x10>)
 8008b56:	f7fb fd3d 	bl	80045d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8008b5a:	bf00      	nop
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	20000450 	.word	0x20000450

08008b64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008b6c:	4b11      	ldr	r3, [pc, #68]	; (8008bb4 <_sbrk+0x50>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d102      	bne.n	8008b7a <_sbrk+0x16>
		heap_end = &end;
 8008b74:	4b0f      	ldr	r3, [pc, #60]	; (8008bb4 <_sbrk+0x50>)
 8008b76:	4a10      	ldr	r2, [pc, #64]	; (8008bb8 <_sbrk+0x54>)
 8008b78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008b7a:	4b0e      	ldr	r3, [pc, #56]	; (8008bb4 <_sbrk+0x50>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008b80:	4b0c      	ldr	r3, [pc, #48]	; (8008bb4 <_sbrk+0x50>)
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4413      	add	r3, r2
 8008b88:	466a      	mov	r2, sp
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d907      	bls.n	8008b9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008b8e:	f000 f875 	bl	8008c7c <__errno>
 8008b92:	4602      	mov	r2, r0
 8008b94:	230c      	movs	r3, #12
 8008b96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008b98:	f04f 33ff 	mov.w	r3, #4294967295
 8008b9c:	e006      	b.n	8008bac <_sbrk+0x48>
	}

	heap_end += incr;
 8008b9e:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <_sbrk+0x50>)
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	4a03      	ldr	r2, [pc, #12]	; (8008bb4 <_sbrk+0x50>)
 8008ba8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008baa:	68fb      	ldr	r3, [r7, #12]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	200002d0 	.word	0x200002d0
 8008bb8:	200007a0 	.word	0x200007a0

08008bbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008bc0:	4b17      	ldr	r3, [pc, #92]	; (8008c20 <SystemInit+0x64>)
 8008bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bc6:	4a16      	ldr	r2, [pc, #88]	; (8008c20 <SystemInit+0x64>)
 8008bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008bd0:	4b14      	ldr	r3, [pc, #80]	; (8008c24 <SystemInit+0x68>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a13      	ldr	r2, [pc, #76]	; (8008c24 <SystemInit+0x68>)
 8008bd6:	f043 0301 	orr.w	r3, r3, #1
 8008bda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8008bdc:	4b11      	ldr	r3, [pc, #68]	; (8008c24 <SystemInit+0x68>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8008be2:	4b10      	ldr	r3, [pc, #64]	; (8008c24 <SystemInit+0x68>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a0f      	ldr	r2, [pc, #60]	; (8008c24 <SystemInit+0x68>)
 8008be8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8008bec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8008bf0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8008bf2:	4b0c      	ldr	r3, [pc, #48]	; (8008c24 <SystemInit+0x68>)
 8008bf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008bf8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008bfa:	4b0a      	ldr	r3, [pc, #40]	; (8008c24 <SystemInit+0x68>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a09      	ldr	r2, [pc, #36]	; (8008c24 <SystemInit+0x68>)
 8008c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8008c06:	4b07      	ldr	r3, [pc, #28]	; (8008c24 <SystemInit+0x68>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008c0c:	4b04      	ldr	r3, [pc, #16]	; (8008c20 <SystemInit+0x64>)
 8008c0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008c12:	609a      	str	r2, [r3, #8]
#endif
}
 8008c14:	bf00      	nop
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	e000ed00 	.word	0xe000ed00
 8008c24:	40021000 	.word	0x40021000

08008c28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008c60 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008c2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008c2e:	e003      	b.n	8008c38 <LoopCopyDataInit>

08008c30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008c30:	4b0c      	ldr	r3, [pc, #48]	; (8008c64 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008c32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008c34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008c36:	3104      	adds	r1, #4

08008c38 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008c38:	480b      	ldr	r0, [pc, #44]	; (8008c68 <LoopForever+0xa>)
	ldr	r3, =_edata
 8008c3a:	4b0c      	ldr	r3, [pc, #48]	; (8008c6c <LoopForever+0xe>)
	adds	r2, r0, r1
 8008c3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008c3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008c40:	d3f6      	bcc.n	8008c30 <CopyDataInit>
	ldr	r2, =_sbss
 8008c42:	4a0b      	ldr	r2, [pc, #44]	; (8008c70 <LoopForever+0x12>)
	b	LoopFillZerobss
 8008c44:	e002      	b.n	8008c4c <LoopFillZerobss>

08008c46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008c46:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008c48:	f842 3b04 	str.w	r3, [r2], #4

08008c4c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008c4c:	4b09      	ldr	r3, [pc, #36]	; (8008c74 <LoopForever+0x16>)
	cmp	r2, r3
 8008c4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008c50:	d3f9      	bcc.n	8008c46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008c52:	f7ff ffb3 	bl	8008bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008c56:	f000 f817 	bl	8008c88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008c5a:	f7ff fa85 	bl	8008168 <main>

08008c5e <LoopForever>:

LoopForever:
    b LoopForever
 8008c5e:	e7fe      	b.n	8008c5e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008c60:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8008c64:	08009e6c 	.word	0x08009e6c
	ldr	r0, =_sdata
 8008c68:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008c6c:	2000020c 	.word	0x2000020c
	ldr	r2, =_sbss
 8008c70:	2000020c 	.word	0x2000020c
	ldr	r3, = _ebss
 8008c74:	200007a0 	.word	0x200007a0

08008c78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008c78:	e7fe      	b.n	8008c78 <ADC1_2_IRQHandler>
	...

08008c7c <__errno>:
 8008c7c:	4b01      	ldr	r3, [pc, #4]	; (8008c84 <__errno+0x8>)
 8008c7e:	6818      	ldr	r0, [r3, #0]
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	2000003c 	.word	0x2000003c

08008c88 <__libc_init_array>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	4e0d      	ldr	r6, [pc, #52]	; (8008cc0 <__libc_init_array+0x38>)
 8008c8c:	4c0d      	ldr	r4, [pc, #52]	; (8008cc4 <__libc_init_array+0x3c>)
 8008c8e:	1ba4      	subs	r4, r4, r6
 8008c90:	10a4      	asrs	r4, r4, #2
 8008c92:	2500      	movs	r5, #0
 8008c94:	42a5      	cmp	r5, r4
 8008c96:	d109      	bne.n	8008cac <__libc_init_array+0x24>
 8008c98:	4e0b      	ldr	r6, [pc, #44]	; (8008cc8 <__libc_init_array+0x40>)
 8008c9a:	4c0c      	ldr	r4, [pc, #48]	; (8008ccc <__libc_init_array+0x44>)
 8008c9c:	f000 fd0a 	bl	80096b4 <_init>
 8008ca0:	1ba4      	subs	r4, r4, r6
 8008ca2:	10a4      	asrs	r4, r4, #2
 8008ca4:	2500      	movs	r5, #0
 8008ca6:	42a5      	cmp	r5, r4
 8008ca8:	d105      	bne.n	8008cb6 <__libc_init_array+0x2e>
 8008caa:	bd70      	pop	{r4, r5, r6, pc}
 8008cac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008cb0:	4798      	blx	r3
 8008cb2:	3501      	adds	r5, #1
 8008cb4:	e7ee      	b.n	8008c94 <__libc_init_array+0xc>
 8008cb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008cba:	4798      	blx	r3
 8008cbc:	3501      	adds	r5, #1
 8008cbe:	e7f2      	b.n	8008ca6 <__libc_init_array+0x1e>
 8008cc0:	08009e64 	.word	0x08009e64
 8008cc4:	08009e64 	.word	0x08009e64
 8008cc8:	08009e64 	.word	0x08009e64
 8008ccc:	08009e68 	.word	0x08009e68

08008cd0 <__locale_ctype_ptr_l>:
 8008cd0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008cd4:	4770      	bx	lr

08008cd6 <__ascii_mbtowc>:
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	b901      	cbnz	r1, 8008cdc <__ascii_mbtowc+0x6>
 8008cda:	a901      	add	r1, sp, #4
 8008cdc:	b142      	cbz	r2, 8008cf0 <__ascii_mbtowc+0x1a>
 8008cde:	b14b      	cbz	r3, 8008cf4 <__ascii_mbtowc+0x1e>
 8008ce0:	7813      	ldrb	r3, [r2, #0]
 8008ce2:	600b      	str	r3, [r1, #0]
 8008ce4:	7812      	ldrb	r2, [r2, #0]
 8008ce6:	1c10      	adds	r0, r2, #0
 8008ce8:	bf18      	it	ne
 8008cea:	2001      	movne	r0, #1
 8008cec:	b002      	add	sp, #8
 8008cee:	4770      	bx	lr
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	e7fb      	b.n	8008cec <__ascii_mbtowc+0x16>
 8008cf4:	f06f 0001 	mvn.w	r0, #1
 8008cf8:	e7f8      	b.n	8008cec <__ascii_mbtowc+0x16>

08008cfa <memcpy>:
 8008cfa:	b510      	push	{r4, lr}
 8008cfc:	1e43      	subs	r3, r0, #1
 8008cfe:	440a      	add	r2, r1
 8008d00:	4291      	cmp	r1, r2
 8008d02:	d100      	bne.n	8008d06 <memcpy+0xc>
 8008d04:	bd10      	pop	{r4, pc}
 8008d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d0e:	e7f7      	b.n	8008d00 <memcpy+0x6>

08008d10 <memset>:
 8008d10:	4402      	add	r2, r0
 8008d12:	4603      	mov	r3, r0
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d100      	bne.n	8008d1a <memset+0xa>
 8008d18:	4770      	bx	lr
 8008d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d1e:	e7f9      	b.n	8008d14 <memset+0x4>

08008d20 <siprintf>:
 8008d20:	b40e      	push	{r1, r2, r3}
 8008d22:	b500      	push	{lr}
 8008d24:	b09c      	sub	sp, #112	; 0x70
 8008d26:	ab1d      	add	r3, sp, #116	; 0x74
 8008d28:	9002      	str	r0, [sp, #8]
 8008d2a:	9006      	str	r0, [sp, #24]
 8008d2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d30:	4809      	ldr	r0, [pc, #36]	; (8008d58 <siprintf+0x38>)
 8008d32:	9107      	str	r1, [sp, #28]
 8008d34:	9104      	str	r1, [sp, #16]
 8008d36:	4909      	ldr	r1, [pc, #36]	; (8008d5c <siprintf+0x3c>)
 8008d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d3c:	9105      	str	r1, [sp, #20]
 8008d3e:	6800      	ldr	r0, [r0, #0]
 8008d40:	9301      	str	r3, [sp, #4]
 8008d42:	a902      	add	r1, sp, #8
 8008d44:	f000 f934 	bl	8008fb0 <_svfiprintf_r>
 8008d48:	9b02      	ldr	r3, [sp, #8]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	701a      	strb	r2, [r3, #0]
 8008d4e:	b01c      	add	sp, #112	; 0x70
 8008d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d54:	b003      	add	sp, #12
 8008d56:	4770      	bx	lr
 8008d58:	2000003c 	.word	0x2000003c
 8008d5c:	ffff0208 	.word	0xffff0208

08008d60 <strchr>:
 8008d60:	b2c9      	uxtb	r1, r1
 8008d62:	4603      	mov	r3, r0
 8008d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d68:	b11a      	cbz	r2, 8008d72 <strchr+0x12>
 8008d6a:	428a      	cmp	r2, r1
 8008d6c:	d1f9      	bne.n	8008d62 <strchr+0x2>
 8008d6e:	4618      	mov	r0, r3
 8008d70:	4770      	bx	lr
 8008d72:	2900      	cmp	r1, #0
 8008d74:	bf18      	it	ne
 8008d76:	2300      	movne	r3, #0
 8008d78:	e7f9      	b.n	8008d6e <strchr+0xe>

08008d7a <strcpy>:
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d80:	f803 2b01 	strb.w	r2, [r3], #1
 8008d84:	2a00      	cmp	r2, #0
 8008d86:	d1f9      	bne.n	8008d7c <strcpy+0x2>
 8008d88:	4770      	bx	lr

08008d8a <strstr>:
 8008d8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d8c:	7803      	ldrb	r3, [r0, #0]
 8008d8e:	b17b      	cbz	r3, 8008db0 <strstr+0x26>
 8008d90:	4604      	mov	r4, r0
 8008d92:	7823      	ldrb	r3, [r4, #0]
 8008d94:	4620      	mov	r0, r4
 8008d96:	1c66      	adds	r6, r4, #1
 8008d98:	b17b      	cbz	r3, 8008dba <strstr+0x30>
 8008d9a:	1e4a      	subs	r2, r1, #1
 8008d9c:	1e63      	subs	r3, r4, #1
 8008d9e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8008da2:	b14d      	cbz	r5, 8008db8 <strstr+0x2e>
 8008da4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008da8:	42af      	cmp	r7, r5
 8008daa:	4634      	mov	r4, r6
 8008dac:	d0f7      	beq.n	8008d9e <strstr+0x14>
 8008dae:	e7f0      	b.n	8008d92 <strstr+0x8>
 8008db0:	780b      	ldrb	r3, [r1, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	bf18      	it	ne
 8008db6:	2000      	movne	r0, #0
 8008db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	e7fc      	b.n	8008db8 <strstr+0x2e>

08008dbe <_strtol_l.isra.0>:
 8008dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc2:	4680      	mov	r8, r0
 8008dc4:	4689      	mov	r9, r1
 8008dc6:	4692      	mov	sl, r2
 8008dc8:	461e      	mov	r6, r3
 8008dca:	460f      	mov	r7, r1
 8008dcc:	463d      	mov	r5, r7
 8008dce:	9808      	ldr	r0, [sp, #32]
 8008dd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dd4:	f7ff ff7c 	bl	8008cd0 <__locale_ctype_ptr_l>
 8008dd8:	4420      	add	r0, r4
 8008dda:	7843      	ldrb	r3, [r0, #1]
 8008ddc:	f013 0308 	ands.w	r3, r3, #8
 8008de0:	d132      	bne.n	8008e48 <_strtol_l.isra.0+0x8a>
 8008de2:	2c2d      	cmp	r4, #45	; 0x2d
 8008de4:	d132      	bne.n	8008e4c <_strtol_l.isra.0+0x8e>
 8008de6:	787c      	ldrb	r4, [r7, #1]
 8008de8:	1cbd      	adds	r5, r7, #2
 8008dea:	2201      	movs	r2, #1
 8008dec:	2e00      	cmp	r6, #0
 8008dee:	d05d      	beq.n	8008eac <_strtol_l.isra.0+0xee>
 8008df0:	2e10      	cmp	r6, #16
 8008df2:	d109      	bne.n	8008e08 <_strtol_l.isra.0+0x4a>
 8008df4:	2c30      	cmp	r4, #48	; 0x30
 8008df6:	d107      	bne.n	8008e08 <_strtol_l.isra.0+0x4a>
 8008df8:	782b      	ldrb	r3, [r5, #0]
 8008dfa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008dfe:	2b58      	cmp	r3, #88	; 0x58
 8008e00:	d14f      	bne.n	8008ea2 <_strtol_l.isra.0+0xe4>
 8008e02:	786c      	ldrb	r4, [r5, #1]
 8008e04:	2610      	movs	r6, #16
 8008e06:	3502      	adds	r5, #2
 8008e08:	2a00      	cmp	r2, #0
 8008e0a:	bf14      	ite	ne
 8008e0c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008e10:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008e14:	2700      	movs	r7, #0
 8008e16:	fbb1 fcf6 	udiv	ip, r1, r6
 8008e1a:	4638      	mov	r0, r7
 8008e1c:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008e20:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008e24:	2b09      	cmp	r3, #9
 8008e26:	d817      	bhi.n	8008e58 <_strtol_l.isra.0+0x9a>
 8008e28:	461c      	mov	r4, r3
 8008e2a:	42a6      	cmp	r6, r4
 8008e2c:	dd23      	ble.n	8008e76 <_strtol_l.isra.0+0xb8>
 8008e2e:	1c7b      	adds	r3, r7, #1
 8008e30:	d007      	beq.n	8008e42 <_strtol_l.isra.0+0x84>
 8008e32:	4584      	cmp	ip, r0
 8008e34:	d31c      	bcc.n	8008e70 <_strtol_l.isra.0+0xb2>
 8008e36:	d101      	bne.n	8008e3c <_strtol_l.isra.0+0x7e>
 8008e38:	45a6      	cmp	lr, r4
 8008e3a:	db19      	blt.n	8008e70 <_strtol_l.isra.0+0xb2>
 8008e3c:	fb00 4006 	mla	r0, r0, r6, r4
 8008e40:	2701      	movs	r7, #1
 8008e42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e46:	e7eb      	b.n	8008e20 <_strtol_l.isra.0+0x62>
 8008e48:	462f      	mov	r7, r5
 8008e4a:	e7bf      	b.n	8008dcc <_strtol_l.isra.0+0xe>
 8008e4c:	2c2b      	cmp	r4, #43	; 0x2b
 8008e4e:	bf04      	itt	eq
 8008e50:	1cbd      	addeq	r5, r7, #2
 8008e52:	787c      	ldrbeq	r4, [r7, #1]
 8008e54:	461a      	mov	r2, r3
 8008e56:	e7c9      	b.n	8008dec <_strtol_l.isra.0+0x2e>
 8008e58:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008e5c:	2b19      	cmp	r3, #25
 8008e5e:	d801      	bhi.n	8008e64 <_strtol_l.isra.0+0xa6>
 8008e60:	3c37      	subs	r4, #55	; 0x37
 8008e62:	e7e2      	b.n	8008e2a <_strtol_l.isra.0+0x6c>
 8008e64:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008e68:	2b19      	cmp	r3, #25
 8008e6a:	d804      	bhi.n	8008e76 <_strtol_l.isra.0+0xb8>
 8008e6c:	3c57      	subs	r4, #87	; 0x57
 8008e6e:	e7dc      	b.n	8008e2a <_strtol_l.isra.0+0x6c>
 8008e70:	f04f 37ff 	mov.w	r7, #4294967295
 8008e74:	e7e5      	b.n	8008e42 <_strtol_l.isra.0+0x84>
 8008e76:	1c7b      	adds	r3, r7, #1
 8008e78:	d108      	bne.n	8008e8c <_strtol_l.isra.0+0xce>
 8008e7a:	2322      	movs	r3, #34	; 0x22
 8008e7c:	f8c8 3000 	str.w	r3, [r8]
 8008e80:	4608      	mov	r0, r1
 8008e82:	f1ba 0f00 	cmp.w	sl, #0
 8008e86:	d107      	bne.n	8008e98 <_strtol_l.isra.0+0xda>
 8008e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e8c:	b102      	cbz	r2, 8008e90 <_strtol_l.isra.0+0xd2>
 8008e8e:	4240      	negs	r0, r0
 8008e90:	f1ba 0f00 	cmp.w	sl, #0
 8008e94:	d0f8      	beq.n	8008e88 <_strtol_l.isra.0+0xca>
 8008e96:	b10f      	cbz	r7, 8008e9c <_strtol_l.isra.0+0xde>
 8008e98:	f105 39ff 	add.w	r9, r5, #4294967295
 8008e9c:	f8ca 9000 	str.w	r9, [sl]
 8008ea0:	e7f2      	b.n	8008e88 <_strtol_l.isra.0+0xca>
 8008ea2:	2430      	movs	r4, #48	; 0x30
 8008ea4:	2e00      	cmp	r6, #0
 8008ea6:	d1af      	bne.n	8008e08 <_strtol_l.isra.0+0x4a>
 8008ea8:	2608      	movs	r6, #8
 8008eaa:	e7ad      	b.n	8008e08 <_strtol_l.isra.0+0x4a>
 8008eac:	2c30      	cmp	r4, #48	; 0x30
 8008eae:	d0a3      	beq.n	8008df8 <_strtol_l.isra.0+0x3a>
 8008eb0:	260a      	movs	r6, #10
 8008eb2:	e7a9      	b.n	8008e08 <_strtol_l.isra.0+0x4a>

08008eb4 <strtol>:
 8008eb4:	4b08      	ldr	r3, [pc, #32]	; (8008ed8 <strtol+0x24>)
 8008eb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eb8:	681c      	ldr	r4, [r3, #0]
 8008eba:	4d08      	ldr	r5, [pc, #32]	; (8008edc <strtol+0x28>)
 8008ebc:	6a23      	ldr	r3, [r4, #32]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	bf08      	it	eq
 8008ec2:	462b      	moveq	r3, r5
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	460a      	mov	r2, r1
 8008eca:	4601      	mov	r1, r0
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f7ff ff76 	bl	8008dbe <_strtol_l.isra.0>
 8008ed2:	b003      	add	sp, #12
 8008ed4:	bd30      	pop	{r4, r5, pc}
 8008ed6:	bf00      	nop
 8008ed8:	2000003c 	.word	0x2000003c
 8008edc:	200000a0 	.word	0x200000a0

08008ee0 <__ascii_wctomb>:
 8008ee0:	b149      	cbz	r1, 8008ef6 <__ascii_wctomb+0x16>
 8008ee2:	2aff      	cmp	r2, #255	; 0xff
 8008ee4:	bf85      	ittet	hi
 8008ee6:	238a      	movhi	r3, #138	; 0x8a
 8008ee8:	6003      	strhi	r3, [r0, #0]
 8008eea:	700a      	strbls	r2, [r1, #0]
 8008eec:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ef0:	bf98      	it	ls
 8008ef2:	2001      	movls	r0, #1
 8008ef4:	4770      	bx	lr
 8008ef6:	4608      	mov	r0, r1
 8008ef8:	4770      	bx	lr

08008efa <__ssputs_r>:
 8008efa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008efe:	688e      	ldr	r6, [r1, #8]
 8008f00:	429e      	cmp	r6, r3
 8008f02:	4682      	mov	sl, r0
 8008f04:	460c      	mov	r4, r1
 8008f06:	4690      	mov	r8, r2
 8008f08:	4699      	mov	r9, r3
 8008f0a:	d837      	bhi.n	8008f7c <__ssputs_r+0x82>
 8008f0c:	898a      	ldrh	r2, [r1, #12]
 8008f0e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f12:	d031      	beq.n	8008f78 <__ssputs_r+0x7e>
 8008f14:	6825      	ldr	r5, [r4, #0]
 8008f16:	6909      	ldr	r1, [r1, #16]
 8008f18:	1a6f      	subs	r7, r5, r1
 8008f1a:	6965      	ldr	r5, [r4, #20]
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f22:	fb95 f5f3 	sdiv	r5, r5, r3
 8008f26:	f109 0301 	add.w	r3, r9, #1
 8008f2a:	443b      	add	r3, r7
 8008f2c:	429d      	cmp	r5, r3
 8008f2e:	bf38      	it	cc
 8008f30:	461d      	movcc	r5, r3
 8008f32:	0553      	lsls	r3, r2, #21
 8008f34:	d530      	bpl.n	8008f98 <__ssputs_r+0x9e>
 8008f36:	4629      	mov	r1, r5
 8008f38:	f000 fb22 	bl	8009580 <_malloc_r>
 8008f3c:	4606      	mov	r6, r0
 8008f3e:	b950      	cbnz	r0, 8008f56 <__ssputs_r+0x5c>
 8008f40:	230c      	movs	r3, #12
 8008f42:	f8ca 3000 	str.w	r3, [sl]
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f56:	463a      	mov	r2, r7
 8008f58:	6921      	ldr	r1, [r4, #16]
 8008f5a:	f7ff fece 	bl	8008cfa <memcpy>
 8008f5e:	89a3      	ldrh	r3, [r4, #12]
 8008f60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f68:	81a3      	strh	r3, [r4, #12]
 8008f6a:	6126      	str	r6, [r4, #16]
 8008f6c:	6165      	str	r5, [r4, #20]
 8008f6e:	443e      	add	r6, r7
 8008f70:	1bed      	subs	r5, r5, r7
 8008f72:	6026      	str	r6, [r4, #0]
 8008f74:	60a5      	str	r5, [r4, #8]
 8008f76:	464e      	mov	r6, r9
 8008f78:	454e      	cmp	r6, r9
 8008f7a:	d900      	bls.n	8008f7e <__ssputs_r+0x84>
 8008f7c:	464e      	mov	r6, r9
 8008f7e:	4632      	mov	r2, r6
 8008f80:	4641      	mov	r1, r8
 8008f82:	6820      	ldr	r0, [r4, #0]
 8008f84:	f000 fa94 	bl	80094b0 <memmove>
 8008f88:	68a3      	ldr	r3, [r4, #8]
 8008f8a:	1b9b      	subs	r3, r3, r6
 8008f8c:	60a3      	str	r3, [r4, #8]
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	441e      	add	r6, r3
 8008f92:	6026      	str	r6, [r4, #0]
 8008f94:	2000      	movs	r0, #0
 8008f96:	e7dc      	b.n	8008f52 <__ssputs_r+0x58>
 8008f98:	462a      	mov	r2, r5
 8008f9a:	f000 fb4b 	bl	8009634 <_realloc_r>
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d1e2      	bne.n	8008f6a <__ssputs_r+0x70>
 8008fa4:	6921      	ldr	r1, [r4, #16]
 8008fa6:	4650      	mov	r0, sl
 8008fa8:	f000 fa9c 	bl	80094e4 <_free_r>
 8008fac:	e7c8      	b.n	8008f40 <__ssputs_r+0x46>
	...

08008fb0 <_svfiprintf_r>:
 8008fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb4:	461d      	mov	r5, r3
 8008fb6:	898b      	ldrh	r3, [r1, #12]
 8008fb8:	061f      	lsls	r7, r3, #24
 8008fba:	b09d      	sub	sp, #116	; 0x74
 8008fbc:	4680      	mov	r8, r0
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	d50f      	bpl.n	8008fe4 <_svfiprintf_r+0x34>
 8008fc4:	690b      	ldr	r3, [r1, #16]
 8008fc6:	b96b      	cbnz	r3, 8008fe4 <_svfiprintf_r+0x34>
 8008fc8:	2140      	movs	r1, #64	; 0x40
 8008fca:	f000 fad9 	bl	8009580 <_malloc_r>
 8008fce:	6020      	str	r0, [r4, #0]
 8008fd0:	6120      	str	r0, [r4, #16]
 8008fd2:	b928      	cbnz	r0, 8008fe0 <_svfiprintf_r+0x30>
 8008fd4:	230c      	movs	r3, #12
 8008fd6:	f8c8 3000 	str.w	r3, [r8]
 8008fda:	f04f 30ff 	mov.w	r0, #4294967295
 8008fde:	e0c8      	b.n	8009172 <_svfiprintf_r+0x1c2>
 8008fe0:	2340      	movs	r3, #64	; 0x40
 8008fe2:	6163      	str	r3, [r4, #20]
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe8:	2320      	movs	r3, #32
 8008fea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fee:	2330      	movs	r3, #48	; 0x30
 8008ff0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ff4:	9503      	str	r5, [sp, #12]
 8008ff6:	f04f 0b01 	mov.w	fp, #1
 8008ffa:	4637      	mov	r7, r6
 8008ffc:	463d      	mov	r5, r7
 8008ffe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009002:	b10b      	cbz	r3, 8009008 <_svfiprintf_r+0x58>
 8009004:	2b25      	cmp	r3, #37	; 0x25
 8009006:	d13e      	bne.n	8009086 <_svfiprintf_r+0xd6>
 8009008:	ebb7 0a06 	subs.w	sl, r7, r6
 800900c:	d00b      	beq.n	8009026 <_svfiprintf_r+0x76>
 800900e:	4653      	mov	r3, sl
 8009010:	4632      	mov	r2, r6
 8009012:	4621      	mov	r1, r4
 8009014:	4640      	mov	r0, r8
 8009016:	f7ff ff70 	bl	8008efa <__ssputs_r>
 800901a:	3001      	adds	r0, #1
 800901c:	f000 80a4 	beq.w	8009168 <_svfiprintf_r+0x1b8>
 8009020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009022:	4453      	add	r3, sl
 8009024:	9309      	str	r3, [sp, #36]	; 0x24
 8009026:	783b      	ldrb	r3, [r7, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 809d 	beq.w	8009168 <_svfiprintf_r+0x1b8>
 800902e:	2300      	movs	r3, #0
 8009030:	f04f 32ff 	mov.w	r2, #4294967295
 8009034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009038:	9304      	str	r3, [sp, #16]
 800903a:	9307      	str	r3, [sp, #28]
 800903c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009040:	931a      	str	r3, [sp, #104]	; 0x68
 8009042:	462f      	mov	r7, r5
 8009044:	2205      	movs	r2, #5
 8009046:	f817 1b01 	ldrb.w	r1, [r7], #1
 800904a:	4850      	ldr	r0, [pc, #320]	; (800918c <_svfiprintf_r+0x1dc>)
 800904c:	f7f7 f8c8 	bl	80001e0 <memchr>
 8009050:	9b04      	ldr	r3, [sp, #16]
 8009052:	b9d0      	cbnz	r0, 800908a <_svfiprintf_r+0xda>
 8009054:	06d9      	lsls	r1, r3, #27
 8009056:	bf44      	itt	mi
 8009058:	2220      	movmi	r2, #32
 800905a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800905e:	071a      	lsls	r2, r3, #28
 8009060:	bf44      	itt	mi
 8009062:	222b      	movmi	r2, #43	; 0x2b
 8009064:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009068:	782a      	ldrb	r2, [r5, #0]
 800906a:	2a2a      	cmp	r2, #42	; 0x2a
 800906c:	d015      	beq.n	800909a <_svfiprintf_r+0xea>
 800906e:	9a07      	ldr	r2, [sp, #28]
 8009070:	462f      	mov	r7, r5
 8009072:	2000      	movs	r0, #0
 8009074:	250a      	movs	r5, #10
 8009076:	4639      	mov	r1, r7
 8009078:	f811 3b01 	ldrb.w	r3, [r1], #1
 800907c:	3b30      	subs	r3, #48	; 0x30
 800907e:	2b09      	cmp	r3, #9
 8009080:	d94d      	bls.n	800911e <_svfiprintf_r+0x16e>
 8009082:	b1b8      	cbz	r0, 80090b4 <_svfiprintf_r+0x104>
 8009084:	e00f      	b.n	80090a6 <_svfiprintf_r+0xf6>
 8009086:	462f      	mov	r7, r5
 8009088:	e7b8      	b.n	8008ffc <_svfiprintf_r+0x4c>
 800908a:	4a40      	ldr	r2, [pc, #256]	; (800918c <_svfiprintf_r+0x1dc>)
 800908c:	1a80      	subs	r0, r0, r2
 800908e:	fa0b f000 	lsl.w	r0, fp, r0
 8009092:	4318      	orrs	r0, r3
 8009094:	9004      	str	r0, [sp, #16]
 8009096:	463d      	mov	r5, r7
 8009098:	e7d3      	b.n	8009042 <_svfiprintf_r+0x92>
 800909a:	9a03      	ldr	r2, [sp, #12]
 800909c:	1d11      	adds	r1, r2, #4
 800909e:	6812      	ldr	r2, [r2, #0]
 80090a0:	9103      	str	r1, [sp, #12]
 80090a2:	2a00      	cmp	r2, #0
 80090a4:	db01      	blt.n	80090aa <_svfiprintf_r+0xfa>
 80090a6:	9207      	str	r2, [sp, #28]
 80090a8:	e004      	b.n	80090b4 <_svfiprintf_r+0x104>
 80090aa:	4252      	negs	r2, r2
 80090ac:	f043 0302 	orr.w	r3, r3, #2
 80090b0:	9207      	str	r2, [sp, #28]
 80090b2:	9304      	str	r3, [sp, #16]
 80090b4:	783b      	ldrb	r3, [r7, #0]
 80090b6:	2b2e      	cmp	r3, #46	; 0x2e
 80090b8:	d10c      	bne.n	80090d4 <_svfiprintf_r+0x124>
 80090ba:	787b      	ldrb	r3, [r7, #1]
 80090bc:	2b2a      	cmp	r3, #42	; 0x2a
 80090be:	d133      	bne.n	8009128 <_svfiprintf_r+0x178>
 80090c0:	9b03      	ldr	r3, [sp, #12]
 80090c2:	1d1a      	adds	r2, r3, #4
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	9203      	str	r2, [sp, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	bfb8      	it	lt
 80090cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80090d0:	3702      	adds	r7, #2
 80090d2:	9305      	str	r3, [sp, #20]
 80090d4:	4d2e      	ldr	r5, [pc, #184]	; (8009190 <_svfiprintf_r+0x1e0>)
 80090d6:	7839      	ldrb	r1, [r7, #0]
 80090d8:	2203      	movs	r2, #3
 80090da:	4628      	mov	r0, r5
 80090dc:	f7f7 f880 	bl	80001e0 <memchr>
 80090e0:	b138      	cbz	r0, 80090f2 <_svfiprintf_r+0x142>
 80090e2:	2340      	movs	r3, #64	; 0x40
 80090e4:	1b40      	subs	r0, r0, r5
 80090e6:	fa03 f000 	lsl.w	r0, r3, r0
 80090ea:	9b04      	ldr	r3, [sp, #16]
 80090ec:	4303      	orrs	r3, r0
 80090ee:	3701      	adds	r7, #1
 80090f0:	9304      	str	r3, [sp, #16]
 80090f2:	7839      	ldrb	r1, [r7, #0]
 80090f4:	4827      	ldr	r0, [pc, #156]	; (8009194 <_svfiprintf_r+0x1e4>)
 80090f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090fa:	2206      	movs	r2, #6
 80090fc:	1c7e      	adds	r6, r7, #1
 80090fe:	f7f7 f86f 	bl	80001e0 <memchr>
 8009102:	2800      	cmp	r0, #0
 8009104:	d038      	beq.n	8009178 <_svfiprintf_r+0x1c8>
 8009106:	4b24      	ldr	r3, [pc, #144]	; (8009198 <_svfiprintf_r+0x1e8>)
 8009108:	bb13      	cbnz	r3, 8009150 <_svfiprintf_r+0x1a0>
 800910a:	9b03      	ldr	r3, [sp, #12]
 800910c:	3307      	adds	r3, #7
 800910e:	f023 0307 	bic.w	r3, r3, #7
 8009112:	3308      	adds	r3, #8
 8009114:	9303      	str	r3, [sp, #12]
 8009116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009118:	444b      	add	r3, r9
 800911a:	9309      	str	r3, [sp, #36]	; 0x24
 800911c:	e76d      	b.n	8008ffa <_svfiprintf_r+0x4a>
 800911e:	fb05 3202 	mla	r2, r5, r2, r3
 8009122:	2001      	movs	r0, #1
 8009124:	460f      	mov	r7, r1
 8009126:	e7a6      	b.n	8009076 <_svfiprintf_r+0xc6>
 8009128:	2300      	movs	r3, #0
 800912a:	3701      	adds	r7, #1
 800912c:	9305      	str	r3, [sp, #20]
 800912e:	4619      	mov	r1, r3
 8009130:	250a      	movs	r5, #10
 8009132:	4638      	mov	r0, r7
 8009134:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009138:	3a30      	subs	r2, #48	; 0x30
 800913a:	2a09      	cmp	r2, #9
 800913c:	d903      	bls.n	8009146 <_svfiprintf_r+0x196>
 800913e:	2b00      	cmp	r3, #0
 8009140:	d0c8      	beq.n	80090d4 <_svfiprintf_r+0x124>
 8009142:	9105      	str	r1, [sp, #20]
 8009144:	e7c6      	b.n	80090d4 <_svfiprintf_r+0x124>
 8009146:	fb05 2101 	mla	r1, r5, r1, r2
 800914a:	2301      	movs	r3, #1
 800914c:	4607      	mov	r7, r0
 800914e:	e7f0      	b.n	8009132 <_svfiprintf_r+0x182>
 8009150:	ab03      	add	r3, sp, #12
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	4622      	mov	r2, r4
 8009156:	4b11      	ldr	r3, [pc, #68]	; (800919c <_svfiprintf_r+0x1ec>)
 8009158:	a904      	add	r1, sp, #16
 800915a:	4640      	mov	r0, r8
 800915c:	f3af 8000 	nop.w
 8009160:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009164:	4681      	mov	r9, r0
 8009166:	d1d6      	bne.n	8009116 <_svfiprintf_r+0x166>
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	065b      	lsls	r3, r3, #25
 800916c:	f53f af35 	bmi.w	8008fda <_svfiprintf_r+0x2a>
 8009170:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009172:	b01d      	add	sp, #116	; 0x74
 8009174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009178:	ab03      	add	r3, sp, #12
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	4622      	mov	r2, r4
 800917e:	4b07      	ldr	r3, [pc, #28]	; (800919c <_svfiprintf_r+0x1ec>)
 8009180:	a904      	add	r1, sp, #16
 8009182:	4640      	mov	r0, r8
 8009184:	f000 f882 	bl	800928c <_printf_i>
 8009188:	e7ea      	b.n	8009160 <_svfiprintf_r+0x1b0>
 800918a:	bf00      	nop
 800918c:	08009e27 	.word	0x08009e27
 8009190:	08009e2d 	.word	0x08009e2d
 8009194:	08009e31 	.word	0x08009e31
 8009198:	00000000 	.word	0x00000000
 800919c:	08008efb 	.word	0x08008efb

080091a0 <_printf_common>:
 80091a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a4:	4691      	mov	r9, r2
 80091a6:	461f      	mov	r7, r3
 80091a8:	688a      	ldr	r2, [r1, #8]
 80091aa:	690b      	ldr	r3, [r1, #16]
 80091ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091b0:	4293      	cmp	r3, r2
 80091b2:	bfb8      	it	lt
 80091b4:	4613      	movlt	r3, r2
 80091b6:	f8c9 3000 	str.w	r3, [r9]
 80091ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091be:	4606      	mov	r6, r0
 80091c0:	460c      	mov	r4, r1
 80091c2:	b112      	cbz	r2, 80091ca <_printf_common+0x2a>
 80091c4:	3301      	adds	r3, #1
 80091c6:	f8c9 3000 	str.w	r3, [r9]
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	0699      	lsls	r1, r3, #26
 80091ce:	bf42      	ittt	mi
 80091d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80091d4:	3302      	addmi	r3, #2
 80091d6:	f8c9 3000 	strmi.w	r3, [r9]
 80091da:	6825      	ldr	r5, [r4, #0]
 80091dc:	f015 0506 	ands.w	r5, r5, #6
 80091e0:	d107      	bne.n	80091f2 <_printf_common+0x52>
 80091e2:	f104 0a19 	add.w	sl, r4, #25
 80091e6:	68e3      	ldr	r3, [r4, #12]
 80091e8:	f8d9 2000 	ldr.w	r2, [r9]
 80091ec:	1a9b      	subs	r3, r3, r2
 80091ee:	42ab      	cmp	r3, r5
 80091f0:	dc28      	bgt.n	8009244 <_printf_common+0xa4>
 80091f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80091f6:	6822      	ldr	r2, [r4, #0]
 80091f8:	3300      	adds	r3, #0
 80091fa:	bf18      	it	ne
 80091fc:	2301      	movne	r3, #1
 80091fe:	0692      	lsls	r2, r2, #26
 8009200:	d42d      	bmi.n	800925e <_printf_common+0xbe>
 8009202:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009206:	4639      	mov	r1, r7
 8009208:	4630      	mov	r0, r6
 800920a:	47c0      	blx	r8
 800920c:	3001      	adds	r0, #1
 800920e:	d020      	beq.n	8009252 <_printf_common+0xb2>
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	68e5      	ldr	r5, [r4, #12]
 8009214:	f8d9 2000 	ldr.w	r2, [r9]
 8009218:	f003 0306 	and.w	r3, r3, #6
 800921c:	2b04      	cmp	r3, #4
 800921e:	bf08      	it	eq
 8009220:	1aad      	subeq	r5, r5, r2
 8009222:	68a3      	ldr	r3, [r4, #8]
 8009224:	6922      	ldr	r2, [r4, #16]
 8009226:	bf0c      	ite	eq
 8009228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800922c:	2500      	movne	r5, #0
 800922e:	4293      	cmp	r3, r2
 8009230:	bfc4      	itt	gt
 8009232:	1a9b      	subgt	r3, r3, r2
 8009234:	18ed      	addgt	r5, r5, r3
 8009236:	f04f 0900 	mov.w	r9, #0
 800923a:	341a      	adds	r4, #26
 800923c:	454d      	cmp	r5, r9
 800923e:	d11a      	bne.n	8009276 <_printf_common+0xd6>
 8009240:	2000      	movs	r0, #0
 8009242:	e008      	b.n	8009256 <_printf_common+0xb6>
 8009244:	2301      	movs	r3, #1
 8009246:	4652      	mov	r2, sl
 8009248:	4639      	mov	r1, r7
 800924a:	4630      	mov	r0, r6
 800924c:	47c0      	blx	r8
 800924e:	3001      	adds	r0, #1
 8009250:	d103      	bne.n	800925a <_printf_common+0xba>
 8009252:	f04f 30ff 	mov.w	r0, #4294967295
 8009256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800925a:	3501      	adds	r5, #1
 800925c:	e7c3      	b.n	80091e6 <_printf_common+0x46>
 800925e:	18e1      	adds	r1, r4, r3
 8009260:	1c5a      	adds	r2, r3, #1
 8009262:	2030      	movs	r0, #48	; 0x30
 8009264:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009268:	4422      	add	r2, r4
 800926a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800926e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009272:	3302      	adds	r3, #2
 8009274:	e7c5      	b.n	8009202 <_printf_common+0x62>
 8009276:	2301      	movs	r3, #1
 8009278:	4622      	mov	r2, r4
 800927a:	4639      	mov	r1, r7
 800927c:	4630      	mov	r0, r6
 800927e:	47c0      	blx	r8
 8009280:	3001      	adds	r0, #1
 8009282:	d0e6      	beq.n	8009252 <_printf_common+0xb2>
 8009284:	f109 0901 	add.w	r9, r9, #1
 8009288:	e7d8      	b.n	800923c <_printf_common+0x9c>
	...

0800928c <_printf_i>:
 800928c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009290:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009294:	460c      	mov	r4, r1
 8009296:	7e09      	ldrb	r1, [r1, #24]
 8009298:	b085      	sub	sp, #20
 800929a:	296e      	cmp	r1, #110	; 0x6e
 800929c:	4617      	mov	r7, r2
 800929e:	4606      	mov	r6, r0
 80092a0:	4698      	mov	r8, r3
 80092a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092a4:	f000 80b3 	beq.w	800940e <_printf_i+0x182>
 80092a8:	d822      	bhi.n	80092f0 <_printf_i+0x64>
 80092aa:	2963      	cmp	r1, #99	; 0x63
 80092ac:	d036      	beq.n	800931c <_printf_i+0x90>
 80092ae:	d80a      	bhi.n	80092c6 <_printf_i+0x3a>
 80092b0:	2900      	cmp	r1, #0
 80092b2:	f000 80b9 	beq.w	8009428 <_printf_i+0x19c>
 80092b6:	2958      	cmp	r1, #88	; 0x58
 80092b8:	f000 8083 	beq.w	80093c2 <_printf_i+0x136>
 80092bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80092c4:	e032      	b.n	800932c <_printf_i+0xa0>
 80092c6:	2964      	cmp	r1, #100	; 0x64
 80092c8:	d001      	beq.n	80092ce <_printf_i+0x42>
 80092ca:	2969      	cmp	r1, #105	; 0x69
 80092cc:	d1f6      	bne.n	80092bc <_printf_i+0x30>
 80092ce:	6820      	ldr	r0, [r4, #0]
 80092d0:	6813      	ldr	r3, [r2, #0]
 80092d2:	0605      	lsls	r5, r0, #24
 80092d4:	f103 0104 	add.w	r1, r3, #4
 80092d8:	d52a      	bpl.n	8009330 <_printf_i+0xa4>
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6011      	str	r1, [r2, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	da03      	bge.n	80092ea <_printf_i+0x5e>
 80092e2:	222d      	movs	r2, #45	; 0x2d
 80092e4:	425b      	negs	r3, r3
 80092e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80092ea:	486f      	ldr	r0, [pc, #444]	; (80094a8 <_printf_i+0x21c>)
 80092ec:	220a      	movs	r2, #10
 80092ee:	e039      	b.n	8009364 <_printf_i+0xd8>
 80092f0:	2973      	cmp	r1, #115	; 0x73
 80092f2:	f000 809d 	beq.w	8009430 <_printf_i+0x1a4>
 80092f6:	d808      	bhi.n	800930a <_printf_i+0x7e>
 80092f8:	296f      	cmp	r1, #111	; 0x6f
 80092fa:	d020      	beq.n	800933e <_printf_i+0xb2>
 80092fc:	2970      	cmp	r1, #112	; 0x70
 80092fe:	d1dd      	bne.n	80092bc <_printf_i+0x30>
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	f043 0320 	orr.w	r3, r3, #32
 8009306:	6023      	str	r3, [r4, #0]
 8009308:	e003      	b.n	8009312 <_printf_i+0x86>
 800930a:	2975      	cmp	r1, #117	; 0x75
 800930c:	d017      	beq.n	800933e <_printf_i+0xb2>
 800930e:	2978      	cmp	r1, #120	; 0x78
 8009310:	d1d4      	bne.n	80092bc <_printf_i+0x30>
 8009312:	2378      	movs	r3, #120	; 0x78
 8009314:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009318:	4864      	ldr	r0, [pc, #400]	; (80094ac <_printf_i+0x220>)
 800931a:	e055      	b.n	80093c8 <_printf_i+0x13c>
 800931c:	6813      	ldr	r3, [r2, #0]
 800931e:	1d19      	adds	r1, r3, #4
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	6011      	str	r1, [r2, #0]
 8009324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800932c:	2301      	movs	r3, #1
 800932e:	e08c      	b.n	800944a <_printf_i+0x1be>
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6011      	str	r1, [r2, #0]
 8009334:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009338:	bf18      	it	ne
 800933a:	b21b      	sxthne	r3, r3
 800933c:	e7cf      	b.n	80092de <_printf_i+0x52>
 800933e:	6813      	ldr	r3, [r2, #0]
 8009340:	6825      	ldr	r5, [r4, #0]
 8009342:	1d18      	adds	r0, r3, #4
 8009344:	6010      	str	r0, [r2, #0]
 8009346:	0628      	lsls	r0, r5, #24
 8009348:	d501      	bpl.n	800934e <_printf_i+0xc2>
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	e002      	b.n	8009354 <_printf_i+0xc8>
 800934e:	0668      	lsls	r0, r5, #25
 8009350:	d5fb      	bpl.n	800934a <_printf_i+0xbe>
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	4854      	ldr	r0, [pc, #336]	; (80094a8 <_printf_i+0x21c>)
 8009356:	296f      	cmp	r1, #111	; 0x6f
 8009358:	bf14      	ite	ne
 800935a:	220a      	movne	r2, #10
 800935c:	2208      	moveq	r2, #8
 800935e:	2100      	movs	r1, #0
 8009360:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009364:	6865      	ldr	r5, [r4, #4]
 8009366:	60a5      	str	r5, [r4, #8]
 8009368:	2d00      	cmp	r5, #0
 800936a:	f2c0 8095 	blt.w	8009498 <_printf_i+0x20c>
 800936e:	6821      	ldr	r1, [r4, #0]
 8009370:	f021 0104 	bic.w	r1, r1, #4
 8009374:	6021      	str	r1, [r4, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d13d      	bne.n	80093f6 <_printf_i+0x16a>
 800937a:	2d00      	cmp	r5, #0
 800937c:	f040 808e 	bne.w	800949c <_printf_i+0x210>
 8009380:	4665      	mov	r5, ip
 8009382:	2a08      	cmp	r2, #8
 8009384:	d10b      	bne.n	800939e <_printf_i+0x112>
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	07db      	lsls	r3, r3, #31
 800938a:	d508      	bpl.n	800939e <_printf_i+0x112>
 800938c:	6923      	ldr	r3, [r4, #16]
 800938e:	6862      	ldr	r2, [r4, #4]
 8009390:	429a      	cmp	r2, r3
 8009392:	bfde      	ittt	le
 8009394:	2330      	movle	r3, #48	; 0x30
 8009396:	f805 3c01 	strble.w	r3, [r5, #-1]
 800939a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800939e:	ebac 0305 	sub.w	r3, ip, r5
 80093a2:	6123      	str	r3, [r4, #16]
 80093a4:	f8cd 8000 	str.w	r8, [sp]
 80093a8:	463b      	mov	r3, r7
 80093aa:	aa03      	add	r2, sp, #12
 80093ac:	4621      	mov	r1, r4
 80093ae:	4630      	mov	r0, r6
 80093b0:	f7ff fef6 	bl	80091a0 <_printf_common>
 80093b4:	3001      	adds	r0, #1
 80093b6:	d14d      	bne.n	8009454 <_printf_i+0x1c8>
 80093b8:	f04f 30ff 	mov.w	r0, #4294967295
 80093bc:	b005      	add	sp, #20
 80093be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093c2:	4839      	ldr	r0, [pc, #228]	; (80094a8 <_printf_i+0x21c>)
 80093c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80093c8:	6813      	ldr	r3, [r2, #0]
 80093ca:	6821      	ldr	r1, [r4, #0]
 80093cc:	1d1d      	adds	r5, r3, #4
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6015      	str	r5, [r2, #0]
 80093d2:	060a      	lsls	r2, r1, #24
 80093d4:	d50b      	bpl.n	80093ee <_printf_i+0x162>
 80093d6:	07ca      	lsls	r2, r1, #31
 80093d8:	bf44      	itt	mi
 80093da:	f041 0120 	orrmi.w	r1, r1, #32
 80093de:	6021      	strmi	r1, [r4, #0]
 80093e0:	b91b      	cbnz	r3, 80093ea <_printf_i+0x15e>
 80093e2:	6822      	ldr	r2, [r4, #0]
 80093e4:	f022 0220 	bic.w	r2, r2, #32
 80093e8:	6022      	str	r2, [r4, #0]
 80093ea:	2210      	movs	r2, #16
 80093ec:	e7b7      	b.n	800935e <_printf_i+0xd2>
 80093ee:	064d      	lsls	r5, r1, #25
 80093f0:	bf48      	it	mi
 80093f2:	b29b      	uxthmi	r3, r3
 80093f4:	e7ef      	b.n	80093d6 <_printf_i+0x14a>
 80093f6:	4665      	mov	r5, ip
 80093f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80093fc:	fb02 3311 	mls	r3, r2, r1, r3
 8009400:	5cc3      	ldrb	r3, [r0, r3]
 8009402:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009406:	460b      	mov	r3, r1
 8009408:	2900      	cmp	r1, #0
 800940a:	d1f5      	bne.n	80093f8 <_printf_i+0x16c>
 800940c:	e7b9      	b.n	8009382 <_printf_i+0xf6>
 800940e:	6813      	ldr	r3, [r2, #0]
 8009410:	6825      	ldr	r5, [r4, #0]
 8009412:	6961      	ldr	r1, [r4, #20]
 8009414:	1d18      	adds	r0, r3, #4
 8009416:	6010      	str	r0, [r2, #0]
 8009418:	0628      	lsls	r0, r5, #24
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	d501      	bpl.n	8009422 <_printf_i+0x196>
 800941e:	6019      	str	r1, [r3, #0]
 8009420:	e002      	b.n	8009428 <_printf_i+0x19c>
 8009422:	066a      	lsls	r2, r5, #25
 8009424:	d5fb      	bpl.n	800941e <_printf_i+0x192>
 8009426:	8019      	strh	r1, [r3, #0]
 8009428:	2300      	movs	r3, #0
 800942a:	6123      	str	r3, [r4, #16]
 800942c:	4665      	mov	r5, ip
 800942e:	e7b9      	b.n	80093a4 <_printf_i+0x118>
 8009430:	6813      	ldr	r3, [r2, #0]
 8009432:	1d19      	adds	r1, r3, #4
 8009434:	6011      	str	r1, [r2, #0]
 8009436:	681d      	ldr	r5, [r3, #0]
 8009438:	6862      	ldr	r2, [r4, #4]
 800943a:	2100      	movs	r1, #0
 800943c:	4628      	mov	r0, r5
 800943e:	f7f6 fecf 	bl	80001e0 <memchr>
 8009442:	b108      	cbz	r0, 8009448 <_printf_i+0x1bc>
 8009444:	1b40      	subs	r0, r0, r5
 8009446:	6060      	str	r0, [r4, #4]
 8009448:	6863      	ldr	r3, [r4, #4]
 800944a:	6123      	str	r3, [r4, #16]
 800944c:	2300      	movs	r3, #0
 800944e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009452:	e7a7      	b.n	80093a4 <_printf_i+0x118>
 8009454:	6923      	ldr	r3, [r4, #16]
 8009456:	462a      	mov	r2, r5
 8009458:	4639      	mov	r1, r7
 800945a:	4630      	mov	r0, r6
 800945c:	47c0      	blx	r8
 800945e:	3001      	adds	r0, #1
 8009460:	d0aa      	beq.n	80093b8 <_printf_i+0x12c>
 8009462:	6823      	ldr	r3, [r4, #0]
 8009464:	079b      	lsls	r3, r3, #30
 8009466:	d413      	bmi.n	8009490 <_printf_i+0x204>
 8009468:	68e0      	ldr	r0, [r4, #12]
 800946a:	9b03      	ldr	r3, [sp, #12]
 800946c:	4298      	cmp	r0, r3
 800946e:	bfb8      	it	lt
 8009470:	4618      	movlt	r0, r3
 8009472:	e7a3      	b.n	80093bc <_printf_i+0x130>
 8009474:	2301      	movs	r3, #1
 8009476:	464a      	mov	r2, r9
 8009478:	4639      	mov	r1, r7
 800947a:	4630      	mov	r0, r6
 800947c:	47c0      	blx	r8
 800947e:	3001      	adds	r0, #1
 8009480:	d09a      	beq.n	80093b8 <_printf_i+0x12c>
 8009482:	3501      	adds	r5, #1
 8009484:	68e3      	ldr	r3, [r4, #12]
 8009486:	9a03      	ldr	r2, [sp, #12]
 8009488:	1a9b      	subs	r3, r3, r2
 800948a:	42ab      	cmp	r3, r5
 800948c:	dcf2      	bgt.n	8009474 <_printf_i+0x1e8>
 800948e:	e7eb      	b.n	8009468 <_printf_i+0x1dc>
 8009490:	2500      	movs	r5, #0
 8009492:	f104 0919 	add.w	r9, r4, #25
 8009496:	e7f5      	b.n	8009484 <_printf_i+0x1f8>
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1ac      	bne.n	80093f6 <_printf_i+0x16a>
 800949c:	7803      	ldrb	r3, [r0, #0]
 800949e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094a6:	e76c      	b.n	8009382 <_printf_i+0xf6>
 80094a8:	08009e38 	.word	0x08009e38
 80094ac:	08009e49 	.word	0x08009e49

080094b0 <memmove>:
 80094b0:	4288      	cmp	r0, r1
 80094b2:	b510      	push	{r4, lr}
 80094b4:	eb01 0302 	add.w	r3, r1, r2
 80094b8:	d807      	bhi.n	80094ca <memmove+0x1a>
 80094ba:	1e42      	subs	r2, r0, #1
 80094bc:	4299      	cmp	r1, r3
 80094be:	d00a      	beq.n	80094d6 <memmove+0x26>
 80094c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80094c8:	e7f8      	b.n	80094bc <memmove+0xc>
 80094ca:	4283      	cmp	r3, r0
 80094cc:	d9f5      	bls.n	80094ba <memmove+0xa>
 80094ce:	1881      	adds	r1, r0, r2
 80094d0:	1ad2      	subs	r2, r2, r3
 80094d2:	42d3      	cmn	r3, r2
 80094d4:	d100      	bne.n	80094d8 <memmove+0x28>
 80094d6:	bd10      	pop	{r4, pc}
 80094d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80094e0:	e7f7      	b.n	80094d2 <memmove+0x22>
	...

080094e4 <_free_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4605      	mov	r5, r0
 80094e8:	2900      	cmp	r1, #0
 80094ea:	d045      	beq.n	8009578 <_free_r+0x94>
 80094ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094f0:	1f0c      	subs	r4, r1, #4
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	bfb8      	it	lt
 80094f6:	18e4      	addlt	r4, r4, r3
 80094f8:	f000 f8d2 	bl	80096a0 <__malloc_lock>
 80094fc:	4a1f      	ldr	r2, [pc, #124]	; (800957c <_free_r+0x98>)
 80094fe:	6813      	ldr	r3, [r2, #0]
 8009500:	4610      	mov	r0, r2
 8009502:	b933      	cbnz	r3, 8009512 <_free_r+0x2e>
 8009504:	6063      	str	r3, [r4, #4]
 8009506:	6014      	str	r4, [r2, #0]
 8009508:	4628      	mov	r0, r5
 800950a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800950e:	f000 b8c8 	b.w	80096a2 <__malloc_unlock>
 8009512:	42a3      	cmp	r3, r4
 8009514:	d90c      	bls.n	8009530 <_free_r+0x4c>
 8009516:	6821      	ldr	r1, [r4, #0]
 8009518:	1862      	adds	r2, r4, r1
 800951a:	4293      	cmp	r3, r2
 800951c:	bf04      	itt	eq
 800951e:	681a      	ldreq	r2, [r3, #0]
 8009520:	685b      	ldreq	r3, [r3, #4]
 8009522:	6063      	str	r3, [r4, #4]
 8009524:	bf04      	itt	eq
 8009526:	1852      	addeq	r2, r2, r1
 8009528:	6022      	streq	r2, [r4, #0]
 800952a:	6004      	str	r4, [r0, #0]
 800952c:	e7ec      	b.n	8009508 <_free_r+0x24>
 800952e:	4613      	mov	r3, r2
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	b10a      	cbz	r2, 8009538 <_free_r+0x54>
 8009534:	42a2      	cmp	r2, r4
 8009536:	d9fa      	bls.n	800952e <_free_r+0x4a>
 8009538:	6819      	ldr	r1, [r3, #0]
 800953a:	1858      	adds	r0, r3, r1
 800953c:	42a0      	cmp	r0, r4
 800953e:	d10b      	bne.n	8009558 <_free_r+0x74>
 8009540:	6820      	ldr	r0, [r4, #0]
 8009542:	4401      	add	r1, r0
 8009544:	1858      	adds	r0, r3, r1
 8009546:	4282      	cmp	r2, r0
 8009548:	6019      	str	r1, [r3, #0]
 800954a:	d1dd      	bne.n	8009508 <_free_r+0x24>
 800954c:	6810      	ldr	r0, [r2, #0]
 800954e:	6852      	ldr	r2, [r2, #4]
 8009550:	605a      	str	r2, [r3, #4]
 8009552:	4401      	add	r1, r0
 8009554:	6019      	str	r1, [r3, #0]
 8009556:	e7d7      	b.n	8009508 <_free_r+0x24>
 8009558:	d902      	bls.n	8009560 <_free_r+0x7c>
 800955a:	230c      	movs	r3, #12
 800955c:	602b      	str	r3, [r5, #0]
 800955e:	e7d3      	b.n	8009508 <_free_r+0x24>
 8009560:	6820      	ldr	r0, [r4, #0]
 8009562:	1821      	adds	r1, r4, r0
 8009564:	428a      	cmp	r2, r1
 8009566:	bf04      	itt	eq
 8009568:	6811      	ldreq	r1, [r2, #0]
 800956a:	6852      	ldreq	r2, [r2, #4]
 800956c:	6062      	str	r2, [r4, #4]
 800956e:	bf04      	itt	eq
 8009570:	1809      	addeq	r1, r1, r0
 8009572:	6021      	streq	r1, [r4, #0]
 8009574:	605c      	str	r4, [r3, #4]
 8009576:	e7c7      	b.n	8009508 <_free_r+0x24>
 8009578:	bd38      	pop	{r3, r4, r5, pc}
 800957a:	bf00      	nop
 800957c:	200002d4 	.word	0x200002d4

08009580 <_malloc_r>:
 8009580:	b570      	push	{r4, r5, r6, lr}
 8009582:	1ccd      	adds	r5, r1, #3
 8009584:	f025 0503 	bic.w	r5, r5, #3
 8009588:	3508      	adds	r5, #8
 800958a:	2d0c      	cmp	r5, #12
 800958c:	bf38      	it	cc
 800958e:	250c      	movcc	r5, #12
 8009590:	2d00      	cmp	r5, #0
 8009592:	4606      	mov	r6, r0
 8009594:	db01      	blt.n	800959a <_malloc_r+0x1a>
 8009596:	42a9      	cmp	r1, r5
 8009598:	d903      	bls.n	80095a2 <_malloc_r+0x22>
 800959a:	230c      	movs	r3, #12
 800959c:	6033      	str	r3, [r6, #0]
 800959e:	2000      	movs	r0, #0
 80095a0:	bd70      	pop	{r4, r5, r6, pc}
 80095a2:	f000 f87d 	bl	80096a0 <__malloc_lock>
 80095a6:	4a21      	ldr	r2, [pc, #132]	; (800962c <_malloc_r+0xac>)
 80095a8:	6814      	ldr	r4, [r2, #0]
 80095aa:	4621      	mov	r1, r4
 80095ac:	b991      	cbnz	r1, 80095d4 <_malloc_r+0x54>
 80095ae:	4c20      	ldr	r4, [pc, #128]	; (8009630 <_malloc_r+0xb0>)
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	b91b      	cbnz	r3, 80095bc <_malloc_r+0x3c>
 80095b4:	4630      	mov	r0, r6
 80095b6:	f000 f863 	bl	8009680 <_sbrk_r>
 80095ba:	6020      	str	r0, [r4, #0]
 80095bc:	4629      	mov	r1, r5
 80095be:	4630      	mov	r0, r6
 80095c0:	f000 f85e 	bl	8009680 <_sbrk_r>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	d124      	bne.n	8009612 <_malloc_r+0x92>
 80095c8:	230c      	movs	r3, #12
 80095ca:	6033      	str	r3, [r6, #0]
 80095cc:	4630      	mov	r0, r6
 80095ce:	f000 f868 	bl	80096a2 <__malloc_unlock>
 80095d2:	e7e4      	b.n	800959e <_malloc_r+0x1e>
 80095d4:	680b      	ldr	r3, [r1, #0]
 80095d6:	1b5b      	subs	r3, r3, r5
 80095d8:	d418      	bmi.n	800960c <_malloc_r+0x8c>
 80095da:	2b0b      	cmp	r3, #11
 80095dc:	d90f      	bls.n	80095fe <_malloc_r+0x7e>
 80095de:	600b      	str	r3, [r1, #0]
 80095e0:	50cd      	str	r5, [r1, r3]
 80095e2:	18cc      	adds	r4, r1, r3
 80095e4:	4630      	mov	r0, r6
 80095e6:	f000 f85c 	bl	80096a2 <__malloc_unlock>
 80095ea:	f104 000b 	add.w	r0, r4, #11
 80095ee:	1d23      	adds	r3, r4, #4
 80095f0:	f020 0007 	bic.w	r0, r0, #7
 80095f4:	1ac3      	subs	r3, r0, r3
 80095f6:	d0d3      	beq.n	80095a0 <_malloc_r+0x20>
 80095f8:	425a      	negs	r2, r3
 80095fa:	50e2      	str	r2, [r4, r3]
 80095fc:	e7d0      	b.n	80095a0 <_malloc_r+0x20>
 80095fe:	428c      	cmp	r4, r1
 8009600:	684b      	ldr	r3, [r1, #4]
 8009602:	bf16      	itet	ne
 8009604:	6063      	strne	r3, [r4, #4]
 8009606:	6013      	streq	r3, [r2, #0]
 8009608:	460c      	movne	r4, r1
 800960a:	e7eb      	b.n	80095e4 <_malloc_r+0x64>
 800960c:	460c      	mov	r4, r1
 800960e:	6849      	ldr	r1, [r1, #4]
 8009610:	e7cc      	b.n	80095ac <_malloc_r+0x2c>
 8009612:	1cc4      	adds	r4, r0, #3
 8009614:	f024 0403 	bic.w	r4, r4, #3
 8009618:	42a0      	cmp	r0, r4
 800961a:	d005      	beq.n	8009628 <_malloc_r+0xa8>
 800961c:	1a21      	subs	r1, r4, r0
 800961e:	4630      	mov	r0, r6
 8009620:	f000 f82e 	bl	8009680 <_sbrk_r>
 8009624:	3001      	adds	r0, #1
 8009626:	d0cf      	beq.n	80095c8 <_malloc_r+0x48>
 8009628:	6025      	str	r5, [r4, #0]
 800962a:	e7db      	b.n	80095e4 <_malloc_r+0x64>
 800962c:	200002d4 	.word	0x200002d4
 8009630:	200002d8 	.word	0x200002d8

08009634 <_realloc_r>:
 8009634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009636:	4607      	mov	r7, r0
 8009638:	4614      	mov	r4, r2
 800963a:	460e      	mov	r6, r1
 800963c:	b921      	cbnz	r1, 8009648 <_realloc_r+0x14>
 800963e:	4611      	mov	r1, r2
 8009640:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009644:	f7ff bf9c 	b.w	8009580 <_malloc_r>
 8009648:	b922      	cbnz	r2, 8009654 <_realloc_r+0x20>
 800964a:	f7ff ff4b 	bl	80094e4 <_free_r>
 800964e:	4625      	mov	r5, r4
 8009650:	4628      	mov	r0, r5
 8009652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009654:	f000 f826 	bl	80096a4 <_malloc_usable_size_r>
 8009658:	42a0      	cmp	r0, r4
 800965a:	d20f      	bcs.n	800967c <_realloc_r+0x48>
 800965c:	4621      	mov	r1, r4
 800965e:	4638      	mov	r0, r7
 8009660:	f7ff ff8e 	bl	8009580 <_malloc_r>
 8009664:	4605      	mov	r5, r0
 8009666:	2800      	cmp	r0, #0
 8009668:	d0f2      	beq.n	8009650 <_realloc_r+0x1c>
 800966a:	4631      	mov	r1, r6
 800966c:	4622      	mov	r2, r4
 800966e:	f7ff fb44 	bl	8008cfa <memcpy>
 8009672:	4631      	mov	r1, r6
 8009674:	4638      	mov	r0, r7
 8009676:	f7ff ff35 	bl	80094e4 <_free_r>
 800967a:	e7e9      	b.n	8009650 <_realloc_r+0x1c>
 800967c:	4635      	mov	r5, r6
 800967e:	e7e7      	b.n	8009650 <_realloc_r+0x1c>

08009680 <_sbrk_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4c06      	ldr	r4, [pc, #24]	; (800969c <_sbrk_r+0x1c>)
 8009684:	2300      	movs	r3, #0
 8009686:	4605      	mov	r5, r0
 8009688:	4608      	mov	r0, r1
 800968a:	6023      	str	r3, [r4, #0]
 800968c:	f7ff fa6a 	bl	8008b64 <_sbrk>
 8009690:	1c43      	adds	r3, r0, #1
 8009692:	d102      	bne.n	800969a <_sbrk_r+0x1a>
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	b103      	cbz	r3, 800969a <_sbrk_r+0x1a>
 8009698:	602b      	str	r3, [r5, #0]
 800969a:	bd38      	pop	{r3, r4, r5, pc}
 800969c:	2000079c 	.word	0x2000079c

080096a0 <__malloc_lock>:
 80096a0:	4770      	bx	lr

080096a2 <__malloc_unlock>:
 80096a2:	4770      	bx	lr

080096a4 <_malloc_usable_size_r>:
 80096a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096a8:	1f18      	subs	r0, r3, #4
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	bfbc      	itt	lt
 80096ae:	580b      	ldrlt	r3, [r1, r0]
 80096b0:	18c0      	addlt	r0, r0, r3
 80096b2:	4770      	bx	lr

080096b4 <_init>:
 80096b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b6:	bf00      	nop
 80096b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ba:	bc08      	pop	{r3}
 80096bc:	469e      	mov	lr, r3
 80096be:	4770      	bx	lr

080096c0 <_fini>:
 80096c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c2:	bf00      	nop
 80096c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c6:	bc08      	pop	{r3}
 80096c8:	469e      	mov	lr, r3
 80096ca:	4770      	bx	lr
