
Gateway_prueba_prog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008420  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  080085b0  080085b0  000185b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a90  08008a90  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a98  08008a98  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a98  08008a98  00018a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a9c  08008a9c  00018a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08008aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  2000020c  08008cac  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  08008cac  00020714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000230da  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003788  00000000  00000000  00043316  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f0  00000000  00000000  00046aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001458  00000000  00000000  00048090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028e13  00000000  00000000  000494e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012b4d  00000000  00000000  000722fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f8879  00000000  00000000  00084e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017d6c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006118  00000000  00000000  0017d73c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008598 	.word	0x08008598

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	08008598 	.word	0x08008598

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058a:	2003      	movs	r0, #3
 800058c:	f001 fc18 	bl	8001dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f80d 	bl	80005b0 <HAL_InitTick>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	e001      	b.n	80005a6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005a2:	f007 f899 	bl	80076d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_InitTick+0x68>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d022      	beq.n	800060a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <HAL_InitTick+0x6c>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <HAL_InitTick+0x68>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80005d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fc26 	bl	8001e2a <HAL_SYSTICK_Config>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d10f      	bne.n	8000604 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d809      	bhi.n	80005fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ea:	2200      	movs	r2, #0
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	f04f 30ff 	mov.w	r0, #4294967295
 80005f2:	f001 fbf0 	bl	8001dd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <HAL_InitTick+0x70>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	e007      	b.n	800060e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	e004      	b.n	800060e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	e001      	b.n	800060e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000004 	.word	0x20000004
 800061c:	20000038 	.word	0x20000038
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <HAL_IncTick+0x1c>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <HAL_IncTick+0x20>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4413      	add	r3, r2
 8000632:	4a03      	ldr	r2, [pc, #12]	; (8000640 <HAL_IncTick+0x1c>)
 8000634:	6013      	str	r3, [r2, #0]
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	200002dc 	.word	0x200002dc
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return uwTick;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <HAL_GetTick+0x14>)
 800064e:	681b      	ldr	r3, [r3, #0]
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200002dc 	.word	0x200002dc

08000660 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	431a      	orrs	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	609a      	str	r2, [r3, #8]
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	431a      	orrs	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	609a      	str	r2, [r3, #8]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80006bc:	4618      	mov	r0, r3
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80006c8:	b490      	push	{r4, r7}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
 80006d4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3360      	adds	r3, #96	; 0x60
 80006da:	461a      	mov	r2, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	4413      	add	r3, r2
 80006e2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80006e4:	6822      	ldr	r2, [r4, #0]
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <LL_ADC_SetOffset+0x40>)
 80006e8:	4013      	ands	r3, r2
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	430a      	orrs	r2, r1
 80006f4:	4313      	orrs	r3, r2
 80006f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006fa:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bc90      	pop	{r4, r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	03fff000 	.word	0x03fff000

0800070c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800070c:	b490      	push	{r4, r7}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	3360      	adds	r3, #96	; 0x60
 800071a:	461a      	mov	r2, r3
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4413      	add	r3, r2
 8000722:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000724:	6823      	ldr	r3, [r4, #0]
 8000726:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bc90      	pop	{r4, r7}
 8000732:	4770      	bx	lr

08000734 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000734:	b490      	push	{r4, r7}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	3360      	adds	r3, #96	; 0x60
 8000744:	461a      	mov	r2, r3
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4413      	add	r3, r2
 800074c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800074e:	6823      	ldr	r3, [r4, #0]
 8000750:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4313      	orrs	r3, r2
 8000758:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bc90      	pop	{r4, r7}
 8000762:	4770      	bx	lr

08000764 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000778:	2301      	movs	r3, #1
 800077a:	e000      	b.n	800077e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800078a:	b490      	push	{r4, r7}
 800078c:	b084      	sub	sp, #16
 800078e:	af00      	add	r7, sp, #0
 8000790:	60f8      	str	r0, [r7, #12]
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3330      	adds	r3, #48	; 0x30
 800079a:	461a      	mov	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	0a1b      	lsrs	r3, r3, #8
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	f003 030c 	and.w	r3, r3, #12
 80007a6:	4413      	add	r3, r2
 80007a8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80007aa:	6822      	ldr	r2, [r4, #0]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	f003 031f 	and.w	r3, r3, #31
 80007b2:	211f      	movs	r1, #31
 80007b4:	fa01 f303 	lsl.w	r3, r1, r3
 80007b8:	43db      	mvns	r3, r3
 80007ba:	401a      	ands	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	0e9b      	lsrs	r3, r3, #26
 80007c0:	f003 011f 	and.w	r1, r3, #31
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	f003 031f 	and.w	r3, r3, #31
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	4313      	orrs	r3, r2
 80007d0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc90      	pop	{r4, r7}
 80007da:	4770      	bx	lr

080007dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80007dc:	b490      	push	{r4, r7}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3314      	adds	r3, #20
 80007ec:	461a      	mov	r2, r3
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	0e5b      	lsrs	r3, r3, #25
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	f003 0304 	and.w	r3, r3, #4
 80007f8:	4413      	add	r3, r2
 80007fa:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80007fc:	6822      	ldr	r2, [r4, #0]
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	0d1b      	lsrs	r3, r3, #20
 8000802:	f003 031f 	and.w	r3, r3, #31
 8000806:	2107      	movs	r1, #7
 8000808:	fa01 f303 	lsl.w	r3, r1, r3
 800080c:	43db      	mvns	r3, r3
 800080e:	401a      	ands	r2, r3
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	0d1b      	lsrs	r3, r3, #20
 8000814:	f003 031f 	and.w	r3, r3, #31
 8000818:	6879      	ldr	r1, [r7, #4]
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	4313      	orrs	r3, r2
 8000820:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bc90      	pop	{r4, r7}
 800082a:	4770      	bx	lr

0800082c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000844:	43db      	mvns	r3, r3
 8000846:	401a      	ands	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f003 0318 	and.w	r3, r3, #24
 800084e:	4908      	ldr	r1, [pc, #32]	; (8000870 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000850:	40d9      	lsrs	r1, r3
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	400b      	ands	r3, r1
 8000856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800085a:	431a      	orrs	r2, r3
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	0007ffff 	.word	0x0007ffff

08000874 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	f003 031f 	and.w	r3, r3, #31
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80008bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	6093      	str	r3, [r2, #8]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008e4:	d101      	bne.n	80008ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80008e6:	2301      	movs	r3, #1
 80008e8:	e000      	b.n	80008ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000908:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800090c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000934:	d101      	bne.n	800093a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000936:	2301      	movs	r3, #1
 8000938:	e000      	b.n	800093c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000958:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800095c:	f043 0201 	orr.w	r2, r3, #1
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000980:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000984:	f043 0202 	orr.w	r2, r3, #2
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d101      	bne.n	80009b0 <LL_ADC_IsEnabled+0x18>
 80009ac:	2301      	movs	r3, #1
 80009ae:	e000      	b.n	80009b2 <LL_ADC_IsEnabled+0x1a>
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d101      	bne.n	80009d6 <LL_ADC_IsDisableOngoing+0x18>
 80009d2:	2301      	movs	r3, #1
 80009d4:	e000      	b.n	80009d8 <LL_ADC_IsDisableOngoing+0x1a>
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80009f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009f8:	f043 0204 	orr.w	r2, r3, #4
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a20:	f043 0210 	orr.w	r2, r3, #16
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d101      	bne.n	8000a4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e000      	b.n	8000a4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a6e:	f043 0220 	orr.w	r2, r3, #32
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	f003 0308 	and.w	r3, r3, #8
 8000a92:	2b08      	cmp	r3, #8
 8000a94:	d101      	bne.n	8000a9a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000a96:	2301      	movs	r3, #1
 8000a98:	e000      	b.n	8000a9c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b089      	sub	sp, #36	; 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d101      	bne.n	8000ac2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e134      	b.n	8000d2c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d109      	bne.n	8000ae4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f006 fe25 	bl	8007720 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fef1 	bl	80008d0 <LL_ADC_IsDeepPowerDownEnabled>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d004      	beq.n	8000afe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fed7 	bl	80008ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff0c 	bl	8000920 <LL_ADC_IsInternalRegulatorEnabled>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d113      	bne.n	8000b36 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fef0 	bl	80008f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000b18:	4b86      	ldr	r3, [pc, #536]	; (8000d34 <HAL_ADC_Init+0x28c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	099b      	lsrs	r3, r3, #6
 8000b1e:	4a86      	ldr	r2, [pc, #536]	; (8000d38 <HAL_ADC_Init+0x290>)
 8000b20:	fba2 2303 	umull	r2, r3, r2, r3
 8000b24:	099b      	lsrs	r3, r3, #6
 8000b26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b28:	e002      	b.n	8000b30 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1f9      	bne.n	8000b2a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fef0 	bl	8000920 <LL_ADC_IsInternalRegulatorEnabled>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10d      	bne.n	8000b62 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b4a:	f043 0210 	orr.w	r2, r3, #16
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b56:	f043 0201 	orr.w	r2, r3, #1
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ff64 	bl	8000a34 <LL_ADC_REG_IsConversionOngoing>
 8000b6c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b72:	f003 0310 	and.w	r3, r3, #16
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 80cf 	bne.w	8000d1a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 80cb 	bne.w	8000d1a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b88:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b8c:	f043 0202 	orr.w	r2, r3, #2
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fefd 	bl	8000998 <LL_ADC_IsEnabled>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d115      	bne.n	8000bd0 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000ba4:	4865      	ldr	r0, [pc, #404]	; (8000d3c <HAL_ADC_Init+0x294>)
 8000ba6:	f7ff fef7 	bl	8000998 <LL_ADC_IsEnabled>
 8000baa:	4604      	mov	r4, r0
 8000bac:	4864      	ldr	r0, [pc, #400]	; (8000d40 <HAL_ADC_Init+0x298>)
 8000bae:	f7ff fef3 	bl	8000998 <LL_ADC_IsEnabled>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	431c      	orrs	r4, r3
 8000bb6:	4863      	ldr	r0, [pc, #396]	; (8000d44 <HAL_ADC_Init+0x29c>)
 8000bb8:	f7ff feee 	bl	8000998 <LL_ADC_IsEnabled>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4323      	orrs	r3, r4
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d105      	bne.n	8000bd0 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	485f      	ldr	r0, [pc, #380]	; (8000d48 <HAL_ADC_Init+0x2a0>)
 8000bcc:	f7ff fd48 	bl	8000660 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7e5b      	ldrb	r3, [r3, #25]
 8000bd4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000bda:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000be0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000be6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d106      	bne.n	8000c0c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c02:	3b01      	subs	r3, #1
 8000c04:	045b      	lsls	r3, r3, #17
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d009      	beq.n	8000c28 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c18:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	68da      	ldr	r2, [r3, #12]
 8000c2e:	4b47      	ldr	r3, [pc, #284]	; (8000d4c <HAL_ADC_Init+0x2a4>)
 8000c30:	4013      	ands	r3, r2
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	69b9      	ldr	r1, [r7, #24]
 8000c38:	430b      	orrs	r3, r1
 8000c3a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fef7 	bl	8000a34 <LL_ADC_REG_IsConversionOngoing>
 8000c46:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff18 	bl	8000a82 <LL_ADC_INJ_IsConversionOngoing>
 8000c52:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d13d      	bne.n	8000cd6 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d13a      	bne.n	8000cd6 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c64:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c6c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c7c:	f023 0302 	bic.w	r3, r3, #2
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	6812      	ldr	r2, [r2, #0]
 8000c84:	69b9      	ldr	r1, [r7, #24]
 8000c86:	430b      	orrs	r3, r1
 8000c88:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d118      	bne.n	8000cc6 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000c9e:	f023 0304 	bic.w	r3, r3, #4
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000caa:	4311      	orrs	r1, r2
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000cb0:	4311      	orrs	r1, r2
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f042 0201 	orr.w	r2, r2, #1
 8000cc2:	611a      	str	r2, [r3, #16]
 8000cc4:	e007      	b.n	8000cd6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	691a      	ldr	r2, [r3, #16]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 0201 	bic.w	r2, r2, #1
 8000cd4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d10c      	bne.n	8000cf8 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	f023 010f 	bic.w	r1, r3, #15
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	1e5a      	subs	r2, r3, #1
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	631a      	str	r2, [r3, #48]	; 0x30
 8000cf6:	e007      	b.n	8000d08 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f022 020f 	bic.w	r2, r2, #15
 8000d06:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d0c:	f023 0303 	bic.w	r3, r3, #3
 8000d10:	f043 0201 	orr.w	r2, r3, #1
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	655a      	str	r2, [r3, #84]	; 0x54
 8000d18:	e007      	b.n	8000d2a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d1e:	f043 0210 	orr.w	r2, r3, #16
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000d2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3724      	adds	r7, #36	; 0x24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd90      	pop	{r4, r7, pc}
 8000d34:	20000038 	.word	0x20000038
 8000d38:	053e2d63 	.word	0x053e2d63
 8000d3c:	50040000 	.word	0x50040000
 8000d40:	50040100 	.word	0x50040100
 8000d44:	50040200 	.word	0x50040200
 8000d48:	50040300 	.word	0x50040300
 8000d4c:	fff0c007 	.word	0xfff0c007

08000d50 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000d58:	4857      	ldr	r0, [pc, #348]	; (8000eb8 <HAL_ADC_Start+0x168>)
 8000d5a:	f7ff fd8b 	bl	8000874 <LL_ADC_GetMultimode>
 8000d5e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fe65 	bl	8000a34 <LL_ADC_REG_IsConversionOngoing>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f040 809c 	bne.w	8000eaa <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d101      	bne.n	8000d80 <HAL_ADC_Start+0x30>
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	e097      	b.n	8000eb0 <HAL_ADC_Start+0x160>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2201      	movs	r2, #1
 8000d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f000 fdc5 	bl	8001918 <ADC_Enable>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d92:	7dfb      	ldrb	r3, [r7, #23]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f040 8083 	bne.w	8000ea0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000da2:	f023 0301 	bic.w	r3, r3, #1
 8000da6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a42      	ldr	r2, [pc, #264]	; (8000ebc <HAL_ADC_Start+0x16c>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d002      	beq.n	8000dbe <HAL_ADC_Start+0x6e>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	e000      	b.n	8000dc0 <HAL_ADC_Start+0x70>
 8000dbe:	4b40      	ldr	r3, [pc, #256]	; (8000ec0 <HAL_ADC_Start+0x170>)
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	6812      	ldr	r2, [r2, #0]
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d002      	beq.n	8000dce <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d105      	bne.n	8000dda <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000de6:	d106      	bne.n	8000df6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dec:	f023 0206 	bic.w	r2, r3, #6
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	659a      	str	r2, [r3, #88]	; 0x58
 8000df4:	e002      	b.n	8000dfc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	221c      	movs	r2, #28
 8000e02:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a2a      	ldr	r2, [pc, #168]	; (8000ebc <HAL_ADC_Start+0x16c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d002      	beq.n	8000e1c <HAL_ADC_Start+0xcc>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	e000      	b.n	8000e1e <HAL_ADC_Start+0xce>
 8000e1c:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <HAL_ADC_Start+0x170>)
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6812      	ldr	r2, [r2, #0]
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d008      	beq.n	8000e38 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d005      	beq.n	8000e38 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	2b05      	cmp	r3, #5
 8000e30:	d002      	beq.n	8000e38 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	2b09      	cmp	r3, #9
 8000e36:	d114      	bne.n	8000e62 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d007      	beq.n	8000e56 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fdc2 	bl	80009e4 <LL_ADC_REG_StartConversion>
 8000e60:	e025      	b.n	8000eae <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <HAL_ADC_Start+0x16c>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d002      	beq.n	8000e7e <HAL_ADC_Start+0x12e>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	e000      	b.n	8000e80 <HAL_ADC_Start+0x130>
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <HAL_ADC_Start+0x170>)
 8000e80:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00f      	beq.n	8000eae <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	655a      	str	r2, [r3, #84]	; 0x54
 8000e9e:	e006      	b.n	8000eae <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000ea8:	e001      	b.n	8000eae <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	50040300 	.word	0x50040300
 8000ebc:	50040100 	.word	0x50040100
 8000ec0:	50040000 	.word	0x50040000

08000ec4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d101      	bne.n	8000eda <HAL_ADC_Stop+0x16>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e023      	b.n	8000f22 <HAL_ADC_Stop+0x5e>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000ee2:	2103      	movs	r1, #3
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 fc63 	bl	80017b0 <ADC_ConversionStop>
 8000eea:	4603      	mov	r3, r0
 8000eec:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d111      	bne.n	8000f18 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 fd69 	bl	80019cc <ADC_Disable>
 8000efa:	4603      	mov	r3, r0
 8000efc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d109      	bne.n	8000f18 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f0c:	f023 0301 	bic.w	r3, r3, #1
 8000f10:	f043 0201 	orr.w	r2, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f36:	4862      	ldr	r0, [pc, #392]	; (80010c0 <HAL_ADC_PollForConversion+0x194>)
 8000f38:	f7ff fc9c 	bl	8000874 <LL_ADC_GetMultimode>
 8000f3c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	d102      	bne.n	8000f4c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000f46:	2308      	movs	r3, #8
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	e02a      	b.n	8000fa2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d005      	beq.n	8000f5e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	2b05      	cmp	r3, #5
 8000f56:	d002      	beq.n	8000f5e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	2b09      	cmp	r3, #9
 8000f5c:	d111      	bne.n	8000f82 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d007      	beq.n	8000f7c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f70:	f043 0220 	orr.w	r2, r3, #32
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e09d      	b.n	80010b8 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000f80:	e00f      	b.n	8000fa2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000f82:	484f      	ldr	r0, [pc, #316]	; (80010c0 <HAL_ADC_PollForConversion+0x194>)
 8000f84:	f7ff fc84 	bl	8000890 <LL_ADC_GetMultiDMATransfer>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d007      	beq.n	8000f9e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f92:	f043 0220 	orr.w	r2, r3, #32
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e08c      	b.n	80010b8 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000fa2:	f7ff fb51 	bl	8000648 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000fa8:	e01a      	b.n	8000fe0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb0:	d016      	beq.n	8000fe0 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000fb2:	f7ff fb49 	bl	8000648 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d302      	bcc.n	8000fc8 <HAL_ADC_PollForConversion+0x9c>
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d10b      	bne.n	8000fe0 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fcc:	f043 0204 	orr.w	r2, r3, #4
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e06b      	b.n	80010b8 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0dd      	beq.n	8000faa <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fbb0 	bl	8000764 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d01c      	beq.n	8001044 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7e5b      	ldrb	r3, [r3, #25]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d118      	bne.n	8001044 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	2b08      	cmp	r3, #8
 800101e:	d111      	bne.n	8001044 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001024:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d105      	bne.n	8001044 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800103c:	f043 0201 	orr.w	r2, r3, #1
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a1e      	ldr	r2, [pc, #120]	; (80010c4 <HAL_ADC_PollForConversion+0x198>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d002      	beq.n	8001054 <HAL_ADC_PollForConversion+0x128>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	e000      	b.n	8001056 <HAL_ADC_PollForConversion+0x12a>
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <HAL_ADC_PollForConversion+0x19c>)
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	6812      	ldr	r2, [r2, #0]
 800105a:	4293      	cmp	r3, r2
 800105c:	d008      	beq.n	8001070 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	2b05      	cmp	r3, #5
 8001068:	d002      	beq.n	8001070 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2b09      	cmp	r3, #9
 800106e:	d104      	bne.n	800107a <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	61bb      	str	r3, [r7, #24]
 8001078:	e00c      	b.n	8001094 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <HAL_ADC_PollForConversion+0x198>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d002      	beq.n	800108a <HAL_ADC_PollForConversion+0x15e>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	e000      	b.n	800108c <HAL_ADC_PollForConversion+0x160>
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_ADC_PollForConversion+0x19c>)
 800108c:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	2b08      	cmp	r3, #8
 8001098:	d104      	bne.n	80010a4 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2208      	movs	r2, #8
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e008      	b.n	80010b6 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d103      	bne.n	80010b6 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	50040300 	.word	0x50040300
 80010c4:	50040100 	.word	0x50040100
 80010c8:	50040000 	.word	0x50040000

080010cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0a6      	sub	sp, #152	; 0x98
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001102:	2b01      	cmp	r3, #1
 8001104:	d101      	bne.n	800110a <HAL_ADC_ConfigChannel+0x22>
 8001106:	2302      	movs	r3, #2
 8001108:	e348      	b.n	800179c <HAL_ADC_ConfigChannel+0x6b4>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fc8c 	bl	8000a34 <LL_ADC_REG_IsConversionOngoing>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	f040 8329 	bne.w	8001776 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b05      	cmp	r3, #5
 800112a:	d824      	bhi.n	8001176 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	3b02      	subs	r3, #2
 8001132:	2b03      	cmp	r3, #3
 8001134:	d81b      	bhi.n	800116e <HAL_ADC_ConfigChannel+0x86>
 8001136:	a201      	add	r2, pc, #4	; (adr r2, 800113c <HAL_ADC_ConfigChannel+0x54>)
 8001138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113c:	0800114d 	.word	0x0800114d
 8001140:	08001155 	.word	0x08001155
 8001144:	0800115d 	.word	0x0800115d
 8001148:	08001165 	.word	0x08001165
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	220c      	movs	r2, #12
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	e011      	b.n	8001178 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	2212      	movs	r2, #18
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	e00d      	b.n	8001178 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2218      	movs	r2, #24
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	e009      	b.n	8001178 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	f44f 7280 	mov.w	r2, #256	; 0x100
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	e004      	b.n	8001178 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	2206      	movs	r2, #6
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	e000      	b.n	8001178 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001176:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	6859      	ldr	r1, [r3, #4]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	f7ff fb00 	bl	800078a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fc50 	bl	8000a34 <LL_ADC_REG_IsConversionOngoing>
 8001194:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fc70 	bl	8000a82 <LL_ADC_INJ_IsConversionOngoing>
 80011a2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f040 8148 	bne.w	8001440 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f040 8143 	bne.w	8001440 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	6819      	ldr	r1, [r3, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	461a      	mov	r2, r3
 80011c8:	f7ff fb08 	bl	80007dc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	695a      	ldr	r2, [r3, #20]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	08db      	lsrs	r3, r3, #3
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	d00a      	beq.n	8001204 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	6919      	ldr	r1, [r3, #16]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011fe:	f7ff fa63 	bl	80006c8 <LL_ADC_SetOffset>
 8001202:	e11d      	b.n	8001440 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fa7e 	bl	800070c <LL_ADC_GetOffsetChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10a      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x148>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fa73 	bl	800070c <LL_ADC_GetOffsetChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	0e9b      	lsrs	r3, r3, #26
 800122a:	f003 021f 	and.w	r2, r3, #31
 800122e:	e012      	b.n	8001256 <HAL_ADC_ConfigChannel+0x16e>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fa68 	bl	800070c <LL_ADC_GetOffsetChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001242:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001246:	fa93 f3a3 	rbit	r3, r3
 800124a:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800124c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800124e:	fab3 f383 	clz	r3, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800125e:	2b00      	cmp	r3, #0
 8001260:	d105      	bne.n	800126e <HAL_ADC_ConfigChannel+0x186>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	0e9b      	lsrs	r3, r3, #26
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	e00a      	b.n	8001284 <HAL_ADC_ConfigChannel+0x19c>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800127c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	429a      	cmp	r2, r3
 8001286:	d106      	bne.n	8001296 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fa4f 	bl	8000734 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2101      	movs	r1, #1
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fa35 	bl	800070c <LL_ADC_GetOffsetChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d10a      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x1da>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2101      	movs	r1, #1
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fa2a 	bl	800070c <LL_ADC_GetOffsetChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	0e9b      	lsrs	r3, r3, #26
 80012bc:	f003 021f 	and.w	r2, r3, #31
 80012c0:	e010      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x1fc>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2101      	movs	r1, #1
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fa1f 	bl	800070c <LL_ADC_GetOffsetChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012d4:	fa93 f3a3 	rbit	r3, r3
 80012d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80012da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012dc:	fab3 f383 	clz	r3, r3
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d105      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x214>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	0e9b      	lsrs	r3, r3, #26
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	e00a      	b.n	8001312 <HAL_ADC_ConfigChannel+0x22a>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001304:	fa93 f3a3 	rbit	r3, r3
 8001308:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800130a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800130c:	fab3 f383 	clz	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	429a      	cmp	r2, r3
 8001314:	d106      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2200      	movs	r2, #0
 800131c:	2101      	movs	r1, #1
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fa08 	bl	8000734 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2102      	movs	r1, #2
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f9ee 	bl	800070c <LL_ADC_GetOffsetChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10a      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x268>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2102      	movs	r1, #2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f9e3 	bl	800070c <LL_ADC_GetOffsetChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	0e9b      	lsrs	r3, r3, #26
 800134a:	f003 021f 	and.w	r2, r3, #31
 800134e:	e010      	b.n	8001372 <HAL_ADC_ConfigChannel+0x28a>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2102      	movs	r1, #2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f9d8 	bl	800070c <LL_ADC_GetOffsetChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001362:	fa93 f3a3 	rbit	r3, r3
 8001366:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800136a:	fab3 f383 	clz	r3, r3
 800136e:	b2db      	uxtb	r3, r3
 8001370:	461a      	mov	r2, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800137a:	2b00      	cmp	r3, #0
 800137c:	d105      	bne.n	800138a <HAL_ADC_ConfigChannel+0x2a2>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	0e9b      	lsrs	r3, r3, #26
 8001384:	f003 031f 	and.w	r3, r3, #31
 8001388:	e00a      	b.n	80013a0 <HAL_ADC_ConfigChannel+0x2b8>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001392:	fa93 f3a3 	rbit	r3, r3
 8001396:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800139a:	fab3 f383 	clz	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d106      	bne.n	80013b2 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2200      	movs	r2, #0
 80013aa:	2102      	movs	r1, #2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f9c1 	bl	8000734 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2103      	movs	r1, #3
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f9a7 	bl	800070c <LL_ADC_GetOffsetChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10a      	bne.n	80013de <HAL_ADC_ConfigChannel+0x2f6>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2103      	movs	r1, #3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f99c 	bl	800070c <LL_ADC_GetOffsetChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	0e9b      	lsrs	r3, r3, #26
 80013d8:	f003 021f 	and.w	r2, r3, #31
 80013dc:	e010      	b.n	8001400 <HAL_ADC_ConfigChannel+0x318>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2103      	movs	r1, #3
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f991 	bl	800070c <LL_ADC_GetOffsetChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013f0:	fa93 f3a3 	rbit	r3, r3
 80013f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80013f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013f8:	fab3 f383 	clz	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001408:	2b00      	cmp	r3, #0
 800140a:	d105      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x330>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	0e9b      	lsrs	r3, r3, #26
 8001412:	f003 031f 	and.w	r3, r3, #31
 8001416:	e00a      	b.n	800142e <HAL_ADC_ConfigChannel+0x346>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	429a      	cmp	r2, r3
 8001430:	d106      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2200      	movs	r2, #0
 8001438:	2103      	movs	r1, #3
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f97a 	bl	8000734 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff faa7 	bl	8000998 <LL_ADC_IsEnabled>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	f040 810c 	bne.w	800166a <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	6819      	ldr	r1, [r3, #0]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	461a      	mov	r2, r3
 8001460:	f7ff f9e4 	bl	800082c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	4aad      	ldr	r2, [pc, #692]	; (8001720 <HAL_ADC_ConfigChannel+0x638>)
 800146a:	4293      	cmp	r3, r2
 800146c:	f040 80fd 	bne.w	800166a <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10b      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x3b0>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0e9b      	lsrs	r3, r3, #26
 8001486:	3301      	adds	r3, #1
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	2b09      	cmp	r3, #9
 800148e:	bf94      	ite	ls
 8001490:	2301      	movls	r3, #1
 8001492:	2300      	movhi	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	e012      	b.n	80014be <HAL_ADC_ConfigChannel+0x3d6>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014a0:	fa93 f3a3 	rbit	r3, r3
 80014a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80014a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014a8:	fab3 f383 	clz	r3, r3
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	3301      	adds	r3, #1
 80014b0:	f003 031f 	and.w	r3, r3, #31
 80014b4:	2b09      	cmp	r3, #9
 80014b6:	bf94      	ite	ls
 80014b8:	2301      	movls	r3, #1
 80014ba:	2300      	movhi	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d064      	beq.n	800158c <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d107      	bne.n	80014de <HAL_ADC_ConfigChannel+0x3f6>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	0e9b      	lsrs	r3, r3, #26
 80014d4:	3301      	adds	r3, #1
 80014d6:	069b      	lsls	r3, r3, #26
 80014d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014dc:	e00e      	b.n	80014fc <HAL_ADC_ConfigChannel+0x414>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014e6:	fa93 f3a3 	rbit	r3, r3
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80014ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ee:	fab3 f383 	clz	r3, r3
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	3301      	adds	r3, #1
 80014f6:	069b      	lsls	r3, r3, #26
 80014f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001504:	2b00      	cmp	r3, #0
 8001506:	d109      	bne.n	800151c <HAL_ADC_ConfigChannel+0x434>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	0e9b      	lsrs	r3, r3, #26
 800150e:	3301      	adds	r3, #1
 8001510:	f003 031f 	and.w	r3, r3, #31
 8001514:	2101      	movs	r1, #1
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	e010      	b.n	800153e <HAL_ADC_ConfigChannel+0x456>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001524:	fa93 f3a3 	rbit	r3, r3
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800152a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	3301      	adds	r3, #1
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	2101      	movs	r1, #1
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	ea42 0103 	orr.w	r1, r2, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10a      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x47c>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	0e9b      	lsrs	r3, r3, #26
 8001554:	3301      	adds	r3, #1
 8001556:	f003 021f 	and.w	r2, r3, #31
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	051b      	lsls	r3, r3, #20
 8001562:	e011      	b.n	8001588 <HAL_ADC_ConfigChannel+0x4a0>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	fab3 f383 	clz	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	3301      	adds	r3, #1
 800157c:	f003 021f 	and.w	r2, r3, #31
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001588:	430b      	orrs	r3, r1
 800158a:	e069      	b.n	8001660 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001594:	2b00      	cmp	r3, #0
 8001596:	d107      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x4c0>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	0e9b      	lsrs	r3, r3, #26
 800159e:	3301      	adds	r3, #1
 80015a0:	069b      	lsls	r3, r3, #26
 80015a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015a6:	e00e      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x4de>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	fa93 f3a3 	rbit	r3, r3
 80015b4:	61fb      	str	r3, [r7, #28]
  return result;
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fab3 f383 	clz	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	3301      	adds	r3, #1
 80015c0:	069b      	lsls	r3, r3, #26
 80015c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x4fe>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	0e9b      	lsrs	r3, r3, #26
 80015d8:	3301      	adds	r3, #1
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	2101      	movs	r1, #1
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	e010      	b.n	8001608 <HAL_ADC_ConfigChannel+0x520>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa93 f3a3 	rbit	r3, r3
 80015f2:	617b      	str	r3, [r7, #20]
  return result;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fab3 f383 	clz	r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	3301      	adds	r3, #1
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	ea42 0103 	orr.w	r1, r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10d      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x54c>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	0e9b      	lsrs	r3, r3, #26
 800161e:	3301      	adds	r3, #1
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	3b1e      	subs	r3, #30
 800162c:	051b      	lsls	r3, r3, #20
 800162e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001632:	e014      	b.n	800165e <HAL_ADC_ConfigChannel+0x576>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	60fb      	str	r3, [r7, #12]
  return result;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	fab3 f383 	clz	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	3301      	adds	r3, #1
 800164c:	f003 021f 	and.w	r2, r3, #31
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	3b1e      	subs	r3, #30
 8001658:	051b      	lsls	r3, r3, #20
 800165a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800165e:	430b      	orrs	r3, r1
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	6892      	ldr	r2, [r2, #8]
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff f8b9 	bl	80007dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <HAL_ADC_ConfigChannel+0x63c>)
 8001670:	4013      	ands	r3, r2
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 808c 	beq.w	8001790 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001678:	482b      	ldr	r0, [pc, #172]	; (8001728 <HAL_ADC_ConfigChannel+0x640>)
 800167a:	f7ff f817 	bl	80006ac <LL_ADC_GetCommonPathInternalCh>
 800167e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a29      	ldr	r2, [pc, #164]	; (800172c <HAL_ADC_ConfigChannel+0x644>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d12b      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x5fc>
 800168c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d125      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a24      	ldr	r2, [pc, #144]	; (8001730 <HAL_ADC_ConfigChannel+0x648>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d004      	beq.n	80016ac <HAL_ADC_ConfigChannel+0x5c4>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a23      	ldr	r2, [pc, #140]	; (8001734 <HAL_ADC_ConfigChannel+0x64c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d16e      	bne.n	800178a <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016b4:	4619      	mov	r1, r3
 80016b6:	481c      	ldr	r0, [pc, #112]	; (8001728 <HAL_ADC_ConfigChannel+0x640>)
 80016b8:	f7fe ffe5 	bl	8000686 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80016bc:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <HAL_ADC_ConfigChannel+0x650>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	099b      	lsrs	r3, r3, #6
 80016c2:	4a1e      	ldr	r2, [pc, #120]	; (800173c <HAL_ADC_ConfigChannel+0x654>)
 80016c4:	fba2 2303 	umull	r2, r3, r2, r3
 80016c8:	099a      	lsrs	r2, r3, #6
 80016ca:	4613      	mov	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4413      	add	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80016d4:	e002      	b.n	80016dc <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3b01      	subs	r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f9      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80016e2:	e052      	b.n	800178a <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a15      	ldr	r2, [pc, #84]	; (8001740 <HAL_ADC_ConfigChannel+0x658>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d12a      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x65c>
 80016ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d124      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <HAL_ADC_ConfigChannel+0x648>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d004      	beq.n	800170e <HAL_ADC_ConfigChannel+0x626>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <HAL_ADC_ConfigChannel+0x64c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d13f      	bne.n	800178e <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800170e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001716:	4619      	mov	r1, r3
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <HAL_ADC_ConfigChannel+0x640>)
 800171a:	f7fe ffb4 	bl	8000686 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800171e:	e036      	b.n	800178e <HAL_ADC_ConfigChannel+0x6a6>
 8001720:	407f0000 	.word	0x407f0000
 8001724:	80080000 	.word	0x80080000
 8001728:	50040300 	.word	0x50040300
 800172c:	c7520000 	.word	0xc7520000
 8001730:	50040000 	.word	0x50040000
 8001734:	50040200 	.word	0x50040200
 8001738:	20000038 	.word	0x20000038
 800173c:	053e2d63 	.word	0x053e2d63
 8001740:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a16      	ldr	r2, [pc, #88]	; (80017a4 <HAL_ADC_ConfigChannel+0x6bc>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d120      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800174e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d11a      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <HAL_ADC_ConfigChannel+0x6c0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d115      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001768:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800176c:	4619      	mov	r1, r3
 800176e:	480f      	ldr	r0, [pc, #60]	; (80017ac <HAL_ADC_ConfigChannel+0x6c4>)
 8001770:	f7fe ff89 	bl	8000686 <LL_ADC_SetCommonPathInternalCh>
 8001774:	e00c      	b.n	8001790 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177a:	f043 0220 	orr.w	r2, r3, #32
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001788:	e002      	b.n	8001790 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800178a:	bf00      	nop
 800178c:	e000      	b.n	8001790 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800178e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001798:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800179c:	4618      	mov	r0, r3
 800179e:	3798      	adds	r7, #152	; 0x98
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	80000001 	.word	0x80000001
 80017a8:	50040000 	.word	0x50040000
 80017ac:	50040300 	.word	0x50040300

080017b0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff f934 	bl	8000a34 <LL_ADC_REG_IsConversionOngoing>
 80017cc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff f955 	bl	8000a82 <LL_ADC_INJ_IsConversionOngoing>
 80017d8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d103      	bne.n	80017e8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8090 	beq.w	8001908 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d02a      	beq.n	800184c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7e5b      	ldrb	r3, [r3, #25]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d126      	bne.n	800184c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7e1b      	ldrb	r3, [r3, #24]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d122      	bne.n	800184c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001806:	2301      	movs	r3, #1
 8001808:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800180a:	e014      	b.n	8001836 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	4a41      	ldr	r2, [pc, #260]	; (8001914 <ADC_ConversionStop+0x164>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d90d      	bls.n	8001830 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001818:	f043 0210 	orr.w	r2, r3, #16
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e06c      	b.n	800190a <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	3301      	adds	r3, #1
 8001834:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001840:	2b40      	cmp	r3, #64	; 0x40
 8001842:	d1e3      	bne.n	800180c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2240      	movs	r2, #64	; 0x40
 800184a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d014      	beq.n	800187c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f8ec 	bl	8000a34 <LL_ADC_REG_IsConversionOngoing>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00c      	beq.n	800187c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f8a9 	bl	80009be <LL_ADC_IsDisableOngoing>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d104      	bne.n	800187c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff f8c8 	bl	8000a0c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d014      	beq.n	80018ac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f8fb 	bl	8000a82 <LL_ADC_INJ_IsConversionOngoing>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00c      	beq.n	80018ac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f891 	bl	80009be <LL_ADC_IsDisableOngoing>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d104      	bne.n	80018ac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff f8d7 	bl	8000a5a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d004      	beq.n	80018bc <ADC_ConversionStop+0x10c>
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d105      	bne.n	80018c2 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80018b6:	230c      	movs	r3, #12
 80018b8:	617b      	str	r3, [r7, #20]
        break;
 80018ba:	e005      	b.n	80018c8 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80018bc:	2308      	movs	r3, #8
 80018be:	617b      	str	r3, [r7, #20]
        break;
 80018c0:	e002      	b.n	80018c8 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80018c2:	2304      	movs	r3, #4
 80018c4:	617b      	str	r3, [r7, #20]
        break;
 80018c6:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80018c8:	f7fe febe 	bl	8000648 <HAL_GetTick>
 80018cc:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80018ce:	e014      	b.n	80018fa <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80018d0:	f7fe feba 	bl	8000648 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d90d      	bls.n	80018fa <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e2:	f043 0210 	orr.w	r2, r3, #16
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	f043 0201 	orr.w	r2, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e007      	b.n	800190a <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e3      	bne.n	80018d0 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3720      	adds	r7, #32
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	a33fffff 	.word	0xa33fffff

08001918 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff f837 	bl	8000998 <LL_ADC_IsEnabled>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d146      	bne.n	80019be <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <ADC_Enable+0xb0>)
 8001938:	4013      	ands	r3, r2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00d      	beq.n	800195a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001942:	f043 0210 	orr.w	r2, r3, #16
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	f043 0201 	orr.w	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e032      	b.n	80019c0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fff2 	bl	8000948 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001964:	f7fe fe70 	bl	8000648 <HAL_GetTick>
 8001968:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800196a:	e021      	b.n	80019b0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f811 	bl	8000998 <LL_ADC_IsEnabled>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d104      	bne.n	8001986 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe ffe1 	bl	8000948 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001986:	f7fe fe5f 	bl	8000648 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d90d      	bls.n	80019b0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001998:	f043 0210 	orr.w	r2, r3, #16
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a4:	f043 0201 	orr.w	r2, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e007      	b.n	80019c0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d1d6      	bne.n	800196c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	8000003f 	.word	0x8000003f

080019cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fff0 	bl	80009be <LL_ADC_IsDisableOngoing>
 80019de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe ffd7 	bl	8000998 <LL_ADC_IsEnabled>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d040      	beq.n	8001a72 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d13d      	bne.n	8001a72 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 030d 	and.w	r3, r3, #13
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d10c      	bne.n	8001a1e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe ffb1 	bl	8000970 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2203      	movs	r2, #3
 8001a14:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a16:	f7fe fe17 	bl	8000648 <HAL_GetTick>
 8001a1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a1c:	e022      	b.n	8001a64 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a22:	f043 0210 	orr.w	r2, r3, #16
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e01c      	b.n	8001a74 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a3a:	f7fe fe05 	bl	8000648 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d90d      	bls.n	8001a64 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4c:	f043 0210 	orr.w	r2, r3, #16
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e007      	b.n	8001a74 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1e3      	bne.n	8001a3a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <LL_ADC_IsEnabled>:
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <LL_ADC_IsEnabled+0x18>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <LL_ADC_IsEnabled+0x1a>
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <LL_ADC_REG_IsConversionOngoing>:
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d101      	bne.n	8001aba <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b09f      	sub	sp, #124	; 0x7c
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e08f      	b.n	8001c06 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a47      	ldr	r2, [pc, #284]	; (8001c10 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d102      	bne.n	8001afe <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001af8:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	e001      	b.n	8001b02 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10b      	bne.n	8001b20 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0c:	f043 0220 	orr.w	r2, r3, #32
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e072      	b.n	8001c06 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ffbd 	bl	8001aa2 <LL_ADC_REG_IsConversionOngoing>
 8001b28:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ffb7 	bl	8001aa2 <LL_ADC_REG_IsConversionOngoing>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d154      	bne.n	8001be4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d151      	bne.n	8001be4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001b40:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001b42:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d02c      	beq.n	8001ba6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b5e:	035b      	lsls	r3, r3, #13
 8001b60:	430b      	orrs	r3, r1
 8001b62:	431a      	orrs	r2, r3
 8001b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b66:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b68:	4829      	ldr	r0, [pc, #164]	; (8001c10 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001b6a:	f7ff ff87 	bl	8001a7c <LL_ADC_IsEnabled>
 8001b6e:	4604      	mov	r4, r0
 8001b70:	4828      	ldr	r0, [pc, #160]	; (8001c14 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001b72:	f7ff ff83 	bl	8001a7c <LL_ADC_IsEnabled>
 8001b76:	4603      	mov	r3, r0
 8001b78:	431c      	orrs	r4, r3
 8001b7a:	4828      	ldr	r0, [pc, #160]	; (8001c1c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b7c:	f7ff ff7e 	bl	8001a7c <LL_ADC_IsEnabled>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4323      	orrs	r3, r4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d137      	bne.n	8001bf8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001b90:	f023 030f 	bic.w	r3, r3, #15
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	6811      	ldr	r1, [r2, #0]
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	6892      	ldr	r2, [r2, #8]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ba2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ba4:	e028      	b.n	8001bf8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bb0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bb2:	4817      	ldr	r0, [pc, #92]	; (8001c10 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001bb4:	f7ff ff62 	bl	8001a7c <LL_ADC_IsEnabled>
 8001bb8:	4604      	mov	r4, r0
 8001bba:	4816      	ldr	r0, [pc, #88]	; (8001c14 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001bbc:	f7ff ff5e 	bl	8001a7c <LL_ADC_IsEnabled>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	431c      	orrs	r4, r3
 8001bc4:	4815      	ldr	r0, [pc, #84]	; (8001c1c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001bc6:	f7ff ff59 	bl	8001a7c <LL_ADC_IsEnabled>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4323      	orrs	r3, r4
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d112      	bne.n	8001bf8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001bda:	f023 030f 	bic.w	r3, r3, #15
 8001bde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001be0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001be2:	e009      	b.n	8001bf8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be8:	f043 0220 	orr.w	r2, r3, #32
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001bf6:	e000      	b.n	8001bfa <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bf8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c02:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	377c      	adds	r7, #124	; 0x7c
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd90      	pop	{r4, r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	50040000 	.word	0x50040000
 8001c14:	50040100 	.word	0x50040100
 8001c18:	50040300 	.word	0x50040300
 8001c1c:	50040200 	.word	0x50040200

08001c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db0b      	blt.n	8001cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4907      	ldr	r1, [pc, #28]	; (8001cbc <__NVIC_EnableIRQ+0x38>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100

08001cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	db0a      	blt.n	8001cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	490c      	ldr	r1, [pc, #48]	; (8001d0c <__NVIC_SetPriority+0x4c>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce8:	e00a      	b.n	8001d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4908      	ldr	r1, [pc, #32]	; (8001d10 <__NVIC_SetPriority+0x50>)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	3b04      	subs	r3, #4
 8001cf8:	0112      	lsls	r2, r2, #4
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	761a      	strb	r2, [r3, #24]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000e100 	.word	0xe000e100
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	; 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f1c3 0307 	rsb	r3, r3, #7
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	bf28      	it	cs
 8001d32:	2304      	movcs	r3, #4
 8001d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d902      	bls.n	8001d44 <NVIC_EncodePriority+0x30>
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3b03      	subs	r3, #3
 8001d42:	e000      	b.n	8001d46 <NVIC_EncodePriority+0x32>
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	401a      	ands	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	43d9      	mvns	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	4313      	orrs	r3, r2
         );
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d8c:	d301      	bcc.n	8001d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00f      	b.n	8001db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <SysTick_Config+0x40>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9a:	210f      	movs	r1, #15
 8001d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001da0:	f7ff ff8e 	bl	8001cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <SysTick_Config+0x40>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001daa:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <SysTick_Config+0x40>)
 8001dac:	2207      	movs	r2, #7
 8001dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	e000e010 	.word	0xe000e010

08001dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ff29 	bl	8001c20 <__NVIC_SetPriorityGrouping>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001de8:	f7ff ff3e 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 8001dec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	6978      	ldr	r0, [r7, #20]
 8001df4:	f7ff ff8e 	bl	8001d14 <NVIC_EncodePriority>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff5d 	bl	8001cc0 <__NVIC_SetPriority>
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff31 	bl	8001c84 <__NVIC_EnableIRQ>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ffa2 	bl	8001d7c <SysTick_Config>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d005      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	e029      	b.n	8001eba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 020e 	bic.w	r2, r2, #14
 8001e74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0201 	bic.w	r2, r2, #1
 8001e84:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	f003 021c 	and.w	r2, r3, #28
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	2101      	movs	r1, #1
 8001e94:	fa01 f202 	lsl.w	r2, r1, r2
 8001e98:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
    }
  }
  return status;
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed2:	e17f      	b.n	80021d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2101      	movs	r1, #1
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 8171 	beq.w	80021ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x38>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b12      	cmp	r3, #18
 8001efa:	d123      	bne.n	8001f44 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	08da      	lsrs	r2, r3, #3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3208      	adds	r2, #8
 8001f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	220f      	movs	r2, #15
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	08da      	lsrs	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3208      	adds	r2, #8
 8001f3e:	6939      	ldr	r1, [r7, #16]
 8001f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0203 	and.w	r2, r3, #3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d00b      	beq.n	8001f98 <HAL_GPIO_Init+0xd4>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d007      	beq.n	8001f98 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f8c:	2b11      	cmp	r3, #17
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b12      	cmp	r3, #18
 8001f96:	d130      	bne.n	8001ffa <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fce:	2201      	movs	r2, #1
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	091b      	lsrs	r3, r3, #4
 8001fe4:	f003 0201 	and.w	r2, r3, #1
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b03      	cmp	r3, #3
 8002004:	d118      	bne.n	8002038 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800200c:	2201      	movs	r2, #1
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	f003 0201 	and.w	r2, r3, #1
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	2203      	movs	r2, #3
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80ac 	beq.w	80021ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002076:	4b5e      	ldr	r3, [pc, #376]	; (80021f0 <HAL_GPIO_Init+0x32c>)
 8002078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207a:	4a5d      	ldr	r2, [pc, #372]	; (80021f0 <HAL_GPIO_Init+0x32c>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6613      	str	r3, [r2, #96]	; 0x60
 8002082:	4b5b      	ldr	r3, [pc, #364]	; (80021f0 <HAL_GPIO_Init+0x32c>)
 8002084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800208e:	4a59      	ldr	r2, [pc, #356]	; (80021f4 <HAL_GPIO_Init+0x330>)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	220f      	movs	r2, #15
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020b8:	d025      	beq.n	8002106 <HAL_GPIO_Init+0x242>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4e      	ldr	r2, [pc, #312]	; (80021f8 <HAL_GPIO_Init+0x334>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01f      	beq.n	8002102 <HAL_GPIO_Init+0x23e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4d      	ldr	r2, [pc, #308]	; (80021fc <HAL_GPIO_Init+0x338>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d019      	beq.n	80020fe <HAL_GPIO_Init+0x23a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4c      	ldr	r2, [pc, #304]	; (8002200 <HAL_GPIO_Init+0x33c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_GPIO_Init+0x236>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4b      	ldr	r2, [pc, #300]	; (8002204 <HAL_GPIO_Init+0x340>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00d      	beq.n	80020f6 <HAL_GPIO_Init+0x232>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4a      	ldr	r2, [pc, #296]	; (8002208 <HAL_GPIO_Init+0x344>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <HAL_GPIO_Init+0x22e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a49      	ldr	r2, [pc, #292]	; (800220c <HAL_GPIO_Init+0x348>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_GPIO_Init+0x22a>
 80020ea:	2306      	movs	r3, #6
 80020ec:	e00c      	b.n	8002108 <HAL_GPIO_Init+0x244>
 80020ee:	2307      	movs	r3, #7
 80020f0:	e00a      	b.n	8002108 <HAL_GPIO_Init+0x244>
 80020f2:	2305      	movs	r3, #5
 80020f4:	e008      	b.n	8002108 <HAL_GPIO_Init+0x244>
 80020f6:	2304      	movs	r3, #4
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x244>
 80020fa:	2303      	movs	r3, #3
 80020fc:	e004      	b.n	8002108 <HAL_GPIO_Init+0x244>
 80020fe:	2302      	movs	r3, #2
 8002100:	e002      	b.n	8002108 <HAL_GPIO_Init+0x244>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_GPIO_Init+0x244>
 8002106:	2300      	movs	r3, #0
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	f002 0203 	and.w	r2, r2, #3
 800210e:	0092      	lsls	r2, r2, #2
 8002110:	4093      	lsls	r3, r2
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002118:	4936      	ldr	r1, [pc, #216]	; (80021f4 <HAL_GPIO_Init+0x330>)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002126:	4b3a      	ldr	r3, [pc, #232]	; (8002210 <HAL_GPIO_Init+0x34c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	43db      	mvns	r3, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800214a:	4a31      	ldr	r2, [pc, #196]	; (8002210 <HAL_GPIO_Init+0x34c>)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002150:	4b2f      	ldr	r3, [pc, #188]	; (8002210 <HAL_GPIO_Init+0x34c>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002174:	4a26      	ldr	r2, [pc, #152]	; (8002210 <HAL_GPIO_Init+0x34c>)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800217a:	4b25      	ldr	r3, [pc, #148]	; (8002210 <HAL_GPIO_Init+0x34c>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	43db      	mvns	r3, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800219e:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <HAL_GPIO_Init+0x34c>)
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <HAL_GPIO_Init+0x34c>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021c8:	4a11      	ldr	r2, [pc, #68]	; (8002210 <HAL_GPIO_Init+0x34c>)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3301      	adds	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa22 f303 	lsr.w	r3, r2, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f47f ae78 	bne.w	8001ed4 <HAL_GPIO_Init+0x10>
  }
}
 80021e4:	bf00      	nop
 80021e6:	371c      	adds	r7, #28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40010000 	.word	0x40010000
 80021f8:	48000400 	.word	0x48000400
 80021fc:	48000800 	.word	0x48000800
 8002200:	48000c00 	.word	0x48000c00
 8002204:	48001000 	.word	0x48001000
 8002208:	48001400 	.word	0x48001400
 800220c:	48001800 	.word	0x48001800
 8002210:	40010400 	.word	0x40010400

08002214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	807b      	strh	r3, [r7, #2]
 8002220:	4613      	mov	r3, r2
 8002222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002224:	787b      	ldrb	r3, [r7, #1]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800222a:	887a      	ldrh	r2, [r7, #2]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002230:	e002      	b.n	8002238 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 0307 	bic.w	r3, r3, #7
 8002250:	4a07      	ldr	r2, [pc, #28]	; (8002270 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002252:	f043 0303 	orr.w	r3, r3, #3
 8002256:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	4a05      	ldr	r2, [pc, #20]	; (8002274 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002264:	bf30      	wfi
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	40007000 	.word	0x40007000
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <HAL_PWREx_GetVoltageRange+0x18>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40007000 	.word	0x40007000

08002294 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a2:	d130      	bne.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b0:	d038      	beq.n	8002324 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022b2:	4b20      	ldr	r3, [pc, #128]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022ba:	4a1e      	ldr	r2, [pc, #120]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2232      	movs	r2, #50	; 0x32
 80022c8:	fb02 f303 	mul.w	r3, r2, r3
 80022cc:	4a1b      	ldr	r2, [pc, #108]	; (800233c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0c9b      	lsrs	r3, r3, #18
 80022d4:	3301      	adds	r3, #1
 80022d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022d8:	e002      	b.n	80022e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	3b01      	subs	r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ec:	d102      	bne.n	80022f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f2      	bne.n	80022da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002300:	d110      	bne.n	8002324 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e00f      	b.n	8002326 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800230e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002312:	d007      	beq.n	8002324 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800231c:	4a05      	ldr	r2, [pc, #20]	; (8002334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800231e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002322:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40007000 	.word	0x40007000
 8002338:	20000038 	.word	0x20000038
 800233c:	431bde83 	.word	0x431bde83

08002340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e39d      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002352:	4ba4      	ldr	r3, [pc, #656]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800235c:	4ba1      	ldr	r3, [pc, #644]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 80e1 	beq.w	8002536 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d007      	beq.n	800238a <HAL_RCC_OscConfig+0x4a>
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2b0c      	cmp	r3, #12
 800237e:	f040 8088 	bne.w	8002492 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b01      	cmp	r3, #1
 8002386:	f040 8084 	bne.w	8002492 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800238a:	4b96      	ldr	r3, [pc, #600]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_RCC_OscConfig+0x62>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e375      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1a      	ldr	r2, [r3, #32]
 80023a6:	4b8f      	ldr	r3, [pc, #572]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d004      	beq.n	80023bc <HAL_RCC_OscConfig+0x7c>
 80023b2:	4b8c      	ldr	r3, [pc, #560]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ba:	e005      	b.n	80023c8 <HAL_RCC_OscConfig+0x88>
 80023bc:	4b89      	ldr	r3, [pc, #548]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80023be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d223      	bcs.n	8002414 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fd09 	bl	8002de8 <RCC_SetFlashLatencyFromMSIRange>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e356      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023e0:	4b80      	ldr	r3, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a7f      	ldr	r2, [pc, #508]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80023e6:	f043 0308 	orr.w	r3, r3, #8
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	4b7d      	ldr	r3, [pc, #500]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	497a      	ldr	r1, [pc, #488]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023fe:	4b79      	ldr	r3, [pc, #484]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	4975      	ldr	r1, [pc, #468]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 800240e:	4313      	orrs	r3, r2
 8002410:	604b      	str	r3, [r1, #4]
 8002412:	e022      	b.n	800245a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002414:	4b73      	ldr	r3, [pc, #460]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a72      	ldr	r2, [pc, #456]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 800241a:	f043 0308 	orr.w	r3, r3, #8
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	4b70      	ldr	r3, [pc, #448]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	496d      	ldr	r1, [pc, #436]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	4968      	ldr	r1, [pc, #416]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fccc 	bl	8002de8 <RCC_SetFlashLatencyFromMSIRange>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e319      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800245a:	f000 fc03 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 800245e:	4601      	mov	r1, r0
 8002460:	4b60      	ldr	r3, [pc, #384]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	4a5f      	ldr	r2, [pc, #380]	; (80025e8 <HAL_RCC_OscConfig+0x2a8>)
 800246c:	5cd3      	ldrb	r3, [r2, r3]
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	fa21 f303 	lsr.w	r3, r1, r3
 8002476:	4a5d      	ldr	r2, [pc, #372]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 8002478:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800247a:	4b5d      	ldr	r3, [pc, #372]	; (80025f0 <HAL_RCC_OscConfig+0x2b0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe f896 	bl	80005b0 <HAL_InitTick>
 8002484:	4603      	mov	r3, r0
 8002486:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d052      	beq.n	8002534 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	e2fd      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d032      	beq.n	8002500 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800249a:	4b52      	ldr	r3, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a51      	ldr	r2, [pc, #324]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024a6:	f7fe f8cf 	bl	8000648 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024ae:	f7fe f8cb 	bl	8000648 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e2e6      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024c0:	4b48      	ldr	r3, [pc, #288]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024cc:	4b45      	ldr	r3, [pc, #276]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a44      	ldr	r2, [pc, #272]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80024d2:	f043 0308 	orr.w	r3, r3, #8
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b42      	ldr	r3, [pc, #264]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	493f      	ldr	r1, [pc, #252]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ea:	4b3e      	ldr	r3, [pc, #248]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	493a      	ldr	r1, [pc, #232]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
 80024fe:	e01a      	b.n	8002536 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002500:	4b38      	ldr	r3, [pc, #224]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a37      	ldr	r2, [pc, #220]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 8002506:	f023 0301 	bic.w	r3, r3, #1
 800250a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800250c:	f7fe f89c 	bl	8000648 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002514:	f7fe f898 	bl	8000648 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e2b3      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002526:	4b2f      	ldr	r3, [pc, #188]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x1d4>
 8002532:	e000      	b.n	8002536 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002534:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d074      	beq.n	800262c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	2b08      	cmp	r3, #8
 8002546:	d005      	beq.n	8002554 <HAL_RCC_OscConfig+0x214>
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d10e      	bne.n	800256c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d10b      	bne.n	800256c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002554:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d064      	beq.n	800262a <HAL_RCC_OscConfig+0x2ea>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d160      	bne.n	800262a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e290      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002574:	d106      	bne.n	8002584 <HAL_RCC_OscConfig+0x244>
 8002576:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a1a      	ldr	r2, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 800257c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e01d      	b.n	80025c0 <HAL_RCC_OscConfig+0x280>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x268>
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a14      	ldr	r2, [pc, #80]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 8002594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a11      	ldr	r2, [pc, #68]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e00b      	b.n	80025c0 <HAL_RCC_OscConfig+0x280>
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0d      	ldr	r2, [pc, #52]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80025ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <HAL_RCC_OscConfig+0x2a4>)
 80025ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d01c      	beq.n	8002602 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe f83e 	bl	8000648 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ce:	e011      	b.n	80025f4 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7fe f83a 	bl	8000648 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d90a      	bls.n	80025f4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e255      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08008908 	.word	0x08008908
 80025ec:	20000038 	.word	0x20000038
 80025f0:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025f4:	4bae      	ldr	r3, [pc, #696]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0e7      	beq.n	80025d0 <HAL_RCC_OscConfig+0x290>
 8002600:	e014      	b.n	800262c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002602:	f7fe f821 	bl	8000648 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800260a:	f7fe f81d 	bl	8000648 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b64      	cmp	r3, #100	; 0x64
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e238      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800261c:	4ba4      	ldr	r3, [pc, #656]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x2ca>
 8002628:	e000      	b.n	800262c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d060      	beq.n	80026fa <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b04      	cmp	r3, #4
 800263c:	d005      	beq.n	800264a <HAL_RCC_OscConfig+0x30a>
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2b0c      	cmp	r3, #12
 8002642:	d119      	bne.n	8002678 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d116      	bne.n	8002678 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800264a:	4b99      	ldr	r3, [pc, #612]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_RCC_OscConfig+0x322>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e215      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	4b93      	ldr	r3, [pc, #588]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	061b      	lsls	r3, r3, #24
 8002670:	498f      	ldr	r1, [pc, #572]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002676:	e040      	b.n	80026fa <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d023      	beq.n	80026c8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002680:	4b8b      	ldr	r3, [pc, #556]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a8a      	ldr	r2, [pc, #552]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 8002686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fd ffdc 	bl	8000648 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002694:	f7fd ffd8 	bl	8000648 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e1f3      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a6:	4b82      	ldr	r3, [pc, #520]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b2:	4b7f      	ldr	r3, [pc, #508]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	061b      	lsls	r3, r3, #24
 80026c0:	497b      	ldr	r1, [pc, #492]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
 80026c6:	e018      	b.n	80026fa <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c8:	4b79      	ldr	r3, [pc, #484]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a78      	ldr	r2, [pc, #480]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 80026ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fd ffb8 	bl	8000648 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026dc:	f7fd ffb4 	bl	8000648 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e1cf      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026ee:	4b70      	ldr	r3, [pc, #448]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d03c      	beq.n	8002780 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d01c      	beq.n	8002748 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270e:	4b68      	ldr	r3, [pc, #416]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 8002710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002714:	4a66      	ldr	r2, [pc, #408]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271e:	f7fd ff93 	bl	8000648 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002726:	f7fd ff8f 	bl	8000648 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e1aa      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002738:	4b5d      	ldr	r3, [pc, #372]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 800273a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ef      	beq.n	8002726 <HAL_RCC_OscConfig+0x3e6>
 8002746:	e01b      	b.n	8002780 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002748:	4b59      	ldr	r3, [pc, #356]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 800274a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800274e:	4a58      	ldr	r2, [pc, #352]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7fd ff76 	bl	8000648 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002760:	f7fd ff72 	bl	8000648 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e18d      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002772:	4b4f      	ldr	r3, [pc, #316]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 8002774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1ef      	bne.n	8002760 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80a5 	beq.w	80028d8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800278e:	2300      	movs	r3, #0
 8002790:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002792:	4b47      	ldr	r3, [pc, #284]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10d      	bne.n	80027ba <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279e:	4b44      	ldr	r3, [pc, #272]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a2:	4a43      	ldr	r2, [pc, #268]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 80027a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a8:	6593      	str	r3, [r2, #88]	; 0x58
 80027aa:	4b41      	ldr	r3, [pc, #260]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b6:	2301      	movs	r3, #1
 80027b8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ba:	4b3e      	ldr	r3, [pc, #248]	; (80028b4 <HAL_RCC_OscConfig+0x574>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d118      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027c6:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <HAL_RCC_OscConfig+0x574>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a3a      	ldr	r2, [pc, #232]	; (80028b4 <HAL_RCC_OscConfig+0x574>)
 80027cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d2:	f7fd ff39 	bl	8000648 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027da:	f7fd ff35 	bl	8000648 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e150      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ec:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <HAL_RCC_OscConfig+0x574>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d108      	bne.n	8002812 <HAL_RCC_OscConfig+0x4d2>
 8002800:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002806:	4a2a      	ldr	r2, [pc, #168]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002810:	e024      	b.n	800285c <HAL_RCC_OscConfig+0x51c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b05      	cmp	r3, #5
 8002818:	d110      	bne.n	800283c <HAL_RCC_OscConfig+0x4fc>
 800281a:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002820:	4a23      	ldr	r2, [pc, #140]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 8002822:	f043 0304 	orr.w	r3, r3, #4
 8002826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800282a:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 800282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002830:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800283a:	e00f      	b.n	800285c <HAL_RCC_OscConfig+0x51c>
 800283c:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002842:	4a1b      	ldr	r2, [pc, #108]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002852:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 8002854:	f023 0304 	bic.w	r3, r3, #4
 8002858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d016      	beq.n	8002892 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fd fef0 	bl	8000648 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800286a:	e00a      	b.n	8002882 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7fd feec 	bl	8000648 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	; 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e105      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_RCC_OscConfig+0x570>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ed      	beq.n	800286c <HAL_RCC_OscConfig+0x52c>
 8002890:	e019      	b.n	80028c6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002892:	f7fd fed9 	bl	8000648 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002898:	e00e      	b.n	80028b8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7fd fed5 	bl	8000648 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d905      	bls.n	80028b8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e0ee      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028b8:	4b77      	ldr	r3, [pc, #476]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1e9      	bne.n	800289a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028c6:	7ffb      	ldrb	r3, [r7, #31]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d105      	bne.n	80028d8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028cc:	4b72      	ldr	r3, [pc, #456]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	4a71      	ldr	r2, [pc, #452]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 80028d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80d5 	beq.w	8002a8c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2b0c      	cmp	r3, #12
 80028e6:	f000 808e 	beq.w	8002a06 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d15b      	bne.n	80029aa <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f2:	4b69      	ldr	r3, [pc, #420]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a68      	ldr	r2, [pc, #416]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 80028f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fe:	f7fd fea3 	bl	8000648 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002906:	f7fd fe9f 	bl	8000648 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e0ba      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002918:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f0      	bne.n	8002906 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002924:	4b5c      	ldr	r3, [pc, #368]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	4b5c      	ldr	r3, [pc, #368]	; (8002a9c <HAL_RCC_OscConfig+0x75c>)
 800292a:	4013      	ands	r3, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002934:	3a01      	subs	r2, #1
 8002936:	0112      	lsls	r2, r2, #4
 8002938:	4311      	orrs	r1, r2
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800293e:	0212      	lsls	r2, r2, #8
 8002940:	4311      	orrs	r1, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002946:	0852      	lsrs	r2, r2, #1
 8002948:	3a01      	subs	r2, #1
 800294a:	0552      	lsls	r2, r2, #21
 800294c:	4311      	orrs	r1, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002952:	0852      	lsrs	r2, r2, #1
 8002954:	3a01      	subs	r2, #1
 8002956:	0652      	lsls	r2, r2, #25
 8002958:	4311      	orrs	r1, r2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800295e:	0912      	lsrs	r2, r2, #4
 8002960:	0452      	lsls	r2, r2, #17
 8002962:	430a      	orrs	r2, r1
 8002964:	494c      	ldr	r1, [pc, #304]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 8002966:	4313      	orrs	r3, r2
 8002968:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800296a:	4b4b      	ldr	r3, [pc, #300]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a4a      	ldr	r2, [pc, #296]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 8002970:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002974:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002976:	4b48      	ldr	r3, [pc, #288]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	4a47      	ldr	r2, [pc, #284]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 800297c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002980:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7fd fe61 	bl	8000648 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298a:	f7fd fe5d 	bl	8000648 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e078      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299c:	4b3e      	ldr	r3, [pc, #248]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x64a>
 80029a8:	e070      	b.n	8002a8c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a3a      	ldr	r2, [pc, #232]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 80029b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80029b6:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029c2:	4b35      	ldr	r3, [pc, #212]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	4a34      	ldr	r2, [pc, #208]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 80029c8:	f023 0303 	bic.w	r3, r3, #3
 80029cc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029ce:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	4a31      	ldr	r2, [pc, #196]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 80029d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80029d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7fd fe33 	bl	8000648 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e6:	f7fd fe2f 	bl	8000648 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e04a      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f8:	4b27      	ldr	r3, [pc, #156]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f0      	bne.n	80029e6 <HAL_RCC_OscConfig+0x6a6>
 8002a04:	e042      	b.n	8002a8c <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e03d      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002a12:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <HAL_RCC_OscConfig+0x758>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f003 0203 	and.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d130      	bne.n	8002a88 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	3b01      	subs	r3, #1
 8002a32:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d127      	bne.n	8002a88 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a42:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d11f      	bne.n	8002a88 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a52:	2a07      	cmp	r2, #7
 8002a54:	bf14      	ite	ne
 8002a56:	2201      	movne	r2, #1
 8002a58:	2200      	moveq	r2, #0
 8002a5a:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d113      	bne.n	8002a88 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	085b      	lsrs	r3, r3, #1
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d109      	bne.n	8002a88 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	085b      	lsrs	r3, r3, #1
 8002a80:	3b01      	subs	r3, #1
 8002a82:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3720      	adds	r7, #32
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	f99d808c 	.word	0xf99d808c

08002aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0c8      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b66      	ldr	r3, [pc, #408]	; (8002c50 <HAL_RCC_ClockConfig+0x1b0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d910      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b63      	ldr	r3, [pc, #396]	; (8002c50 <HAL_RCC_ClockConfig+0x1b0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 0207 	bic.w	r2, r3, #7
 8002aca:	4961      	ldr	r1, [pc, #388]	; (8002c50 <HAL_RCC_ClockConfig+0x1b0>)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b5f      	ldr	r3, [pc, #380]	; (8002c50 <HAL_RCC_ClockConfig+0x1b0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0b0      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d04c      	beq.n	8002b8a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d107      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af8:	4b56      	ldr	r3, [pc, #344]	; (8002c54 <HAL_RCC_ClockConfig+0x1b4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d121      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e09e      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d107      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b10:	4b50      	ldr	r3, [pc, #320]	; (8002c54 <HAL_RCC_ClockConfig+0x1b4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d115      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e092      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d107      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b28:	4b4a      	ldr	r3, [pc, #296]	; (8002c54 <HAL_RCC_ClockConfig+0x1b4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d109      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e086      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b38:	4b46      	ldr	r3, [pc, #280]	; (8002c54 <HAL_RCC_ClockConfig+0x1b4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e07e      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b48:	4b42      	ldr	r3, [pc, #264]	; (8002c54 <HAL_RCC_ClockConfig+0x1b4>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f023 0203 	bic.w	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	493f      	ldr	r1, [pc, #252]	; (8002c54 <HAL_RCC_ClockConfig+0x1b4>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5a:	f7fd fd75 	bl	8000648 <HAL_GetTick>
 8002b5e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b62:	f7fd fd71 	bl	8000648 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e066      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b78:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <HAL_RCC_ClockConfig+0x1b4>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 020c 	and.w	r2, r3, #12
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d1eb      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b96:	4b2f      	ldr	r3, [pc, #188]	; (8002c54 <HAL_RCC_ClockConfig+0x1b4>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	492c      	ldr	r1, [pc, #176]	; (8002c54 <HAL_RCC_ClockConfig+0x1b4>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <HAL_RCC_ClockConfig+0x1b0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d210      	bcs.n	8002bd8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <HAL_RCC_ClockConfig+0x1b0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 0207 	bic.w	r2, r3, #7
 8002bbe:	4924      	ldr	r1, [pc, #144]	; (8002c50 <HAL_RCC_ClockConfig+0x1b0>)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <HAL_RCC_ClockConfig+0x1b0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e036      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be4:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_RCC_ClockConfig+0x1b4>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4918      	ldr	r1, [pc, #96]	; (8002c54 <HAL_RCC_ClockConfig+0x1b4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c02:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <HAL_RCC_ClockConfig+0x1b4>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4910      	ldr	r1, [pc, #64]	; (8002c54 <HAL_RCC_ClockConfig+0x1b4>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c16:	f000 f825 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8002c1a:	4601      	mov	r1, r0
 8002c1c:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <HAL_RCC_ClockConfig+0x1b4>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	4a0c      	ldr	r2, [pc, #48]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002c28:	5cd3      	ldrb	r3, [r2, r3]
 8002c2a:	f003 031f 	and.w	r3, r3, #31
 8002c2e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fd fcb8 	bl	80005b0 <HAL_InitTick>
 8002c40:	4603      	mov	r3, r0
 8002c42:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c44:	7afb      	ldrb	r3, [r7, #11]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40022000 	.word	0x40022000
 8002c54:	40021000 	.word	0x40021000
 8002c58:	08008908 	.word	0x08008908
 8002c5c:	20000038 	.word	0x20000038
 8002c60:	20000000 	.word	0x20000000

08002c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b089      	sub	sp, #36	; 0x24
 8002c68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c72:	4b3d      	ldr	r3, [pc, #244]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c7c:	4b3a      	ldr	r3, [pc, #232]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x34>
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	2b0c      	cmp	r3, #12
 8002c90:	d121      	bne.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d11e      	bne.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c98:	4b33      	ldr	r3, [pc, #204]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ca4:	4b30      	ldr	r3, [pc, #192]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002caa:	0a1b      	lsrs	r3, r3, #8
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	61fb      	str	r3, [r7, #28]
 8002cb2:	e005      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cb4:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cc0:	4a2a      	ldr	r2, [pc, #168]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10d      	bne.n	8002cec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d102      	bne.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cdc:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	e004      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ce8:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	2b0c      	cmp	r3, #12
 8002cf0:	d133      	bne.n	8002d5a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cf2:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d002      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0xa4>
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0xaa>
 8002d06:	e005      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d08:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d0a:	617b      	str	r3, [r7, #20]
      break;
 8002d0c:	e005      	b.n	8002d1a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d0e:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d10:	617b      	str	r3, [r7, #20]
      break;
 8002d12:	e002      	b.n	8002d1a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	617b      	str	r3, [r7, #20]
      break;
 8002d18:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d1a:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	091b      	lsrs	r3, r3, #4
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	3301      	adds	r3, #1
 8002d26:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	0a1b      	lsrs	r3, r3, #8
 8002d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	fb02 f203 	mul.w	r2, r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d40:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	0e5b      	lsrs	r3, r3, #25
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d58:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d5a:	69bb      	ldr	r3, [r7, #24]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3724      	adds	r7, #36	; 0x24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	08008920 	.word	0x08008920
 8002d70:	00f42400 	.word	0x00f42400
 8002d74:	007a1200 	.word	0x007a1200

08002d78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000038 	.word	0x20000038

08002d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d94:	f7ff fff0 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002d98:	4601      	mov	r1, r0
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002da6:	5cd3      	ldrb	r3, [r2, r3]
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40021000 	.word	0x40021000
 8002db8:	08008918 	.word	0x08008918

08002dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dc0:	f7ff ffda 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002dc4:	4601      	mov	r1, r0
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	0adb      	lsrs	r3, r3, #11
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dd2:	5cd3      	ldrb	r3, [r2, r3]
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	08008918 	.word	0x08008918

08002de8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002df4:	4b2a      	ldr	r3, [pc, #168]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e00:	f7ff fa3a 	bl	8002278 <HAL_PWREx_GetVoltageRange>
 8002e04:	6178      	str	r0, [r7, #20]
 8002e06:	e014      	b.n	8002e32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e08:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0c:	4a24      	ldr	r2, [pc, #144]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e12:	6593      	str	r3, [r2, #88]	; 0x58
 8002e14:	4b22      	ldr	r3, [pc, #136]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e20:	f7ff fa2a 	bl	8002278 <HAL_PWREx_GetVoltageRange>
 8002e24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e26:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e38:	d10b      	bne.n	8002e52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b80      	cmp	r3, #128	; 0x80
 8002e3e:	d919      	bls.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2ba0      	cmp	r3, #160	; 0xa0
 8002e44:	d902      	bls.n	8002e4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e46:	2302      	movs	r3, #2
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	e013      	b.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	e010      	b.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b80      	cmp	r3, #128	; 0x80
 8002e56:	d902      	bls.n	8002e5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e58:	2303      	movs	r3, #3
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	e00a      	b.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b80      	cmp	r3, #128	; 0x80
 8002e62:	d102      	bne.n	8002e6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e64:	2302      	movs	r3, #2
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	e004      	b.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b70      	cmp	r3, #112	; 0x70
 8002e6e:	d101      	bne.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e70:	2301      	movs	r3, #1
 8002e72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 0207 	bic.w	r2, r3, #7
 8002e7c:	4909      	ldr	r1, [pc, #36]	; (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e84:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d001      	beq.n	8002e96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40022000 	.word	0x40022000

08002ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d03f      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ecc:	d01c      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed2:	d802      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00e      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002ed8:	e01f      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002eda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ede:	d003      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002ee0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ee4:	d01c      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002ee6:	e018      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ee8:	4b85      	ldr	r3, [pc, #532]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4a84      	ldr	r2, [pc, #528]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ef4:	e015      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fa89 	bl	8003414 <RCCEx_PLLSAI1_Config>
 8002f02:	4603      	mov	r3, r0
 8002f04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f06:	e00c      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3320      	adds	r3, #32
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 fb70 	bl	80035f4 <RCCEx_PLLSAI2_Config>
 8002f14:	4603      	mov	r3, r0
 8002f16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f18:	e003      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	74fb      	strb	r3, [r7, #19]
      break;
 8002f1e:	e000      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f22:	7cfb      	ldrb	r3, [r7, #19]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10b      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f28:	4b75      	ldr	r3, [pc, #468]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f36:	4972      	ldr	r1, [pc, #456]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f3e:	e001      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f40:	7cfb      	ldrb	r3, [r7, #19]
 8002f42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d03f      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f58:	d01c      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f5e:	d802      	bhi.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00e      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002f64:	e01f      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f6a:	d003      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002f6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f70:	d01c      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002f72:	e018      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f74:	4b62      	ldr	r3, [pc, #392]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4a61      	ldr	r2, [pc, #388]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f80:	e015      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 fa43 	bl	8003414 <RCCEx_PLLSAI1_Config>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f92:	e00c      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3320      	adds	r3, #32
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fb2a 	bl	80035f4 <RCCEx_PLLSAI2_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fa4:	e003      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	74fb      	strb	r3, [r7, #19]
      break;
 8002faa:	e000      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fae:	7cfb      	ldrb	r3, [r7, #19]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10b      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fb4:	4b52      	ldr	r3, [pc, #328]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fc2:	494f      	ldr	r1, [pc, #316]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fca:	e001      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fcc:	7cfb      	ldrb	r3, [r7, #19]
 8002fce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80a0 	beq.w	800311e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fe2:	4b47      	ldr	r3, [pc, #284]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00d      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff8:	4b41      	ldr	r3, [pc, #260]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	4a40      	ldr	r2, [pc, #256]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003002:	6593      	str	r3, [r2, #88]	; 0x58
 8003004:	4b3e      	ldr	r3, [pc, #248]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003010:	2301      	movs	r3, #1
 8003012:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003014:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a3a      	ldr	r2, [pc, #232]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800301a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003020:	f7fd fb12 	bl	8000648 <HAL_GetTick>
 8003024:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003026:	e009      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003028:	f7fd fb0e 	bl	8000648 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d902      	bls.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	74fb      	strb	r3, [r7, #19]
        break;
 800303a:	e005      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800303c:	4b31      	ldr	r3, [pc, #196]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0ef      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003048:	7cfb      	ldrb	r3, [r7, #19]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d15c      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800304e:	4b2c      	ldr	r3, [pc, #176]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003058:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01f      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	429a      	cmp	r2, r3
 800306a:	d019      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800306c:	4b24      	ldr	r3, [pc, #144]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003076:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003078:	4b21      	ldr	r3, [pc, #132]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	4a20      	ldr	r2, [pc, #128]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003088:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003098:	4a19      	ldr	r2, [pc, #100]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d016      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030aa:	f7fd facd 	bl	8000648 <HAL_GetTick>
 80030ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b0:	e00b      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	f7fd fac9 	bl	8000648 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d902      	bls.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	74fb      	strb	r3, [r7, #19]
            break;
 80030c8:	e006      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ca:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ec      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030de:	4b08      	ldr	r3, [pc, #32]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ee:	4904      	ldr	r1, [pc, #16]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030f6:	e009      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	74bb      	strb	r3, [r7, #18]
 80030fc:	e006      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x264>
 80030fe:	bf00      	nop
 8003100:	40021000 	.word	0x40021000
 8003104:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800310c:	7c7b      	ldrb	r3, [r7, #17]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d105      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003112:	4ba1      	ldr	r3, [pc, #644]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003116:	4aa0      	ldr	r2, [pc, #640]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800312a:	4b9b      	ldr	r3, [pc, #620]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003130:	f023 0203 	bic.w	r2, r3, #3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	4997      	ldr	r1, [pc, #604]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800314c:	4b92      	ldr	r3, [pc, #584]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003152:	f023 020c 	bic.w	r2, r3, #12
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315a:	498f      	ldr	r1, [pc, #572]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800316e:	4b8a      	ldr	r3, [pc, #552]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003174:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	4986      	ldr	r1, [pc, #536]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003190:	4b81      	ldr	r3, [pc, #516]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003196:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319e:	497e      	ldr	r1, [pc, #504]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031b2:	4b79      	ldr	r3, [pc, #484]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c0:	4975      	ldr	r1, [pc, #468]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031d4:	4b70      	ldr	r3, [pc, #448]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e2:	496d      	ldr	r1, [pc, #436]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031f6:	4b68      	ldr	r3, [pc, #416]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80031f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003204:	4964      	ldr	r1, [pc, #400]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003218:	4b5f      	ldr	r3, [pc, #380]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003226:	495c      	ldr	r1, [pc, #368]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800323a:	4b57      	ldr	r3, [pc, #348]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003240:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003248:	4953      	ldr	r1, [pc, #332]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800325c:	4b4e      	ldr	r3, [pc, #312]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326a:	494b      	ldr	r1, [pc, #300]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800327e:	4b46      	ldr	r3, [pc, #280]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003284:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	4942      	ldr	r1, [pc, #264]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d028      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032a0:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ae:	493a      	ldr	r1, [pc, #232]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032be:	d106      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032c0:	4b35      	ldr	r3, [pc, #212]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4a34      	ldr	r2, [pc, #208]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80032c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ca:	60d3      	str	r3, [r2, #12]
 80032cc:	e011      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032d6:	d10c      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3304      	adds	r3, #4
 80032dc:	2101      	movs	r1, #1
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 f898 	bl	8003414 <RCCEx_PLLSAI1_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* set overall return value */
        status = ret;
 80032ee:	7cfb      	ldrb	r3, [r7, #19]
 80032f0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d028      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032fe:	4b26      	ldr	r3, [pc, #152]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	4922      	ldr	r1, [pc, #136]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800331c:	d106      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800331e:	4b1e      	ldr	r3, [pc, #120]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	4a1d      	ldr	r2, [pc, #116]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8003324:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003328:	60d3      	str	r3, [r2, #12]
 800332a:	e011      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003334:	d10c      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3304      	adds	r3, #4
 800333a:	2101      	movs	r1, #1
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f869 	bl	8003414 <RCCEx_PLLSAI1_Config>
 8003342:	4603      	mov	r3, r0
 8003344:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003346:	7cfb      	ldrb	r3, [r7, #19]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d031      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800335c:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003362:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336a:	490b      	ldr	r1, [pc, #44]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800337a:	d10f      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3304      	adds	r3, #4
 8003380:	2102      	movs	r1, #2
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f846 	bl	8003414 <RCCEx_PLLSAI1_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800338c:	7cfb      	ldrb	r3, [r7, #19]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d016      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      {
        /* set overall return value */
        status = ret;
 8003392:	7cfb      	ldrb	r3, [r7, #19]
 8003394:	74bb      	strb	r3, [r7, #18]
 8003396:	e013      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003398:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3320      	adds	r3, #32
 80033aa:	2102      	movs	r1, #2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 f921 	bl	80035f4 <RCCEx_PLLSAI2_Config>
 80033b2:	4603      	mov	r3, r0
 80033b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b6:	7cfb      	ldrb	r3, [r7, #19]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      {
        /* set overall return value */
        status = ret;
 80033bc:	7cfb      	ldrb	r3, [r7, #19]
 80033be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x53a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033cc:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033da:	490d      	ldr	r1, [pc, #52]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033ee:	4b08      	ldr	r3, [pc, #32]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80033f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033fc:	4904      	ldr	r1, [pc, #16]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003404:	7cbb      	ldrb	r3, [r7, #18]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000

08003414 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003422:	4b73      	ldr	r3, [pc, #460]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d018      	beq.n	8003460 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800342e:	4b70      	ldr	r3, [pc, #448]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0203 	and.w	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d10d      	bne.n	800345a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
       ||
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003446:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
       ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d044      	beq.n	80034e4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
 800345e:	e041      	b.n	80034e4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d00c      	beq.n	8003482 <RCCEx_PLLSAI1_Config+0x6e>
 8003468:	2b03      	cmp	r3, #3
 800346a:	d013      	beq.n	8003494 <RCCEx_PLLSAI1_Config+0x80>
 800346c:	2b01      	cmp	r3, #1
 800346e:	d120      	bne.n	80034b2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003470:	4b5f      	ldr	r3, [pc, #380]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d11d      	bne.n	80034b8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003480:	e01a      	b.n	80034b8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003482:	4b5b      	ldr	r3, [pc, #364]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	2b00      	cmp	r3, #0
 800348c:	d116      	bne.n	80034bc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003492:	e013      	b.n	80034bc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003494:	4b56      	ldr	r3, [pc, #344]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10f      	bne.n	80034c0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034a0:	4b53      	ldr	r3, [pc, #332]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034b0:	e006      	b.n	80034c0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
      break;
 80034b6:	e004      	b.n	80034c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80034b8:	bf00      	nop
 80034ba:	e002      	b.n	80034c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80034bc:	bf00      	nop
 80034be:	e000      	b.n	80034c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80034c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10d      	bne.n	80034e4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034c8:	4b49      	ldr	r3, [pc, #292]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	3b01      	subs	r3, #1
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	430b      	orrs	r3, r1
 80034de:	4944      	ldr	r1, [pc, #272]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d17d      	bne.n	80035e6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034ea:	4b41      	ldr	r3, [pc, #260]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a40      	ldr	r2, [pc, #256]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f6:	f7fd f8a7 	bl	8000648 <HAL_GetTick>
 80034fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034fc:	e009      	b.n	8003512 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034fe:	f7fd f8a3 	bl	8000648 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d902      	bls.n	8003512 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	73fb      	strb	r3, [r7, #15]
        break;
 8003510:	e005      	b.n	800351e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003512:	4b37      	ldr	r3, [pc, #220]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1ef      	bne.n	80034fe <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d160      	bne.n	80035e6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d111      	bne.n	800354e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800352a:	4b31      	ldr	r3, [pc, #196]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6892      	ldr	r2, [r2, #8]
 800353a:	0211      	lsls	r1, r2, #8
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	68d2      	ldr	r2, [r2, #12]
 8003540:	0912      	lsrs	r2, r2, #4
 8003542:	0452      	lsls	r2, r2, #17
 8003544:	430a      	orrs	r2, r1
 8003546:	492a      	ldr	r1, [pc, #168]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003548:	4313      	orrs	r3, r2
 800354a:	610b      	str	r3, [r1, #16]
 800354c:	e027      	b.n	800359e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d112      	bne.n	800357a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003554:	4b26      	ldr	r3, [pc, #152]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800355c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6892      	ldr	r2, [r2, #8]
 8003564:	0211      	lsls	r1, r2, #8
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6912      	ldr	r2, [r2, #16]
 800356a:	0852      	lsrs	r2, r2, #1
 800356c:	3a01      	subs	r2, #1
 800356e:	0552      	lsls	r2, r2, #21
 8003570:	430a      	orrs	r2, r1
 8003572:	491f      	ldr	r1, [pc, #124]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003574:	4313      	orrs	r3, r2
 8003576:	610b      	str	r3, [r1, #16]
 8003578:	e011      	b.n	800359e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800357a:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003582:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6892      	ldr	r2, [r2, #8]
 800358a:	0211      	lsls	r1, r2, #8
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6952      	ldr	r2, [r2, #20]
 8003590:	0852      	lsrs	r2, r2, #1
 8003592:	3a01      	subs	r2, #1
 8003594:	0652      	lsls	r2, r2, #25
 8003596:	430a      	orrs	r2, r1
 8003598:	4915      	ldr	r1, [pc, #84]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800359a:	4313      	orrs	r3, r2
 800359c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800359e:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a13      	ldr	r2, [pc, #76]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035aa:	f7fd f84d 	bl	8000648 <HAL_GetTick>
 80035ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035b0:	e009      	b.n	80035c6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035b2:	f7fd f849 	bl	8000648 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d902      	bls.n	80035c6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	73fb      	strb	r3, [r7, #15]
          break;
 80035c4:	e005      	b.n	80035d2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0ef      	beq.n	80035b2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d106      	bne.n	80035e6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	4903      	ldr	r1, [pc, #12]	; (80035f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000

080035f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003602:	4b68      	ldr	r3, [pc, #416]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d018      	beq.n	8003640 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800360e:	4b65      	ldr	r3, [pc, #404]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 0203 	and.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d10d      	bne.n	800363a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
       ||
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003626:	4b5f      	ldr	r3, [pc, #380]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	091b      	lsrs	r3, r3, #4
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
       ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d044      	beq.n	80036c4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
 800363e:	e041      	b.n	80036c4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d00c      	beq.n	8003662 <RCCEx_PLLSAI2_Config+0x6e>
 8003648:	2b03      	cmp	r3, #3
 800364a:	d013      	beq.n	8003674 <RCCEx_PLLSAI2_Config+0x80>
 800364c:	2b01      	cmp	r3, #1
 800364e:	d120      	bne.n	8003692 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003650:	4b54      	ldr	r3, [pc, #336]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d11d      	bne.n	8003698 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003660:	e01a      	b.n	8003698 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003662:	4b50      	ldr	r3, [pc, #320]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366a:	2b00      	cmp	r3, #0
 800366c:	d116      	bne.n	800369c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003672:	e013      	b.n	800369c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003674:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10f      	bne.n	80036a0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003680:	4b48      	ldr	r3, [pc, #288]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003690:	e006      	b.n	80036a0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      break;
 8003696:	e004      	b.n	80036a2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003698:	bf00      	nop
 800369a:	e002      	b.n	80036a2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800369c:	bf00      	nop
 800369e:	e000      	b.n	80036a2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036a0:	bf00      	nop
    }

    if(status == HAL_OK)
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10d      	bne.n	80036c4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036a8:	4b3e      	ldr	r3, [pc, #248]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	430b      	orrs	r3, r1
 80036be:	4939      	ldr	r1, [pc, #228]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d167      	bne.n	800379a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036ca:	4b36      	ldr	r3, [pc, #216]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a35      	ldr	r2, [pc, #212]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d6:	f7fc ffb7 	bl	8000648 <HAL_GetTick>
 80036da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036dc:	e009      	b.n	80036f2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036de:	f7fc ffb3 	bl	8000648 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d902      	bls.n	80036f2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	73fb      	strb	r3, [r7, #15]
        break;
 80036f0:	e005      	b.n	80036fe <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036f2:	4b2c      	ldr	r3, [pc, #176]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1ef      	bne.n	80036de <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d14a      	bne.n	800379a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d111      	bne.n	800372e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800370a:	4b26      	ldr	r3, [pc, #152]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6892      	ldr	r2, [r2, #8]
 800371a:	0211      	lsls	r1, r2, #8
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	68d2      	ldr	r2, [r2, #12]
 8003720:	0912      	lsrs	r2, r2, #4
 8003722:	0452      	lsls	r2, r2, #17
 8003724:	430a      	orrs	r2, r1
 8003726:	491f      	ldr	r1, [pc, #124]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003728:	4313      	orrs	r3, r2
 800372a:	614b      	str	r3, [r1, #20]
 800372c:	e011      	b.n	8003752 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800372e:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003736:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6892      	ldr	r2, [r2, #8]
 800373e:	0211      	lsls	r1, r2, #8
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6912      	ldr	r2, [r2, #16]
 8003744:	0852      	lsrs	r2, r2, #1
 8003746:	3a01      	subs	r2, #1
 8003748:	0652      	lsls	r2, r2, #25
 800374a:	430a      	orrs	r2, r1
 800374c:	4915      	ldr	r1, [pc, #84]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800374e:	4313      	orrs	r3, r2
 8003750:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003752:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a13      	ldr	r2, [pc, #76]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fc ff73 	bl	8000648 <HAL_GetTick>
 8003762:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003764:	e009      	b.n	800377a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003766:	f7fc ff6f 	bl	8000648 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d902      	bls.n	800377a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	73fb      	strb	r3, [r7, #15]
          break;
 8003778:	e005      	b.n	8003786 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0ef      	beq.n	8003766 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d106      	bne.n	800379a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	4903      	ldr	r1, [pc, #12]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003796:	4313      	orrs	r3, r2
 8003798:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000

080037a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d06f      	beq.n	800389a <HAL_RTC_Init+0xf2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f004 f8c2 	bl	8007958 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	22ca      	movs	r2, #202	; 0xca
 80037e2:	625a      	str	r2, [r3, #36]	; 0x24
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2253      	movs	r2, #83	; 0x53
 80037ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f87f 	bl	80038f0 <RTC_EnterInitMode>
 80037f2:	4603      	mov	r3, r0
 80037f4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d14e      	bne.n	800389a <HAL_RTC_Init+0xf2>
#if defined(STM32L412xx) || defined(STM32L422xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800380a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800380e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6899      	ldr	r1, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68d2      	ldr	r2, [r2, #12]
 8003836:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6919      	ldr	r1, [r3, #16]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	041a      	lsls	r2, r3, #16
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f883 	bl	8003958 <RTC_ExitInitMode>
 8003852:	4603      	mov	r3, r0
 8003854:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d11e      	bne.n	800389a <HAL_RTC_Init+0xf2>
      {
#if defined(STM32L412xx) || defined(STM32L422xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0203 	bic.w	r2, r2, #3
 800386a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	22ff      	movs	r2, #255	; 0xff
 800388a:	625a      	str	r2, [r3, #36]	; 0x24

        if (status == HAL_OK)
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d103      	bne.n	800389a <HAL_RTC_Init+0xf2>
        {
          hrtc->State = HAL_RTC_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
      }
    }
  }

  return status;
 800389a:	7bfb      	ldrb	r3, [r7, #15]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038ba:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80038bc:	f7fc fec4 	bl	8000648 <HAL_GetTick>
 80038c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80038c2:	e009      	b.n	80038d8 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038c4:	f7fc fec0 	bl	8000648 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038d2:	d901      	bls.n	80038d8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e007      	b.n	80038e8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0ee      	beq.n	80038c4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d120      	bne.n	800394c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f04f 32ff 	mov.w	r2, #4294967295
 8003912:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003914:	f7fc fe98 	bl	8000648 <HAL_GetTick>
 8003918:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800391a:	e00d      	b.n	8003938 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800391c:	f7fc fe94 	bl	8000648 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800392a:	d905      	bls.n	8003938 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2203      	movs	r2, #3
 8003934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d102      	bne.n	800394c <RTC_EnterInitMode+0x5c>
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d1e7      	bne.n	800391c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003964:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <RTC_ExitInitMode+0x78>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4a19      	ldr	r2, [pc, #100]	; (80039d0 <RTC_ExitInitMode+0x78>)
 800396a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800396e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003970:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <RTC_ExitInitMode+0x78>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10c      	bne.n	8003996 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ff91 	bl	80038a4 <HAL_RTC_WaitForSynchro>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01e      	beq.n	80039c6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2203      	movs	r2, #3
 800398c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	73fb      	strb	r3, [r7, #15]
 8003994:	e017      	b.n	80039c6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003996:	4b0e      	ldr	r3, [pc, #56]	; (80039d0 <RTC_ExitInitMode+0x78>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	4a0d      	ldr	r2, [pc, #52]	; (80039d0 <RTC_ExitInitMode+0x78>)
 800399c:	f023 0320 	bic.w	r3, r3, #32
 80039a0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff ff7e 	bl	80038a4 <HAL_RTC_WaitForSynchro>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2203      	movs	r2, #3
 80039b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <RTC_ExitInitMode+0x78>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	4a04      	ldr	r2, [pc, #16]	; (80039d0 <RTC_ExitInitMode+0x78>)
 80039c0:	f043 0320 	orr.w	r3, r3, #32
 80039c4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40002800 	.word	0x40002800

080039d4 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e07f      	b.n	8003aee <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2202      	movs	r2, #2
 80039fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	22ca      	movs	r2, #202	; 0xca
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2253      	movs	r2, #83	; 0x53
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003a2e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d120      	bne.n	8003a80 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8003a3e:	f7fc fe03 	bl	8000648 <HAL_GetTick>
 8003a42:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8003a44:	e015      	b.n	8003a72 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a46:	f7fc fdff 	bl	8000648 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a54:	d90d      	bls.n	8003a72 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	22ff      	movs	r2, #255	; 0xff
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2203      	movs	r2, #3
 8003a62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e03d      	b.n	8003aee <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0e2      	beq.n	8003a46 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f023 0107 	bic.w	r1, r3, #7
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003a9c:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a15      	ldr	r2, [pc, #84]	; (8003af8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aa6:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003aa8:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ab2:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ac2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ad2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	22ff      	movs	r2, #255	; 0xff
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40010400 	.word	0x40010400

08003afc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003b06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b0a:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003b2a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f003 fdb3 	bl	8007698 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40010400 	.word	0x40010400

08003b48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e040      	b.n	8003bdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f003 fe18 	bl	80077a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2224      	movs	r2, #36	; 0x24
 8003b74:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fa12 	bl	8003fb0 <UART_SetConfig>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e022      	b.n	8003bdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fd4e 	bl	8004640 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fdd5 	bl	8004784 <UART_CheckIdleState>
 8003bda:	4603      	mov	r3, r0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	f040 808a 	bne.w	8003d10 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_UART_Receive_IT+0x24>
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e082      	b.n	8003d12 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_UART_Receive_IT+0x36>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e07b      	b.n	8003d12 <HAL_UART_Receive_IT+0x12e>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	88fa      	ldrh	r2, [r7, #6]
 8003c2c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	88fa      	ldrh	r2, [r7, #6]
 8003c34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c46:	d10e      	bne.n	8003c66 <HAL_UART_Receive_IT+0x82>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d105      	bne.n	8003c5c <HAL_UART_Receive_IT+0x78>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c5a:	e02d      	b.n	8003cb8 <HAL_UART_Receive_IT+0xd4>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	22ff      	movs	r2, #255	; 0xff
 8003c60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c64:	e028      	b.n	8003cb8 <HAL_UART_Receive_IT+0xd4>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10d      	bne.n	8003c8a <HAL_UART_Receive_IT+0xa6>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d104      	bne.n	8003c80 <HAL_UART_Receive_IT+0x9c>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	22ff      	movs	r2, #255	; 0xff
 8003c7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c7e:	e01b      	b.n	8003cb8 <HAL_UART_Receive_IT+0xd4>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	227f      	movs	r2, #127	; 0x7f
 8003c84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c88:	e016      	b.n	8003cb8 <HAL_UART_Receive_IT+0xd4>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c92:	d10d      	bne.n	8003cb0 <HAL_UART_Receive_IT+0xcc>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d104      	bne.n	8003ca6 <HAL_UART_Receive_IT+0xc2>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	227f      	movs	r2, #127	; 0x7f
 8003ca0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ca4:	e008      	b.n	8003cb8 <HAL_UART_Receive_IT+0xd4>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	223f      	movs	r2, #63	; 0x3f
 8003caa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cae:	e003      	b.n	8003cb8 <HAL_UART_Receive_IT+0xd4>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2222      	movs	r2, #34	; 0x22
 8003cc2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cdc:	d107      	bne.n	8003cee <HAL_UART_Receive_IT+0x10a>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4a0d      	ldr	r2, [pc, #52]	; (8003d20 <HAL_UART_Receive_IT+0x13c>)
 8003cea:	661a      	str	r2, [r3, #96]	; 0x60
 8003cec:	e002      	b.n	8003cf4 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4a0c      	ldr	r2, [pc, #48]	; (8003d24 <HAL_UART_Receive_IT+0x140>)
 8003cf2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003d0a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e000      	b.n	8003d12 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
  }
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	080049e7 	.word	0x080049e7
 8003d24:	0800493d 	.word	0x0800493d

08003d28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d113      	bne.n	8003d7e <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00e      	beq.n	8003d7e <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80ff 	beq.w	8003f72 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
      }
      return;
 8003d7c:	e0f9      	b.n	8003f72 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80c1 	beq.w	8003f08 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d105      	bne.n	8003d9c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 80b6 	beq.w	8003f08 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00e      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x9c>
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d009      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2201      	movs	r2, #1
 8003db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dbc:	f043 0201 	orr.w	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00e      	beq.n	8003dec <HAL_UART_IRQHandler+0xc4>
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d009      	beq.n	8003dec <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003de4:	f043 0204 	orr.w	r2, r3, #4
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00e      	beq.n	8003e14 <HAL_UART_IRQHandler+0xec>
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d009      	beq.n	8003e14 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2204      	movs	r2, #4
 8003e06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e0c:	f043 0202 	orr.w	r2, r3, #2
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d013      	beq.n	8003e46 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d009      	beq.n	8003e46 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2208      	movs	r2, #8
 8003e38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e3e:	f043 0208 	orr.w	r2, r3, #8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 8093 	beq.w	8003f76 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00c      	beq.n	8003e74 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d007      	beq.n	8003e74 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e78:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d004      	beq.n	8003e92 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d031      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fd03 	bl	800489e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d123      	bne.n	8003eee <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d013      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec2:	4a30      	ldr	r2, [pc, #192]	; (8003f84 <HAL_UART_IRQHandler+0x25c>)
 8003ec4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fd ffb9 	bl	8001e42 <HAL_DMA_Abort_IT>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d016      	beq.n	8003f04 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee4:	e00e      	b.n	8003f04 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f858 	bl	8003f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eec:	e00a      	b.n	8003f04 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f854 	bl	8003f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	e006      	b.n	8003f04 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f850 	bl	8003f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003f02:	e038      	b.n	8003f76 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f04:	bf00      	nop
    return;
 8003f06:	e036      	b.n	8003f76 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <HAL_UART_IRQHandler+0x206>
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fdb2 	bl	8004a90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f2c:	e026      	b.n	8003f7c <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00d      	beq.n	8003f54 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d017      	beq.n	8003f7a <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	4798      	blx	r3
    }
    return;
 8003f52:	e012      	b.n	8003f7a <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00e      	beq.n	8003f7c <HAL_UART_IRQHandler+0x254>
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d009      	beq.n	8003f7c <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fcce 	bl	800490a <UART_EndTransmit_IT>
    return;
 8003f6e:	bf00      	nop
 8003f70:	e004      	b.n	8003f7c <HAL_UART_IRQHandler+0x254>
      return;
 8003f72:	bf00      	nop
 8003f74:	e002      	b.n	8003f7c <HAL_UART_IRQHandler+0x254>
    return;
 8003f76:	bf00      	nop
 8003f78:	e000      	b.n	8003f7c <HAL_UART_IRQHandler+0x254>
    return;
 8003f7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003f7c:	3720      	adds	r7, #32
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	080048df 	.word	0x080048df

08003f88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003fb4:	b088      	sub	sp, #32
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4bac      	ldr	r3, [pc, #688]	; (8004298 <UART_SetConfig+0x2e8>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	69f9      	ldr	r1, [r7, #28]
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4aa2      	ldr	r2, [pc, #648]	; (800429c <UART_SetConfig+0x2ec>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	4313      	orrs	r3, r2
 8004020:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69fa      	ldr	r2, [r7, #28]
 8004032:	430a      	orrs	r2, r1
 8004034:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a99      	ldr	r2, [pc, #612]	; (80042a0 <UART_SetConfig+0x2f0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d121      	bne.n	8004084 <UART_SetConfig+0xd4>
 8004040:	4b98      	ldr	r3, [pc, #608]	; (80042a4 <UART_SetConfig+0x2f4>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b03      	cmp	r3, #3
 800404c:	d816      	bhi.n	800407c <UART_SetConfig+0xcc>
 800404e:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <UART_SetConfig+0xa4>)
 8004050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004054:	08004065 	.word	0x08004065
 8004058:	08004071 	.word	0x08004071
 800405c:	0800406b 	.word	0x0800406b
 8004060:	08004077 	.word	0x08004077
 8004064:	2301      	movs	r3, #1
 8004066:	76fb      	strb	r3, [r7, #27]
 8004068:	e0e8      	b.n	800423c <UART_SetConfig+0x28c>
 800406a:	2302      	movs	r3, #2
 800406c:	76fb      	strb	r3, [r7, #27]
 800406e:	e0e5      	b.n	800423c <UART_SetConfig+0x28c>
 8004070:	2304      	movs	r3, #4
 8004072:	76fb      	strb	r3, [r7, #27]
 8004074:	e0e2      	b.n	800423c <UART_SetConfig+0x28c>
 8004076:	2308      	movs	r3, #8
 8004078:	76fb      	strb	r3, [r7, #27]
 800407a:	e0df      	b.n	800423c <UART_SetConfig+0x28c>
 800407c:	2310      	movs	r3, #16
 800407e:	76fb      	strb	r3, [r7, #27]
 8004080:	bf00      	nop
 8004082:	e0db      	b.n	800423c <UART_SetConfig+0x28c>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a87      	ldr	r2, [pc, #540]	; (80042a8 <UART_SetConfig+0x2f8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d134      	bne.n	80040f8 <UART_SetConfig+0x148>
 800408e:	4b85      	ldr	r3, [pc, #532]	; (80042a4 <UART_SetConfig+0x2f4>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004094:	f003 030c 	and.w	r3, r3, #12
 8004098:	2b0c      	cmp	r3, #12
 800409a:	d829      	bhi.n	80040f0 <UART_SetConfig+0x140>
 800409c:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <UART_SetConfig+0xf4>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	080040d9 	.word	0x080040d9
 80040a8:	080040f1 	.word	0x080040f1
 80040ac:	080040f1 	.word	0x080040f1
 80040b0:	080040f1 	.word	0x080040f1
 80040b4:	080040e5 	.word	0x080040e5
 80040b8:	080040f1 	.word	0x080040f1
 80040bc:	080040f1 	.word	0x080040f1
 80040c0:	080040f1 	.word	0x080040f1
 80040c4:	080040df 	.word	0x080040df
 80040c8:	080040f1 	.word	0x080040f1
 80040cc:	080040f1 	.word	0x080040f1
 80040d0:	080040f1 	.word	0x080040f1
 80040d4:	080040eb 	.word	0x080040eb
 80040d8:	2300      	movs	r3, #0
 80040da:	76fb      	strb	r3, [r7, #27]
 80040dc:	e0ae      	b.n	800423c <UART_SetConfig+0x28c>
 80040de:	2302      	movs	r3, #2
 80040e0:	76fb      	strb	r3, [r7, #27]
 80040e2:	e0ab      	b.n	800423c <UART_SetConfig+0x28c>
 80040e4:	2304      	movs	r3, #4
 80040e6:	76fb      	strb	r3, [r7, #27]
 80040e8:	e0a8      	b.n	800423c <UART_SetConfig+0x28c>
 80040ea:	2308      	movs	r3, #8
 80040ec:	76fb      	strb	r3, [r7, #27]
 80040ee:	e0a5      	b.n	800423c <UART_SetConfig+0x28c>
 80040f0:	2310      	movs	r3, #16
 80040f2:	76fb      	strb	r3, [r7, #27]
 80040f4:	bf00      	nop
 80040f6:	e0a1      	b.n	800423c <UART_SetConfig+0x28c>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a6b      	ldr	r2, [pc, #428]	; (80042ac <UART_SetConfig+0x2fc>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d120      	bne.n	8004144 <UART_SetConfig+0x194>
 8004102:	4b68      	ldr	r3, [pc, #416]	; (80042a4 <UART_SetConfig+0x2f4>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004108:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800410c:	2b10      	cmp	r3, #16
 800410e:	d00f      	beq.n	8004130 <UART_SetConfig+0x180>
 8004110:	2b10      	cmp	r3, #16
 8004112:	d802      	bhi.n	800411a <UART_SetConfig+0x16a>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <UART_SetConfig+0x174>
 8004118:	e010      	b.n	800413c <UART_SetConfig+0x18c>
 800411a:	2b20      	cmp	r3, #32
 800411c:	d005      	beq.n	800412a <UART_SetConfig+0x17a>
 800411e:	2b30      	cmp	r3, #48	; 0x30
 8004120:	d009      	beq.n	8004136 <UART_SetConfig+0x186>
 8004122:	e00b      	b.n	800413c <UART_SetConfig+0x18c>
 8004124:	2300      	movs	r3, #0
 8004126:	76fb      	strb	r3, [r7, #27]
 8004128:	e088      	b.n	800423c <UART_SetConfig+0x28c>
 800412a:	2302      	movs	r3, #2
 800412c:	76fb      	strb	r3, [r7, #27]
 800412e:	e085      	b.n	800423c <UART_SetConfig+0x28c>
 8004130:	2304      	movs	r3, #4
 8004132:	76fb      	strb	r3, [r7, #27]
 8004134:	e082      	b.n	800423c <UART_SetConfig+0x28c>
 8004136:	2308      	movs	r3, #8
 8004138:	76fb      	strb	r3, [r7, #27]
 800413a:	e07f      	b.n	800423c <UART_SetConfig+0x28c>
 800413c:	2310      	movs	r3, #16
 800413e:	76fb      	strb	r3, [r7, #27]
 8004140:	bf00      	nop
 8004142:	e07b      	b.n	800423c <UART_SetConfig+0x28c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a59      	ldr	r2, [pc, #356]	; (80042b0 <UART_SetConfig+0x300>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d120      	bne.n	8004190 <UART_SetConfig+0x1e0>
 800414e:	4b55      	ldr	r3, [pc, #340]	; (80042a4 <UART_SetConfig+0x2f4>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004154:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004158:	2b40      	cmp	r3, #64	; 0x40
 800415a:	d00f      	beq.n	800417c <UART_SetConfig+0x1cc>
 800415c:	2b40      	cmp	r3, #64	; 0x40
 800415e:	d802      	bhi.n	8004166 <UART_SetConfig+0x1b6>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <UART_SetConfig+0x1c0>
 8004164:	e010      	b.n	8004188 <UART_SetConfig+0x1d8>
 8004166:	2b80      	cmp	r3, #128	; 0x80
 8004168:	d005      	beq.n	8004176 <UART_SetConfig+0x1c6>
 800416a:	2bc0      	cmp	r3, #192	; 0xc0
 800416c:	d009      	beq.n	8004182 <UART_SetConfig+0x1d2>
 800416e:	e00b      	b.n	8004188 <UART_SetConfig+0x1d8>
 8004170:	2300      	movs	r3, #0
 8004172:	76fb      	strb	r3, [r7, #27]
 8004174:	e062      	b.n	800423c <UART_SetConfig+0x28c>
 8004176:	2302      	movs	r3, #2
 8004178:	76fb      	strb	r3, [r7, #27]
 800417a:	e05f      	b.n	800423c <UART_SetConfig+0x28c>
 800417c:	2304      	movs	r3, #4
 800417e:	76fb      	strb	r3, [r7, #27]
 8004180:	e05c      	b.n	800423c <UART_SetConfig+0x28c>
 8004182:	2308      	movs	r3, #8
 8004184:	76fb      	strb	r3, [r7, #27]
 8004186:	e059      	b.n	800423c <UART_SetConfig+0x28c>
 8004188:	2310      	movs	r3, #16
 800418a:	76fb      	strb	r3, [r7, #27]
 800418c:	bf00      	nop
 800418e:	e055      	b.n	800423c <UART_SetConfig+0x28c>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a47      	ldr	r2, [pc, #284]	; (80042b4 <UART_SetConfig+0x304>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d124      	bne.n	80041e4 <UART_SetConfig+0x234>
 800419a:	4b42      	ldr	r3, [pc, #264]	; (80042a4 <UART_SetConfig+0x2f4>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a8:	d012      	beq.n	80041d0 <UART_SetConfig+0x220>
 80041aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ae:	d802      	bhi.n	80041b6 <UART_SetConfig+0x206>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <UART_SetConfig+0x214>
 80041b4:	e012      	b.n	80041dc <UART_SetConfig+0x22c>
 80041b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ba:	d006      	beq.n	80041ca <UART_SetConfig+0x21a>
 80041bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c0:	d009      	beq.n	80041d6 <UART_SetConfig+0x226>
 80041c2:	e00b      	b.n	80041dc <UART_SetConfig+0x22c>
 80041c4:	2300      	movs	r3, #0
 80041c6:	76fb      	strb	r3, [r7, #27]
 80041c8:	e038      	b.n	800423c <UART_SetConfig+0x28c>
 80041ca:	2302      	movs	r3, #2
 80041cc:	76fb      	strb	r3, [r7, #27]
 80041ce:	e035      	b.n	800423c <UART_SetConfig+0x28c>
 80041d0:	2304      	movs	r3, #4
 80041d2:	76fb      	strb	r3, [r7, #27]
 80041d4:	e032      	b.n	800423c <UART_SetConfig+0x28c>
 80041d6:	2308      	movs	r3, #8
 80041d8:	76fb      	strb	r3, [r7, #27]
 80041da:	e02f      	b.n	800423c <UART_SetConfig+0x28c>
 80041dc:	2310      	movs	r3, #16
 80041de:	76fb      	strb	r3, [r7, #27]
 80041e0:	bf00      	nop
 80041e2:	e02b      	b.n	800423c <UART_SetConfig+0x28c>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2c      	ldr	r2, [pc, #176]	; (800429c <UART_SetConfig+0x2ec>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d124      	bne.n	8004238 <UART_SetConfig+0x288>
 80041ee:	4b2d      	ldr	r3, [pc, #180]	; (80042a4 <UART_SetConfig+0x2f4>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fc:	d012      	beq.n	8004224 <UART_SetConfig+0x274>
 80041fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004202:	d802      	bhi.n	800420a <UART_SetConfig+0x25a>
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <UART_SetConfig+0x268>
 8004208:	e012      	b.n	8004230 <UART_SetConfig+0x280>
 800420a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420e:	d006      	beq.n	800421e <UART_SetConfig+0x26e>
 8004210:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004214:	d009      	beq.n	800422a <UART_SetConfig+0x27a>
 8004216:	e00b      	b.n	8004230 <UART_SetConfig+0x280>
 8004218:	2300      	movs	r3, #0
 800421a:	76fb      	strb	r3, [r7, #27]
 800421c:	e00e      	b.n	800423c <UART_SetConfig+0x28c>
 800421e:	2302      	movs	r3, #2
 8004220:	76fb      	strb	r3, [r7, #27]
 8004222:	e00b      	b.n	800423c <UART_SetConfig+0x28c>
 8004224:	2304      	movs	r3, #4
 8004226:	76fb      	strb	r3, [r7, #27]
 8004228:	e008      	b.n	800423c <UART_SetConfig+0x28c>
 800422a:	2308      	movs	r3, #8
 800422c:	76fb      	strb	r3, [r7, #27]
 800422e:	e005      	b.n	800423c <UART_SetConfig+0x28c>
 8004230:	2310      	movs	r3, #16
 8004232:	76fb      	strb	r3, [r7, #27]
 8004234:	bf00      	nop
 8004236:	e001      	b.n	800423c <UART_SetConfig+0x28c>
 8004238:	2310      	movs	r3, #16
 800423a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a16      	ldr	r2, [pc, #88]	; (800429c <UART_SetConfig+0x2ec>)
 8004242:	4293      	cmp	r3, r2
 8004244:	f040 80fa 	bne.w	800443c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004248:	7efb      	ldrb	r3, [r7, #27]
 800424a:	2b08      	cmp	r3, #8
 800424c:	d836      	bhi.n	80042bc <UART_SetConfig+0x30c>
 800424e:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <UART_SetConfig+0x2a4>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	08004279 	.word	0x08004279
 8004258:	080042bd 	.word	0x080042bd
 800425c:	08004281 	.word	0x08004281
 8004260:	080042bd 	.word	0x080042bd
 8004264:	08004287 	.word	0x08004287
 8004268:	080042bd 	.word	0x080042bd
 800426c:	080042bd 	.word	0x080042bd
 8004270:	080042bd 	.word	0x080042bd
 8004274:	0800428f 	.word	0x0800428f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004278:	f7fe fd8a 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 800427c:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800427e:	e020      	b.n	80042c2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004280:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <UART_SetConfig+0x308>)
 8004282:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004284:	e01d      	b.n	80042c2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004286:	f7fe fced 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 800428a:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800428c:	e019      	b.n	80042c2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800428e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004292:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004294:	e015      	b.n	80042c2 <UART_SetConfig+0x312>
 8004296:	bf00      	nop
 8004298:	efff69f3 	.word	0xefff69f3
 800429c:	40008000 	.word	0x40008000
 80042a0:	40013800 	.word	0x40013800
 80042a4:	40021000 	.word	0x40021000
 80042a8:	40004400 	.word	0x40004400
 80042ac:	40004800 	.word	0x40004800
 80042b0:	40004c00 	.word	0x40004c00
 80042b4:	40005000 	.word	0x40005000
 80042b8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	74fb      	strb	r3, [r7, #19]
        break;
 80042c0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 81ac 	beq.w	8004622 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	4413      	add	r3, r2
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d305      	bcc.n	80042e6 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d902      	bls.n	80042ec <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	74fb      	strb	r3, [r7, #19]
 80042ea:	e19a      	b.n	8004622 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 80042ec:	7efb      	ldrb	r3, [r7, #27]
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	f200 8091 	bhi.w	8004416 <UART_SetConfig+0x466>
 80042f4:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <UART_SetConfig+0x34c>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	08004321 	.word	0x08004321
 8004300:	08004417 	.word	0x08004417
 8004304:	0800436d 	.word	0x0800436d
 8004308:	08004417 	.word	0x08004417
 800430c:	080043a1 	.word	0x080043a1
 8004310:	08004417 	.word	0x08004417
 8004314:	08004417 	.word	0x08004417
 8004318:	08004417 	.word	0x08004417
 800431c:	080043ed 	.word	0x080043ed
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004320:	f7fe fd36 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8004324:	4603      	mov	r3, r0
 8004326:	4619      	mov	r1, r3
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	f04f 0400 	mov.w	r4, #0
 8004334:	0214      	lsls	r4, r2, #8
 8004336:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800433a:	020b      	lsls	r3, r1, #8
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6852      	ldr	r2, [r2, #4]
 8004340:	0852      	lsrs	r2, r2, #1
 8004342:	4611      	mov	r1, r2
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	eb13 0b01 	adds.w	fp, r3, r1
 800434c:	eb44 0c02 	adc.w	ip, r4, r2
 8004350:	4658      	mov	r0, fp
 8004352:	4661      	mov	r1, ip
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f04f 0400 	mov.w	r4, #0
 800435c:	461a      	mov	r2, r3
 800435e:	4623      	mov	r3, r4
 8004360:	f7fb ff8e 	bl	8000280 <__aeabi_uldivmod>
 8004364:	4603      	mov	r3, r0
 8004366:	460c      	mov	r4, r1
 8004368:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800436a:	e057      	b.n	800441c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	085b      	lsrs	r3, r3, #1
 8004372:	f04f 0400 	mov.w	r4, #0
 8004376:	49b1      	ldr	r1, [pc, #708]	; (800463c <UART_SetConfig+0x68c>)
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	eb13 0b01 	adds.w	fp, r3, r1
 8004380:	eb44 0c02 	adc.w	ip, r4, r2
 8004384:	4658      	mov	r0, fp
 8004386:	4661      	mov	r1, ip
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f04f 0400 	mov.w	r4, #0
 8004390:	461a      	mov	r2, r3
 8004392:	4623      	mov	r3, r4
 8004394:	f7fb ff74 	bl	8000280 <__aeabi_uldivmod>
 8004398:	4603      	mov	r3, r0
 800439a:	460c      	mov	r4, r1
 800439c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800439e:	e03d      	b.n	800441c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043a0:	f7fe fc60 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 80043a4:	4603      	mov	r3, r0
 80043a6:	4619      	mov	r1, r3
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	f04f 0400 	mov.w	r4, #0
 80043b4:	0214      	lsls	r4, r2, #8
 80043b6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80043ba:	020b      	lsls	r3, r1, #8
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6852      	ldr	r2, [r2, #4]
 80043c0:	0852      	lsrs	r2, r2, #1
 80043c2:	4611      	mov	r1, r2
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	eb13 0b01 	adds.w	fp, r3, r1
 80043cc:	eb44 0c02 	adc.w	ip, r4, r2
 80043d0:	4658      	mov	r0, fp
 80043d2:	4661      	mov	r1, ip
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f04f 0400 	mov.w	r4, #0
 80043dc:	461a      	mov	r2, r3
 80043de:	4623      	mov	r3, r4
 80043e0:	f7fb ff4e 	bl	8000280 <__aeabi_uldivmod>
 80043e4:	4603      	mov	r3, r0
 80043e6:	460c      	mov	r4, r1
 80043e8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80043ea:	e017      	b.n	800441c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	f04f 0400 	mov.w	r4, #0
 80043f6:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80043fa:	f144 0100 	adc.w	r1, r4, #0
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f04f 0400 	mov.w	r4, #0
 8004406:	461a      	mov	r2, r3
 8004408:	4623      	mov	r3, r4
 800440a:	f7fb ff39 	bl	8000280 <__aeabi_uldivmod>
 800440e:	4603      	mov	r3, r0
 8004410:	460c      	mov	r4, r1
 8004412:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004414:	e002      	b.n	800441c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	74fb      	strb	r3, [r7, #19]
            break;
 800441a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004422:	d308      	bcc.n	8004436 <UART_SetConfig+0x486>
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442a:	d204      	bcs.n	8004436 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	60da      	str	r2, [r3, #12]
 8004434:	e0f5      	b.n	8004622 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	74fb      	strb	r3, [r7, #19]
 800443a:	e0f2      	b.n	8004622 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004444:	d17f      	bne.n	8004546 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8004446:	7efb      	ldrb	r3, [r7, #27]
 8004448:	2b08      	cmp	r3, #8
 800444a:	d85c      	bhi.n	8004506 <UART_SetConfig+0x556>
 800444c:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <UART_SetConfig+0x4a4>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	08004479 	.word	0x08004479
 8004458:	08004497 	.word	0x08004497
 800445c:	080044b5 	.word	0x080044b5
 8004460:	08004507 	.word	0x08004507
 8004464:	080044d1 	.word	0x080044d1
 8004468:	08004507 	.word	0x08004507
 800446c:	08004507 	.word	0x08004507
 8004470:	08004507 	.word	0x08004507
 8004474:	080044ef 	.word	0x080044ef
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004478:	f7fe fc8a 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 800447c:	4603      	mov	r3, r0
 800447e:	005a      	lsls	r2, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	441a      	add	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	b29b      	uxth	r3, r3
 8004492:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004494:	e03a      	b.n	800450c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004496:	f7fe fc91 	bl	8002dbc <HAL_RCC_GetPCLK2Freq>
 800449a:	4603      	mov	r3, r0
 800449c:	005a      	lsls	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	085b      	lsrs	r3, r3, #1
 80044a4:	441a      	add	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044b2:	e02b      	b.n	800450c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	085b      	lsrs	r3, r3, #1
 80044ba:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80044be:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6852      	ldr	r2, [r2, #4]
 80044c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044ce:	e01d      	b.n	800450c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80044d0:	f7fe fbc8 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 80044d4:	4603      	mov	r3, r0
 80044d6:	005a      	lsls	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	085b      	lsrs	r3, r3, #1
 80044de:	441a      	add	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044ec:	e00e      	b.n	800450c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004500:	b29b      	uxth	r3, r3
 8004502:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004504:	e002      	b.n	800450c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	74fb      	strb	r3, [r7, #19]
        break;
 800450a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2b0f      	cmp	r3, #15
 8004510:	d916      	bls.n	8004540 <UART_SetConfig+0x590>
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004518:	d212      	bcs.n	8004540 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	b29b      	uxth	r3, r3
 800451e:	f023 030f 	bic.w	r3, r3, #15
 8004522:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	085b      	lsrs	r3, r3, #1
 8004528:	b29b      	uxth	r3, r3
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	b29a      	uxth	r2, r3
 8004530:	897b      	ldrh	r3, [r7, #10]
 8004532:	4313      	orrs	r3, r2
 8004534:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	897a      	ldrh	r2, [r7, #10]
 800453c:	60da      	str	r2, [r3, #12]
 800453e:	e070      	b.n	8004622 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	74fb      	strb	r3, [r7, #19]
 8004544:	e06d      	b.n	8004622 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8004546:	7efb      	ldrb	r3, [r7, #27]
 8004548:	2b08      	cmp	r3, #8
 800454a:	d859      	bhi.n	8004600 <UART_SetConfig+0x650>
 800454c:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <UART_SetConfig+0x5a4>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	08004579 	.word	0x08004579
 8004558:	08004595 	.word	0x08004595
 800455c:	080045b1 	.word	0x080045b1
 8004560:	08004601 	.word	0x08004601
 8004564:	080045cd 	.word	0x080045cd
 8004568:	08004601 	.word	0x08004601
 800456c:	08004601 	.word	0x08004601
 8004570:	08004601 	.word	0x08004601
 8004574:	080045e9 	.word	0x080045e9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004578:	f7fe fc0a 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 800457c:	4602      	mov	r2, r0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	441a      	add	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	fbb2 f3f3 	udiv	r3, r2, r3
 800458e:	b29b      	uxth	r3, r3
 8004590:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004592:	e038      	b.n	8004606 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004594:	f7fe fc12 	bl	8002dbc <HAL_RCC_GetPCLK2Freq>
 8004598:	4602      	mov	r2, r0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	085b      	lsrs	r3, r3, #1
 80045a0:	441a      	add	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045ae:	e02a      	b.n	8004606 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	085b      	lsrs	r3, r3, #1
 80045b6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80045ba:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6852      	ldr	r2, [r2, #4]
 80045c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045ca:	e01c      	b.n	8004606 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80045cc:	f7fe fb4a 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 80045d0:	4602      	mov	r2, r0
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	085b      	lsrs	r3, r3, #1
 80045d8:	441a      	add	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045e6:	e00e      	b.n	8004606 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	085b      	lsrs	r3, r3, #1
 80045ee:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045fe:	e002      	b.n	8004606 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	74fb      	strb	r3, [r7, #19]
        break;
 8004604:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2b0f      	cmp	r3, #15
 800460a:	d908      	bls.n	800461e <UART_SetConfig+0x66e>
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004612:	d204      	bcs.n	800461e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	60da      	str	r2, [r3, #12]
 800461c:	e001      	b.n	8004622 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800462e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3720      	adds	r7, #32
 8004634:	46bd      	mov	sp, r7
 8004636:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800463a:	bf00      	nop
 800463c:	f4240000 	.word	0xf4240000

08004640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01a      	beq.n	8004756 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800473e:	d10a      	bne.n	8004756 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af02      	add	r7, sp, #8
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004792:	f7fb ff59 	bl	8000648 <HAL_GetTick>
 8004796:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d10e      	bne.n	80047c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f82a 	bl	800480e <UART_WaitOnFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e020      	b.n	8004806 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d10e      	bne.n	80047f0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f814 	bl	800480e <UART_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e00a      	b.n	8004806 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2220      	movs	r2, #32
 80047f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	603b      	str	r3, [r7, #0]
 800481a:	4613      	mov	r3, r2
 800481c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800481e:	e02a      	b.n	8004876 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004826:	d026      	beq.n	8004876 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004828:	f7fb ff0e 	bl	8000648 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	429a      	cmp	r2, r3
 8004836:	d302      	bcc.n	800483e <UART_WaitOnFlagUntilTimeout+0x30>
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d11b      	bne.n	8004876 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800484c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2220      	movs	r2, #32
 8004862:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e00f      	b.n	8004896 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4013      	ands	r3, r2
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	429a      	cmp	r2, r3
 8004884:	bf0c      	ite	eq
 8004886:	2301      	moveq	r3, #1
 8004888:	2300      	movne	r3, #0
 800488a:	b2db      	uxtb	r3, r3
 800488c:	461a      	mov	r2, r3
 800488e:	79fb      	ldrb	r3, [r7, #7]
 8004890:	429a      	cmp	r2, r3
 8004892:	d0c5      	beq.n	8004820 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048b4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0201 	bic.w	r2, r2, #1
 80048c4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7ff fb4d 	bl	8003f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004902:	bf00      	nop
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b082      	sub	sp, #8
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004920:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7ff fb2a 	bl	8003f88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800494a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004950:	2b22      	cmp	r3, #34	; 0x22
 8004952:	d13a      	bne.n	80049ca <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800495a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800495c:	89bb      	ldrh	r3, [r7, #12]
 800495e:	b2d9      	uxtb	r1, r3
 8004960:	89fb      	ldrh	r3, [r7, #14]
 8004962:	b2da      	uxtb	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	400a      	ands	r2, r1
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d123      	bne.n	80049de <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049a4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0201 	bic.w	r2, r2, #1
 80049b4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f974 	bl	8004cb0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049c8:	e009      	b.n	80049de <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	8b1b      	ldrh	r3, [r3, #24]
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0208 	orr.w	r2, r2, #8
 80049da:	b292      	uxth	r2, r2
 80049dc:	831a      	strh	r2, [r3, #24]
}
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80049f4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049fa:	2b22      	cmp	r3, #34	; 0x22
 80049fc:	d13a      	bne.n	8004a74 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a04:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a0c:	89ba      	ldrh	r2, [r7, #12]
 8004a0e:	89fb      	ldrh	r3, [r7, #14]
 8004a10:	4013      	ands	r3, r2
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1c:	1c9a      	adds	r2, r3, #2
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d123      	bne.n	8004a88 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a4e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0201 	bic.w	r2, r2, #1
 8004a5e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2220      	movs	r2, #32
 8004a64:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f91f 	bl	8004cb0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a72:	e009      	b.n	8004a88 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	8b1b      	ldrh	r3, [r3, #24]
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0208 	orr.w	r2, r2, #8
 8004a84:	b292      	uxth	r2, r2
 8004a86:	831a      	strh	r2, [r3, #24]
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <RSTCtrl_Sigfox>:


UART_BufferData_t UART_RX;


void RSTCtrl_Sigfox(uint8_t sValue){
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	71fb      	strb	r3, [r7, #7]
	if(sValue) HAL_GPIO_WritePin(GPIOB, Gpio2_Bus1_Wakeup_Pin, GPIO_PIN_SET);
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <RSTCtrl_Sigfox+0x1c>
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	2140      	movs	r1, #64	; 0x40
 8004ab8:	4806      	ldr	r0, [pc, #24]	; (8004ad4 <RSTCtrl_Sigfox+0x30>)
 8004aba:	f7fd fbab 	bl	8002214 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOB, Gpio2_Bus1_Wakeup_Pin, GPIO_PIN_RESET);
}
 8004abe:	e004      	b.n	8004aca <RSTCtrl_Sigfox+0x26>
	else HAL_GPIO_WritePin(GPIOB, Gpio2_Bus1_Wakeup_Pin, GPIO_PIN_RESET);
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2140      	movs	r1, #64	; 0x40
 8004ac4:	4803      	ldr	r0, [pc, #12]	; (8004ad4 <RSTCtrl_Sigfox+0x30>)
 8004ac6:	f7fd fba5 	bl	8002214 <HAL_GPIO_WritePin>
}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	48000400 	.word	0x48000400

08004ad8 <RST2Ctrl_Sigfox>:
void RST2Ctrl_Sigfox(uint8_t sValue){
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	71fb      	strb	r3, [r7, #7]
	if(sValue) HAL_GPIO_WritePin(GPIOB, Gpio3_Bus1_Rst_Pin, GPIO_PIN_SET);
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d006      	beq.n	8004af6 <RST2Ctrl_Sigfox+0x1e>
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004aee:	4807      	ldr	r0, [pc, #28]	; (8004b0c <RST2Ctrl_Sigfox+0x34>)
 8004af0:	f7fd fb90 	bl	8002214 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOB, Gpio3_Bus1_Rst_Pin, GPIO_PIN_RESET);
}
 8004af4:	e005      	b.n	8004b02 <RST2Ctrl_Sigfox+0x2a>
	else HAL_GPIO_WritePin(GPIOB, Gpio3_Bus1_Rst_Pin, GPIO_PIN_RESET);
 8004af6:	2200      	movs	r2, #0
 8004af8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004afc:	4803      	ldr	r0, [pc, #12]	; (8004b0c <RST2Ctrl_Sigfox+0x34>)
 8004afe:	f7fd fb89 	bl	8002214 <HAL_GPIO_WritePin>
}
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	48000400 	.word	0x48000400

08004b10 <PutCharWrapperUart_1>:
	HAL_UART_Transmit(&huart2,(uint8_t*)&c,USART_TX_AMOUNT_BYTES,USART_TIMEOUT);
}


/*Transmitir uart 1 no hal*/
void PutCharWrapperUart_1(void *sp, const char c){
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	70fb      	strb	r3, [r7, #3]
	while((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TC) ? SET : RESET) == RESET) {}
 8004b1c:	bf00      	nop
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <PutCharWrapperUart_1+0x34>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d1f8      	bne.n	8004b1e <PutCharWrapperUart_1+0xe>
	huart2.Instance->TDR = (c & (uint8_t)0xFFU);
 8004b2c:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <PutCharWrapperUart_1+0x34>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	b292      	uxth	r2, r2
 8004b34:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	200004a0 	.word	0x200004a0

08004b48 <PutCharWrapperUart_2>:

void PutCharWrapperUart_2(void *sp, const char c){
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	70fb      	strb	r3, [r7, #3]
	while((__HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_TC) ? SET : RESET) == RESET) {}
 8004b54:	bf00      	nop
 8004b56:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <PutCharWrapperUart_2+0x34>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b60:	2b40      	cmp	r3, #64	; 0x40
 8004b62:	d1f8      	bne.n	8004b56 <PutCharWrapperUart_2+0xe>
	hlpuart1.Instance->TDR = (c & (uint8_t)0xFFU);
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <PutCharWrapperUart_2+0x34>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	b292      	uxth	r2, r2
 8004b6c:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20000358 	.word	0x20000358

08004b80 <PutStringWrapperUart_2>:

void PutStringWrapperUart_2(void *sp, const char *s){
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
	while(*s){
 8004b8a:	e007      	b.n	8004b9c <PutStringWrapperUart_2+0x1c>
		PutCharWrapperUart_2(NULL,*s++);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	603a      	str	r2, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	4619      	mov	r1, r3
 8004b96:	2000      	movs	r0, #0
 8004b98:	f7ff ffd6 	bl	8004b48 <PutCharWrapperUart_2>
	while(*s){
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1f3      	bne.n	8004b8c <PutStringWrapperUart_2+0xc>
	}
}
 8004ba4:	bf00      	nop
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <PrintStringVar>:

/*Tipo de datos*/
tipo_t xtypes;

/*Enviar por tx Debug var ************************************************/
void PrintStringVar(UART_HandleTypeDef *huart,uint8_t *Str, uint16_t  Variable){
 8004bac:	b5b0      	push	{r4, r5, r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	80fb      	strh	r3, [r7, #6]
 8004bba:	466b      	mov	r3, sp
 8004bbc:	461d      	mov	r5, r3
	uint8_t length;
	length = strlen((const char *)(Str) );
 8004bbe:	68b8      	ldr	r0, [r7, #8]
 8004bc0:	f7fb fb06 	bl	80001d0 <strlen>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	77fb      	strb	r3, [r7, #31]
	uint8_t Buf[length];
 8004bc8:	7ff8      	ldrb	r0, [r7, #31]
 8004bca:	4603      	mov	r3, r0
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	61bb      	str	r3, [r7, #24]
 8004bd0:	b2c1      	uxtb	r1, r0
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	f04f 0300 	mov.w	r3, #0
 8004bda:	f04f 0400 	mov.w	r4, #0
 8004bde:	00d4      	lsls	r4, r2, #3
 8004be0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004be4:	00cb      	lsls	r3, r1, #3
 8004be6:	b2c1      	uxtb	r1, r0
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	f04f 0400 	mov.w	r4, #0
 8004bf4:	00d4      	lsls	r4, r2, #3
 8004bf6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004bfa:	00cb      	lsls	r3, r1, #3
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	3307      	adds	r3, #7
 8004c00:	08db      	lsrs	r3, r3, #3
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	ebad 0d03 	sub.w	sp, sp, r3
 8004c08:	466b      	mov	r3, sp
 8004c0a:	3300      	adds	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
	memset((void *)Buf,0,sizeof(Buf));
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	4602      	mov	r2, r0
 8004c12:	2100      	movs	r1, #0
 8004c14:	4618      	mov	r0, r3
 8004c16:	f002 ffed 	bl	8007bf4 <memset>
	sprintf((char *)Buf,(const char *)(Str),Variable);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	88fa      	ldrh	r2, [r7, #6]
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f002 ffef 	bl	8007c04 <siprintf>
	PutStringWrapperUart_2(NULL, Buf);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	f7ff ffa8 	bl	8004b80 <PutStringWrapperUart_2>
 8004c30:	46ad      	mov	sp, r5
	//HAL_UART_Transmit(huart,(uint8_t *)Buf,sizeof(Buf),USART_TIMEOUT);
}
 8004c32:	bf00      	nop
 8004c34:	3720      	adds	r7, #32
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bdb0      	pop	{r4, r5, r7, pc}

08004c3a <PrintString>:
/** Enviar por tx Debug*****************************************************/
void PrintString(UART_HandleTypeDef *huart,uint8_t *pData){
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	6039      	str	r1, [r7, #0]
	//uint8_t length;
	//length = strlen((const char *)(pData) );
	PutStringWrapperUart_2(NULL, pData);
 8004c44:	6839      	ldr	r1, [r7, #0]
 8004c46:	2000      	movs	r0, #0
 8004c48:	f7ff ff9a 	bl	8004b80 <PutStringWrapperUart_2>
	//HAL_UART_Transmit(huart,pData,length,USART_TIMEOUT);
}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <DiscrimateFrameType>:


/** Funcion que decodifica la trama entrante *******************************/
WSSFM1XRX_DL_Return_t DiscrimateFrameType(WSSFM1XRXConfig_t *obj){
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
	uint16_t tempReg;

	/* Discriminate the frame type */
	switch(obj->DL_NumericFrame[WSSFM1XRX_DL_CTRLREG] >> 4){ /* 4 most significant bits */
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b05      	cmp	r3, #5
 8004c68:	d000      	beq.n	8004c6c <DiscrimateFrameType+0x18>
		}

		break;

	default:
		break;
 8004c6a:	e01a      	b.n	8004ca2 <DiscrimateFrameType+0x4e>
		tempReg = (obj->DL_NumericFrame[WSSFM1XRX_DL_TREP] << 8) | obj->DL_NumericFrame[WSSFM1XRX_DL_TREP + 1]; 	/* junto los 2 bytes en 1*/
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	b21a      	sxth	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004c7c:	b21b      	sxth	r3, r3
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	b21b      	sxth	r3, r3
 8004c82:	81fb      	strh	r3, [r7, #14]
		if(tempReg >= WSSFM1XRX_DL_MIN_REPORT_TIME){
 8004c84:	89fb      	ldrh	r3, [r7, #14]
 8004c86:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8004c8a:	d909      	bls.n	8004ca0 <DiscrimateFrameType+0x4c>
			if(tempReg != obj->UL_ReportTimeS){ /*Si el dato es diferente*/
 8004c8c:	89fa      	ldrh	r2, [r7, #14]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d002      	beq.n	8004c9c <DiscrimateFrameType+0x48>
				obj->UL_ReportTimeS = tempReg;
 8004c96:	89fa      	ldrh	r2, [r7, #14]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	621a      	str	r2, [r3, #32]
			return WSSFM1XRX_DL_TIME_OK;
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	e001      	b.n	8004ca4 <DiscrimateFrameType+0x50>
		break;
 8004ca0:	bf00      	nop
	}/* End switch */

	return WSSFM1XRX_DL_SUCCESS;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_UART_RxCpltCallback>:
/*
===================================================================================
		 	 ### Funcion recibe por interrupcion de recepcion
===================================================================================
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]

	//sigfoxISRRX(&SigfoxModule, UART_RX.Data);

	if(huart->Instance == USART2){
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a08      	ldr	r2, [pc, #32]	; (8004ce0 <HAL_UART_RxCpltCallback+0x30>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d10a      	bne.n	8004cd8 <HAL_UART_RxCpltCallback+0x28>
		WSSFM1XRX_ISRRX(&SigfoxModule,UART_RX.Data);  // queda almacenado en  UART_RX.Data;
 8004cc2:	4b08      	ldr	r3, [pc, #32]	; (8004ce4 <HAL_UART_RxCpltCallback+0x34>)
 8004cc4:	7e9b      	ldrb	r3, [r3, #26]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4807      	ldr	r0, [pc, #28]	; (8004ce8 <HAL_UART_RxCpltCallback+0x38>)
 8004cca:	f000 fb65 	bl	8005398 <WSSFM1XRX_ISRRX>
		HAL_UART_Receive_IT( &huart2,(uint8_t *)&UART_RX.Data,USART_RX_AMOUNT_BYTES);
 8004cce:	2201      	movs	r2, #1
 8004cd0:	4906      	ldr	r1, [pc, #24]	; (8004cec <HAL_UART_RxCpltCallback+0x3c>)
 8004cd2:	4807      	ldr	r0, [pc, #28]	; (8004cf0 <HAL_UART_RxCpltCallback+0x40>)
 8004cd4:	f7fe ff86 	bl	8003be4 <HAL_UART_Receive_IT>
	}
}
 8004cd8:	bf00      	nop
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40004400 	.word	0x40004400
 8004ce4:	20000520 	.word	0x20000520
 8004ce8:	20000540 	.word	0x20000540
 8004cec:	2000053a 	.word	0x2000053a
 8004cf0:	200004a0 	.word	0x200004a0

08004cf4 <ProjectInformation>:

void ProjectInformation(void) {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0

	PutStringWrapperUart_2(NULL,"\r\n=========================================\r\n");
 8004cf8:	490e      	ldr	r1, [pc, #56]	; (8004d34 <ProjectInformation+0x40>)
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	f7ff ff40 	bl	8004b80 <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, APP_STRING);
 8004d00:	490d      	ldr	r1, [pc, #52]	; (8004d38 <ProjectInformation+0x44>)
 8004d02:	2000      	movs	r0, #0
 8004d04:	f7ff ff3c 	bl	8004b80 <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, INF_STRING);
 8004d08:	490c      	ldr	r1, [pc, #48]	; (8004d3c <ProjectInformation+0x48>)
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f7ff ff38 	bl	8004b80 <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, REV_STRING);
 8004d10:	490b      	ldr	r1, [pc, #44]	; (8004d40 <ProjectInformation+0x4c>)
 8004d12:	2000      	movs	r0, #0
 8004d14:	f7ff ff34 	bl	8004b80 <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, AUT_STRING);
 8004d18:	490a      	ldr	r1, [pc, #40]	; (8004d44 <ProjectInformation+0x50>)
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	f7ff ff30 	bl	8004b80 <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, URL_STRING);
 8004d20:	4909      	ldr	r1, [pc, #36]	; (8004d48 <ProjectInformation+0x54>)
 8004d22:	2000      	movs	r0, #0
 8004d24:	f7ff ff2c 	bl	8004b80 <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL,"=========================================\r\n\r\n");
 8004d28:	4908      	ldr	r1, [pc, #32]	; (8004d4c <ProjectInformation+0x58>)
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	f7ff ff28 	bl	8004b80 <PutStringWrapperUart_2>
}
 8004d30:	bf00      	nop
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	080085b0 	.word	0x080085b0
 8004d38:	080085e0 	.word	0x080085e0
 8004d3c:	08008618 	.word	0x08008618
 8004d40:	0800863c 	.word	0x0800863c
 8004d44:	0800864c 	.word	0x0800864c
 8004d48:	08008670 	.word	0x08008670
 8004d4c:	08008694 	.word	0x08008694

08004d50 <WSSFM1XRX_Init>:
 * @note Example :
 * 		SigfoxModule.StatusFlag = WSSFM1XRX_Init(&SigfoxModule, RSTCtrl_Sigfox, RST2Ctrl_Sigfox, UART_SIGFOX_TX_STM, UART_SIGFOX_RX_STM ,WSSFM1XRX_UL_RCZ4,NULL,GetTick_ms);
 * @param obj Structure containing all data from the Sigfox module.
 * @return Operation result in the form WSSFM1XRX_Return_t.
 */
WSSFM1XRX_Return_t WSSFM1XRX_Init(WSSFM1XRXConfig_t *obj, DigitalFcn_t Reset, DigitalFcn_t Reset2, TxFnc_t Tx_Wssfm1xrx,WSSFM1XRX_FreqUL_t Frequency_Tx, WSSFM1XRX_Callback_t DownlinkCallback ,TickReadFcn_t TickRead,char* Input , uint8_t SizeInput, uint8_t MaxNumberRetries){
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	603b      	str	r3, [r7, #0]
	obj->RST=Reset;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	601a      	str	r2, [r3, #0]
	obj->RST2=Reset2;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	605a      	str	r2, [r3, #4]
	obj->TX_WSSFM1XRX=Tx_Wssfm1xrx;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	609a      	str	r2, [r3, #8]
	obj->CallbackDownlink = DownlinkCallback;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	611a      	str	r2, [r3, #16]
	obj->TICK_READ = TickRead;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a3a      	ldr	r2, [r7, #32]
 8004d7a:	60da      	str	r2, [r3, #12]
	obj->RxReady=SF_FALSE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	765a      	strb	r2, [r3, #25]
	obj->RxIndex=0;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	769a      	strb	r2, [r3, #26]
	obj->Frequency=Frequency_Tx;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	7e3a      	ldrb	r2, [r7, #24]
 8004d8c:	771a      	strb	r2, [r3, #28]
	obj->RxFrame = Input; 
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d92:	615a      	str	r2, [r3, #20]
	obj->SizeBuffRx = SizeInput;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004d9a:	761a      	strb	r2, [r3, #24]
	obj->State_Api = WSSFM1XRX_IDLE; /**/
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	obj->State_W = WSSFM1XRX_W_IDLE; /*State Idle function Wait non blocking*/
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	memset( (void *) obj->RxFrame,0,obj->SizeBuffRx);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6958      	ldr	r0, [r3, #20]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	7e1b      	ldrb	r3, [r3, #24]
 8004db4:	461a      	mov	r2, r3
 8004db6:	2100      	movs	r1, #0
 8004db8:	f002 ff1c 	bl	8007bf4 <memset>
	obj->MaxNumberRetries = MaxNumberRetries;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004dc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	return WSSFM1XRX_INIT_OK;
 8004dc6:	2305      	movs	r3, #5
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <WSSFM1XRX_Wait_NonBlock>:
 * @param time in mili second.
 * @return Operation result in the form WSSFM1XRX_Return_t:
 * 			<< WSSFM1XRX_TIMEOUT >> if the time has expired
 * 			<< WSSFM1XRX_WAITING >> if the time has not expired
 */
WSSFM1XRX_Return_t WSSFM1XRX_Wait_NonBlock(WSSFM1XRXConfig_t *obj, uint32_t msec){
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
	static uint8_t RetValue;
	static uint32_t WSSFM1XRX_StartTick = 0;
	if(obj->State_W == WSSFM1XRX_W_IDLE ){
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d10f      	bne.n	8004e04 <WSSFM1XRX_Wait_NonBlock+0x34>
		RetValue = WSSFM1XRX_WAITING ;
 8004de4:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <WSSFM1XRX_Wait_NonBlock+0x74>)
 8004de6:	2201      	movs	r2, #1
 8004de8:	701a      	strb	r2, [r3, #0]
		WSSFM1XRX_StartTick = 0;
 8004dea:	4b17      	ldr	r3, [pc, #92]	; (8004e48 <WSSFM1XRX_Wait_NonBlock+0x78>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
		WSSFM1XRX_StartTick = obj->TICK_READ() ;/*tickRead_ms();*/
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	4798      	blx	r3
 8004df6:	4602      	mov	r2, r0
 8004df8:	4b13      	ldr	r3, [pc, #76]	; (8004e48 <WSSFM1XRX_Wait_NonBlock+0x78>)
 8004dfa:	601a      	str	r2, [r3, #0]
		obj->State_W = WSSFM1XRX_W_RUNNING ;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2203      	movs	r2, #3
 8004e00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
	if( ( obj->TICK_READ() - WSSFM1XRX_StartTick) > msec ){ 
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	4798      	blx	r3
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <WSSFM1XRX_Wait_NonBlock+0x78>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d20b      	bcs.n	8004e30 <WSSFM1XRX_Wait_NonBlock+0x60>
		obj->State_W = WSSFM1XRX_W_IDLE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		obj->State_Api = WSSFM1XRX_IDLE; /*Cuando vence el tiempo mando el comando de nuevo*/
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		RetValue = WSSFM1XRX_TIMEOUT ;
 8004e28:	4b06      	ldr	r3, [pc, #24]	; (8004e44 <WSSFM1XRX_Wait_NonBlock+0x74>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	e002      	b.n	8004e36 <WSSFM1XRX_Wait_NonBlock+0x66>
	}else RetValue = WSSFM1XRX_WAITING;
 8004e30:	4b04      	ldr	r3, [pc, #16]	; (8004e44 <WSSFM1XRX_Wait_NonBlock+0x74>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	701a      	strb	r2, [r3, #0]
	return RetValue;
 8004e36:	4b03      	ldr	r3, [pc, #12]	; (8004e44 <WSSFM1XRX_Wait_NonBlock+0x74>)
 8004e38:	781b      	ldrb	r3, [r3, #0]

}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	2000024f 	.word	0x2000024f
 8004e48:	20000250 	.word	0x20000250

08004e4c <WSSFM1XRX_Wait_Block>:
 * @param obj Structure containing all data from the Wisol module.	
 * @param time in mili second.
 * @return Operation result in the form WSSFM1XRX_Return_t:
 * 			<< WSSFM1XRX_TIMEOUT >> if the time has expired
 */
WSSFM1XRX_Return_t WSSFM1XRX_Wait_Block(WSSFM1XRXConfig_t *obj, uint32_t msec){
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
	while( WSSFM1XRX_WAITING == WSSFM1XRX_Wait_NonBlock(obj, msec) ){
 8004e56:	bf00      	nop
 8004e58:	6839      	ldr	r1, [r7, #0]
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff ffb8 	bl	8004dd0 <WSSFM1XRX_Wait_NonBlock>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d0f8      	beq.n	8004e58 <WSSFM1XRX_Wait_Block+0xc>
	}
	return WSSFM1XRX_TIMEOUT ;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <WSSFM1XRX_Sleep>:
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return WSSFM1XRX_Return_t.
 * 			<< WSSFM1XRX_OK_RESPONSE >> If response expected is the correct
 * 			<< WSSFM1XRX_RSP_NOMATCH >> If response expected is not correct
 */
WSSFM1XRX_Return_t WSSFM1XRX_Sleep(WSSFM1XRXConfig_t *obj ,WSSFM1XRX_WaitMode_t Wait ){
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af02      	add	r7, sp, #8
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
	obj->RST(1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2001      	movs	r0, #1
 8004e80:	4798      	blx	r3
	obj->RST2(1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2001      	movs	r0, #1
 8004e88:	4798      	blx	r3
	return WSSFM1XRX_SendRawMessage(obj,"AT$P=2\r","OK",NULL,Wait,WSSFM1XRX_SLEEP_TIME_DELAY_RESP); 
 8004e8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004e8e:	9301      	str	r3, [sp, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	2300      	movs	r3, #0
 8004e96:	4a05      	ldr	r2, [pc, #20]	; (8004eac <WSSFM1XRX_Sleep+0x3c>)
 8004e98:	4905      	ldr	r1, [pc, #20]	; (8004eb0 <WSSFM1XRX_Sleep+0x40>)
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fa24 	bl	80052e8 <WSSFM1XRX_SendRawMessage>
 8004ea0:	4603      	mov	r3, r0

}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	0800873c 	.word	0x0800873c
 8004eb0:	08008740 	.word	0x08008740

08004eb4 <WSSFM1XRX_WakeUP>:
 * 		WSSFM1XRX_WakeUP(&SigfoxModule,Wait);
 * @param obj Structure containing all data from the Wisol module.
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return void.
 */
WSSFM1XRX_Return_t WSSFM1XRX_WakeUP(WSSFM1XRXConfig_t *obj ,WSSFM1XRX_WaitMode_t Wait  ) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
	static WSSFM1XRX_Return_t RetValue = WSSFM1XRX_NONE, RetValueAux = WSSFM1XRX_NONE;  
	if( WSSFM1XRX_NONE ==  RetValueAux ) {
 8004ebe:	4b14      	ldr	r3, [pc, #80]	; (8004f10 <WSSFM1XRX_WakeUP+0x5c>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d106      	bne.n	8004ed4 <WSSFM1XRX_WakeUP+0x20>
		obj->RST(SF_FALSE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2000      	movs	r0, #0
 8004ecc:	4798      	blx	r3
		RetValueAux = WSSFM1XRX_WAITING;
 8004ece:	4b10      	ldr	r3, [pc, #64]	; (8004f10 <WSSFM1XRX_WakeUP+0x5c>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	701a      	strb	r2, [r3, #0]
	}
	RetValue =  Wait(obj,WSSFM1XRX_WAKEUP_TIME_DELAY_PULSE); /*Return WAITING or TIMEOUT*/
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2164      	movs	r1, #100	; 0x64
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	4798      	blx	r3
 8004edc:	4603      	mov	r3, r0
 8004ede:	461a      	mov	r2, r3
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <WSSFM1XRX_WakeUP+0x60>)
 8004ee2:	701a      	strb	r2, [r3, #0]

	if(WSSFM1XRX_TIMEOUT == RetValue) {
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <WSSFM1XRX_WakeUP+0x60>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <WSSFM1XRX_WakeUP+0x4e>
		obj->RST(SF_TRUE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2001      	movs	r0, #1
 8004ef2:	4798      	blx	r3
		obj->RST2(SF_TRUE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2001      	movs	r0, #1
 8004efa:	4798      	blx	r3
		RetValueAux = WSSFM1XRX_NONE;
 8004efc:	4b04      	ldr	r3, [pc, #16]	; (8004f10 <WSSFM1XRX_WakeUP+0x5c>)
 8004efe:	2204      	movs	r2, #4
 8004f00:	701a      	strb	r2, [r3, #0]
	}
	/*Wait after exit low-power mode*/
	return  RetValue;
 8004f02:	4b04      	ldr	r3, [pc, #16]	; (8004f14 <WSSFM1XRX_WakeUP+0x60>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000020 	.word	0x20000020
 8004f14:	20000021 	.word	0x20000021

08004f18 <WSSFM1XRX_ResetModule>:
 * 		WSSFM1XRX_ResetModule(&SigfoxModule,Wait);
 * @param obj Structure containing all data from the Wisol module.
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return void.
 */
WSSFM1XRX_Return_t WSSFM1XRX_ResetModule(WSSFM1XRXConfig_t *obj ,WSSFM1XRX_WaitMode_t Wait  ){
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]

	static WSSFM1XRX_Return_t RetValue = WSSFM1XRX_NONE, RetValueAux = WSSFM1XRX_NONE;
	if( WSSFM1XRX_NONE ==  RetValueAux ) {
 8004f22:	4b16      	ldr	r3, [pc, #88]	; (8004f7c <WSSFM1XRX_ResetModule+0x64>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d109      	bne.n	8004f3e <WSSFM1XRX_ResetModule+0x26>
		WSSFM1XRX_ResetObject(obj);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fabb 	bl	80054a6 <WSSFM1XRX_ResetObject>
 		obj->RST2(SF_FALSE);  /*Reset*/
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2000      	movs	r0, #0
 8004f36:	4798      	blx	r3
		RetValueAux = WSSFM1XRX_WAITING;
 8004f38:	4b10      	ldr	r3, [pc, #64]	; (8004f7c <WSSFM1XRX_ResetModule+0x64>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	701a      	strb	r2, [r3, #0]
	}
	RetValue =  Wait(obj,WSSFM1XRX_SLEEP_TIME_RESET); /*Return WAITING or TIMEOUT*/
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	4798      	blx	r3
 8004f48:	4603      	mov	r3, r0
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <WSSFM1XRX_ResetModule+0x68>)
 8004f4e:	701a      	strb	r2, [r3, #0]

	if(WSSFM1XRX_TIMEOUT == RetValue) {
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <WSSFM1XRX_ResetModule+0x68>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <WSSFM1XRX_ResetModule+0x56>
		obj->RST(SF_TRUE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	4798      	blx	r3
		obj->RST2(SF_TRUE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2001      	movs	r0, #1
 8004f66:	4798      	blx	r3
		RetValueAux = WSSFM1XRX_NONE;
 8004f68:	4b04      	ldr	r3, [pc, #16]	; (8004f7c <WSSFM1XRX_ResetModule+0x64>)
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	701a      	strb	r2, [r3, #0]
	}
	/*Wait despues de salir del modo de bajo consumo*/
	return  RetValue;
 8004f6e:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <WSSFM1XRX_ResetModule+0x68>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000022 	.word	0x20000022
 8004f80:	20000023 	.word	0x20000023

08004f84 <WSSFM1XRX_CheckModule>:
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return WSSFM1XRX_Return_t.
 * 			<< WSSFM1XRX_OK_RESPONSE >> If response expected is the correct
 * 			<< WSSFM1XRX_RSP_NOMATCH >> If response expected is not correct
 */
WSSFM1XRX_Return_t WSSFM1XRX_CheckModule(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait ){
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
	return WSSFM1XRX_SendRawMessage(obj,"AT\r","OK",NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP); 
 8004f8e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004f92:	9301      	str	r3, [sp, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	2300      	movs	r3, #0
 8004f9a:	4a05      	ldr	r2, [pc, #20]	; (8004fb0 <WSSFM1XRX_CheckModule+0x2c>)
 8004f9c:	4905      	ldr	r1, [pc, #20]	; (8004fb4 <WSSFM1XRX_CheckModule+0x30>)
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f9a2 	bl	80052e8 <WSSFM1XRX_SendRawMessage>
 8004fa4:	4603      	mov	r3, r0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	0800873c 	.word	0x0800873c
 8004fb4:	08008748 	.word	0x08008748

08004fb8 <WSSFM1XRX_GetID>:
 * @return WSSFM1XRX_Return_t
 * 			WSSFM1XRX_OK_RESPONSE
 * 			WSSFM1XRX_FAILURE
 * 			WSSFM1XRX_WAITING
 */
WSSFM1XRX_Return_t WSSFM1XRX_GetID(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait,char *IDStr){
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
	return 	WSSFM1XRX_GetRespNoexpected(obj,Wait,"AT$I=10\r",IDStr);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a05      	ldr	r2, [pc, #20]	; (8004fdc <WSSFM1XRX_GetID+0x24>)
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 fb11 	bl	80055f2 <WSSFM1XRX_GetRespNoexpected>
 8004fd0:	4603      	mov	r3, r0

	/*return NULL;*/
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	0800874c 	.word	0x0800874c

08004fe0 <WSSFM1XRX_GetPAC>:
 * @return WSSFM1XRX_Return_t
 * 			WSSFM1XRX_OK_RESPONSE
 * 			WSSFM1XRX_FAILURE
 * 			WSSFM1XRX_WAITING
 */
WSSFM1XRX_Return_t WSSFM1XRX_GetPAC(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait,char *PACStr ){
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
	return 	WSSFM1XRX_GetRespNoexpected(obj,Wait,"AT$I=11\r",PACStr);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a05      	ldr	r2, [pc, #20]	; (8005004 <WSSFM1XRX_GetPAC+0x24>)
 8004ff0:	68b9      	ldr	r1, [r7, #8]
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 fafd 	bl	80055f2 <WSSFM1XRX_GetRespNoexpected>
 8004ff8:	4603      	mov	r3, r0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	08008758 	.word	0x08008758

08005008 <WSSFM1XRX_GetVoltage>:
 * @return WSSFM1XRX_Return_t
 * 			WSSFM1XRX_OK_RESPONSE
 * 			WSSFM1XRX_FAILURE
 * 			WSSFM1XRX_WAITING
 */
WSSFM1XRX_Return_t WSSFM1XRX_GetVoltage(WSSFM1XRXConfig_t *obj, WSSFM1XRX_WaitMode_t Wait,uint16_t *mVolt ){
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
	char mVolStr[10]; /*Stored stringmV*/
	char *ptr = NULL;
 8005014:	2300      	movs	r3, #0
 8005016:	613b      	str	r3, [r7, #16]
	WSSFM1XRX_Return_t RetValue;

	RetValue =	WSSFM1XRX_GetRespNoexpected(obj,Wait,"AT$V?\r",mVolStr);
 8005018:	f107 0314 	add.w	r3, r7, #20
 800501c:	4a0b      	ldr	r2, [pc, #44]	; (800504c <WSSFM1XRX_GetVoltage+0x44>)
 800501e:	68b9      	ldr	r1, [r7, #8]
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 fae6 	bl	80055f2 <WSSFM1XRX_GetRespNoexpected>
 8005026:	4603      	mov	r3, r0
 8005028:	77fb      	strb	r3, [r7, #31]
	*mVolt = strtol((const char*)mVolStr , &ptr ,BASE_DECIMAL);
 800502a:	f107 0110 	add.w	r1, r7, #16
 800502e:	f107 0314 	add.w	r3, r7, #20
 8005032:	220a      	movs	r2, #10
 8005034:	4618      	mov	r0, r3
 8005036:	f002 feaf 	bl	8007d98 <strtol>
 800503a:	4603      	mov	r3, r0
 800503c:	b29a      	uxth	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	801a      	strh	r2, [r3, #0]
	return RetValue;
 8005042:	7ffb      	ldrb	r3, [r7, #31]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3720      	adds	r7, #32
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	08008764 	.word	0x08008764

08005050 <WSSFM1XRX_AskChannels>:
 * 		WSSFM1XRX_AskChannels(&SigfoxModule);
 * @param obj Structure containing all data from the Sigfox module.
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return Pointer to reception buffer
 */
WSSFM1XRX_Return_t WSSFM1XRX_AskChannels(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait,Channels_t *Channels ){
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af02      	add	r7, sp, #8
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
	WSSFM1XRX_Return_t RetVal ;
	char* rspPtr;
	RetVal = WSSFM1XRX_SendRawMessage(obj,"AT$GI?\r",NULL,NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP);
 800505c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	2300      	movs	r3, #0
 8005068:	2200      	movs	r2, #0
 800506a:	4913      	ldr	r1, [pc, #76]	; (80050b8 <WSSFM1XRX_AskChannels+0x68>)
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 f93b 	bl	80052e8 <WSSFM1XRX_SendRawMessage>
 8005072:	4603      	mov	r3, r0
 8005074:	75fb      	strb	r3, [r7, #23]

	if(WSSFM1XRX_OK_RESPONSE == RetVal){
 8005076:	7dfb      	ldrb	r3, [r7, #23]
 8005078:	2b03      	cmp	r3, #3
 800507a:	d117      	bne.n	80050ac <WSSFM1XRX_AskChannels+0x5c>
		rspPtr=strchr( ((const char *)obj->RxFrame) , ',');
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	212c      	movs	r1, #44	; 0x2c
 8005082:	4618      	mov	r0, r3
 8005084:	f002 fdde 	bl	8007c44 <strchr>
 8005088:	6138      	str	r0, [r7, #16]
		if(rspPtr != NULL){
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00d      	beq.n	80050ac <WSSFM1XRX_AskChannels+0x5c>
			Channels->x = (*(rspPtr-1))-'0';
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	3b01      	subs	r3, #1
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	3b30      	subs	r3, #48	; 0x30
 8005098:	b2da      	uxtb	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	701a      	strb	r2, [r3, #0]
			Channels->y = (*(rspPtr+1))-'0';
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	3301      	adds	r3, #1
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	3b30      	subs	r3, #48	; 0x30
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	705a      	strb	r2, [r3, #1]
		}
	}
	return RetVal;
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	0800876c 	.word	0x0800876c

080050bc <WSSFM1XRX_CheckChannels>:
 * @return Operation result in the form WSSFM1XRX_Return_t.
 * 			WSSFM1XRX_CHANN_NO_OK   : se debe resetear canales
 *			WSSFM1XRX_CHANN_OK      : No se resetea canales
 */
/*hacer getchannels */
WSSFM1XRX_Return_t WSSFM1XRX_CheckChannels(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait ){
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
	Channels_t Channels ={0,0};
 80050c6:	2300      	movs	r3, #0
 80050c8:	733b      	strb	r3, [r7, #12]
 80050ca:	2300      	movs	r3, #0
 80050cc:	737b      	strb	r3, [r7, #13]
	WSSFM1XRX_Return_t retval;
	retval = WSSFM1XRX_AskChannels(obj,Wait,&Channels);
 80050ce:	f107 030c 	add.w	r3, r7, #12
 80050d2:	461a      	mov	r2, r3
 80050d4:	6839      	ldr	r1, [r7, #0]
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff ffba 	bl	8005050 <WSSFM1XRX_AskChannels>
 80050dc:	4603      	mov	r3, r0
 80050de:	73fb      	strb	r3, [r7, #15]

	if(WSSFM1XRX_OK_RESPONSE == retval){
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d109      	bne.n	80050fa <WSSFM1XRX_CheckChannels+0x3e>
		retval = (Channels.x == 0 || Channels.y < 3) ? WSSFM1XRX_CHANN_NO_OK : WSSFM1XRX_CHANN_OK;
 80050e6:	7b3b      	ldrb	r3, [r7, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <WSSFM1XRX_CheckChannels+0x36>
 80050ec:	7b7b      	ldrb	r3, [r7, #13]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d801      	bhi.n	80050f6 <WSSFM1XRX_CheckChannels+0x3a>
 80050f2:	2308      	movs	r3, #8
 80050f4:	e000      	b.n	80050f8 <WSSFM1XRX_CheckChannels+0x3c>
 80050f6:	2307      	movs	r3, #7
 80050f8:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <WSSFM1XRX_ResetChannels>:
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return WSSFM1XRX_Return_t.
 * 			<< WSSFM1XRX_OK_RESPONSE >> If response expected is the correct
 * 			<< WSSFM1XRX_RSP_NOMATCH >> If response expected is not correct 
 **/
WSSFM1XRX_Return_t WSSFM1XRX_ResetChannels(WSSFM1XRXConfig_t *obj, WSSFM1XRX_WaitMode_t Wait ){
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af02      	add	r7, sp, #8
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
	return WSSFM1XRX_SendRawMessage(obj,"AT$RC\r","OK",NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP); 
 800510e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	2300      	movs	r3, #0
 800511a:	4a05      	ldr	r2, [pc, #20]	; (8005130 <WSSFM1XRX_ResetChannels+0x2c>)
 800511c:	4905      	ldr	r1, [pc, #20]	; (8005134 <WSSFM1XRX_ResetChannels+0x30>)
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f8e2 	bl	80052e8 <WSSFM1XRX_SendRawMessage>
 8005124:	4603      	mov	r3, r0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	0800873c 	.word	0x0800873c
 8005134:	08008774 	.word	0x08008774

08005138 <WSSFM1XRX_ChangeFrequencyUL>:
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return WSSFM1XRX_Return_t.
 * 			<< WSSFM1XRX_OK_RESPONSE >> If response expected is the correct
 * 			<< WSSFM1XRX_RSP_NOMATCH >> If response expected is not correct 
 * */
WSSFM1XRX_Return_t WSSFM1XRX_ChangeFrequencyUL(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait , WSSFM1XRX_FreqUL_t Frequency){	
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	4613      	mov	r3, r2
 8005144:	71fb      	strb	r3, [r7, #7]
	return WSSFM1XRX_SendRawMessage(obj, (char*)WSSFM1XRX_UL_FREQUENCIES[Frequency]  ,"OK",NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP); 
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	4a08      	ldr	r2, [pc, #32]	; (800516c <WSSFM1XRX_ChangeFrequencyUL+0x34>)
 800514a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800514e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	2300      	movs	r3, #0
 800515a:	4a05      	ldr	r2, [pc, #20]	; (8005170 <WSSFM1XRX_ChangeFrequencyUL+0x38>)
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f8c3 	bl	80052e8 <WSSFM1XRX_SendRawMessage>
 8005162:	4603      	mov	r3, r0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	20000008 	.word	0x20000008
 8005170:	0800873c 	.word	0x0800873c

08005174 <WSSFM1XRX_SaveParameters>:
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return WSSFM1XRX_Return_t.
 * 			<< WSSFM1XRX_OK_RESPONSE >> If response expected is the correct
 * 			<< WSSFM1XRX_RSP_NOMATCH >> If response expected is not correct 
 * */
WSSFM1XRX_Return_t WSSFM1XRX_SaveParameters(WSSFM1XRXConfig_t *obj, WSSFM1XRX_WaitMode_t Wait ){
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af02      	add	r7, sp, #8
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
	return WSSFM1XRX_SendRawMessage(obj,"AT$WR\r","OK",NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP); 
 800517e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005182:	9301      	str	r3, [sp, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	2300      	movs	r3, #0
 800518a:	4a05      	ldr	r2, [pc, #20]	; (80051a0 <WSSFM1XRX_SaveParameters+0x2c>)
 800518c:	4905      	ldr	r1, [pc, #20]	; (80051a4 <WSSFM1XRX_SaveParameters+0x30>)
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f8aa 	bl	80052e8 <WSSFM1XRX_SendRawMessage>
 8005194:	4603      	mov	r3, r0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	0800873c 	.word	0x0800873c
 80051a4:	08008784 	.word	0x08008784

080051a8 <WSSFM1XRX_SendMessage>:
 * @return WSSFM1XRX_Return_t.
 * 			<< WSSFM1XRX_OK_RESPONSE >> If response expected is the correct
 * 			<< WSSFM1XRX_RSP_NOMATCH >> If response expected is not correct 
 *
 */
WSSFM1XRX_Return_t WSSFM1XRX_SendMessage(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait, void* data, void * CopyDataTx ,uint8_t size, uint8_t eDownlink){
 80051a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051aa:	b093      	sub	sp, #76	; 0x4c
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
	WSSFM1XRX_Return_t RetValue;
	uint8_t slen = 2*size + 6;
 80051b6:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80051ba:	3303      	adds	r3, #3
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	char UplinkPayload[WSSFM1XRX_MAX_DATA_SIZE_WITH_DL] = "AT$SF="; /*max length frame with downlink*/
 80051c4:	4a46      	ldr	r2, [pc, #280]	; (80052e0 <WSSFM1XRX_SendMessage+0x138>)
 80051c6:	f107 0310 	add.w	r3, r7, #16
 80051ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051ce:	6018      	str	r0, [r3, #0]
 80051d0:	3304      	adds	r3, #4
 80051d2:	8019      	strh	r1, [r3, #0]
 80051d4:	3302      	adds	r3, #2
 80051d6:	0c0a      	lsrs	r2, r1, #16
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	f107 0317 	add.w	r3, r7, #23
 80051de:	221e      	movs	r2, #30
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f002 fd06 	bl	8007bf4 <memset>
	uint32_t timeWait = WSSFM1XRX_SEND_MESSAGE_TIME_DELAY_RESP;
 80051e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80051ec:	63bb      	str	r3, [r7, #56]	; 0x38
	WSSFM1XRX_BuildFrame(UplinkPayload+6, data, size);
 80051ee:	f107 0310 	add.w	r3, r7, #16
 80051f2:	3306      	adds	r3, #6
 80051f4:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f970 	bl	80054e0 <WSSFM1XRX_BuildFrame>
	if(( obj->State_Api == WSSFM1XRX_IDLE)){
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005206:	2b00      	cmp	r3, #0
 8005208:	d103      	bne.n	8005212 <WSSFM1XRX_SendMessage+0x6a>

		obj->DownLink = eDownlink;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8005210:	775a      	strb	r2, [r3, #29]
	}
	//qTraceDecimal(obj->DownLink);
	if(obj->DownLink){
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	7f5b      	ldrb	r3, [r3, #29]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d021      	beq.n	800525e <WSSFM1XRX_SendMessage+0xb6>
		UplinkPayload[slen++]=',';
 800521a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8005224:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005228:	4413      	add	r3, r2
 800522a:	222c      	movs	r2, #44	; 0x2c
 800522c:	f803 2c30 	strb.w	r2, [r3, #-48]
		UplinkPayload[slen++]='1';
 8005230:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800523a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800523e:	4413      	add	r3, r2
 8005240:	2231      	movs	r2, #49	; 0x31
 8005242:	f803 2c30 	strb.w	r2, [r3, #-48]
		UplinkPayload[slen++]='\r';
 8005246:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8005250:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005254:	4413      	add	r3, r2
 8005256:	220d      	movs	r2, #13
 8005258:	f803 2c30 	strb.w	r2, [r3, #-48]
 800525c:	e007      	b.n	800526e <WSSFM1XRX_SendMessage+0xc6>
	}
	else{
		UplinkPayload[slen]='\r';
 800525e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005262:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005266:	4413      	add	r3, r2
 8005268:	220d      	movs	r2, #13
 800526a:	f803 2c30 	strb.w	r2, [r3, #-48]
	}
//	qTraceMessage(UplinkPayload);
	if(CopyDataTx != NULL ) memcpy(CopyDataTx,UplinkPayload,37);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d017      	beq.n	80052a4 <WSSFM1XRX_SendMessage+0xfc>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	f107 0410 	add.w	r4, r7, #16
 800527a:	469c      	mov	ip, r3
 800527c:	f104 0e20 	add.w	lr, r4, #32
 8005280:	4665      	mov	r5, ip
 8005282:	4626      	mov	r6, r4
 8005284:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005286:	6028      	str	r0, [r5, #0]
 8005288:	6069      	str	r1, [r5, #4]
 800528a:	60aa      	str	r2, [r5, #8]
 800528c:	60eb      	str	r3, [r5, #12]
 800528e:	3410      	adds	r4, #16
 8005290:	f10c 0c10 	add.w	ip, ip, #16
 8005294:	4574      	cmp	r4, lr
 8005296:	d1f3      	bne.n	8005280 <WSSFM1XRX_SendMessage+0xd8>
 8005298:	4663      	mov	r3, ip
 800529a:	4622      	mov	r2, r4
 800529c:	6810      	ldr	r0, [r2, #0]
 800529e:	6018      	str	r0, [r3, #0]
 80052a0:	7912      	ldrb	r2, [r2, #4]
 80052a2:	711a      	strb	r2, [r3, #4]
	timeWait = eDownlink ? WSSFM1XRX_DL_TIMEOUT : WSSFM1XRX_SEND_MESSAGE_TIME_DELAY_RESP; /*WSSFM1XRX_DL_TIMEOUT*/
 80052a4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <WSSFM1XRX_SendMessage+0x10a>
 80052ac:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 80052b0:	e001      	b.n	80052b6 <WSSFM1XRX_SendMessage+0x10e>
 80052b2:	f241 7370 	movw	r3, #6000	; 0x1770
 80052b6:	63bb      	str	r3, [r7, #56]	; 0x38
	RetValue = WSSFM1XRX_SendRawMessage(obj, UplinkPayload, "OK", NULL, Wait, timeWait);
 80052b8:	f107 0110 	add.w	r1, r7, #16
 80052bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052be:	9301      	str	r3, [sp, #4]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	2300      	movs	r3, #0
 80052c6:	4a07      	ldr	r2, [pc, #28]	; (80052e4 <WSSFM1XRX_SendMessage+0x13c>)
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f80d 	bl	80052e8 <WSSFM1XRX_SendRawMessage>
 80052ce:	4603      	mov	r3, r0
 80052d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	//qTraceDecimal(RetValue);
	return RetValue;
 80052d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3744      	adds	r7, #68	; 0x44
 80052dc:	46bd      	mov	sp, r7
 80052de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052e0:	0800878c 	.word	0x0800878c
 80052e4:	0800873c 	.word	0x0800873c

080052e8 <WSSFM1XRX_SendRawMessage>:
 * @param ExpectedResponse expectedResponse expected Response from module Wisol .
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return Pointer to reception buffer
 *  @Note : use only if  response expected
 */
WSSFM1XRX_Return_t WSSFM1XRX_SendRawMessage(WSSFM1XRXConfig_t *obj,char* Payload,char* ExpectedResponse,char * BuffStr,WSSFM1XRX_WaitMode_t Wait,uint32_t msec){
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]

	WSSFM1XRX_Return_t RetValue;
	if( ( obj->State_Api == WSSFM1XRX_IDLE) ) { /*Firstentry bloqueante o no bloqueante*/
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d120      	bne.n	8005342 <WSSFM1XRX_SendRawMessage+0x5a>
		WSSFM1XRX_ResetObject(obj);
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 f8d0 	bl	80054a6 <WSSFM1XRX_ResetObject>
		if(Payload != NULL) {
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <WSSFM1XRX_SendRawMessage+0x2c>
			WSSFM1XRX_StringTX(obj,Payload);
 800530c:	68b9      	ldr	r1, [r7, #8]
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 f8b2 	bl	8005478 <WSSFM1XRX_StringTX>
			//qTraceMessage(Payload);
		}
		obj->State_Api = WSSFM1XRX_RUNNING;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

		if(obj->NumberRetries++ > obj->MaxNumberRetries) {
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	b2d1      	uxtb	r1, r2
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8005332:	4293      	cmp	r3, r2
 8005334:	d905      	bls.n	8005342 <WSSFM1XRX_SendRawMessage+0x5a>
			obj->NumberRetries = 0;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
//			qTraceMessage("retires");
//			qTraceDecimal(obj->RxReady);
//			qTraceDecimal(obj->State_Api);
//			qTraceMessage(obj->RxFrame);
			return WSSFM1XRX_MAX_RETRIES_REACHED;
 800533e:	230b      	movs	r3, #11
 8005340:	e026      	b.n	8005390 <WSSFM1XRX_SendRawMessage+0xa8>
		}

	}
	/*expected is confirmed in to WSSFM1XRX_WaitForResponse*/
	RetValue = WSSFM1XRX_WaitForResponse(obj,ExpectedResponse,Wait,msec);
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	6a3a      	ldr	r2, [r7, #32]
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f918 	bl	800557e <WSSFM1XRX_WaitForResponse>
 800534e:	4603      	mov	r3, r0
 8005350:	75fb      	strb	r3, [r7, #23]

	/*para que funcione block or non block*/
	if(WSSFM1XRX_TIMEOUT == RetValue || WSSFM1XRX_OK_RESPONSE == RetValue){
 8005352:	7dfb      	ldrb	r3, [r7, #23]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <WSSFM1XRX_SendRawMessage+0x76>
 8005358:	7dfb      	ldrb	r3, [r7, #23]
 800535a:	2b03      	cmp	r3, #3
 800535c:	d117      	bne.n	800538e <WSSFM1XRX_SendRawMessage+0xa6>
		//qTraceMessage(obj->RxFrame);
		if( obj->RxReady ){
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	7e5b      	ldrb	r3, [r3, #25]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00e      	beq.n	8005386 <WSSFM1XRX_SendRawMessage+0x9e>
			if(BuffStr != NULL) strcpy((char*)BuffStr, (char*)obj->RxFrame) ;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d005      	beq.n	800537a <WSSFM1XRX_SendRawMessage+0x92>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	4619      	mov	r1, r3
 8005374:	6838      	ldr	r0, [r7, #0]
 8005376:	f002 fc72 	bl	8007c5e <strcpy>
			RetValue = WSSFM1XRX_OK_RESPONSE;
 800537a:	2303      	movs	r3, #3
 800537c:	75fb      	strb	r3, [r7, #23]
			obj->NumberRetries = 0;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		}  //14.6.19 else if(Payload != NULL)	RetValue = WSSFM1XRX_FAILURE;
		obj->State_Api = WSSFM1XRX_IDLE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	return RetValue;
 800538e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <WSSFM1XRX_ISRRX>:
 * the buffer is stored in the structure obj->RxFrame.
 * 
 * @param obj Structure containing all data from the Sigfox module.
 * @return void.
 */
void WSSFM1XRX_ISRRX(WSSFM1XRXConfig_t *obj, const char RxChar){
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	70fb      	strb	r3, [r7, #3]
	if(RxChar < CHAR_PRINT_BELOW  || RxChar > CHAR_PRINT_ABOVE) return ;  /*Char no print*/
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	2b09      	cmp	r3, #9
 80053a8:	d939      	bls.n	800541e <WSSFM1XRX_ISRRX+0x86>
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	2b7a      	cmp	r3, #122	; 0x7a
 80053ae:	d836      	bhi.n	800541e <WSSFM1XRX_ISRRX+0x86>
	if(obj->RxReady) return; /* B_uffer reveived*/
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	7e5b      	ldrb	r3, [r3, #25]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d133      	bne.n	8005422 <WSSFM1XRX_ISRRX+0x8a>
	obj->RxFrame[obj->RxIndex++] = RxChar;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695a      	ldr	r2, [r3, #20]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	7e9b      	ldrb	r3, [r3, #26]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	1c59      	adds	r1, r3, #1
 80053c6:	b2c8      	uxtb	r0, r1
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	7688      	strb	r0, [r1, #26]
 80053cc:	4413      	add	r3, r2
 80053ce:	78fa      	ldrb	r2, [r7, #3]
 80053d0:	701a      	strb	r2, [r3, #0]
	if (obj->RxIndex>= obj->SizeBuffRx -1) obj->RxIndex=0;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	7e9b      	ldrb	r3, [r3, #26]
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	461a      	mov	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	7e1b      	ldrb	r3, [r3, #24]
 80053de:	3b01      	subs	r3, #1
 80053e0:	429a      	cmp	r2, r3
 80053e2:	db02      	blt.n	80053ea <WSSFM1XRX_ISRRX+0x52>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	769a      	strb	r2, [r3, #26]
	obj->RxFrame[obj->RxIndex] = 0;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	7e92      	ldrb	r2, [r2, #26]
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	4413      	add	r3, r2
 80053f6:	2200      	movs	r2, #0
 80053f8:	701a      	strb	r2, [r3, #0]
	if (RxChar =='\r'){
 80053fa:	78fb      	ldrb	r3, [r7, #3]
 80053fc:	2b0d      	cmp	r3, #13
 80053fe:	d111      	bne.n	8005424 <WSSFM1XRX_ISRRX+0x8c>
		/*  Check if there is a downlink request */
		if(!obj->DownLink){
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	7f5b      	ldrb	r3, [r3, #29]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <WSSFM1XRX_ISRRX+0x7e>
			obj->RxIndex = 0;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	769a      	strb	r2, [r3, #26]
			obj->RxReady = SF_TRUE; /* Framed completed*/
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	765a      	strb	r2, [r3, #25]
 8005414:	e006      	b.n	8005424 <WSSFM1XRX_ISRRX+0x8c>
		}else
			obj->DownLink = 0; /* Clear the downlink request */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	775a      	strb	r2, [r3, #29]
 800541c:	e002      	b.n	8005424 <WSSFM1XRX_ISRRX+0x8c>
	if(RxChar < CHAR_PRINT_BELOW  || RxChar > CHAR_PRINT_ABOVE) return ;  /*Char no print*/
 800541e:	bf00      	nop
 8005420:	e000      	b.n	8005424 <WSSFM1XRX_ISRRX+0x8c>
	if(obj->RxReady) return; /* B_uffer reveived*/
 8005422:	bf00      	nop
	}
}
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <WSSFM1XRX_MatchResponse>:
 * @return Operation result in the form WSSFM1XRX_Return_t.
 * 			<< WSSFM1XRX_OK_RESPONSE >> If response expected is the correct
 * 			<< WSSFM1XRX_RSP_NOMATCH >> If response expected is not correct 
 */

WSSFM1XRX_Return_t WSSFM1XRX_MatchResponse(WSSFM1XRXConfig_t *obj, char *expectedResponse){
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	6039      	str	r1, [r7, #0]
	uint8_t Rprocess = WSSFM1XRX_RSP_NOMATCH;
 8005438:	2302      	movs	r3, #2
 800543a:	73fb      	strb	r3, [r7, #15]
	if(obj->RxReady){
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	7e5b      	ldrb	r3, [r3, #25]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d013      	beq.n	800546e <WSSFM1XRX_MatchResponse+0x40>
		if(expectedResponse != NULL){
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00e      	beq.n	800546a <WSSFM1XRX_MatchResponse+0x3c>
			if(strstr((const char *) obj->RxFrame,(char *)expectedResponse) != NULL) Rprocess = WSSFM1XRX_OK_RESPONSE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f002 fc0b 	bl	8007c6e <strstr>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <WSSFM1XRX_MatchResponse+0x36>
 800545e:	2303      	movs	r3, #3
 8005460:	73fb      	strb	r3, [r7, #15]
 8005462:	e004      	b.n	800546e <WSSFM1XRX_MatchResponse+0x40>
			else Rprocess = WSSFM1XRX_RSP_NOMATCH;
 8005464:	2302      	movs	r3, #2
 8005466:	73fb      	strb	r3, [r7, #15]
 8005468:	e001      	b.n	800546e <WSSFM1XRX_MatchResponse+0x40>
		}else Rprocess = WSSFM1XRX_OK_RESPONSE;
 800546a:	2303      	movs	r3, #3
 800546c:	73fb      	strb	r3, [r7, #15]
	}
	return Rprocess;
 800546e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <WSSFM1XRX_StringTX>:

	return ( NULL != obj->CallbackDownlink )? obj->CallbackDownlink(obj) : WSSFM1XRX_DL_DISCRIMINATE_ERROR;
}

/*Private Functions ********************************************************************************************************************************/
static void WSSFM1XRX_StringTX(WSSFM1XRXConfig_t *obj, char* WSSFM1XRX_String){
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
	while(*WSSFM1XRX_String) obj->TX_WSSFM1XRX(NULL,*WSSFM1XRX_String++);
 8005482:	e008      	b.n	8005496 <WSSFM1XRX_StringTX+0x1e>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	1c59      	adds	r1, r3, #1
 800548c:	6039      	str	r1, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	4619      	mov	r1, r3
 8005492:	2000      	movs	r0, #0
 8005494:	4790      	blx	r2
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f2      	bne.n	8005484 <WSSFM1XRX_StringTX+0xc>
}
 800549e:	bf00      	nop
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <WSSFM1XRX_ResetObject>:

/*Private Functions ***********************************************************************************************************************************************/
static void WSSFM1XRX_ResetObject(WSSFM1XRXConfig_t *obj){
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
	memset( (void *) obj->RxFrame,0,obj->SizeBuffRx);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6958      	ldr	r0, [r3, #20]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	7e1b      	ldrb	r3, [r3, #24]
 80054b6:	461a      	mov	r2, r3
 80054b8:	2100      	movs	r1, #0
 80054ba:	f002 fb9b 	bl	8007bf4 <memset>
	obj->StatusFlag=WSSFM1XRX_DEFAULT;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2209      	movs	r2, #9
 80054c2:	76da      	strb	r2, [r3, #27]
	obj->RxIndex=0;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	769a      	strb	r2, [r3, #26]
	obj->RxReady=SF_FALSE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	765a      	strb	r2, [r3, #25]
	obj->State_Api = WSSFM1XRX_IDLE; /*verificar*/
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <WSSFM1XRX_BuildFrame>:
/*Private Functions*/

/**
 * @brief Function order the frame.
 */
static void WSSFM1XRX_BuildFrame(char* str, void* data, uint8_t size){
 80054e0:	b590      	push	{r4, r7, lr}
 80054e2:	b089      	sub	sp, #36	; 0x24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	4613      	mov	r3, r2
 80054ec:	71fb      	strb	r3, [r7, #7]
	int8_t  i,j;   
	uint8_t xbyte, finalsize;
	uint8_t *bdata = (uint8_t*)data;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	61bb      	str	r3, [r7, #24]
	size = (size > WSSFM1XRX_MAX_BYTE_TX_FRAME )? WSSFM1XRX_MAX_BYTE_TX_FRAME : size;
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	bf28      	it	cs
 80054f8:	230c      	movcs	r3, #12
 80054fa:	71fb      	strb	r3, [r7, #7]
	finalsize = size*2;
 80054fc:	79fb      	ldrb	r3, [r7, #7]
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	75fb      	strb	r3, [r7, #23]
	str[finalsize]='\0';
 8005502:	7dfb      	ldrb	r3, [r7, #23]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	2200      	movs	r2, #0
 800550a:	701a      	strb	r2, [r3, #0]

	for(i = (size-1) , j = 0; i >= 0; i--){
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	3b01      	subs	r3, #1
 8005510:	b2db      	uxtb	r3, r3
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	2300      	movs	r3, #0
 8005516:	77bb      	strb	r3, [r7, #30]
 8005518:	e029      	b.n	800556e <WSSFM1XRX_BuildFrame+0x8e>
		xbyte = bdata[i];
 800551a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4413      	add	r3, r2
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	75bb      	strb	r3, [r7, #22]
		str[j++]=NibbletoX(xbyte>>4);
 8005526:	7dbb      	ldrb	r3, [r7, #22]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	b2d9      	uxtb	r1, r3
 800552c:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8005530:	b2d3      	uxtb	r3, r2
 8005532:	3301      	adds	r3, #1
 8005534:	b2db      	uxtb	r3, r3
 8005536:	77bb      	strb	r3, [r7, #30]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	189c      	adds	r4, r3, r2
 800553c:	4608      	mov	r0, r1
 800553e:	f000 f83f 	bl	80055c0 <NibbletoX>
 8005542:	4603      	mov	r3, r0
 8005544:	7023      	strb	r3, [r4, #0]
		str[j++]=NibbletoX(xbyte);
 8005546:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800554a:	b2d3      	uxtb	r3, r2
 800554c:	3301      	adds	r3, #1
 800554e:	b2db      	uxtb	r3, r3
 8005550:	77bb      	strb	r3, [r7, #30]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	189c      	adds	r4, r3, r2
 8005556:	7dbb      	ldrb	r3, [r7, #22]
 8005558:	4618      	mov	r0, r3
 800555a:	f000 f831 	bl	80055c0 <NibbletoX>
 800555e:	4603      	mov	r3, r0
 8005560:	7023      	strb	r3, [r4, #0]
	for(i = (size-1) , j = 0; i >= 0; i--){
 8005562:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b2db      	uxtb	r3, r3
 800556c:	77fb      	strb	r3, [r7, #31]
 800556e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005572:	2b00      	cmp	r3, #0
 8005574:	dad1      	bge.n	800551a <WSSFM1XRX_BuildFrame+0x3a>
	}
}
 8005576:	bf00      	nop
 8005578:	3724      	adds	r7, #36	; 0x24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd90      	pop	{r4, r7, pc}

0800557e <WSSFM1XRX_WaitForResponse>:

/**
 * @brief Function wait for response expected.
 */
static WSSFM1XRX_Return_t WSSFM1XRX_WaitForResponse(WSSFM1XRXConfig_t *obj , char *ExpectedResponse, WSSFM1XRX_WaitMode_t Wait ,uint32_t msec){
 800557e:	b580      	push	{r7, lr}
 8005580:	b086      	sub	sp, #24
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
 800558a:	603b      	str	r3, [r7, #0]
	uint8_t retvalue = WSSFM1XRX_NONE, retvalueM = WSSFM1XRX_NONE;
 800558c:	2304      	movs	r3, #4
 800558e:	75fb      	strb	r3, [r7, #23]
 8005590:	2304      	movs	r3, #4
 8005592:	75bb      	strb	r3, [r7, #22]
	retvalue =  Wait(obj,msec); /*Return WAITING or TIMEOUT*/
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6839      	ldr	r1, [r7, #0]
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	4798      	blx	r3
 800559c:	4603      	mov	r3, r0
 800559e:	75fb      	strb	r3, [r7, #23]
	retvalueM = WSSFM1XRX_MatchResponse(obj,ExpectedResponse); /*Return Response ok or No match*/
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f7ff ff43 	bl	800542e <WSSFM1XRX_MatchResponse>
 80055a8:	4603      	mov	r3, r0
 80055aa:	75bb      	strb	r3, [r7, #22]
	return (retvalueM == WSSFM1XRX_OK_RESPONSE)? retvalueM  : retvalue  ;/*Delay NonBlocking or Non-blocking*/
 80055ac:	7dbb      	ldrb	r3, [r7, #22]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d101      	bne.n	80055b6 <WSSFM1XRX_WaitForResponse+0x38>
 80055b2:	7dbb      	ldrb	r3, [r7, #22]
 80055b4:	e000      	b.n	80055b8 <WSSFM1XRX_WaitForResponse+0x3a>
 80055b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3718      	adds	r7, #24
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <NibbletoX>:


/*Nible(4bits) decimal to hex string***/

char NibbletoX(uint8_t value){
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	71fb      	strb	r3, [r7, #7]
	char ch;
	ch = (char)(value & 0x0F) + '0';
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	3330      	adds	r3, #48	; 0x30
 80055d4:	73fb      	strb	r3, [r7, #15]
	return (ch > '9')? ch+7u : ch;
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	2b39      	cmp	r3, #57	; 0x39
 80055da:	d903      	bls.n	80055e4 <NibbletoX+0x24>
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
 80055de:	3307      	adds	r3, #7
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	e000      	b.n	80055e6 <NibbletoX+0x26>
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <WSSFM1XRX_GetRespNoexpected>:
 * 
 * @return WSSFM1XRX_Return_t.
 *
 * @Note : use only if not response expected
 */
WSSFM1XRX_Return_t WSSFM1XRX_GetRespNoexpected(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait, char * CommandStr, char *BuffStr){
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b086      	sub	sp, #24
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	603b      	str	r3, [r7, #0]
	WSSFM1XRX_Return_t RetValue;
	if( ( obj->State_Api == WSSFM1XRX_IDLE) ) { /*Firstentry block or Nonblocking*/
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10a      	bne.n	8005620 <WSSFM1XRX_GetRespNoexpected+0x2e>
		WSSFM1XRX_ResetObject(obj);
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f7ff ff4b 	bl	80054a6 <WSSFM1XRX_ResetObject>
		WSSFM1XRX_StringTX(obj,CommandStr);
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f7ff ff30 	bl	8005478 <WSSFM1XRX_StringTX>
		obj->State_Api = WSSFM1XRX_RUNNING;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	RetValue = Wait(obj,WSSFM1XRX_GENERAL_TIME_DELAY_RESP) ;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	4798      	blx	r3
 800562a:	4603      	mov	r3, r0
 800562c:	75fb      	strb	r3, [r7, #23]

	if(WSSFM1XRX_TIMEOUT == RetValue || ((RetValue == WSSFM1XRX_WAITING) && (obj->RxReady)) ){
 800562e:	7dfb      	ldrb	r3, [r7, #23]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d007      	beq.n	8005644 <WSSFM1XRX_GetRespNoexpected+0x52>
 8005634:	7dfb      	ldrb	r3, [r7, #23]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d11b      	bne.n	8005672 <WSSFM1XRX_GetRespNoexpected+0x80>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	7e5b      	ldrb	r3, [r3, #25]
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d016      	beq.n	8005672 <WSSFM1XRX_GetRespNoexpected+0x80>
		if( obj->RxReady ){  
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	7e5b      	ldrb	r3, [r3, #25]
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00b      	beq.n	8005666 <WSSFM1XRX_GetRespNoexpected+0x74>
			if(BuffStr != NULL ) strcpy((char*)BuffStr, (char*)obj->RxFrame) ; /*frame stored in RxFrame*/
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <WSSFM1XRX_GetRespNoexpected+0x6e>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	4619      	mov	r1, r3
 800565a:	6838      	ldr	r0, [r7, #0]
 800565c:	f002 faff 	bl	8007c5e <strcpy>
			RetValue = WSSFM1XRX_OK_RESPONSE;
 8005660:	2303      	movs	r3, #3
 8005662:	75fb      	strb	r3, [r7, #23]
 8005664:	e001      	b.n	800566a <WSSFM1XRX_GetRespNoexpected+0x78>
		}else RetValue = WSSFM1XRX_FAILURE;
 8005666:	230a      	movs	r3, #10
 8005668:	75fb      	strb	r3, [r7, #23]
		obj->State_Api = WSSFM1XRX_IDLE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	return RetValue;
 8005672:	7dfb      	ldrb	r3, [r7, #23]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <_qScheduler_TimeDeadlineCheck>:

#define qSchedulerStartPoint                    QUARKTS.Flag.Init=qTrue; do
#define qSchedulerEndPoint                      while(!QUARKTS.Flag.ReleaseSched); _qTriggerReleaseSchedEvent()

/*============================================================================*/
qBool_t _qScheduler_TimeDeadlineCheck(qClock_t ti, qClock_t td){
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
    return (qBool_t)((qSchedulerGetTick() - ti)>=td); 
 8005686:	f000 fb97 	bl	8005db8 <qSchedulerGetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	bf94      	ite	ls
 8005696:	2301      	movls	r3, #1
 8005698:	2300      	movhi	r3, #0
 800569a:	b2db      	uxtb	r3, r3
}
 800569c:	4618      	mov	r0, r3
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <qEnterCritical>:

Enter a critical section. This function invokes the <Disabler> if available.
Please see <qSchedulerSetInterruptsED>

*/  
void qEnterCritical(void){
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
    if(QUARKTS.I_Disable != NULL) QUARKTS.Flag.IntFlags = QUARKTS.I_Disable();
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <qEnterCritical+0x1c>)
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d005      	beq.n	80056bc <qEnterCritical+0x18>
 80056b0:	4b03      	ldr	r3, [pc, #12]	; (80056c0 <qEnterCritical+0x1c>)
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	4798      	blx	r3
 80056b6:	4602      	mov	r2, r0
 80056b8:	4b01      	ldr	r3, [pc, #4]	; (80056c0 <qEnterCritical+0x1c>)
 80056ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80056bc:	bf00      	nop
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20000254 	.word	0x20000254

080056c4 <qExitCritical>:

Enter a critical section. This function invokes the <Enabler> if available.
Please see <qSchedulerSetInterruptsED>

*/ 
void qExitCritical(void){
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
    if(QUARKTS.I_Restorer != NULL) QUARKTS.I_Restorer(QUARKTS.Flag.IntFlags);
 80056c8:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <qExitCritical+0x1c>)
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d005      	beq.n	80056dc <qExitCritical+0x18>
 80056d0:	4b03      	ldr	r3, [pc, #12]	; (80056e0 <qExitCritical+0x1c>)
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	4a02      	ldr	r2, [pc, #8]	; (80056e0 <qExitCritical+0x1c>)
 80056d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056d8:	4610      	mov	r0, r2
 80056da:	4798      	blx	r3
}
 80056dc:	bf00      	nop
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	20000254 	.word	0x20000254

080056e4 <qTime2Clock>:

Return value:

    time (t) in epochs
*/
qClock_t qTime2Clock(const qTime_t t){
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	ed87 0a01 	vstr	s0, [r7, #4]
        return (qClock_t)t;
    #else 
        #ifdef Q_SETUP_TICK_IN_HERTZ
            return (qClock_t)(t*QUARKTS.TimmingBase);
        #else
            return (qClock_t)(t/QUARKTS.TimmingBase);
 80056ee:	4b08      	ldr	r3, [pc, #32]	; (8005710 <qTime2Clock+0x2c>)
 80056f0:	ed93 7a05 	vldr	s14, [r3, #20]
 80056f4:	edd7 6a01 	vldr	s13, [r7, #4]
 80056f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005700:	ee17 3a90 	vmov	r3, s15
        #endif    
    #endif
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	20000254 	.word	0x20000254

08005714 <qTaskSetState>:
Parameters:

    - Task : A pointer to the task node.
    - State : qEnabled or qDisabled 
*/
void qTaskSetState(qTask_t *Task, const qState_t State){
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	460b      	mov	r3, r1
 800571e:	70fb      	strb	r3, [r7, #3]
    if(NULL==Task) return;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d012      	beq.n	800574c <qTaskSetState+0x38>
    if(State && Task->Flag[_qIndex_Enabled]) return;
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <qTaskSetState+0x24>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10b      	bne.n	8005750 <qTaskSetState+0x3c>
    Task->Flag[_qIndex_Enabled] = State;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	78fa      	ldrb	r2, [r7, #3]
 800573c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    Task->ClockStart = qSchedulerGetTick();
 8005740:	f000 fb3a 	bl	8005db8 <qSchedulerGetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	61da      	str	r2, [r3, #28]
 800574a:	e002      	b.n	8005752 <qTaskSetState+0x3e>
    if(NULL==Task) return;
 800574c:	bf00      	nop
 800574e:	e000      	b.n	8005752 <qTaskSetState+0x3e>
    if(State && Task->Flag[_qIndex_Enabled]) return;
 8005750:	bf00      	nop
}
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <_qScheduler_PriorityQueueGet>:
    QUARKTS.I_Restorer = Restorer;
    QUARKTS.I_Disable = Disabler;
}
#ifdef Q_PRIORITY_QUEUE
/*============================================================================*/
static qTask_t* _qScheduler_PriorityQueueGet(void){
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
    qTask_t *Task = NULL;
 800575e:	2300      	movs	r3, #0
 8005760:	603b      	str	r3, [r7, #0]
    uint8_t i;
    uint8_t IndexTaskToExtract = 0;
 8005762:	2300      	movs	r3, #0
 8005764:	71bb      	strb	r3, [r7, #6]
    qPriority_t MaxPriorityValue;
    if(QUARKTS.QueueIndex < 0) return NULL; /*Return if no elements available*/
 8005766:	4b41      	ldr	r3, [pc, #260]	; (800586c <_qScheduler_PriorityQueueGet+0x114>)
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	b21b      	sxth	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	da01      	bge.n	8005774 <_qScheduler_PriorityQueueGet+0x1c>
 8005770:	2300      	movs	r3, #0
 8005772:	e076      	b.n	8005862 <_qScheduler_PriorityQueueGet+0x10a>
    qEnterCritical(); 
 8005774:	f7ff ff96 	bl	80056a4 <qEnterCritical>
    MaxPriorityValue = QUARKTS.QueueStack[0].Task->Priority;
 8005778:	4b3c      	ldr	r3, [pc, #240]	; (800586c <_qScheduler_PriorityQueueGet+0x114>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005782:	717b      	strb	r3, [r7, #5]
    for( i=1; i<QUARKTS.QueueSize; i++){ /*Find the task with the highest priority*/
 8005784:	2301      	movs	r3, #1
 8005786:	71fb      	strb	r3, [r7, #7]
 8005788:	e021      	b.n	80057ce <_qScheduler_PriorityQueueGet+0x76>
        if(NULL == QUARKTS.QueueStack[i].Task ) break; /*break if the tail is reached*/
 800578a:	4b38      	ldr	r3, [pc, #224]	; (800586c <_qScheduler_PriorityQueueGet+0x114>)
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	79fb      	ldrb	r3, [r7, #7]
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	4413      	add	r3, r2
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d020      	beq.n	80057dc <_qScheduler_PriorityQueueGet+0x84>
        if(QUARKTS.QueueStack[i].Task->Priority > MaxPriorityValue){ /*check if the queued task has the max priority value*/
 800579a:	4b34      	ldr	r3, [pc, #208]	; (800586c <_qScheduler_PriorityQueueGet+0x114>)
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	4413      	add	r3, r2
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	797a      	ldrb	r2, [r7, #5]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d20a      	bcs.n	80057c8 <_qScheduler_PriorityQueueGet+0x70>
            MaxPriorityValue = QUARKTS.QueueStack[i].Task->Priority; /*Reassign the max value*/
 80057b2:	4b2e      	ldr	r3, [pc, #184]	; (800586c <_qScheduler_PriorityQueueGet+0x114>)
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	4413      	add	r3, r2
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057c2:	717b      	strb	r3, [r7, #5]
            IndexTaskToExtract = i;  /*save the index*/
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	71bb      	strb	r3, [r7, #6]
    for( i=1; i<QUARKTS.QueueSize; i++){ /*Find the task with the highest priority*/
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	3301      	adds	r3, #1
 80057cc:	71fb      	strb	r3, [r7, #7]
 80057ce:	4b27      	ldr	r3, [pc, #156]	; (800586c <_qScheduler_PriorityQueueGet+0x114>)
 80057d0:	789b      	ldrb	r3, [r3, #2]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	79fa      	ldrb	r2, [r7, #7]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d3d7      	bcc.n	800578a <_qScheduler_PriorityQueueGet+0x32>
 80057da:	e000      	b.n	80057de <_qScheduler_PriorityQueueGet+0x86>
        if(NULL == QUARKTS.QueueStack[i].Task ) break; /*break if the tail is reached*/
 80057dc:	bf00      	nop
        }
    }   
    QUARKTS.QueueData = QUARKTS.QueueStack[IndexTaskToExtract].QueueData; /*get the data from the queue*/
 80057de:	4b23      	ldr	r3, [pc, #140]	; (800586c <_qScheduler_PriorityQueueGet+0x114>)
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	79bb      	ldrb	r3, [r7, #6]
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	4413      	add	r3, r2
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	4a20      	ldr	r2, [pc, #128]	; (800586c <_qScheduler_PriorityQueueGet+0x114>)
 80057ec:	6093      	str	r3, [r2, #8]
    Task = QUARKTS.QueueStack[IndexTaskToExtract].Task; /*assign the task to the output*/
 80057ee:	4b1f      	ldr	r3, [pc, #124]	; (800586c <_qScheduler_PriorityQueueGet+0x114>)
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	79bb      	ldrb	r3, [r7, #6]
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4413      	add	r3, r2
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	603b      	str	r3, [r7, #0]
    Task->State = qReady; /*set the task as ready*/
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    QUARKTS.QueueStack[IndexTaskToExtract].Task = NULL; /*set the position in the queue as empty*/  
 8005804:	4b19      	ldr	r3, [pc, #100]	; (800586c <_qScheduler_PriorityQueueGet+0x114>)
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	79bb      	ldrb	r3, [r7, #6]
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	4413      	add	r3, r2
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]
    for(i=IndexTaskToExtract; i<QUARKTS.QueueIndex; i++) QUARKTS.QueueStack[i] = QUARKTS.QueueStack[i+1]; /*shift the queue*/
 8005812:	79bb      	ldrb	r3, [r7, #6]
 8005814:	71fb      	strb	r3, [r7, #7]
 8005816:	e012      	b.n	800583e <_qScheduler_PriorityQueueGet+0xe6>
 8005818:	4b14      	ldr	r3, [pc, #80]	; (800586c <_qScheduler_PriorityQueueGet+0x114>)
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	79fb      	ldrb	r3, [r7, #7]
 800581e:	3301      	adds	r3, #1
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	18d1      	adds	r1, r2, r3
 8005824:	4b11      	ldr	r3, [pc, #68]	; (800586c <_qScheduler_PriorityQueueGet+0x114>)
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	79fb      	ldrb	r3, [r7, #7]
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	4413      	add	r3, r2
 800582e:	460a      	mov	r2, r1
 8005830:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005834:	e883 0003 	stmia.w	r3, {r0, r1}
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	3301      	adds	r3, #1
 800583c:	71fb      	strb	r3, [r7, #7]
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	4a0a      	ldr	r2, [pc, #40]	; (800586c <_qScheduler_PriorityQueueGet+0x114>)
 8005842:	8812      	ldrh	r2, [r2, #0]
 8005844:	b212      	sxth	r2, r2
 8005846:	4293      	cmp	r3, r2
 8005848:	dbe6      	blt.n	8005818 <_qScheduler_PriorityQueueGet+0xc0>
    QUARKTS.QueueIndex--;    /*decrease the index*/
 800584a:	4b08      	ldr	r3, [pc, #32]	; (800586c <_qScheduler_PriorityQueueGet+0x114>)
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b21b      	sxth	r3, r3
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29b      	uxth	r3, r3
 8005856:	b21a      	sxth	r2, r3
 8005858:	4b04      	ldr	r3, [pc, #16]	; (800586c <_qScheduler_PriorityQueueGet+0x114>)
 800585a:	801a      	strh	r2, [r3, #0]
    qExitCritical();
 800585c:	f7ff ff32 	bl	80056c4 <qExitCritical>
    return Task;
 8005860:	683b      	ldr	r3, [r7, #0]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20000254 	.word	0x20000254

08005870 <_qInitScheduler>:
#endif
/*============================================================================*/
#ifdef Q_SETUP_TIME_CANONICAL
    void _qInitScheduler(qGetTickFcn_t TickProvider, qTaskFcn_t IdleCallback, volatile qQueueStack_t *Q_Stack, const uint8_t Size_Q_Stack){
#else
    void _qInitScheduler(qGetTickFcn_t TickProvider, const qTimingBase_type BaseTimming, qTaskFcn_t IdleCallback, volatile qQueueStack_t *Q_Stack, const uint8_t Size_Q_Stack){
 8005870:	b480      	push	{r7}
 8005872:	b089      	sub	sp, #36	; 0x24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6178      	str	r0, [r7, #20]
 8005878:	ed87 0a04 	vstr	s0, [r7, #16]
 800587c:	60f9      	str	r1, [r7, #12]
 800587e:	60ba      	str	r2, [r7, #8]
 8005880:	71fb      	strb	r3, [r7, #7]
#endif
    #ifdef Q_PRIORITY_QUEUE  
        uint8_t i;
    #endif
    QUARKTS.Head = NULL;
 8005882:	4b26      	ldr	r3, [pc, #152]	; (800591c <_qInitScheduler+0xac>)
 8005884:	2200      	movs	r2, #0
 8005886:	619a      	str	r2, [r3, #24]
    #ifndef Q_SETUP_TIME_CANONICAL
        QUARKTS.TimmingBase = BaseTimming;
 8005888:	4a24      	ldr	r2, [pc, #144]	; (800591c <_qInitScheduler+0xac>)
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	6153      	str	r3, [r2, #20]
    #endif
    QUARKTS.IDLECallback = IdleCallback;
 800588e:	4a23      	ldr	r2, [pc, #140]	; (800591c <_qInitScheduler+0xac>)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	60d3      	str	r3, [r2, #12]
    QUARKTS.ReleaseSchedCallback = NULL;
 8005894:	4b21      	ldr	r3, [pc, #132]	; (800591c <_qInitScheduler+0xac>)
 8005896:	2200      	movs	r2, #0
 8005898:	611a      	str	r2, [r3, #16]
    #ifdef Q_PRIORITY_QUEUE    
        QUARKTS.QueueStack = (qQueueStack_t*)Q_Stack;
 800589a:	4a20      	ldr	r2, [pc, #128]	; (800591c <_qInitScheduler+0xac>)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	6053      	str	r3, [r2, #4]
        QUARKTS.QueueSize = Size_Q_Stack;
 80058a0:	4a1e      	ldr	r2, [pc, #120]	; (800591c <_qInitScheduler+0xac>)
 80058a2:	79fb      	ldrb	r3, [r7, #7]
 80058a4:	7093      	strb	r3, [r2, #2]
        for(i=0;i<QUARKTS.QueueSize;i++) QUARKTS.QueueStack[i].Task = NULL;  /*set the priority queue as empty*/  
 80058a6:	2300      	movs	r3, #0
 80058a8:	77fb      	strb	r3, [r7, #31]
 80058aa:	e009      	b.n	80058c0 <_qInitScheduler+0x50>
 80058ac:	4b1b      	ldr	r3, [pc, #108]	; (800591c <_qInitScheduler+0xac>)
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	7ffb      	ldrb	r3, [r7, #31]
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	4413      	add	r3, r2
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	7ffb      	ldrb	r3, [r7, #31]
 80058bc:	3301      	adds	r3, #1
 80058be:	77fb      	strb	r3, [r7, #31]
 80058c0:	4b16      	ldr	r3, [pc, #88]	; (800591c <_qInitScheduler+0xac>)
 80058c2:	789b      	ldrb	r3, [r3, #2]
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	7ffa      	ldrb	r2, [r7, #31]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d3ef      	bcc.n	80058ac <_qInitScheduler+0x3c>
        QUARKTS.QueueIndex = -1;     
 80058cc:	4b13      	ldr	r3, [pc, #76]	; (800591c <_qInitScheduler+0xac>)
 80058ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058d2:	801a      	strh	r2, [r3, #0]
        QUARKTS.QueueData = NULL;
 80058d4:	4b11      	ldr	r3, [pc, #68]	; (800591c <_qInitScheduler+0xac>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	609a      	str	r2, [r3, #8]
    #endif
    QUARKTS.Flag.Init = qFalse;
 80058da:	4b10      	ldr	r3, [pc, #64]	; (800591c <_qInitScheduler+0xac>)
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    QUARKTS.Flag.ReleaseSched = qFalse;
 80058e2:	4b0e      	ldr	r3, [pc, #56]	; (800591c <_qInitScheduler+0xac>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    QUARKTS.Flag.FCallReleased = qFalse;
 80058ea:	4b0c      	ldr	r3, [pc, #48]	; (800591c <_qInitScheduler+0xac>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    QUARKTS.I_Restorer =  NULL;
 80058f2:	4b0a      	ldr	r3, [pc, #40]	; (800591c <_qInitScheduler+0xac>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	621a      	str	r2, [r3, #32]
    QUARKTS.I_Disable = NULL;
 80058f8:	4b08      	ldr	r3, [pc, #32]	; (800591c <_qInitScheduler+0xac>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	61da      	str	r2, [r3, #28]
    QUARKTS.CurrentRunningTask = NULL;
 80058fe:	4b07      	ldr	r3, [pc, #28]	; (800591c <_qInitScheduler+0xac>)
 8005900:	2200      	movs	r2, #0
 8005902:	62da      	str	r2, [r3, #44]	; 0x2c
    QUARKTS.GetSysTick = TickProvider;
 8005904:	4a05      	ldr	r2, [pc, #20]	; (800591c <_qInitScheduler+0xac>)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	6313      	str	r3, [r2, #48]	; 0x30
    _qSysTick_Epochs_ = 0ul;
 800590a:	4b05      	ldr	r3, [pc, #20]	; (8005920 <_qInitScheduler+0xb0>)
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
}
 8005910:	bf00      	nop
 8005912:	3724      	adds	r7, #36	; 0x24
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	20000254 	.word	0x20000254
 8005920:	20000294 	.word	0x20000294

08005924 <qSchedulerAdd_Task>:

Return value:

    Returns qTrue on success, otherwise returns qFalse;
    */
qBool_t qSchedulerAdd_Task(qTask_t *Task, qTaskFcn_t CallbackFcn, qPriority_t Priority, qTime_t Time, qIteration_t nExecutions, qState_t InitialState, void* arg){
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	4611      	mov	r1, r2
 8005930:	ed87 0a00 	vstr	s0, [r7]
 8005934:	461a      	mov	r2, r3
 8005936:	460b      	mov	r3, r1
 8005938:	71fb      	strb	r3, [r7, #7]
 800593a:	4613      	mov	r3, r2
 800593c:	80bb      	strh	r3, [r7, #4]
    if(NULL==Task || NULL == CallbackFcn) return qFalse;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <qSchedulerAdd_Task+0x26>
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <qSchedulerAdd_Task+0x2a>
 800594a:	2300      	movs	r3, #0
 800594c:	e061      	b.n	8005a12 <qSchedulerAdd_Task+0xee>
    qSchedulerRemoveTask(Task); /*Remove the task if was previously added to the chain*/
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 f8bc 	bl	8005acc <qSchedulerRemoveTask>
    Task->Callback = CallbackFcn;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	60da      	str	r2, [r3, #12]
    Task->Interval = qTime2Clock(Time);
 800595a:	ed97 0a00 	vldr	s0, [r7]
 800595e:	f7ff fec1 	bl	80056e4 <qTime2Clock>
 8005962:	4602      	mov	r2, r0
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	619a      	str	r2, [r3, #24]
    Task->TaskData = arg;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	69fa      	ldr	r2, [r7, #28]
 800596c:	605a      	str	r2, [r3, #4]
    Task->Priority = Priority;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	79fa      	ldrb	r2, [r7, #7]
 8005972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    Task->Iterations = (qPeriodic==nExecutions)? qPeriodic : -nExecutions;    
 8005976:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800597a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800597e:	d004      	beq.n	800598a <qSchedulerAdd_Task+0x66>
 8005980:	88bb      	ldrh	r3, [r7, #4]
 8005982:	425b      	negs	r3, r3
 8005984:	b29b      	uxth	r3, r3
 8005986:	b21a      	sxth	r2, r3
 8005988:	e000      	b.n	800598c <qSchedulerAdd_Task+0x68>
 800598a:	4a24      	ldr	r2, [pc, #144]	; (8005a1c <qSchedulerAdd_Task+0xf8>)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	84da      	strh	r2, [r3, #38]	; 0x26
    Task->Flag[_qIndex_AsyncRun] = qFalse;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    Task->Flag[_qIndex_InitFlag] = qFalse;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    Task->Flag[_qIndex_QueueReceiver] = qFalse; 
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    Task->Flag[_qIndex_QueueFull] = qFalse;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    Task->Flag[_qIndex_QueueCount] = qFalse;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    Task->Flag[_qIndex_QueueEmpty] = qFalse;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    Task->Flag[_qIndex_Enabled] = (qBool_t)(InitialState != qFalse);
 80059c0:	7e3b      	ldrb	r3, [r7, #24]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	bf14      	ite	ne
 80059c6:	2301      	movne	r3, #1
 80059c8:	2300      	moveq	r3, #0
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    Task->Next = NULL;  
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]
    Task->Cycles = 0;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	621a      	str	r2, [r3, #32]
    Task->ClockStart = qSchedulerGetTick();
 80059e0:	f000 f9ea 	bl	8005db8 <qSchedulerGetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	61da      	str	r2, [r3, #28]
    #ifdef Q_QUEUES
        Task->Queue = NULL;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	615a      	str	r2, [r3, #20]
    #endif
    Task->StateMachine = NULL;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	611a      	str	r2, [r3, #16]
    Task->State = qSuspended;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2203      	movs	r2, #3
 80059fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    QUARKTS.Head =  _qScheduler_PriorizedInsert( QUARKTS.Head, Task ); /*put the task on the list according to its priority*/
 80059fe:	4b08      	ldr	r3, [pc, #32]	; (8005a20 <qSchedulerAdd_Task+0xfc>)
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	68f9      	ldr	r1, [r7, #12]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 f89b 	bl	8005b40 <_qScheduler_PriorizedInsert>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <qSchedulerAdd_Task+0xfc>)
 8005a0e:	619a      	str	r2, [r3, #24]
    return qTrue;
 8005a10:	2301      	movs	r3, #1
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	ffff8000 	.word	0xffff8000
 8005a20:	20000254 	.word	0x20000254

08005a24 <qSchedulerAdd_EventTask>:
     
Return value:

    Returns qTrue on success, otherwise returns qFalse;
     */
qBool_t qSchedulerAdd_EventTask(qTask_t *Task, qTaskFcn_t CallbackFcn, qPriority_t Priority, void* arg){
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	4613      	mov	r3, r2
 8005a32:	71fb      	strb	r3, [r7, #7]
    return qSchedulerAdd_Task(Task, CallbackFcn, Priority, qTimeImmediate, qSingleShot, qDisabled, arg);
 8005a34:	79fa      	ldrb	r2, [r7, #7]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	9301      	str	r3, [sp, #4]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	2301      	movs	r3, #1
 8005a40:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8005a58 <qSchedulerAdd_EventTask+0x34>
 8005a44:	68b9      	ldr	r1, [r7, #8]
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f7ff ff6c 	bl	8005924 <qSchedulerAdd_Task>
 8005a4c:	4603      	mov	r3, r0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	00000000 	.word	0x00000000

08005a5c <qSchedulerAdd_StateMachineTask>:

    Returns qTrue on success, otherwise returns qFalse;
    */
qBool_t qSchedulerAdd_StateMachineTask(qTask_t *Task, qPriority_t Priority, qTime_t Time,
                            qSM_t *StateMachine, qSM_State_t InitState, qSM_SubState_t BeforeAnyState, qSM_SubState_t SuccessState, qSM_SubState_t FailureState, qSM_SubState_t UnexpectedState,
                            qState_t InitialTaskState, void *arg){
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	6178      	str	r0, [r7, #20]
 8005a64:	ed87 0a03 	vstr	s0, [r7, #12]
 8005a68:	60ba      	str	r2, [r7, #8]
 8005a6a:	607b      	str	r3, [r7, #4]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	74fb      	strb	r3, [r7, #19]
    if(NULL==StateMachine || NULL==InitState) return qFalse;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <qSchedulerAdd_StateMachineTask+0x20>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <qSchedulerAdd_StateMachineTask+0x24>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	e01f      	b.n	8005ac0 <qSchedulerAdd_StateMachineTask+0x64>
    if (!qSchedulerAdd_Task(Task, __qFSMCallbackMode, Priority, Time, qPeriodic, InitialTaskState, arg)) return qFalse;    
 8005a80:	7cfa      	ldrb	r2, [r7, #19]
 8005a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a84:	9301      	str	r3, [sp, #4]
 8005a86:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <qSchedulerAdd_StateMachineTask+0x6c>)
 8005a8e:	ed97 0a03 	vldr	s0, [r7, #12]
 8005a92:	2101      	movs	r1, #1
 8005a94:	6978      	ldr	r0, [r7, #20]
 8005a96:	f7ff ff45 	bl	8005924 <qSchedulerAdd_Task>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <qSchedulerAdd_StateMachineTask+0x48>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	e00d      	b.n	8005ac0 <qSchedulerAdd_StateMachineTask+0x64>
    qStateMachine_Init(StateMachine, InitState, SuccessState, FailureState, UnexpectedState, BeforeAnyState);
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	9301      	str	r3, [sp, #4]
 8005aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	68b8      	ldr	r0, [r7, #8]
 8005ab4:	f000 fbaa 	bl	800620c <qStateMachine_Init>
    Task->StateMachine = StateMachine;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	611a      	str	r2, [r3, #16]
    return qTrue;
 8005abe:	2301      	movs	r3, #1
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	ffff8000 	.word	0xffff8000

08005acc <qSchedulerRemoveTask>:
     
Return value:

    Returns qTrue if success, otherwise returns qFalse.;     
    */
qBool_t qSchedulerRemoveTask(qTask_t *Task){
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
    qTask_t *tmp = QUARKTS.Head;
 8005ad4:	4b19      	ldr	r3, [pc, #100]	; (8005b3c <qSchedulerRemoveTask+0x70>)
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	60fb      	str	r3, [r7, #12]
    qTask_t *prev = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60bb      	str	r3, [r7, #8]
    if(NULL == tmp) return qFalse;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d106      	bne.n	8005af2 <qSchedulerRemoveTask+0x26>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e022      	b.n	8005b2e <qSchedulerRemoveTask+0x62>
    while(tmp != Task && tmp->Next != NULL){ /*find the task to remove*/
        prev = tmp; /*keep on track the previous node*/
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	60bb      	str	r3, [r7, #8]
        tmp = tmp->Next;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
    while(tmp != Task && tmp->Next != NULL){ /*find the task to remove*/
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d003      	beq.n	8005b02 <qSchedulerRemoveTask+0x36>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f2      	bne.n	8005ae8 <qSchedulerRemoveTask+0x1c>
    }
    if(tmp == Task){ /*remove the task if was found on the chain*/
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d110      	bne.n	8005b2c <qSchedulerRemoveTask+0x60>
        if(prev) prev->Next = tmp->Next; /*make link between adjacent nodes, this cause that the task being removed from the chain*/
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d004      	beq.n	8005b1a <qSchedulerRemoveTask+0x4e>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	e003      	b.n	8005b22 <qSchedulerRemoveTask+0x56>
        else QUARKTS.Head = tmp->Next; /*if the task is the head of the chain, move the head to the next node*/
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a07      	ldr	r2, [pc, #28]	; (8005b3c <qSchedulerRemoveTask+0x70>)
 8005b20:	6193      	str	r3, [r2, #24]
        Task->Next = NULL; /*Just in case the deleted task needs to be added later to the scheduling scheme, otherwise, this would fuck the whole chain*/
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
        return qTrue;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <qSchedulerRemoveTask+0x62>
    }
    return qFalse;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	20000254 	.word	0x20000254

08005b40 <_qScheduler_PriorizedInsert>:
/*============================================================================*/
static qTask_t* _qScheduler_PriorizedInsert(qTask_t *head, qTask_t *Task){ /*return the new head if modified*/
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
    if( (NULL == head ) || (Task->Priority > head->Priority) ){ /*Is the first task in the scheme or the task has the highest priority over all */
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <_qScheduler_PriorizedInsert+0x24>
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d904      	bls.n	8005b6e <_qScheduler_PriorizedInsert+0x2e>
        Task->Next = head; /*move the head and just add the task node on top*/
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	601a      	str	r2, [r3, #0]
        return Task; /*this task will be the new head*/
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	e004      	b.n	8005b78 <_qScheduler_PriorizedInsert+0x38>
    }
    _qScheduler_FindPlace( head, Task);
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f805 	bl	8005b80 <_qScheduler_FindPlace>
    return head; /*no change in the head, keep it*/
 8005b76:	687b      	ldr	r3, [r7, #4]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <_qScheduler_FindPlace>:
/*============================================================================*/
static void _qScheduler_FindPlace(qTask_t *head, qTask_t *Task){ /*find a new position for the task in the chain, when finded, put the task there*/
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
    qTask_t *tmp_node = NULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
    qPriority_t PrioTask = Task->Priority;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b94:	72fb      	strb	r3, [r7, #11]
    tmp_node = head; /*start the head with the highest priority task*/
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60fb      	str	r3, [r7, #12]
    while(tmp_node->Next && (PrioTask <= tmp_node->Next->Priority) ) { 
 8005b9a:	e002      	b.n	8005ba2 <_qScheduler_FindPlace+0x22>
        tmp_node = tmp_node->Next; /*find the right place for this task according its priority*/
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60fb      	str	r3, [r7, #12]
    while(tmp_node->Next && (PrioTask <= tmp_node->Next->Priority) ) { 
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d007      	beq.n	8005bba <_qScheduler_FindPlace+0x3a>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	7afa      	ldrb	r2, [r7, #11]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d9f0      	bls.n	8005b9c <_qScheduler_FindPlace+0x1c>
    }
    Task->Next = tmp_node->Next; /*the the new task  will be placed just after tmp*/
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	601a      	str	r2, [r3, #0]
    tmp_node->Next = Task; /*assign the task*/    
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	601a      	str	r2, [r3, #0]
}
 8005bc8:	bf00      	nop
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <_qScheduler_RearrangeChain>:
#ifdef Q_AUTO_CHAINREARRANGE
/*============================================================================*/
static qTask_t* _qScheduler_RearrangeChain(qTask_t *head){ /*this method rearrange the chain according the priority of all its nodes*/
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
    qTask_t *new_head = NULL, *tmp = head, *tmp1 = NULL;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	613b      	str	r3, [r7, #16]
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]
    qEnterCritical();
 8005be8:	f7ff fd5c 	bl	80056a4 <qEnterCritical>
    while(tmp){ /*start with a new head and re-insert the entire chain*/
 8005bec:	e009      	b.n	8005c02 <_qScheduler_RearrangeChain+0x2e>
        tmp1 = tmp;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	60fb      	str	r3, [r7, #12]
        tmp = tmp->Next;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	613b      	str	r3, [r7, #16]
        new_head = _qScheduler_PriorizedInsert( new_head, tmp1);  
 8005bf8:	68f9      	ldr	r1, [r7, #12]
 8005bfa:	6978      	ldr	r0, [r7, #20]
 8005bfc:	f7ff ffa0 	bl	8005b40 <_qScheduler_PriorizedInsert>
 8005c00:	6178      	str	r0, [r7, #20]
    while(tmp){ /*start with a new head and re-insert the entire chain*/
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1f2      	bne.n	8005bee <_qScheduler_RearrangeChain+0x1a>
    }
    QUARKTS.Flag.Init= qTrue; /*set the initialization flag*/
 8005c08:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <_qScheduler_RearrangeChain+0x4c>)
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    qExitCritical();
 8005c10:	f7ff fd58 	bl	80056c4 <qExitCritical>
    return new_head; /*return the new head*/
 8005c14:	697b      	ldr	r3, [r7, #20]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20000254 	.word	0x20000254

08005c24 <qTaskAttachQueue>:
Return value:

    Returns qTrue on success, otherwise returns qFalse;
*/
#ifdef Q_QUEUES
qBool_t qTaskAttachQueue(qTask_t *Task, qQueue_t *Queue, const qRBLinkMode_t Mode, uint8_t arg){
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	4611      	mov	r1, r2
 8005c30:	461a      	mov	r2, r3
 8005c32:	460b      	mov	r3, r1
 8005c34:	71fb      	strb	r3, [r7, #7]
 8005c36:	4613      	mov	r3, r2
 8005c38:	71bb      	strb	r3, [r7, #6]
    if(NULL==Queue || NULL==Task || Mode<qQUEUE_RECEIVER || Mode>qQUEUE_EMPTY) return qFalse;   /*Validate*/
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d008      	beq.n	8005c52 <qTaskAttachQueue+0x2e>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d005      	beq.n	8005c52 <qTaskAttachQueue+0x2e>
 8005c46:	79fb      	ldrb	r3, [r7, #7]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d902      	bls.n	8005c52 <qTaskAttachQueue+0x2e>
 8005c4c:	79fb      	ldrb	r3, [r7, #7]
 8005c4e:	2b06      	cmp	r3, #6
 8005c50:	d901      	bls.n	8005c56 <qTaskAttachQueue+0x32>
 8005c52:	2300      	movs	r3, #0
 8005c54:	e020      	b.n	8005c98 <qTaskAttachQueue+0x74>
    if(NULL==Queue->pHead) return qFalse;    
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <qTaskAttachQueue+0x3e>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	e01a      	b.n	8005c98 <qTaskAttachQueue+0x74>
    Task->Flag[Mode] = (qBool_t)((Mode==qQUEUE_COUNT)? arg : (arg!=qFalse)); /*if mode is qQUEUE_COUNT, use their arg value as count*/
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	2b05      	cmp	r3, #5
 8005c66:	d007      	beq.n	8005c78 <qTaskAttachQueue+0x54>
 8005c68:	79bb      	ldrb	r3, [r7, #6]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	bf14      	ite	ne
 8005c6e:	2301      	movne	r3, #1
 8005c70:	2300      	moveq	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	4619      	mov	r1, r3
 8005c76:	e000      	b.n	8005c7a <qTaskAttachQueue+0x56>
 8005c78:	79b9      	ldrb	r1, [r7, #6]
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	460a      	mov	r2, r1
 8005c82:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    Task->Queue = (arg>0)? Queue : NULL; /*reject, no valid arg input*/
 8005c86:	79bb      	ldrb	r3, [r7, #6]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <qTaskAttachQueue+0x6c>
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	e000      	b.n	8005c92 <qTaskAttachQueue+0x6e>
 8005c90:	2300      	movs	r3, #0
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	6153      	str	r3, [r2, #20]
    return qTrue;
 8005c96:	2301      	movs	r3, #1
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <_qCheckQueueEvents>:
/*============================================================================*/
static qTrigger_t _qCheckQueueEvents(qTask_t *Task){
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
    if(NULL==Task) return qTriggerNULL;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <_qCheckQueueEvents+0x12>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e04c      	b.n	8005d50 <_qCheckQueueEvents+0xac>
    if(NULL==Task->Queue) return qTriggerNULL;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <_qCheckQueueEvents+0x1e>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e046      	b.n	8005d50 <_qCheckQueueEvents+0xac>
    if(Task->Flag[_qIndex_QueueFull])       if(qQueueIsFull(Task->Queue))                                       return byQueueFull;           
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d009      	beq.n	8005ce2 <_qCheckQueueEvents+0x3e>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fc29 	bl	800652a <qQueueIsFull>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <_qCheckQueueEvents+0x3e>
 8005cde:	2305      	movs	r3, #5
 8005ce0:	e036      	b.n	8005d50 <_qCheckQueueEvents+0xac>
    if(Task->Flag[_qIndex_QueueCount]>0)    if(qQueueCount(Task->Queue) >= Task->Flag[_qIndex_QueueCount] )     return byQueueCount;            
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00f      	beq.n	8005d0e <_qCheckQueueEvents+0x6a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fc05 	bl	8006502 <qQueueCount>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d301      	bcc.n	8005d0e <_qCheckQueueEvents+0x6a>
 8005d0a:	2306      	movs	r3, #6
 8005d0c:	e020      	b.n	8005d50 <_qCheckQueueEvents+0xac>
    if(Task->Flag[_qIndex_QueueReceiver])   if(qQueueCount(Task->Queue) >0)                                     return byQueueReceiver;   
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d009      	beq.n	8005d2e <_qCheckQueueEvents+0x8a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fbef 	bl	8006502 <qQueueCount>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <_qCheckQueueEvents+0x8a>
 8005d2a:	2304      	movs	r3, #4
 8005d2c:	e010      	b.n	8005d50 <_qCheckQueueEvents+0xac>
    if(Task->Flag[_qIndex_QueueEmpty])      if(qQueueIsEmpty(Task->Queue))                                      return byQueueEmpty;       
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d009      	beq.n	8005d4e <_qCheckQueueEvents+0xaa>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fbc7 	bl	80064d2 <qQueueIsEmpty>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <_qCheckQueueEvents+0xaa>
 8005d4a:	2307      	movs	r3, #7
 8005d4c:	e000      	b.n	8005d50 <_qCheckQueueEvents+0xac>
    return qTriggerNULL;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <_qTriggerReleaseSchedEvent>:
#endif
/*============================================================================*/
static void _qTriggerReleaseSchedEvent(void){
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
    QUARKTS.Flag.Init = qFalse;
 8005d5c:	4b14      	ldr	r3, [pc, #80]	; (8005db0 <_qTriggerReleaseSchedEvent+0x58>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    QUARKTS.Flag.ReleaseSched = qFalse;   
 8005d64:	4b12      	ldr	r3, [pc, #72]	; (8005db0 <_qTriggerReleaseSchedEvent+0x58>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    QUARKTS.EventInfo.FirstCall = (qBool_t)(!QUARKTS.Flag.FCallReleased);    
 8005d6c:	4b10      	ldr	r3, [pc, #64]	; (8005db0 <_qTriggerReleaseSchedEvent+0x58>)
 8005d6e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	bf0c      	ite	eq
 8005d78:	2301      	moveq	r3, #1
 8005d7a:	2300      	movne	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	461a      	mov	r2, r3
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <_qTriggerReleaseSchedEvent+0x58>)
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    QUARKTS.EventInfo.Trigger = bySchedulingRelease;
 8005d86:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <_qTriggerReleaseSchedEvent+0x58>)
 8005d88:	2208      	movs	r2, #8
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    QUARKTS.EventInfo.TaskData = NULL;
 8005d8e:	4b08      	ldr	r3, [pc, #32]	; (8005db0 <_qTriggerReleaseSchedEvent+0x58>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	635a      	str	r2, [r3, #52]	; 0x34
    if(QUARKTS.ReleaseSchedCallback!=NULL) QUARKTS.ReleaseSchedCallback((qEvent_t)&QUARKTS.EventInfo);
 8005d94:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <_qTriggerReleaseSchedEvent+0x58>)
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <_qTriggerReleaseSchedEvent+0x4c>
 8005d9c:	4b04      	ldr	r3, [pc, #16]	; (8005db0 <_qTriggerReleaseSchedEvent+0x58>)
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	4804      	ldr	r0, [pc, #16]	; (8005db4 <_qTriggerReleaseSchedEvent+0x5c>)
 8005da2:	4798      	blx	r3
    QUARKTS.Flag.FCallIdle = qTrue;      
 8005da4:	4b02      	ldr	r3, [pc, #8]	; (8005db0 <_qTriggerReleaseSchedEvent+0x58>)
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8005dac:	bf00      	nop
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20000254 	.word	0x20000254
 8005db4:	20000288 	.word	0x20000288

08005db8 <qSchedulerGetTick>:
Feed the scheduler system tick. If TickProviderFcn is not provided in qSchedulerSetup, this 
call is mandatory and must be called once inside the dedicated timer interrupt service routine (ISR). 
*/    
void qSchedulerSysTick(void){_qSysTick_Epochs_++;}
/*============================================================================*/
qClock_t qSchedulerGetTick(void){   
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
	return ( NULL != QUARKTS.GetSysTick )? QUARKTS.GetSysTick() : _qSysTick_Epochs_;
 8005dbc:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <qSchedulerGetTick+0x20>)
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d004      	beq.n	8005dce <qSchedulerGetTick+0x16>
 8005dc4:	4b04      	ldr	r3, [pc, #16]	; (8005dd8 <qSchedulerGetTick+0x20>)
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc8:	4798      	blx	r3
 8005dca:	4603      	mov	r3, r0
 8005dcc:	e001      	b.n	8005dd2 <qSchedulerGetTick+0x1a>
 8005dce:	4b03      	ldr	r3, [pc, #12]	; (8005ddc <qSchedulerGetTick+0x24>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000254 	.word	0x20000254
 8005ddc:	20000294 	.word	0x20000294

08005de0 <qSchedulerRun>:
Executes the task-scheduler scheme. It must be called once after the task
pool has been defined.

  Note : qScheduleRun keeps the application in an endless loop
*/
void qSchedulerRun(void){
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
    qTask_t *Task = NULL; /*this pointer will hold the current node from the chain and/or the top enqueue node if available*/
 8005de6:	2300      	movs	r3, #0
 8005de8:	607b      	str	r3, [r7, #4]
    qSchedulerStartPoint{
 8005dea:	4b2d      	ldr	r3, [pc, #180]	; (8005ea0 <qSchedulerRun+0xc0>)
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        #ifdef Q_AUTO_CHAINREARRANGE
        if(!QUARKTS.Flag.Init) QUARKTS.Head = _qScheduler_RearrangeChain(QUARKTS.Head); /*if initial scheduling conditions changed, sort the chain by priority (init flag internally set)*/
 8005df2:	4b2b      	ldr	r3, [pc, #172]	; (8005ea0 <qSchedulerRun+0xc0>)
 8005df4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d107      	bne.n	8005e0e <qSchedulerRun+0x2e>
 8005dfe:	4b28      	ldr	r3, [pc, #160]	; (8005ea0 <qSchedulerRun+0xc0>)
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff fee6 	bl	8005bd4 <_qScheduler_RearrangeChain>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	4b25      	ldr	r3, [pc, #148]	; (8005ea0 <qSchedulerRun+0xc0>)
 8005e0c:	619a      	str	r2, [r3, #24]
        #endif
        #ifdef Q_PRIORITY_QUEUE
        if((Task = _qScheduler_PriorityQueueGet())) Task->State = _qScheduler_Dispatch(Task, byQueueExtraction);  /*Available queueded task will be dispatched in every scheduling cycle : the queue has the higher precedence*/    
 8005e0e:	f7ff fca3 	bl	8005758 <_qScheduler_PriorityQueueGet>
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d008      	beq.n	8005e2c <qSchedulerRun+0x4c>
 8005e1a:	2102      	movs	r1, #2
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f869 	bl	8005ef4 <_qScheduler_Dispatch>
 8005e22:	4603      	mov	r3, r0
 8005e24:	461a      	mov	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        #endif
        if(_qScheduler_ReadyTasksAvailable()){  /*Check if all the tasks from the chain fulfill the conditions to get the qReady state, if at least one gained it,  enter here*/
 8005e2c:	f000 f962 	bl	80060f4 <_qScheduler_ReadyTasksAvailable>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01c      	beq.n	8005e70 <qSchedulerRun+0x90>
            while((Task = _qScheduler_GetNodeFromChain())) /*Get node by node from the chain until no more available*/
 8005e36:	e014      	b.n	8005e62 <qSchedulerRun+0x82>
                Task->State = (qTaskState_t) ((qReady == Task->State) ? _qScheduler_Dispatch(Task, Task->Trigger) : qWaiting);  /*Dispatch the qReady tasks, otherwise put it in qWaiting State*/
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d10a      	bne.n	8005e5a <qSchedulerRun+0x7a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f850 	bl	8005ef4 <_qScheduler_Dispatch>
 8005e54:	4603      	mov	r3, r0
 8005e56:	461a      	mov	r2, r3
 8005e58:	e000      	b.n	8005e5c <qSchedulerRun+0x7c>
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            while((Task = _qScheduler_GetNodeFromChain())) /*Get node by node from the chain until no more available*/
 8005e62:	f000 f81f 	bl	8005ea4 <_qScheduler_GetNodeFromChain>
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1e4      	bne.n	8005e38 <qSchedulerRun+0x58>
 8005e6e:	e00a      	b.n	8005e86 <qSchedulerRun+0xa6>
        }
        else if( NULL==Task && QUARKTS.IDLECallback) _qScheduler_Dispatch(NULL, byNoReadyTasks); /*no tasks are available for execution, run the idle task*/
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d107      	bne.n	8005e86 <qSchedulerRun+0xa6>
 8005e76:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <qSchedulerRun+0xc0>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <qSchedulerRun+0xa6>
 8005e7e:	2109      	movs	r1, #9
 8005e80:	2000      	movs	r0, #0
 8005e82:	f000 f837 	bl	8005ef4 <_qScheduler_Dispatch>
    }qSchedulerEndPoint; /*scheduling end-point (also check for scheduling-release request)*/
 8005e86:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <qSchedulerRun+0xc0>)
 8005e88:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0af      	beq.n	8005df2 <qSchedulerRun+0x12>
 8005e92:	f7ff ff61 	bl	8005d58 <_qTriggerReleaseSchedEvent>
}
 8005e96:	bf00      	nop
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20000254 	.word	0x20000254

08005ea4 <_qScheduler_GetNodeFromChain>:
/*============================================================================*/
static qTask_t* _qScheduler_GetNodeFromChain(void){ 
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
    static qTask_t *ChainIterator = __qChainInitializer; /*used to keep on track the current chain position*/
    qTask_t *Node;  /*used the hold the node*/
    if(__qChainInitializer == ChainIterator) ChainIterator = QUARKTS.Head; /*First call, start from the head*/
 8005eaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ee8 <_qScheduler_GetNodeFromChain+0x44>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a0f      	ldr	r2, [pc, #60]	; (8005eec <_qScheduler_GetNodeFromChain+0x48>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d103      	bne.n	8005ebc <_qScheduler_GetNodeFromChain+0x18>
 8005eb4:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <_qScheduler_GetNodeFromChain+0x4c>)
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	4a0b      	ldr	r2, [pc, #44]	; (8005ee8 <_qScheduler_GetNodeFromChain+0x44>)
 8005eba:	6013      	str	r3, [r2, #0]
    Node = ChainIterator; /*obtain the current node from the chain*/
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <_qScheduler_GetNodeFromChain+0x44>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	607b      	str	r3, [r7, #4]
    ChainIterator = (ChainIterator)? ChainIterator->Next : QUARKTS.Head; /*Tail reached, reset the iterator to the head*/
 8005ec2:	4b09      	ldr	r3, [pc, #36]	; (8005ee8 <_qScheduler_GetNodeFromChain+0x44>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <_qScheduler_GetNodeFromChain+0x2e>
 8005eca:	4b07      	ldr	r3, [pc, #28]	; (8005ee8 <_qScheduler_GetNodeFromChain+0x44>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	e001      	b.n	8005ed6 <_qScheduler_GetNodeFromChain+0x32>
 8005ed2:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <_qScheduler_GetNodeFromChain+0x4c>)
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	4a04      	ldr	r2, [pc, #16]	; (8005ee8 <_qScheduler_GetNodeFromChain+0x44>)
 8005ed8:	6013      	str	r3, [r2, #0]
    return Node; /*return the task node at current chain position*/
 8005eda:	687b      	ldr	r3, [r7, #4]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	20000024 	.word	0x20000024
 8005eec:	20000294 	.word	0x20000294
 8005ef0:	20000254 	.word	0x20000254

08005ef4 <_qScheduler_Dispatch>:
/*============================================================================*/
static qTaskState_t _qScheduler_Dispatch(qTask_t *Task, const qTrigger_t Event){
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	70fb      	strb	r3, [r7, #3]
    switch(Event){ /*take the necessary actions before dispatching, depending on the event that triggered the task*/
 8005f00:	78fb      	ldrb	r3, [r7, #3]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	f200 8097 	bhi.w	8006038 <_qScheduler_Dispatch+0x144>
 8005f0a:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <_qScheduler_Dispatch+0x1c>)
 8005f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f10:	08005f35 	.word	0x08005f35
 8005f14:	08005fed 	.word	0x08005fed
 8005f18:	08005fbf 	.word	0x08005fbf
 8005f1c:	08005fd1 	.word	0x08005fd1
 8005f20:	08005fe3 	.word	0x08005fe3
 8005f24:	08005fe3 	.word	0x08005fe3
 8005f28:	08005fe3 	.word	0x08005fe3
 8005f2c:	08006039 	.word	0x08006039
 8005f30:	08005ffd 	.word	0x08005ffd
        case byTimeElapsed:
            /*handle the iteration value and the FirstIteration flag*/
            Task->Iterations = (QUARKTS.EventInfo.FirstIteration = (qBool_t)((Task->Iterations!=qPeriodic) && (Task->Iterations<0)))? -Task->Iterations : Task->Iterations;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f38:	b21b      	sxth	r3, r3
 8005f3a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8005f3e:	d006      	beq.n	8005f4e <_qScheduler_Dispatch+0x5a>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f44:	b21b      	sxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	da01      	bge.n	8005f4e <_qScheduler_Dispatch+0x5a>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <_qScheduler_Dispatch+0x5c>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	4a66      	ldr	r2, [pc, #408]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 8005f54:	4619      	mov	r1, r3
 8005f56:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d007      	beq.n	8005f6e <_qScheduler_Dispatch+0x7a>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f62:	b21b      	sxth	r3, r3
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	425b      	negs	r3, r3
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	b21b      	sxth	r3, r3
 8005f6c:	e002      	b.n	8005f74 <_qScheduler_Dispatch+0x80>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f72:	b21b      	sxth	r3, r3
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	84d3      	strh	r3, [r2, #38]	; 0x26
            if( qPeriodic!= Task->Iterations) Task->Iterations--; /*Decrease the iteration value*/
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f7c:	b21b      	sxth	r3, r3
 8005f7e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8005f82:	d008      	beq.n	8005f96 <_qScheduler_Dispatch+0xa2>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f88:	b21b      	sxth	r3, r3
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	b21a      	sxth	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	84da      	strh	r2, [r3, #38]	; 0x26
            if( (QUARKTS.EventInfo.LastIteration = (qBool_t)(0 == Task->Iterations)) ) Task->Flag[_qIndex_Enabled] = qFalse; /*When the iteration value is reached, the task will be disabled*/            
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f9a:	b21b      	sxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	bf0c      	ite	eq
 8005fa0:	2301      	moveq	r3, #1
 8005fa2:	2300      	movne	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	4b50      	ldr	r3, [pc, #320]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 8005faa:	4611      	mov	r1, r2
 8005fac:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
 8005fb0:	2a00      	cmp	r2, #0
 8005fb2:	d043      	beq.n	800603c <_qScheduler_Dispatch+0x148>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            break;
 8005fbc:	e03e      	b.n	800603c <_qScheduler_Dispatch+0x148>
        case byAsyncEvent:
            QUARKTS.EventInfo.EventData = Task->AsyncData; /*Transfer async-data to the eventinfo structure*/
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	4a4a      	ldr	r2, [pc, #296]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 8005fc4:	6393      	str	r3, [r2, #56]	; 0x38
            Task->Flag[_qIndex_AsyncRun] = qFalse; /*Clear the async flag*/            
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
            break;
 8005fce:	e036      	b.n	800603e <_qScheduler_Dispatch+0x14a>
        #ifdef Q_QUEUES    
        case byQueueReceiver:
            QUARKTS.EventInfo.EventData = qQueuePeek(Task->Queue); /*the EventData will point to the RBuffer front-data*/
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fac2 	bl	800655e <qQueuePeek>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	4b43      	ldr	r3, [pc, #268]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 8005fe0:	e02d      	b.n	800603e <_qScheduler_Dispatch+0x14a>
        case byQueueFull: case byQueueCount: case byQueueEmpty: 
            QUARKTS.EventInfo.EventData = (void*)Task->Queue;  /*the EventData will point to the the linked RingBuffer*/
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	4a41      	ldr	r2, [pc, #260]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 8005fe8:	6393      	str	r3, [r2, #56]	; 0x38
            break;
 8005fea:	e028      	b.n	800603e <_qScheduler_Dispatch+0x14a>
        #endif
        #ifdef Q_PRIORITY_QUEUE
        case byQueueExtraction:
            QUARKTS.EventInfo.EventData = QUARKTS.QueueData; /*get the extracted data from queue*/
 8005fec:	4b3f      	ldr	r3, [pc, #252]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	4a3e      	ldr	r2, [pc, #248]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 8005ff2:	6393      	str	r3, [r2, #56]	; 0x38
            QUARKTS.QueueData = NULL;
 8005ff4:	4b3d      	ldr	r3, [pc, #244]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	609a      	str	r2, [r3, #8]
            break;
 8005ffa:	e020      	b.n	800603e <_qScheduler_Dispatch+0x14a>
        #endif
        case byNoReadyTasks: /*only used for the idle task*/
            QUARKTS.EventInfo.FirstCall = (qBool_t)(!QUARKTS.Flag.FCallIdle);
 8005ffc:	4b3b      	ldr	r3, [pc, #236]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 8005ffe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	bf0c      	ite	eq
 8006008:	2301      	moveq	r3, #1
 800600a:	2300      	movne	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	461a      	mov	r2, r3
 8006010:	4b36      	ldr	r3, [pc, #216]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 8006012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            QUARKTS.EventInfo.Trigger = Event;
 8006016:	4a35      	ldr	r2, [pc, #212]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
            QUARKTS.EventInfo.TaskData = NULL;
 800601e:	4b33      	ldr	r3, [pc, #204]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 8006020:	2200      	movs	r2, #0
 8006022:	635a      	str	r2, [r3, #52]	; 0x34
            QUARKTS.IDLECallback((qEvent_t)&QUARKTS.EventInfo); /*run the idle callback*/
 8006024:	4b31      	ldr	r3, [pc, #196]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	4831      	ldr	r0, [pc, #196]	; (80060f0 <_qScheduler_Dispatch+0x1fc>)
 800602a:	4798      	blx	r3
            QUARKTS.Flag.FCallIdle = qTrue;      
 800602c:	4b2f      	ldr	r3, [pc, #188]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            return qSuspended; /*No more things to do*/
 8006034:	2303      	movs	r3, #3
 8006036:	e055      	b.n	80060e4 <_qScheduler_Dispatch+0x1f0>
        default: break;
 8006038:	bf00      	nop
 800603a:	e000      	b.n	800603e <_qScheduler_Dispatch+0x14a>
            break;
 800603c:	bf00      	nop
    }
    Task->State = qRunning; /*put the task in running state*/
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2202      	movs	r2, #2
 8006042:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    /*Fill the event info structure*/
    _qEvent_FillCommonFields(QUARKTS.EventInfo, Event, (qBool_t)(!Task->Flag[_qIndex_InitFlag]), Task->TaskData); /*Fill common fields of EventInfo: Trigger, FirstCall and TaskData*/ 
 8006046:	4a29      	ldr	r2, [pc, #164]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 8006048:	78fb      	ldrb	r3, [r7, #3]
 800604a:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	bf0c      	ite	eq
 800605a:	2301      	moveq	r3, #1
 800605c:	2300      	movne	r3, #0
 800605e:	b2db      	uxtb	r3, r3
 8006060:	461a      	mov	r2, r3
 8006062:	4b22      	ldr	r3, [pc, #136]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	4a1f      	ldr	r2, [pc, #124]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 800606e:	6353      	str	r3, [r2, #52]	; 0x34
    QUARKTS.CurrentRunningTask = Task; /*needed for qTaskSelf()*/
 8006070:	4a1e      	ldr	r2, [pc, #120]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	62d3      	str	r3, [r2, #44]	; 0x2c
    if ( NULL != Task->StateMachine  && __qFSMCallbackMode==Task->Callback) qStateMachine_Run(Task->StateMachine, (void*)&QUARKTS.EventInfo);  /*If the task has a FSM attached, just run it*/  
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00a      	beq.n	8006094 <_qScheduler_Dispatch+0x1a0>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d106      	bne.n	8006094 <_qScheduler_Dispatch+0x1a0>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	4919      	ldr	r1, [pc, #100]	; (80060f0 <_qScheduler_Dispatch+0x1fc>)
 800608c:	4618      	mov	r0, r3
 800608e:	f000 f907 	bl	80062a0 <qStateMachine_Run>
 8006092:	e007      	b.n	80060a4 <_qScheduler_Dispatch+0x1b0>
    else if ( NULL != Task->Callback ) Task->Callback((qEvent_t)&QUARKTS.EventInfo); /*else, just launch the callback function*/        
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d003      	beq.n	80060a4 <_qScheduler_Dispatch+0x1b0>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	4813      	ldr	r0, [pc, #76]	; (80060f0 <_qScheduler_Dispatch+0x1fc>)
 80060a2:	4798      	blx	r3
    QUARKTS.CurrentRunningTask = NULL;
 80060a4:	4b11      	ldr	r3, [pc, #68]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	62da      	str	r2, [r3, #44]	; 0x2c
    #ifdef Q_QUEUES 
        if( byQueueReceiver == Event) qQueueRemoveFront(Task->Queue);  /*remove the data from the Queue, if the event was byQueueDequeue*/
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	d104      	bne.n	80060ba <_qScheduler_Dispatch+0x1c6>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 fa79 	bl	80065ac <qQueueRemoveFront>
    #endif
    Task->Flag[_qIndex_InitFlag] = qTrue; /*clear the init flag*/
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    QUARKTS.EventInfo.FirstIteration = qFalse;
 80060c2:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    QUARKTS.EventInfo.LastIteration =  qFalse; 
 80060ca:	4b08      	ldr	r3, [pc, #32]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    QUARKTS.EventInfo.EventData = NULL; /*clear the eventdata*/
 80060d2:	4b06      	ldr	r3, [pc, #24]	; (80060ec <_qScheduler_Dispatch+0x1f8>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	639a      	str	r2, [r3, #56]	; 0x38
    Task->Cycles++; /*increase the task cycles value*/
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	621a      	str	r2, [r3, #32]
    return qSuspended;
 80060e2:	2303      	movs	r3, #3
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	20000254 	.word	0x20000254
 80060f0:	20000288 	.word	0x20000288

080060f4 <_qScheduler_ReadyTasksAvailable>:
/*============================================================================*/
static qBool_t _qScheduler_ReadyTasksAvailable(void){ /*this method checks for tasks that fulfill the conditions to get the qReady state*/
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
    qTask_t *Task = NULL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	607b      	str	r3, [r7, #4]
    #ifdef Q_QUEUES 
    qTrigger_t trg = qTriggerNULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	70bb      	strb	r3, [r7, #2]
    #endif
    qBool_t nTaskReady = qFalse; /*the return is to notify that at least one task gained the qReady state*/
 8006102:	2300      	movs	r3, #0
 8006104:	70fb      	strb	r3, [r7, #3]
    for(Task = QUARKTS.Head; Task; Task = Task->Next){ /*loop every task in the chain : only one event will be verified by node*/
 8006106:	4b40      	ldr	r3, [pc, #256]	; (8006208 <_qScheduler_ReadyTasksAvailable+0x114>)
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	607b      	str	r3, [r7, #4]
 800610c:	e073      	b.n	80061f6 <_qScheduler_ReadyTasksAvailable+0x102>
        if(Task->Flag[_qIndex_Enabled]){ /*nested check for timed task, check the first requirement(the task must be enabled)*/
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d042      	beq.n	80061a0 <_qScheduler_ReadyTasksAvailable+0xac>
            if(_qTaskHasPendingIterations(Task)){ /*then task should be periodic or must have available iters*/
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800611e:	b21b      	sxth	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	da0c      	bge.n	800613e <_qScheduler_ReadyTasksAvailable+0x4a>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006128:	b21b      	sxth	r3, r3
 800612a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800612e:	d006      	beq.n	800613e <_qScheduler_ReadyTasksAvailable+0x4a>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006134:	b21b      	sxth	r3, r3
 8006136:	425b      	negs	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	dc0b      	bgt.n	8006154 <_qScheduler_ReadyTasksAvailable+0x60>
 800613c:	e004      	b.n	8006148 <_qScheduler_ReadyTasksAvailable+0x54>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006142:	b21b      	sxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	dc05      	bgt.n	8006154 <_qScheduler_ReadyTasksAvailable+0x60>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800614c:	b21b      	sxth	r3, r3
 800614e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8006152:	d125      	bne.n	80061a0 <_qScheduler_ReadyTasksAvailable+0xac>
                if(_qTaskDeadlineReached(Task)){ /*finally, check the time deadline*/
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	ee07 3a90 	vmov	s15, r3
 800615c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006160:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006168:	d00a      	beq.n	8006180 <_qScheduler_ReadyTasksAvailable+0x8c>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69da      	ldr	r2, [r3, #28]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	4619      	mov	r1, r3
 8006174:	4610      	mov	r0, r2
 8006176:	f7ff fa81 	bl	800567c <_qScheduler_TimeDeadlineCheck>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00f      	beq.n	80061a0 <_qScheduler_ReadyTasksAvailable+0xac>
                    Task->ClockStart = qSchedulerGetTick(); /*Restart the task time*/
 8006180:	f7ff fe1a 	bl	8005db8 <qSchedulerGetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	61da      	str	r2, [r3, #28]
                    Task->State = qReady; /*Put the task in ready state*/
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                    Task->Trigger = byTimeElapsed; /*Set the corresponding trigger*/
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                    nTaskReady = qTrue; /*at least one task in the chain is ready to run*/
 800619a:	2301      	movs	r3, #1
 800619c:	70fb      	strb	r3, [r7, #3]
                    continue; /*check the next task*/                   
 800619e:	e027      	b.n	80061f0 <_qScheduler_ReadyTasksAvailable+0xfc>
                }
            }
        }
        #ifdef Q_QUEUES  
        if((trg=_qCheckQueueEvents(Task)) != qTriggerNULL){ /*If the deadline has not met, check if there is a RBuffer event available*/
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7ff fd7f 	bl	8005ca4 <_qCheckQueueEvents>
 80061a6:	4603      	mov	r3, r0
 80061a8:	70bb      	strb	r3, [r7, #2]
 80061aa:	78bb      	ldrb	r3, [r7, #2]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <_qScheduler_ReadyTasksAvailable+0xd2>
            Task->State = qReady; /*Put the task in ready state*/
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            Task->Trigger = trg; /*If a RBuffer event exist, the flag will be available in the <trg> variable*/
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	78ba      	ldrb	r2, [r7, #2]
 80061bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            nTaskReady = qTrue;  /*at least one task in the chain is ready to run*/
 80061c0:	2301      	movs	r3, #1
 80061c2:	70fb      	strb	r3, [r7, #3]
            continue; /*check the next task*/
 80061c4:	e014      	b.n	80061f0 <_qScheduler_ReadyTasksAvailable+0xfc>
        }
        #endif
        if( Task->Flag[_qIndex_AsyncRun]){   /*The last check will be if the task has an async event*/
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <_qScheduler_ReadyTasksAvailable+0xf4>
            Task->State = qReady; /*Put the task in ready state*/
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            Task->Trigger = byAsyncEvent; /*Set the corresponding trigger*/
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2203      	movs	r2, #3
 80061de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            nTaskReady = qTrue;  /*at least one task in the chain is ready to run*/
 80061e2:	2301      	movs	r3, #1
 80061e4:	70fb      	strb	r3, [r7, #3]
            continue; /*check the next task*/
 80061e6:	e003      	b.n	80061f0 <_qScheduler_ReadyTasksAvailable+0xfc>
        }
        Task->State = qSuspended; /*If the task has no available events, put it in a suspended state*/
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2203      	movs	r2, #3
 80061ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    for(Task = QUARKTS.Head; Task; Task = Task->Next){ /*loop every task in the chain : only one event will be verified by node*/
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	607b      	str	r3, [r7, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d188      	bne.n	800610e <_qScheduler_ReadyTasksAvailable+0x1a>
    }
    return nTaskReady;
 80061fc:	78fb      	ldrb	r3, [r7, #3]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000254 	.word	0x20000254

0800620c <qStateMachine_Init>:

Return value:

    Returns qTrue on success, otherwise returns qFalse;
*/
qBool_t qStateMachine_Init(qSM_t *obj, qSM_State_t InitState, qSM_SubState_t SuccessState, qSM_SubState_t FailureState, qSM_SubState_t UnexpectedState, qSM_SubState_t BeforeAnyState){
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
    if( NULL==obj || NULL==InitState ) return qFalse;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <qStateMachine_Init+0x1a>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <qStateMachine_Init+0x1e>
 8006226:	2300      	movs	r3, #0
 8006228:	e024      	b.n	8006274 <qStateMachine_Init+0x68>
    obj->NextState = InitState;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	601a      	str	r2, [r3, #0]
    qConstField_Set(qSM_State_t, obj->PreviousState)/*obj->PreviousState*/ = NULL;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3304      	adds	r3, #4
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]
    qConstField_Set(qBool_t, obj->StateFirstEntry)/*obj->StateFirstEntry*/ = 0;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	330e      	adds	r3, #14
 800623c:	2200      	movs	r2, #0
 800623e:	701a      	strb	r2, [r3, #0]
    qConstField_Set(qSM_Status_t, obj->PreviousReturnStatus)/*obj->PreviousReturnStatus*/ = qSM_EXIT_SUCCESS;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	330c      	adds	r3, #12
 8006244:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006248:	801a      	strh	r2, [r3, #0]
    qConstField_Set(qSM_SubState_t, obj->qPrivate.__Failure)/*obj->qPrivate.__Failure*/ = FailureState;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3314      	adds	r3, #20
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	601a      	str	r2, [r3, #0]
    qConstField_Set(qSM_SubState_t, obj->qPrivate.__Success)/*obj->qPrivate.__Success*/ = SuccessState;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3318      	adds	r3, #24
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	601a      	str	r2, [r3, #0]
    qConstField_Set(qSM_SubState_t, obj->qPrivate.__Unexpected)/*obj->qPrivate.__Unexpected*/ = UnexpectedState;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	331c      	adds	r3, #28
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	601a      	str	r2, [r3, #0]
    qConstField_Set(qSM_SubState_t, obj->qPrivate.__BeforeAnyState)/*obj->qPrivate.__BeforeAnyState*/ = BeforeAnyState;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3320      	adds	r3, #32
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	601a      	str	r2, [r3, #0]
    qConstField_Set(qSM_State_t, obj->LastState)/*obj->LastState*/ = NULL;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3308      	adds	r3, #8
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]
    return qTrue;
 8006272:	2301      	movs	r3, #1
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <qStatemachine_ExecSubStateIfAvailable>:
/*============================================================================*/
static void qStatemachine_ExecSubStateIfAvailable(qSM_SubState_t substate, qSM_t* obj){
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
    if (NULL != substate) substate(obj);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <qStatemachine_ExecSubStateIfAvailable+0x16>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6838      	ldr	r0, [r7, #0]
 8006294:	4798      	blx	r3
}
 8006296:	bf00      	nop
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <qStateMachine_Run>:
    - Data : Represents the FSM arguments. All arguments must be passed by 
             reference and cast to (void *). Only one argument is allowed, so,
             for multiple arguments, create a structure that contains all of 
             the arguments and pass a pointer to that structure.
*/    
void qStateMachine_Run(qSM_t *obj, void *Data){
 80062a0:	b590      	push	{r4, r7, lr}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
    qSM_State_t prev  = NULL; /*used to hold the previous state*/
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]
    if( NULL == obj ) return;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d057      	beq.n	8006364 <qStateMachine_Run+0xc4>
    qConstField_Set(void* ,obj->Data)/*obj->Data*/ = Data;   /*pass the data through the fsm*/
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3310      	adds	r3, #16
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	601a      	str	r2, [r3, #0]
    qStatemachine_ExecSubStateIfAvailable( obj->qPrivate.__BeforeAnyState , obj); /*eval the BeforeAnyState if available*/
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff ffdc 	bl	8006280 <qStatemachine_ExecSubStateIfAvailable>
    if( NULL != obj->NextState ){ /*eval nextState if available*/
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d025      	beq.n	800631c <qStateMachine_Run+0x7c>
        qConstField_Set(qBool_t, obj->StateFirstEntry)/*obj->StateFirstEntry*/ = (qBool_t)(obj->LastState != obj->NextState);  /*Get the StateFirstEntry flag*/
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	429a      	cmp	r2, r3
 80062da:	bf14      	ite	ne
 80062dc:	2301      	movne	r3, #1
 80062de:	2300      	moveq	r3, #0
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	330e      	adds	r3, #14
 80062e6:	701a      	strb	r2, [r3, #0]
        if(obj->StateFirstEntry) qConstField_Set(qSM_State_t, obj->PreviousState)/*obj->PreviousState*/ = obj->LastState ; /*if StateFistEntry is set, update the PreviousState*/
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	7b9b      	ldrb	r3, [r3, #14]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d004      	beq.n	80062fa <qStateMachine_Run+0x5a>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3304      	adds	r3, #4
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6892      	ldr	r2, [r2, #8]
 80062f8:	601a      	str	r2, [r3, #0]
        prev = obj->NextState; /*keep the next state in prev for LastState update*/
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]
        qConstField_Set(qSM_Status_t, obj->PreviousReturnStatus)/*obj->PreviousReturnStatus*/ = obj->NextState(obj); /*Eval the current state, and get their return status*/
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	f102 040c 	add.w	r4, r2, #12
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4798      	blx	r3
 800630e:	4603      	mov	r3, r0
 8006310:	8023      	strh	r3, [r4, #0]
        qConstField_Set(qSM_State_t, obj->LastState)/*obj->LastState*/ = prev; /*update the LastState*/
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3308      	adds	r3, #8
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	e004      	b.n	8006326 <qStateMachine_Run+0x86>
    }
    else    qConstField_Set(qSM_Status_t, obj->PreviousReturnStatus)/*obj->PreviousReturnStatus*/ = qSM_EXIT_FAILURE; /*otherwise jump to the failure state*/
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	330c      	adds	r3, #12
 8006320:	f248 0201 	movw	r2, #32769	; 0x8001
 8006324:	801a      	strh	r2, [r3, #0]
    
    switch(obj->PreviousReturnStatus){ /*Check return status to eval extra states*/
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800632c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8006330:	d009      	beq.n	8006346 <qStateMachine_Run+0xa6>
 8006332:	4a0e      	ldr	r2, [pc, #56]	; (800636c <qStateMachine_Run+0xcc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d10d      	bne.n	8006354 <qStateMachine_Run+0xb4>
        case qSM_EXIT_FAILURE:  qStatemachine_ExecSubStateIfAvailable( obj->qPrivate.__Failure, obj); /*Run failure state if available*/
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff ff9e 	bl	8006280 <qStatemachine_ExecSubStateIfAvailable>
            break;
 8006344:	e00f      	b.n	8006366 <qStateMachine_Run+0xc6>
        case qSM_EXIT_SUCCESS:  qStatemachine_ExecSubStateIfAvailable( obj->qPrivate.__Success, obj); /*Run success state if available*/
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff ff97 	bl	8006280 <qStatemachine_ExecSubStateIfAvailable>
            break;
 8006352:	e008      	b.n	8006366 <qStateMachine_Run+0xc6>
        default:                qStatemachine_ExecSubStateIfAvailable( obj->qPrivate.__Unexpected, obj ); /*Run unexpected state if available*/
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	6879      	ldr	r1, [r7, #4]
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff ff90 	bl	8006280 <qStatemachine_ExecSubStateIfAvailable>
            break;
 8006360:	bf00      	nop
 8006362:	e000      	b.n	8006366 <qStateMachine_Run+0xc6>
    if( NULL == obj ) return;
 8006364:	bf00      	nop
    }
 }
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	bd90      	pop	{r4, r7, pc}
 800636c:	ffff8001 	.word	0xffff8001

08006370 <qSTimerSet>:

Return value:

    Returns qTrue on success, otherwise, returns qFalse.
*/
qBool_t qSTimerSet(qSTimer_t *obj, const qTime_t Time){
 8006370:	b590      	push	{r4, r7, lr}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	ed87 0a00 	vstr	s0, [r7]
    if(NULL==obj) return qFalse;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <qSTimerSet+0x16>
 8006382:	2300      	movs	r3, #0
 8006384:	e011      	b.n	80063aa <qSTimerSet+0x3a>
    qConstField_Set(qClock_t, obj->TV)/*obj->TV*/ = qTime2Clock(Time); /*set the STimer time in epochs*/
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	1d1c      	adds	r4, r3, #4
 800638a:	ed97 0a00 	vldr	s0, [r7]
 800638e:	f7ff f9a9 	bl	80056e4 <qTime2Clock>
 8006392:	4603      	mov	r3, r0
 8006394:	6023      	str	r3, [r4, #0]
    qConstField_Set(qClock_t, obj->Start)/*obj->Start*/ = qSchedulerGetTick(); /*set the init time of the STimer with the current system epoch value*/
 8006396:	687c      	ldr	r4, [r7, #4]
 8006398:	f7ff fd0e 	bl	8005db8 <qSchedulerGetTick>
 800639c:	4603      	mov	r3, r0
 800639e:	6023      	str	r3, [r4, #0]
    qConstField_Set(qBool_t, obj->SR)/*obj->SR*/ = qTrue; /*enable the STimer*/
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3308      	adds	r3, #8
 80063a4:	2201      	movs	r2, #1
 80063a6:	701a      	strb	r2, [r3, #0]
    return qTrue;
 80063a8:	2301      	movs	r3, #1
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd90      	pop	{r4, r7, pc}

080063b2 <qSTimerExpired>:

    Returns qTrue when STimer expires, otherwise, returns qFalse.
    > Note 1: A disarmed STimer also returns false.

*/
qBool_t qSTimerExpired(const qSTimer_t *obj){
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b082      	sub	sp, #8
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
    if(NULL==obj) return qFalse;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <qSTimerExpired+0x12>
 80063c0:	2300      	movs	r3, #0
 80063c2:	e010      	b.n	80063e6 <qSTimerExpired+0x34>
    if(!obj->SR) return qFalse; 
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	7a1b      	ldrb	r3, [r3, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <qSTimerExpired+0x1e>
 80063cc:	2300      	movs	r3, #0
 80063ce:	e00a      	b.n	80063e6 <qSTimerExpired+0x34>
    return (qBool_t)(qSTimerElapsed(obj)>=obj->TV); 
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f80c 	bl	80063ee <qSTimerElapsed>
 80063d6:	4602      	mov	r2, r0
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	429a      	cmp	r2, r3
 80063de:	bf2c      	ite	cs
 80063e0:	2301      	movcs	r3, #1
 80063e2:	2300      	movcc	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <qSTimerElapsed>:

Return value:

    The Elapsed time specified in epochs
*/
qClock_t qSTimerElapsed(const qSTimer_t *obj){
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
    if(NULL==obj) return 0ul;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <qSTimerElapsed+0x12>
 80063fc:	2300      	movs	r3, #0
 80063fe:	e00b      	b.n	8006418 <qSTimerElapsed+0x2a>
    if(!obj->SR) return 0;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	7a1b      	ldrb	r3, [r3, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <qSTimerElapsed+0x1e>
 8006408:	2300      	movs	r3, #0
 800640a:	e005      	b.n	8006418 <qSTimerElapsed+0x2a>
    return (qSchedulerGetTick()- obj->Start);
 800640c:	f7ff fcd4 	bl	8005db8 <qSchedulerGetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	1ad3      	subs	r3, r2, r3
}
 8006418:	4618      	mov	r0, r3
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <qQueueCreate>:
    Return value:

    qTrue on success, otherwise returns qFalse.

 */
qBool_t qQueueCreate(qQueue_t *obj, void* DataArea, qSize_t ItemSize, qSize_t ItemsCount ){
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	4611      	mov	r1, r2
 800642c:	461a      	mov	r2, r3
 800642e:	460b      	mov	r3, r1
 8006430:	80fb      	strh	r3, [r7, #6]
 8006432:	4613      	mov	r3, r2
 8006434:	80bb      	strh	r3, [r7, #4]
    if( NULL == obj || NULL == DataArea || ItemsCount <= 0 || ItemsCount <= 0)  return qFalse;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d008      	beq.n	800644e <qQueueCreate+0x2e>
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d005      	beq.n	800644e <qQueueCreate+0x2e>
 8006442:	88bb      	ldrh	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <qQueueCreate+0x2e>
 8006448:	88bb      	ldrh	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <qQueueCreate+0x32>
 800644e:	2300      	movs	r3, #0
 8006450:	e018      	b.n	8006484 <qQueueCreate+0x64>
    obj->ItemsCount = ItemsCount;   /* Initialise the queue members*/
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	88ba      	ldrh	r2, [r7, #4]
 8006456:	825a      	strh	r2, [r3, #18]
    obj->ItemSize = ItemSize;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	88fa      	ldrh	r2, [r7, #6]
 800645c:	829a      	strh	r2, [r3, #20]
    obj->pHead = DataArea;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	601a      	str	r2, [r3, #0]
    obj->pTail = obj->pHead + (obj->ItemsCount * obj->ItemSize); 
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	8a52      	ldrh	r2, [r2, #18]
 800646c:	4611      	mov	r1, r2
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	8a92      	ldrh	r2, [r2, #20]
 8006472:	fb02 f201 	mul.w	r2, r2, r1
 8006476:	441a      	add	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	605a      	str	r2, [r3, #4]
    qQueueReset(obj);
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f805 	bl	800648c <qQueueReset>
    return qTrue;
 8006482:	2301      	movs	r3, #1
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <qQueueReset>:
 
Parameters:

    - obj : a pointer to the Queue object
*/
void qQueueReset(qQueue_t *obj){
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
    if(NULL == obj) return;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d017      	beq.n	80064ca <qQueueReset+0x3e>
    qEnterCritical();
 800649a:	f7ff f903 	bl	80056a4 <qEnterCritical>
    obj->ItemsWaiting = 0u;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	821a      	strh	r2, [r3, #16]
    obj->pcWriteTo = obj->pHead;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	609a      	str	r2, [r3, #8]
    obj->pcReadFrom = obj->pHead + ( ( obj->ItemsCount - 1u ) * obj->ItemSize );
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8a5b      	ldrh	r3, [r3, #18]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	8a89      	ldrh	r1, [r1, #20]
 80064ba:	fb01 f303 	mul.w	r3, r1, r3
 80064be:	441a      	add	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]
    qExitCritical();
 80064c4:	f7ff f8fe 	bl	80056c4 <qExitCritical>
 80064c8:	e000      	b.n	80064cc <qQueueReset+0x40>
    if(NULL == obj) return;
 80064ca:	bf00      	nop
}
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <qQueueIsEmpty>:
  
Return value:

    qTrue if the Queue is empty, qFalse if it is not.
 */
qBool_t qQueueIsEmpty(qQueue_t *obj){
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
    return (qBool_t)(obj ?  obj->ItemsWaiting == 0u : qTrue);    
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d009      	beq.n	80064f4 <qQueueIsEmpty+0x22>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	8a1b      	ldrh	r3, [r3, #16]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	bf0c      	ite	eq
 80064ea:	2301      	moveq	r3, #1
 80064ec:	2300      	movne	r3, #0
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	e000      	b.n	80064f6 <qQueueIsEmpty+0x24>
 80064f4:	2301      	movs	r3, #1
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <qQueueCount>:
  
Return value:

    The number of elements in the queue
 */
qSize_t qQueueCount(qQueue_t *obj){
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
    return (qBool_t)(obj ?  obj->ItemsWaiting : 0u);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <qQueueCount+0x1a>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	8a1b      	ldrh	r3, [r3, #16]
 8006514:	b29b      	uxth	r3, r3
 8006516:	b2db      	uxtb	r3, r3
 8006518:	b29b      	uxth	r3, r3
 800651a:	e000      	b.n	800651e <qQueueCount+0x1c>
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <qQueueIsFull>:
Return value:

    qTrue if the Queue is full, qFalse if it is not.
 */
/*============================================================================*/
qBool_t qQueueIsFull(qQueue_t *obj){
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
    return (qBool_t)(obj ?  obj->ItemsWaiting == obj->ItemsCount : qFalse);  
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00b      	beq.n	8006550 <qQueueIsFull+0x26>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	8a1b      	ldrh	r3, [r3, #16]
 800653c:	b29a      	uxth	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	8a5b      	ldrh	r3, [r3, #18]
 8006542:	429a      	cmp	r2, r3
 8006544:	bf0c      	ite	eq
 8006546:	2301      	moveq	r3, #1
 8006548:	2300      	movne	r3, #0
 800654a:	b2db      	uxtb	r3, r3
 800654c:	b2db      	uxtb	r3, r3
 800654e:	e000      	b.n	8006552 <qQueueIsFull+0x28>
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <qQueuePeek>:
  
Return value:

    Pointer to the data, or NULL if there is nothing in the queue
 */
void* qQueuePeek(qQueue_t *obj){
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
    uint8_t *RetValue = NULL;
 8006566:	2300      	movs	r3, #0
 8006568:	60fb      	str	r3, [r7, #12]
    if(NULL == obj) return RetValue;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <qQueuePeek+0x16>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	e017      	b.n	80065a4 <qQueuePeek+0x46>
    if( obj->ItemsWaiting > 0u ){
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	8a1b      	ldrh	r3, [r3, #16]
 8006578:	b29b      	uxth	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d011      	beq.n	80065a2 <qQueuePeek+0x44>
        qEnterCritical();
 800657e:	f7ff f891 	bl	80056a4 <qEnterCritical>
        RetValue = (void*)(obj->pcReadFrom + obj->ItemSize);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	8a92      	ldrh	r2, [r2, #20]
 800658a:	4413      	add	r3, r2
 800658c:	60fb      	str	r3, [r7, #12]
        if( RetValue >= obj->pTail ) RetValue = obj->pHead;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	429a      	cmp	r2, r3
 8006596:	d302      	bcc.n	800659e <qQueuePeek+0x40>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60fb      	str	r3, [r7, #12]
        qExitCritical();
 800659e:	f7ff f891 	bl	80056c4 <qExitCritical>
    }
    return (void*)RetValue;
 80065a2:	68fb      	ldr	r3, [r7, #12]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <qQueueRemoveFront>:
  
Return value:

    qTrue if data was removed from the Queue, otherwise returns qFalse
 */
qBool_t qQueueRemoveFront(qQueue_t *obj){
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
    if (NULL==obj) return qFalse;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <qQueueRemoveFront+0x12>
 80065ba:	2300      	movs	r3, #0
 80065bc:	e015      	b.n	80065ea <qQueueRemoveFront+0x3e>
    if( obj->ItemsWaiting > 0u ){
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	8a1b      	ldrh	r3, [r3, #16]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00f      	beq.n	80065e8 <qQueueRemoveFront+0x3c>
        qEnterCritical();
 80065c8:	f7ff f86c 	bl	80056a4 <qEnterCritical>
        qQueueMoveReader(obj);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f85d 	bl	800668c <qQueueMoveReader>
        --( obj->ItemsWaiting ); /* remove the data. */
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	8a1b      	ldrh	r3, [r3, #16]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	3b01      	subs	r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	821a      	strh	r2, [r3, #16]
        qExitCritical();
 80065e0:	f7ff f870 	bl	80056c4 <qExitCritical>
        return qTrue;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e000      	b.n	80065ea <qQueueRemoveFront+0x3e>
    }
    return qFalse;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <qQueueCopyDataToQueue>:
/*============================================================================*/
static void qQueueCopyDataToQueue(qQueue_t *obj, const void *pvItemToQueue, qBool_t xPosition){
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	60f8      	str	r0, [r7, #12]
 80065fa:	60b9      	str	r1, [r7, #8]
 80065fc:	4613      	mov	r3, r2
 80065fe:	71fb      	strb	r3, [r7, #7]
    if( xPosition == QUEUE_SEND_TO_BACK ){
 8006600:	79fb      	ldrb	r3, [r7, #7]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d119      	bne.n	800663a <qQueueCopyDataToQueue+0x48>
        memcpy( (void*) obj->pcWriteTo, pvItemToQueue, (unsigned)obj->ItemSize );
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6898      	ldr	r0, [r3, #8]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8a9b      	ldrh	r3, [r3, #20]
 800660e:	461a      	mov	r2, r3
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	f001 fae4 	bl	8007bde <memcpy>
        obj->pcWriteTo += obj->ItemSize;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	8a92      	ldrh	r2, [r2, #20]
 800661e:	441a      	add	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	609a      	str	r2, [r3, #8]
        if( obj->pcWriteTo >= obj->pTail ) obj->pcWriteTo = obj->pHead;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	429a      	cmp	r2, r3
 800662e:	d322      	bcc.n	8006676 <qQueueCopyDataToQueue+0x84>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	609a      	str	r2, [r3, #8]
 8006638:	e01d      	b.n	8006676 <qQueueCopyDataToQueue+0x84>
              
    }
    else{
        memcpy( (void*) obj->pcReadFrom, pvItemToQueue, (unsigned)obj->ItemSize );
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	68d8      	ldr	r0, [r3, #12]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8a9b      	ldrh	r3, [r3, #20]
 8006642:	461a      	mov	r2, r3
 8006644:	68b9      	ldr	r1, [r7, #8]
 8006646:	f001 faca 	bl	8007bde <memcpy>
        obj->pcReadFrom -= obj->ItemSize;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8a9b      	ldrh	r3, [r3, #20]
 8006652:	425b      	negs	r3, r3
 8006654:	441a      	add	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	60da      	str	r2, [r3, #12]
        if( obj->pcReadFrom < obj->pHead ) obj->pcReadFrom = ( obj->pTail - obj->ItemSize );    
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	429a      	cmp	r2, r3
 8006664:	d207      	bcs.n	8006676 <qQueueCopyDataToQueue+0x84>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8a9b      	ldrh	r3, [r3, #20]
 800666e:	425b      	negs	r3, r3
 8006670:	441a      	add	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	60da      	str	r2, [r3, #12]
    }
    ++( obj->ItemsWaiting );
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8a1b      	ldrh	r3, [r3, #16]
 800667a:	b29b      	uxth	r3, r3
 800667c:	3301      	adds	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	821a      	strh	r2, [r3, #16]
}
 8006684:	bf00      	nop
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <qQueueMoveReader>:
/*==================================================================================*/
static void qQueueMoveReader(qQueue_t *obj){
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
    obj->pcReadFrom += obj->ItemSize;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	8a92      	ldrh	r2, [r2, #20]
 800669c:	441a      	add	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	60da      	str	r2, [r3, #12]
    if( obj->pcReadFrom >= obj->pTail ) obj->pcReadFrom = obj->pHead;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68da      	ldr	r2, [r3, #12]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d303      	bcc.n	80066b6 <qQueueMoveReader+0x2a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	60da      	str	r2, [r3, #12]
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <qQueueGenericSend>:
  
Return value:

    qTrue on successful add, qFalse if not added
*/
qBool_t qQueueGenericSend(qQueue_t *obj, void *ItemToQueue, uint8_t InsertMode){
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b084      	sub	sp, #16
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	4613      	mov	r3, r2
 80066ce:	71fb      	strb	r3, [r7, #7]
    if( NULL==obj || InsertMode>1u) return qFalse;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <qQueueGenericSend+0x1a>
 80066d6:	79fb      	ldrb	r3, [r7, #7]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d901      	bls.n	80066e0 <qQueueGenericSend+0x1e>
 80066dc:	2300      	movs	r3, #0
 80066de:	e013      	b.n	8006708 <qQueueGenericSend+0x46>
    if( obj->ItemsWaiting < obj->ItemsCount ){ /* Is there room on the queue?*/
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8a1b      	ldrh	r3, [r3, #16]
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8a5b      	ldrh	r3, [r3, #18]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d20b      	bcs.n	8006706 <qQueueGenericSend+0x44>
        qEnterCritical();
 80066ee:	f7fe ffd9 	bl	80056a4 <qEnterCritical>
        qQueueCopyDataToQueue( obj, ItemToQueue, InsertMode );
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	461a      	mov	r2, r3
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f7ff ff7a 	bl	80065f2 <qQueueCopyDataToQueue>
        qExitCritical();
 80066fe:	f7fe ffe1 	bl	80056c4 <qExitCritical>
        return qTrue;
 8006702:	2301      	movs	r3, #1
 8006704:	e000      	b.n	8006708 <qQueueGenericSend+0x46>
    }
    return qFalse;   
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <qSwapBytes>:

    - data : a pointer to block of data
    - n : the number of bytes to swap
*/
/*============================================================================*/
void qSwapBytes(void *data, const qSize_t n){
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	807b      	strh	r3, [r7, #2]
    uint8_t *p = data, tmp;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	613b      	str	r3, [r7, #16]
    qSize_t lo, hi;
    for(lo=0, hi=n-1; hi>lo; lo++, hi--){
 8006720:	2300      	movs	r3, #0
 8006722:	82fb      	strh	r3, [r7, #22]
 8006724:	887b      	ldrh	r3, [r7, #2]
 8006726:	3b01      	subs	r3, #1
 8006728:	82bb      	strh	r3, [r7, #20]
 800672a:	e017      	b.n	800675c <qSwapBytes+0x4c>
        tmp=p[lo];
 800672c:	8afb      	ldrh	r3, [r7, #22]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4413      	add	r3, r2
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	73fb      	strb	r3, [r7, #15]
        p[lo] = p[hi];
 8006736:	8abb      	ldrh	r3, [r7, #20]
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	441a      	add	r2, r3
 800673c:	8afb      	ldrh	r3, [r7, #22]
 800673e:	6939      	ldr	r1, [r7, #16]
 8006740:	440b      	add	r3, r1
 8006742:	7812      	ldrb	r2, [r2, #0]
 8006744:	701a      	strb	r2, [r3, #0]
        p[hi] = tmp;
 8006746:	8abb      	ldrh	r3, [r7, #20]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4413      	add	r3, r2
 800674c:	7bfa      	ldrb	r2, [r7, #15]
 800674e:	701a      	strb	r2, [r3, #0]
    for(lo=0, hi=n-1; hi>lo; lo++, hi--){
 8006750:	8afb      	ldrh	r3, [r7, #22]
 8006752:	3301      	adds	r3, #1
 8006754:	82fb      	strh	r3, [r7, #22]
 8006756:	8abb      	ldrh	r3, [r7, #20]
 8006758:	3b01      	subs	r3, #1
 800675a:	82bb      	strh	r3, [r7, #20]
 800675c:	8aba      	ldrh	r2, [r7, #20]
 800675e:	8afb      	ldrh	r3, [r7, #22]
 8006760:	429a      	cmp	r2, r3
 8006762:	d8e3      	bhi.n	800672c <qSwapBytes+0x1c>
    }
}
 8006764:	bf00      	nop
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <qOutputString>:
    - fcn : The basic output byte function
    - pStorage : The storage pointer passed to fcn
    - s: The string to be written
    - AIP : Auto-Increment the storage-pointer
*/
void qOutputString(qPutChar_t fcn, void* pStorage, const char *s, qBool_t AIP){
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	70fb      	strb	r3, [r7, #3]
    size_t i = 0;
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]
    while(*s)  fcn(((AIP)? (char*)pStorage+(i++): pStorage), *s++);
 8006782:	e010      	b.n	80067a6 <qOutputString+0x36>
 8006784:	78fb      	ldrb	r3, [r7, #3]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d005      	beq.n	8006796 <qOutputString+0x26>
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	617a      	str	r2, [r7, #20]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	441a      	add	r2, r3
 8006794:	e000      	b.n	8006798 <qOutputString+0x28>
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	1c59      	adds	r1, r3, #1
 800679c:	6079      	str	r1, [r7, #4]
 800679e:	7819      	ldrb	r1, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4610      	mov	r0, r2
 80067a4:	4798      	blx	r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1ea      	bne.n	8006784 <qOutputString+0x14>
}
 80067ae:	bf00      	nop
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <qNibbleToX>:
/*============================================================================*/
static char qNibbleToX(uint8_t value){
 80067b6:	b480      	push	{r7}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	4603      	mov	r3, r0
 80067be:	71fb      	strb	r3, [r7, #7]
    char ch;
    ch = (char)(value & 0x0F) + '0';
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	3330      	adds	r3, #48	; 0x30
 80067ca:	73fb      	strb	r3, [r7, #15]
    return (char) ((ch > '9') ? ch + 7u : ch);
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	2b39      	cmp	r3, #57	; 0x39
 80067d0:	d903      	bls.n	80067da <qNibbleToX+0x24>
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
 80067d4:	3307      	adds	r3, #7
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	e000      	b.n	80067dc <qNibbleToX+0x26>
 80067da:	7bfb      	ldrb	r3, [r7, #15]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <qPrintXData>:
/*============================================================================*/
void qPrintXData(qPutChar_t fcn, void* pStorage, void *data, qSize_t n){
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	807b      	strh	r3, [r7, #2]
    uint8_t *pdat =(uint8_t*)data; 
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	613b      	str	r3, [r7, #16]
    int i;
    for(i=0;i<n;i++, fcn(pStorage, ' ')){
 80067fa:	2300      	movs	r3, #0
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	e025      	b.n	800684c <qPrintXData+0x64>
        fcn(pStorage, qNibbleToX( qByteHighNibble(pdat[i]) ) );
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4413      	add	r3, r2
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	091b      	lsrs	r3, r3, #4
 800680a:	b2db      	uxtb	r3, r3
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff ffd2 	bl	80067b6 <qNibbleToX>
 8006812:	4603      	mov	r3, r0
 8006814:	461a      	mov	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4611      	mov	r1, r2
 800681a:	68b8      	ldr	r0, [r7, #8]
 800681c:	4798      	blx	r3
        fcn(pStorage, qNibbleToX( qByteLowNibble(pdat[i]) ) );
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4413      	add	r3, r2
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	b2db      	uxtb	r3, r3
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff ffc2 	bl	80067b6 <qNibbleToX>
 8006832:	4603      	mov	r3, r0
 8006834:	461a      	mov	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4611      	mov	r1, r2
 800683a:	68b8      	ldr	r0, [r7, #8]
 800683c:	4798      	blx	r3
    for(i=0;i<n;i++, fcn(pStorage, ' ')){
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	3301      	adds	r3, #1
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2120      	movs	r1, #32
 8006848:	68b8      	ldr	r0, [r7, #8]
 800684a:	4798      	blx	r3
 800684c:	887b      	ldrh	r3, [r7, #2]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	429a      	cmp	r2, r3
 8006852:	dbd5      	blt.n	8006800 <qPrintXData+0x18>
    }
    fcn(pStorage, '\r' );
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	210d      	movs	r1, #13
 8006858:	68b8      	ldr	r0, [r7, #8]
 800685a:	4798      	blx	r3
    fcn(pStorage, '\n' );
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	210a      	movs	r1, #10
 8006860:	68b8      	ldr	r0, [r7, #8]
 8006862:	4798      	blx	r3
}
 8006864:	bf00      	nop
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <__q_revuta>:
}
/*============================================================================*/
/*this method makes the basic conversion of unsigned integer to ASCII
NULL Terminator not included
*/
static uint8_t __q_revuta(uint32_t num, char* str, uint8_t base){
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	4613      	mov	r3, r2
 8006878:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 800687a:	2300      	movs	r3, #0
 800687c:	75fb      	strb	r3, [r7, #23]
    int rem;
    if (0 == num){ /* Handle 0 explicitly, otherwise empty string is printed for 0 */
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d129      	bne.n	80068d8 <__q_revuta+0x6c>
        str[i++] = '0';        
 8006884:	7dfb      	ldrb	r3, [r7, #23]
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	75fa      	strb	r2, [r7, #23]
 800688a:	461a      	mov	r2, r3
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4413      	add	r3, r2
 8006890:	2230      	movs	r2, #48	; 0x30
 8006892:	701a      	strb	r2, [r3, #0]
        return i;
 8006894:	7dfb      	ldrb	r3, [r7, #23]
 8006896:	e029      	b.n	80068ec <__q_revuta+0x80>
    }

    while (0 != num){ /*Process individual digits*/
        rem = num % base;
 8006898:	79fa      	ldrb	r2, [r7, #7]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	fbb3 f1f2 	udiv	r1, r3, r2
 80068a0:	fb02 f201 	mul.w	r2, r2, r1
 80068a4:	1a9b      	subs	r3, r3, r2
 80068a6:	613b      	str	r3, [r7, #16]
        str[i++] = (rem > 9)? (char)(rem-10) + 'A' : (char)rem + '0';
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	2b09      	cmp	r3, #9
 80068ac:	dd04      	ble.n	80068b8 <__q_revuta+0x4c>
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	3337      	adds	r3, #55	; 0x37
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	e003      	b.n	80068c0 <__q_revuta+0x54>
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	3330      	adds	r3, #48	; 0x30
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	7dfa      	ldrb	r2, [r7, #23]
 80068c2:	1c51      	adds	r1, r2, #1
 80068c4:	75f9      	strb	r1, [r7, #23]
 80068c6:	4611      	mov	r1, r2
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	440a      	add	r2, r1
 80068cc:	7013      	strb	r3, [r2, #0]
        num = num/base;
 80068ce:	79fb      	ldrb	r3, [r7, #7]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d6:	60fb      	str	r3, [r7, #12]
    while (0 != num){ /*Process individual digits*/
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1dc      	bne.n	8006898 <__q_revuta+0x2c>
    }
    qSwapBytes(str, (qSize_t)i);/*Reverse the string*/
 80068de:	7dfb      	ldrb	r3, [r7, #23]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	4619      	mov	r1, r3
 80068e4:	68b8      	ldr	r0, [r7, #8]
 80068e6:	f7ff ff13 	bl	8006710 <qSwapBytes>
    return i;       
 80068ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <qItoA>:

Return value:

  A pointer to the resulting null-terminated string, same as parameter str
*/
char* qItoA(int32_t num, char* str, uint8_t base){
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	4613      	mov	r3, r2
 8006900:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	75fb      	strb	r3, [r7, #23]
    if(NULL == str) return str;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <qItoA+0x1c>
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	e023      	b.n	8006958 <qItoA+0x64>
    if( num < 0 ){ 
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	da0d      	bge.n	8006932 <qItoA+0x3e>
        if(10 == base){ /*handle negative numbers only with 10-base*/
 8006916:	79fb      	ldrb	r3, [r7, #7]
 8006918:	2b0a      	cmp	r3, #10
 800691a:	d107      	bne.n	800692c <qItoA+0x38>
            str[i++]='-';/*put the sign at the begining*/
 800691c:	7dfb      	ldrb	r3, [r7, #23]
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	75fa      	strb	r2, [r7, #23]
 8006922:	461a      	mov	r2, r3
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4413      	add	r3, r2
 8006928:	222d      	movs	r2, #45	; 0x2d
 800692a:	701a      	strb	r2, [r3, #0]
        } 
        num = -num;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	425b      	negs	r3, r3
 8006930:	60fb      	str	r3, [r7, #12]
    }
    i += __q_revuta((uint32_t)num, str+i, base); /*make the unsigned conversion without the null terminator*/   
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	7dfb      	ldrb	r3, [r7, #23]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	4413      	add	r3, r2
 800693a:	79fa      	ldrb	r2, [r7, #7]
 800693c:	4619      	mov	r1, r3
 800693e:	f7ff ff95 	bl	800686c <__q_revuta>
 8006942:	4603      	mov	r3, r0
 8006944:	461a      	mov	r2, r3
 8006946:	7dfb      	ldrb	r3, [r7, #23]
 8006948:	4413      	add	r3, r2
 800694a:	75fb      	strb	r3, [r7, #23]
    str[i] = '\0'; /*Append string terminator*/
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	4413      	add	r3, r2
 8006952:	2200      	movs	r2, #0
 8006954:	701a      	strb	r2, [r3, #0]
    return str;
 8006956:	68bb      	ldr	r3, [r7, #8]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <__qtrace_func>:
    }    
    return 0;
}
/*============================================================================*/
#ifdef Q_TRACE_VARIABLES
void __qtrace_func(const char *loc, const char* fcn, const char *varname, const char* varvalue, void* Pointer, qSize_t BlockSize){
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
    if(NULL != __qDebugOutputFcn){ /*trace only if the output-function is defined*/
 800696e:	4b23      	ldr	r3, [pc, #140]	; (80069fc <__qtrace_func+0x9c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d03d      	beq.n	80069f2 <__qtrace_func+0x92>
        qPrintString(__qDebugOutputFcn, NULL, loc); /*print out the line location*/
 8006976:	4b21      	ldr	r3, [pc, #132]	; (80069fc <__qtrace_func+0x9c>)
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	2300      	movs	r3, #0
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	2100      	movs	r1, #0
 8006980:	f7ff fef6 	bl	8006770 <qOutputString>
        if(fcn){ /*print out the function if available*/
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d010      	beq.n	80069ac <__qtrace_func+0x4c>
            __qDebugOutputFcn(NULL, '@');
 800698a:	4b1c      	ldr	r3, [pc, #112]	; (80069fc <__qtrace_func+0x9c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2140      	movs	r1, #64	; 0x40
 8006990:	2000      	movs	r0, #0
 8006992:	4798      	blx	r3
            qPrintString(__qDebugOutputFcn, NULL, fcn); 
 8006994:	4b19      	ldr	r3, [pc, #100]	; (80069fc <__qtrace_func+0x9c>)
 8006996:	6818      	ldr	r0, [r3, #0]
 8006998:	2300      	movs	r3, #0
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	2100      	movs	r1, #0
 800699e:	f7ff fee7 	bl	8006770 <qOutputString>
            __qDebugOutputFcn(NULL, ' ');
 80069a2:	4b16      	ldr	r3, [pc, #88]	; (80069fc <__qtrace_func+0x9c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2120      	movs	r1, #32
 80069a8:	2000      	movs	r0, #0
 80069aa:	4798      	blx	r3
        }
        qPrintString(__qDebugOutputFcn, NULL, varname);
 80069ac:	4b13      	ldr	r3, [pc, #76]	; (80069fc <__qtrace_func+0x9c>)
 80069ae:	6818      	ldr	r0, [r3, #0]
 80069b0:	2300      	movs	r3, #0
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	2100      	movs	r1, #0
 80069b6:	f7ff fedb 	bl	8006770 <qOutputString>
        if(NULL == varvalue){ /*if varvalue is not defined, the call must correspond to memory tracing*/
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d107      	bne.n	80069d0 <__qtrace_func+0x70>
            qPrintXData(__qDebugOutputFcn, NULL, Pointer, BlockSize); /*print out the memory in hex format*/
 80069c0:	4b0e      	ldr	r3, [pc, #56]	; (80069fc <__qtrace_func+0x9c>)
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	8bbb      	ldrh	r3, [r7, #28]
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	2100      	movs	r1, #0
 80069ca:	f7ff ff0d 	bl	80067e8 <qPrintXData>
            qPrintString(__qDebugOutputFcn, NULL, varvalue);
            __qDebugOutputFcn(NULL, '\r');
            __qDebugOutputFcn(NULL, '\n');
        }
    }
}
 80069ce:	e010      	b.n	80069f2 <__qtrace_func+0x92>
            qPrintString(__qDebugOutputFcn, NULL, varvalue);
 80069d0:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <__qtrace_func+0x9c>)
 80069d2:	6818      	ldr	r0, [r3, #0]
 80069d4:	2300      	movs	r3, #0
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	2100      	movs	r1, #0
 80069da:	f7ff fec9 	bl	8006770 <qOutputString>
            __qDebugOutputFcn(NULL, '\r');
 80069de:	4b07      	ldr	r3, [pc, #28]	; (80069fc <__qtrace_func+0x9c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	210d      	movs	r1, #13
 80069e4:	2000      	movs	r0, #0
 80069e6:	4798      	blx	r3
            __qDebugOutputFcn(NULL, '\n');
 80069e8:	4b04      	ldr	r3, [pc, #16]	; (80069fc <__qtrace_func+0x9c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	210a      	movs	r1, #10
 80069ee:	2000      	movs	r0, #0
 80069f0:	4798      	blx	r3
}
 80069f2:	bf00      	nop
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20000298 	.word	0x20000298

08006a00 <__qReg_32Bits>:
#endif

/*============================================================================*/
qBool_t __qReg_32Bits(void *Address, qBool_t PinNumber){
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
    uint32_t Register = 0;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]
    Register = *((uint32_t*)Address);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	60fb      	str	r3, [r7, #12]
    return qBitRead(Register, PinNumber);
 8006a16:	78fb      	ldrb	r3, [r7, #3]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	461a      	mov	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4013      	ands	r3, r2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	bf14      	ite	ne
 8006a28:	2301      	movne	r3, #1
 8006a2a:	2300      	moveq	r3, #0
 8006a2c:	b2db      	uxtb	r3, r3
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
	...

08006a3c <qEdgeCheck_Initialize>:
  
Return value:

    qTrue on success, otherwise returns qFalse
*/
qBool_t qEdgeCheck_Initialize(qIOEdgeCheck_t *Instance, qCoreRegSize_t RegisterSize, qClock_t DebounceTime){
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
    if(NULL == Instance) return qFalse;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <qEdgeCheck_Initialize+0x16>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	e016      	b.n	8006a80 <qEdgeCheck_Initialize+0x44>
    Instance->Head = NULL;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]
    Instance->DebounceTime = DebounceTime;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	609a      	str	r2, [r3, #8]
    Instance->Reader = (NULL==RegisterSize)? QREG_32BIT  : RegisterSize;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <qEdgeCheck_Initialize+0x2c>
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	e000      	b.n	8006a6a <qEdgeCheck_Initialize+0x2e>
 8006a68:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <qEdgeCheck_Initialize+0x4c>)
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	60d3      	str	r3, [r2, #12]
    Instance->State = QEDGECHECK_CHECK;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2202      	movs	r2, #2
 8006a72:	741a      	strb	r2, [r3, #16]
    Instance->Start = qSchedulerGetTick();
 8006a74:	f7ff f9a0 	bl	8005db8 <qSchedulerGetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	605a      	str	r2, [r3, #4]
    return qTrue;
 8006a7e:	2301      	movs	r3, #1
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	08006a01 	.word	0x08006a01

08006a8c <qEdgeCheck_InsertNode>:
  
Return value:

    qTrue on success, otherwise returns qFalse
*/
qBool_t qEdgeCheck_InsertNode(qIOEdgeCheck_t *Instance, qIONode_t *Node, void *PortAddress, qBool_t PinNumber){
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	70fb      	strb	r3, [r7, #3]
    if(NULL == Node || NULL == Instance) return qFalse;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <qEdgeCheck_InsertNode+0x1a>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <qEdgeCheck_InsertNode+0x1e>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	e019      	b.n	8006ade <qEdgeCheck_InsertNode+0x52>
    Node->Port = PortAddress;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	609a      	str	r2, [r3, #8]
    Node->Pin = PinNumber;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	78fa      	ldrb	r2, [r7, #3]
 8006ab4:	701a      	strb	r2, [r3, #0]
    Node->Next = Instance->Head;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	605a      	str	r2, [r3, #4]
    Node->PreviousPinValue = Instance->Reader( Node->Port, Node->Pin );
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	6890      	ldr	r0, [r2, #8]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	7812      	ldrb	r2, [r2, #0]
 8006aca:	4611      	mov	r1, r2
 8006acc:	4798      	blx	r3
 8006ace:	4603      	mov	r3, r0
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	705a      	strb	r2, [r3, #1]
    Instance->Head = Node;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	601a      	str	r2, [r3, #0]
    return qTrue;
 8006adc:	2301      	movs	r3, #1
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <State_Failure>:

#include "../Inc/State/State.h"


/***********************************************************************************************/
void State_Failure(qSM_t *fsm){
 8006ae6:	b480      	push	{r7}
 8006ae8:	b083      	sub	sp, #12
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
	...

08006afc <State_Sleep>:

/***********************************************************************************************/
qSM_Status_t State_Sleep(qSM_t *fsm){
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	6078      	str	r0, [r7, #4]
	WSSFM1XRX_Return_t RetValue;
	int Ret;
	if(fsm->StateFirstEntry){
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	7b9b      	ldrb	r3, [r3, #14]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00f      	beq.n	8006b2c <State_Sleep+0x30>
		RetValue = WSSFM1XRX_WakeUP(&SigfoxModule,WSSFM1XRX_Wait_Block);
 8006b0c:	4925      	ldr	r1, [pc, #148]	; (8006ba4 <State_Sleep+0xa8>)
 8006b0e:	4826      	ldr	r0, [pc, #152]	; (8006ba8 <State_Sleep+0xac>)
 8006b10:	f7fe f9d0 	bl	8004eb4 <WSSFM1XRX_WakeUP>
 8006b14:	4603      	mov	r3, r0
 8006b16:	73fb      	strb	r3, [r7, #15]
		qTraceMessage("[STATE] : State_Sleep\r\n");
 8006b18:	2300      	movs	r3, #0
 8006b1a:	9301      	str	r3, [sp, #4]
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	4b22      	ldr	r3, [pc, #136]	; (8006bac <State_Sleep+0xb0>)
 8006b22:	4a23      	ldr	r2, [pc, #140]	; (8006bb0 <State_Sleep+0xb4>)
 8006b24:	4923      	ldr	r1, [pc, #140]	; (8006bb4 <State_Sleep+0xb8>)
 8006b26:	4824      	ldr	r0, [pc, #144]	; (8006bb8 <State_Sleep+0xbc>)
 8006b28:	f7ff ff1a 	bl	8006960 <__qtrace_func>

	}

	if(SigFoxData.WilsolService_Status  == WSSFM1XRX_STATUS_MODULE_NOT_INITIALIZED || SigFoxData.WilsolService_Status  == WSSFM1XRX_STATUS_MODULE_INITIALIZED || SigFoxData.WilsolService_Status  == WSSFM1XRX_STATUS_SENT_MESSAGE)
 8006b2c:	4b23      	ldr	r3, [pc, #140]	; (8006bbc <State_Sleep+0xc0>)
 8006b2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b32:	2b0e      	cmp	r3, #14
 8006b34:	d009      	beq.n	8006b4a <State_Sleep+0x4e>
 8006b36:	4b21      	ldr	r3, [pc, #132]	; (8006bbc <State_Sleep+0xc0>)
 8006b38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d004      	beq.n	8006b4a <State_Sleep+0x4e>
 8006b40:	4b1e      	ldr	r3, [pc, #120]	; (8006bbc <State_Sleep+0xc0>)
 8006b42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b46:	2b0c      	cmp	r3, #12
 8006b48:	d127      	bne.n	8006b9a <State_Sleep+0x9e>
	{
		if(WSSFM1XRX_OK_RESPONSE ==  WSSFM1XRX_Sleep(&SigfoxModule,WAIT) ){
 8006b4a:	491d      	ldr	r1, [pc, #116]	; (8006bc0 <State_Sleep+0xc4>)
 8006b4c:	4816      	ldr	r0, [pc, #88]	; (8006ba8 <State_Sleep+0xac>)
 8006b4e:	f7fe f98f 	bl	8004e70 <WSSFM1XRX_Sleep>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d120      	bne.n	8006b9a <State_Sleep+0x9e>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2 , GPIO_PIN_SET);
 8006b58:	2201      	movs	r2, #1
 8006b5a:	2104      	movs	r1, #4
 8006b5c:	4819      	ldr	r0, [pc, #100]	; (8006bc4 <State_Sleep+0xc8>)
 8006b5e:	f7fb fb59 	bl	8002214 <HAL_GPIO_WritePin>
			PrintString(&hlpuart1,(uint8_t *)"-----------------------Core Sleep-------------------\r\n");
 8006b62:	4919      	ldr	r1, [pc, #100]	; (8006bc8 <State_Sleep+0xcc>)
 8006b64:	4819      	ldr	r0, [pc, #100]	; (8006bcc <State_Sleep+0xd0>)
 8006b66:	f7fe f868 	bl	8004c3a <PrintString>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2 , GPIO_PIN_SET);
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	2104      	movs	r1, #4
 8006b6e:	4815      	ldr	r0, [pc, #84]	; (8006bc4 <State_Sleep+0xc8>)
 8006b70:	f7fb fb50 	bl	8002214 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOC, Gpio4_Bus1_Shutdown_Pin, GPIO_PIN_RESET);
 8006b74:	2200      	movs	r2, #0
 8006b76:	2140      	movs	r1, #64	; 0x40
 8006b78:	4815      	ldr	r0, [pc, #84]	; (8006bd0 <State_Sleep+0xd4>)
 8006b7a:	f7fb fb4b 	bl	8002214 <HAL_GPIO_WritePin>
			__HAL_RCC_PWR_CLK_ENABLE();
 8006b7e:	4b15      	ldr	r3, [pc, #84]	; (8006bd4 <State_Sleep+0xd8>)
 8006b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b82:	4a14      	ldr	r2, [pc, #80]	; (8006bd4 <State_Sleep+0xd8>)
 8006b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b88:	6593      	str	r3, [r2, #88]	; 0x58
 8006b8a:	4b12      	ldr	r3, [pc, #72]	; (8006bd4 <State_Sleep+0xd8>)
 8006b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b92:	60bb      	str	r3, [r7, #8]
 8006b94:	68bb      	ldr	r3, [r7, #8]
			HAL_PWR_EnterSTANDBYMode();
 8006b96:	f7fb fb55 	bl	8002244 <HAL_PWR_EnterSTANDBYMode>
		}
	}
	return qSM_EXIT_SUCCESS;
 8006b9a:	4b0f      	ldr	r3, [pc, #60]	; (8006bd8 <State_Sleep+0xdc>)
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	08004e4d 	.word	0x08004e4d
 8006ba8:	20000540 	.word	0x20000540
 8006bac:	080087b8 	.word	0x080087b8
 8006bb0:	080087d0 	.word	0x080087d0
 8006bb4:	080088f0 	.word	0x080088f0
 8006bb8:	080087d4 	.word	0x080087d4
 8006bbc:	20000318 	.word	0x20000318
 8006bc0:	08004dd1 	.word	0x08004dd1
 8006bc4:	48000400 	.word	0x48000400
 8006bc8:	080087f0 	.word	0x080087f0
 8006bcc:	20000358 	.word	0x20000358
 8006bd0:	48000800 	.word	0x48000800
 8006bd4:	40021000 	.word	0x40021000
 8006bd8:	ffff8000 	.word	0xffff8000

08006bdc <State_Init>:
/***********************************************************************************************/
qSM_Status_t State_Init(qSM_t *fsm){
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af02      	add	r7, sp, #8
 8006be2:	6078      	str	r0, [r7, #4]

	if(fsm->StateFirstEntry){
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	7b9b      	ldrb	r3, [r3, #14]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d037      	beq.n	8006c5c <State_Init+0x80>
		qTraceMessage("[STATE] : State_Init\r\n");
 8006bec:	2300      	movs	r3, #0
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	4b20      	ldr	r3, [pc, #128]	; (8006c78 <State_Init+0x9c>)
 8006bf6:	4a21      	ldr	r2, [pc, #132]	; (8006c7c <State_Init+0xa0>)
 8006bf8:	4921      	ldr	r1, [pc, #132]	; (8006c80 <State_Init+0xa4>)
 8006bfa:	4822      	ldr	r0, [pc, #136]	; (8006c84 <State_Init+0xa8>)
 8006bfc:	f7ff feb0 	bl	8006960 <__qtrace_func>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2 , GPIO_PIN_SET);
 8006c00:	2201      	movs	r2, #1
 8006c02:	2104      	movs	r1, #4
 8006c04:	4820      	ldr	r0, [pc, #128]	; (8006c88 <State_Init+0xac>)
 8006c06:	f7fb fb05 	bl	8002214 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2 , GPIO_PIN_RESET);
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2104      	movs	r1, #4
 8006c0e:	481e      	ldr	r0, [pc, #120]	; (8006c88 <State_Init+0xac>)
 8006c10:	f7fb fb00 	bl	8002214 <HAL_GPIO_WritePin>
		 HAL_ADC_Start(&hadc1);
 8006c14:	481d      	ldr	r0, [pc, #116]	; (8006c8c <State_Init+0xb0>)
 8006c16:	f7fa f89b 	bl	8000d50 <HAL_ADC_Start>
		 HAL_ADC_PollForConversion(&hadc1, 1000);
 8006c1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006c1e:	481b      	ldr	r0, [pc, #108]	; (8006c8c <State_Init+0xb0>)
 8006c20:	f7fa f984 	bl	8000f2c <HAL_ADC_PollForConversion>
		 qDebugDecimal(HAL_ADC_GetValue(&hadc1));
 8006c24:	4819      	ldr	r0, [pc, #100]	; (8006c8c <State_Init+0xb0>)
 8006c26:	f7fa fa51 	bl	80010cc <HAL_ADC_GetValue>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	220a      	movs	r2, #10
 8006c2e:	4918      	ldr	r1, [pc, #96]	; (8006c90 <State_Init+0xb4>)
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff fe5f 	bl	80068f4 <qItoA>
 8006c36:	4602      	mov	r2, r0
 8006c38:	2300      	movs	r3, #0
 8006c3a:	9301      	str	r3, [sp, #4]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	4613      	mov	r3, r2
 8006c42:	4a14      	ldr	r2, [pc, #80]	; (8006c94 <State_Init+0xb8>)
 8006c44:	2100      	movs	r1, #0
 8006c46:	480d      	ldr	r0, [pc, #52]	; (8006c7c <State_Init+0xa0>)
 8006c48:	f7ff fe8a 	bl	8006960 <__qtrace_func>
		 HAL_ADC_Stop(&hadc1);
 8006c4c:	480f      	ldr	r0, [pc, #60]	; (8006c8c <State_Init+0xb0>)
 8006c4e:	f7fa f939 	bl	8000ec4 <HAL_ADC_Stop>

		//qRBufferPush(&SigFox_UplinkQueue, &DataFrame);
		qRBufferPush(&SigFox_UplinkQueue, &DataFrame);
 8006c52:	2200      	movs	r2, #0
 8006c54:	4910      	ldr	r1, [pc, #64]	; (8006c98 <State_Init+0xbc>)
 8006c56:	4811      	ldr	r0, [pc, #68]	; (8006c9c <State_Init+0xc0>)
 8006c58:	f7ff fd33 	bl	80066c2 <qQueueGenericSend>
	}


	if(qRBufferEmpty(&SigFox_UplinkQueue)){
 8006c5c:	480f      	ldr	r0, [pc, #60]	; (8006c9c <State_Init+0xc0>)
 8006c5e:	f7ff fc38 	bl	80064d2 <qQueueIsEmpty>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <State_Init+0x92>
		fsm->NextState = State_Sleep;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a0d      	ldr	r2, [pc, #52]	; (8006ca0 <State_Init+0xc4>)
 8006c6c:	601a      	str	r2, [r3, #0]
	}
	return qSM_EXIT_SUCCESS;
 8006c6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ca4 <State_Init+0xc8>)
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	08008828 	.word	0x08008828
 8006c7c:	080087d0 	.word	0x080087d0
 8006c80:	080088fc 	.word	0x080088fc
 8006c84:	08008840 	.word	0x08008840
 8006c88:	48000400 	.word	0x48000400
 8006c8c:	20000688 	.word	0x20000688
 8006c90:	2000029c 	.word	0x2000029c
 8006c94:	0800885c 	.word	0x0800885c
 8006c98:	20000494 	.word	0x20000494
 8006c9c:	20000340 	.word	0x20000340
 8006ca0:	08006afd 	.word	0x08006afd
 8006ca4:	ffff8000 	.word	0xffff8000

08006ca8 <IdleTask_Callback>:
void Leds_Callback(qEvent_t e){
	IndicatorBlink(Color.TimeBlink,Color.OneColor);  // 300 mS
}


void IdleTask_Callback(qEvent_t e){
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]


	//	PrintStringVar(&huart2,(uint8_t*) "status = %d ", SigFoxData.WilsolService_Status);
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <UplinkDispatcher_Callback>:

void UplinkDispatcher_Callback(qEvent_t e){
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af02      	add	r7, sp, #8
 8006cc2:	6078      	str	r0, [r7, #4]
	static WSSFM1XRX_Return_t ret;
	qCoroutineBegin{
 8006cc4:	4b4a      	ldr	r3, [pc, #296]	; (8006df0 <UplinkDispatcher_Callback+0x134>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b1e      	cmp	r3, #30
 8006cca:	d023      	beq.n	8006d14 <UplinkDispatcher_Callback+0x58>
 8006ccc:	2b1e      	cmp	r3, #30
 8006cce:	dc03      	bgt.n	8006cd8 <UplinkDispatcher_Callback+0x1c>
 8006cd0:	4a48      	ldr	r2, [pc, #288]	; (8006df4 <UplinkDispatcher_Callback+0x138>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d005      	beq.n	8006ce2 <UplinkDispatcher_Callback+0x26>
			SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_SENT_MESSAGE;
			qRBufferRemoveFront(e->EventData);
			PrintStringVar(&hlpuart1,(uint8_t*) "%d\r\n", SigFoxData.WilsolService_Status);
		}
	}qCoroutineEnd;
}
 8006cd6:	e086      	b.n	8006de6 <UplinkDispatcher_Callback+0x12a>
	qCoroutineBegin{
 8006cd8:	2b22      	cmp	r3, #34	; 0x22
 8006cda:	d032      	beq.n	8006d42 <UplinkDispatcher_Callback+0x86>
 8006cdc:	2b2c      	cmp	r3, #44	; 0x2c
 8006cde:	d054      	beq.n	8006d8a <UplinkDispatcher_Callback+0xce>
}
 8006ce0:	e081      	b.n	8006de6 <UplinkDispatcher_Callback+0x12a>
		if(e->Trigger == byRBufferCount && SigFoxData.ReadyToUplink){
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	7a1b      	ldrb	r3, [r3, #8]
 8006ce6:	2b06      	cmp	r3, #6
 8006ce8:	d174      	bne.n	8006dd4 <UplinkDispatcher_Callback+0x118>
 8006cea:	4b43      	ldr	r3, [pc, #268]	; (8006df8 <UplinkDispatcher_Callback+0x13c>)
 8006cec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d06f      	beq.n	8006dd4 <UplinkDispatcher_Callback+0x118>
			SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_CHK_CHANNELS;
 8006cf4:	4b40      	ldr	r3, [pc, #256]	; (8006df8 <UplinkDispatcher_Callback+0x13c>)
 8006cf6:	2209      	movs	r2, #9
 8006cf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PrintStringVar(&hlpuart1,(uint8_t*) "%d " , SigFoxData.WilsolService_Status);
 8006cfc:	4b3e      	ldr	r3, [pc, #248]	; (8006df8 <UplinkDispatcher_Callback+0x13c>)
 8006cfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	461a      	mov	r2, r3
 8006d06:	493d      	ldr	r1, [pc, #244]	; (8006dfc <UplinkDispatcher_Callback+0x140>)
 8006d08:	483d      	ldr	r0, [pc, #244]	; (8006e00 <UplinkDispatcher_Callback+0x144>)
 8006d0a:	f7fd ff4f 	bl	8004bac <PrintStringVar>
			qCoroutineWaitUntil( (ret = WSSFM1XRX_CheckChannels(&SigfoxModule, WAIT ))  == WSSFM1XRX_CHANN_OK || ret == WSSFM1XRX_CHANN_NO_OK );
 8006d0e:	4b38      	ldr	r3, [pc, #224]	; (8006df0 <UplinkDispatcher_Callback+0x134>)
 8006d10:	221e      	movs	r2, #30
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	493b      	ldr	r1, [pc, #236]	; (8006e04 <UplinkDispatcher_Callback+0x148>)
 8006d16:	483c      	ldr	r0, [pc, #240]	; (8006e08 <UplinkDispatcher_Callback+0x14c>)
 8006d18:	f7fe f9d0 	bl	80050bc <WSSFM1XRX_CheckChannels>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	461a      	mov	r2, r3
 8006d20:	4b3a      	ldr	r3, [pc, #232]	; (8006e0c <UplinkDispatcher_Callback+0x150>)
 8006d22:	701a      	strb	r2, [r3, #0]
 8006d24:	4b39      	ldr	r3, [pc, #228]	; (8006e0c <UplinkDispatcher_Callback+0x150>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	2b07      	cmp	r3, #7
 8006d2a:	d003      	beq.n	8006d34 <UplinkDispatcher_Callback+0x78>
 8006d2c:	4b37      	ldr	r3, [pc, #220]	; (8006e0c <UplinkDispatcher_Callback+0x150>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d153      	bne.n	8006ddc <UplinkDispatcher_Callback+0x120>
			if(  ret == WSSFM1XRX_CHANN_NO_OK   ){
 8006d34:	4b35      	ldr	r3, [pc, #212]	; (8006e0c <UplinkDispatcher_Callback+0x150>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d116      	bne.n	8006d6a <UplinkDispatcher_Callback+0xae>
				qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE ==  WSSFM1XRX_ResetChannels(&SigfoxModule,WAIT) );  /*Se daña con 0.01 en task pero solo con el at$rc*/ //WSSFM1XRX_Wait_Block
 8006d3c:	4b2c      	ldr	r3, [pc, #176]	; (8006df0 <UplinkDispatcher_Callback+0x134>)
 8006d3e:	2222      	movs	r2, #34	; 0x22
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	4930      	ldr	r1, [pc, #192]	; (8006e04 <UplinkDispatcher_Callback+0x148>)
 8006d44:	4830      	ldr	r0, [pc, #192]	; (8006e08 <UplinkDispatcher_Callback+0x14c>)
 8006d46:	f7fe f9dd 	bl	8005104 <WSSFM1XRX_ResetChannels>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d147      	bne.n	8006de0 <UplinkDispatcher_Callback+0x124>
				SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_RST_CHANNELS;
 8006d50:	4b29      	ldr	r3, [pc, #164]	; (8006df8 <UplinkDispatcher_Callback+0x13c>)
 8006d52:	220a      	movs	r2, #10
 8006d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 8006d58:	4b27      	ldr	r3, [pc, #156]	; (8006df8 <UplinkDispatcher_Callback+0x13c>)
 8006d5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	461a      	mov	r2, r3
 8006d62:	4926      	ldr	r1, [pc, #152]	; (8006dfc <UplinkDispatcher_Callback+0x140>)
 8006d64:	4826      	ldr	r0, [pc, #152]	; (8006e00 <UplinkDispatcher_Callback+0x144>)
 8006d66:	f7fd ff21 	bl	8004bac <PrintStringVar>
			SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_SEND_MESSAGE;
 8006d6a:	4b23      	ldr	r3, [pc, #140]	; (8006df8 <UplinkDispatcher_Callback+0x13c>)
 8006d6c:	220b      	movs	r2, #11
 8006d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 8006d72:	4b21      	ldr	r3, [pc, #132]	; (8006df8 <UplinkDispatcher_Callback+0x13c>)
 8006d74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	491f      	ldr	r1, [pc, #124]	; (8006dfc <UplinkDispatcher_Callback+0x140>)
 8006d7e:	4820      	ldr	r0, [pc, #128]	; (8006e00 <UplinkDispatcher_Callback+0x144>)
 8006d80:	f7fd ff14 	bl	8004bac <PrintStringVar>
			qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_SendMessage(&SigfoxModule,WAIT,qRBufferGetFront(e->EventData) ,BufferTxFrame,MAX_SIZE_IBUTTON_DATA,SigfoxModule.DownLink) );
 8006d84:	4b1a      	ldr	r3, [pc, #104]	; (8006df0 <UplinkDispatcher_Callback+0x134>)
 8006d86:	222c      	movs	r2, #44	; 0x2c
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7ff fbe5 	bl	800655e <qQueuePeek>
 8006d94:	4602      	mov	r2, r0
 8006d96:	4b1c      	ldr	r3, [pc, #112]	; (8006e08 <UplinkDispatcher_Callback+0x14c>)
 8006d98:	7f5b      	ldrb	r3, [r3, #29]
 8006d9a:	9301      	str	r3, [sp, #4]
 8006d9c:	230c      	movs	r3, #12
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	4b1b      	ldr	r3, [pc, #108]	; (8006e10 <UplinkDispatcher_Callback+0x154>)
 8006da2:	4918      	ldr	r1, [pc, #96]	; (8006e04 <UplinkDispatcher_Callback+0x148>)
 8006da4:	4818      	ldr	r0, [pc, #96]	; (8006e08 <UplinkDispatcher_Callback+0x14c>)
 8006da6:	f7fe f9ff 	bl	80051a8 <WSSFM1XRX_SendMessage>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d119      	bne.n	8006de4 <UplinkDispatcher_Callback+0x128>
			SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_SENT_MESSAGE;
 8006db0:	4b11      	ldr	r3, [pc, #68]	; (8006df8 <UplinkDispatcher_Callback+0x13c>)
 8006db2:	220c      	movs	r2, #12
 8006db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			qRBufferRemoveFront(e->EventData);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff fbf5 	bl	80065ac <qQueueRemoveFront>
			PrintStringVar(&hlpuart1,(uint8_t*) "%d\r\n", SigFoxData.WilsolService_Status);
 8006dc2:	4b0d      	ldr	r3, [pc, #52]	; (8006df8 <UplinkDispatcher_Callback+0x13c>)
 8006dc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	461a      	mov	r2, r3
 8006dcc:	4911      	ldr	r1, [pc, #68]	; (8006e14 <UplinkDispatcher_Callback+0x158>)
 8006dce:	480c      	ldr	r0, [pc, #48]	; (8006e00 <UplinkDispatcher_Callback+0x144>)
 8006dd0:	f7fd feec 	bl	8004bac <PrintStringVar>
	}qCoroutineEnd;
 8006dd4:	4b06      	ldr	r3, [pc, #24]	; (8006df0 <UplinkDispatcher_Callback+0x134>)
 8006dd6:	4a07      	ldr	r2, [pc, #28]	; (8006df4 <UplinkDispatcher_Callback+0x138>)
 8006dd8:	601a      	str	r2, [r3, #0]
}
 8006dda:	e004      	b.n	8006de6 <UplinkDispatcher_Callback+0x12a>
			qCoroutineWaitUntil( (ret = WSSFM1XRX_CheckChannels(&SigfoxModule, WAIT ))  == WSSFM1XRX_CHANN_OK || ret == WSSFM1XRX_CHANN_NO_OK );
 8006ddc:	bf00      	nop
 8006dde:	e002      	b.n	8006de6 <UplinkDispatcher_Callback+0x12a>
				qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE ==  WSSFM1XRX_ResetChannels(&SigfoxModule,WAIT) );  /*Se daña con 0.01 en task pero solo con el at$rc*/ //WSSFM1XRX_Wait_Block
 8006de0:	bf00      	nop
 8006de2:	e000      	b.n	8006de6 <UplinkDispatcher_Callback+0x12a>
			qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_SendMessage(&SigfoxModule,WAIT,qRBufferGetFront(e->EventData) ,BufferTxFrame,MAX_SIZE_IBUTTON_DATA,SigfoxModule.DownLink) );
 8006de4:	bf00      	nop
}
 8006de6:	bf00      	nop
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	20000028 	.word	0x20000028
 8006df4:	ffff8002 	.word	0xffff8002
 8006df8:	20000318 	.word	0x20000318
 8006dfc:	08008878 	.word	0x08008878
 8006e00:	20000358 	.word	0x20000358
 8006e04:	08004dd1 	.word	0x08004dd1
 8006e08:	20000540 	.word	0x20000540
 8006e0c:	200002c0 	.word	0x200002c0
 8006e10:	200005e8 	.word	0x200005e8
 8006e14:	0800887c 	.word	0x0800887c

08006e18 <WisolService_Callback>:

void WisolService_Callback(qEvent_t e){
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af02      	add	r7, sp, #8
 8006e1e:	6078      	str	r0, [r7, #4]
	static WSSFM1XRX_Return_t ret;
	static qSTimer_t timeout;

	qCoroutineBegin{
 8006e20:	4b95      	ldr	r3, [pc, #596]	; (8007078 <WisolService_Callback+0x260>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b50      	cmp	r3, #80	; 0x50
 8006e26:	f000 80a8 	beq.w	8006f7a <WisolService_Callback+0x162>
 8006e2a:	2b50      	cmp	r3, #80	; 0x50
 8006e2c:	dc0d      	bgt.n	8006e4a <WisolService_Callback+0x32>
 8006e2e:	2b42      	cmp	r3, #66	; 0x42
 8006e30:	d047      	beq.n	8006ec2 <WisolService_Callback+0xaa>
 8006e32:	2b42      	cmp	r3, #66	; 0x42
 8006e34:	dc03      	bgt.n	8006e3e <WisolService_Callback+0x26>
 8006e36:	4a91      	ldr	r2, [pc, #580]	; (800707c <WisolService_Callback+0x264>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d016      	beq.n	8006e6a <WisolService_Callback+0x52>
		SigFoxData.ReadyToUplink = 1;

		qCoroutineWaitUntil( SigFoxData.WilsolService_Status == WSSFM1XRX_STATUS_IDLE  );

	}qCoroutineEnd;
}
 8006e3c:	e118      	b.n	8007070 <WisolService_Callback+0x258>
	qCoroutineBegin{
 8006e3e:	2b45      	cmp	r3, #69	; 0x45
 8006e40:	d056      	beq.n	8006ef0 <WisolService_Callback+0xd8>
 8006e42:	2b4c      	cmp	r3, #76	; 0x4c
 8006e44:	f000 8081 	beq.w	8006f4a <WisolService_Callback+0x132>
}
 8006e48:	e112      	b.n	8007070 <WisolService_Callback+0x258>
	qCoroutineBegin{
 8006e4a:	2b58      	cmp	r3, #88	; 0x58
 8006e4c:	f000 80c4 	beq.w	8006fd8 <WisolService_Callback+0x1c0>
 8006e50:	2b58      	cmp	r3, #88	; 0x58
 8006e52:	dc03      	bgt.n	8006e5c <WisolService_Callback+0x44>
 8006e54:	2b54      	cmp	r3, #84	; 0x54
 8006e56:	f000 80a8 	beq.w	8006faa <WisolService_Callback+0x192>
}
 8006e5a:	e109      	b.n	8007070 <WisolService_Callback+0x258>
	qCoroutineBegin{
 8006e5c:	2b5c      	cmp	r3, #92	; 0x5c
 8006e5e:	f000 80d3 	beq.w	8007008 <WisolService_Callback+0x1f0>
 8006e62:	2b64      	cmp	r3, #100	; 0x64
 8006e64:	f000 80ec 	beq.w	8007040 <WisolService_Callback+0x228>
}
 8006e68:	e102      	b.n	8007070 <WisolService_Callback+0x258>
		 HAL_GPIO_WritePin(GPIOC, Gpio4_Bus1_Shutdown_Pin, GPIO_PIN_SET);
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	2140      	movs	r1, #64	; 0x40
 8006e6e:	4884      	ldr	r0, [pc, #528]	; (8007080 <WisolService_Callback+0x268>)
 8006e70:	f7fb f9d0 	bl	8002214 <HAL_GPIO_WritePin>
		qDebugMessage("Coroutine from Beginning");
 8006e74:	2300      	movs	r3, #0
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	4b81      	ldr	r3, [pc, #516]	; (8007084 <WisolService_Callback+0x26c>)
 8006e7e:	4a82      	ldr	r2, [pc, #520]	; (8007088 <WisolService_Callback+0x270>)
 8006e80:	2100      	movs	r1, #0
 8006e82:	4881      	ldr	r0, [pc, #516]	; (8007088 <WisolService_Callback+0x270>)
 8006e84:	f7ff fd6c 	bl	8006960 <__qtrace_func>
		SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_WKUP;
 8006e88:	4b80      	ldr	r3, [pc, #512]	; (800708c <WisolService_Callback+0x274>)
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		PrintStringVar(&hlpuart1,(uint8_t*) "Status = %d ", SigFoxData.WilsolService_Status);
 8006e90:	4b7e      	ldr	r3, [pc, #504]	; (800708c <WisolService_Callback+0x274>)
 8006e92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	497d      	ldr	r1, [pc, #500]	; (8007090 <WisolService_Callback+0x278>)
 8006e9c:	487d      	ldr	r0, [pc, #500]	; (8007094 <WisolService_Callback+0x27c>)
 8006e9e:	f7fd fe85 	bl	8004bac <PrintStringVar>
		ret = WSSFM1XRX_WakeUP(&SigfoxModule,WSSFM1XRX_Wait_Block);
 8006ea2:	497d      	ldr	r1, [pc, #500]	; (8007098 <WisolService_Callback+0x280>)
 8006ea4:	487d      	ldr	r0, [pc, #500]	; (800709c <WisolService_Callback+0x284>)
 8006ea6:	f7fe f805 	bl	8004eb4 <WSSFM1XRX_WakeUP>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	461a      	mov	r2, r3
 8006eae:	4b7c      	ldr	r3, [pc, #496]	; (80070a0 <WisolService_Callback+0x288>)
 8006eb0:	701a      	strb	r2, [r3, #0]
		qSTimerSet(&timeout, 1.0);
 8006eb2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006eb6:	487b      	ldr	r0, [pc, #492]	; (80070a4 <WisolService_Callback+0x28c>)
 8006eb8:	f7ff fa5a 	bl	8006370 <qSTimerSet>
		qCoroutineWaitUntil( qSTimerExpired(&timeout) );
 8006ebc:	4b6e      	ldr	r3, [pc, #440]	; (8007078 <WisolService_Callback+0x260>)
 8006ebe:	2242      	movs	r2, #66	; 0x42
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	4878      	ldr	r0, [pc, #480]	; (80070a4 <WisolService_Callback+0x28c>)
 8006ec4:	f7ff fa75 	bl	80063b2 <qSTimerExpired>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 80c1 	beq.w	8007052 <WisolService_Callback+0x23a>
		SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_CHK_MODULE;
 8006ed0:	4b6e      	ldr	r3, [pc, #440]	; (800708c <WisolService_Callback+0x274>)
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 8006ed8:	4b6c      	ldr	r3, [pc, #432]	; (800708c <WisolService_Callback+0x274>)
 8006eda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	4971      	ldr	r1, [pc, #452]	; (80070a8 <WisolService_Callback+0x290>)
 8006ee4:	486b      	ldr	r0, [pc, #428]	; (8007094 <WisolService_Callback+0x27c>)
 8006ee6:	f7fd fe61 	bl	8004bac <PrintStringVar>
		qCoroutineWaitUntil( ( WSSFM1XRX_OK_RESPONSE == (ret = WSSFM1XRX_CheckModule(&SigfoxModule, WAIT)) )  || (WSSFM1XRX_MAX_RETRIES_REACHED == ret)  );
 8006eea:	4b63      	ldr	r3, [pc, #396]	; (8007078 <WisolService_Callback+0x260>)
 8006eec:	2245      	movs	r2, #69	; 0x45
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	496e      	ldr	r1, [pc, #440]	; (80070ac <WisolService_Callback+0x294>)
 8006ef2:	486a      	ldr	r0, [pc, #424]	; (800709c <WisolService_Callback+0x284>)
 8006ef4:	f7fe f846 	bl	8004f84 <WSSFM1XRX_CheckModule>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	461a      	mov	r2, r3
 8006efc:	4b68      	ldr	r3, [pc, #416]	; (80070a0 <WisolService_Callback+0x288>)
 8006efe:	701a      	strb	r2, [r3, #0]
 8006f00:	4b67      	ldr	r3, [pc, #412]	; (80070a0 <WisolService_Callback+0x288>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d004      	beq.n	8006f12 <WisolService_Callback+0xfa>
 8006f08:	4b65      	ldr	r3, [pc, #404]	; (80070a0 <WisolService_Callback+0x288>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b0b      	cmp	r3, #11
 8006f0e:	f040 80a2 	bne.w	8007056 <WisolService_Callback+0x23e>
		if(WSSFM1XRX_MAX_RETRIES_REACHED  == ret ){
 8006f12:	4b63      	ldr	r3, [pc, #396]	; (80070a0 <WisolService_Callback+0x288>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	2b0b      	cmp	r3, #11
 8006f18:	d107      	bne.n	8006f2a <WisolService_Callback+0x112>
			WSSFM1XRX_ResetModule(&SigfoxModule,WSSFM1XRX_Wait_Block);
 8006f1a:	495f      	ldr	r1, [pc, #380]	; (8007098 <WisolService_Callback+0x280>)
 8006f1c:	485f      	ldr	r0, [pc, #380]	; (800709c <WisolService_Callback+0x284>)
 8006f1e:	f7fd fffb 	bl	8004f18 <WSSFM1XRX_ResetModule>
			qCoroutineRestart;
 8006f22:	4b55      	ldr	r3, [pc, #340]	; (8007078 <WisolService_Callback+0x260>)
 8006f24:	4a55      	ldr	r2, [pc, #340]	; (800707c <WisolService_Callback+0x264>)
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	e0a2      	b.n	8007070 <WisolService_Callback+0x258>
		SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_GET_VOLTAGE;
 8006f2a:	4b58      	ldr	r3, [pc, #352]	; (800708c <WisolService_Callback+0x274>)
 8006f2c:	2203      	movs	r2, #3
 8006f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 8006f32:	4b56      	ldr	r3, [pc, #344]	; (800708c <WisolService_Callback+0x274>)
 8006f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	495a      	ldr	r1, [pc, #360]	; (80070a8 <WisolService_Callback+0x290>)
 8006f3e:	4855      	ldr	r0, [pc, #340]	; (8007094 <WisolService_Callback+0x27c>)
 8006f40:	f7fd fe34 	bl	8004bac <PrintStringVar>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_GetVoltage(&SigfoxModule,WAIT,&SigFoxData.VBatt) );
 8006f44:	4b4c      	ldr	r3, [pc, #304]	; (8007078 <WisolService_Callback+0x260>)
 8006f46:	224c      	movs	r2, #76	; 0x4c
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	4a59      	ldr	r2, [pc, #356]	; (80070b0 <WisolService_Callback+0x298>)
 8006f4c:	4957      	ldr	r1, [pc, #348]	; (80070ac <WisolService_Callback+0x294>)
 8006f4e:	4853      	ldr	r0, [pc, #332]	; (800709c <WisolService_Callback+0x284>)
 8006f50:	f7fe f85a 	bl	8005008 <WSSFM1XRX_GetVoltage>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d17f      	bne.n	800705a <WisolService_Callback+0x242>
		SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_CHANGE_FREQ_UL;
 8006f5a:	4b4c      	ldr	r3, [pc, #304]	; (800708c <WisolService_Callback+0x274>)
 8006f5c:	2204      	movs	r2, #4
 8006f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 8006f62:	4b4a      	ldr	r3, [pc, #296]	; (800708c <WisolService_Callback+0x274>)
 8006f64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	494e      	ldr	r1, [pc, #312]	; (80070a8 <WisolService_Callback+0x290>)
 8006f6e:	4849      	ldr	r0, [pc, #292]	; (8007094 <WisolService_Callback+0x27c>)
 8006f70:	f7fd fe1c 	bl	8004bac <PrintStringVar>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_ChangeFrequencyUL(&SigfoxModule,WAIT,WSSFM1XRX_RCZ4)   );
 8006f74:	4b40      	ldr	r3, [pc, #256]	; (8007078 <WisolService_Callback+0x260>)
 8006f76:	2250      	movs	r2, #80	; 0x50
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	2203      	movs	r2, #3
 8006f7c:	494b      	ldr	r1, [pc, #300]	; (80070ac <WisolService_Callback+0x294>)
 8006f7e:	4847      	ldr	r0, [pc, #284]	; (800709c <WisolService_Callback+0x284>)
 8006f80:	f7fe f8da 	bl	8005138 <WSSFM1XRX_ChangeFrequencyUL>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d169      	bne.n	800705e <WisolService_Callback+0x246>
		SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_SAVE_PARM;
 8006f8a:	4b40      	ldr	r3, [pc, #256]	; (800708c <WisolService_Callback+0x274>)
 8006f8c:	2205      	movs	r2, #5
 8006f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 8006f92:	4b3e      	ldr	r3, [pc, #248]	; (800708c <WisolService_Callback+0x274>)
 8006f94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	4942      	ldr	r1, [pc, #264]	; (80070a8 <WisolService_Callback+0x290>)
 8006f9e:	483d      	ldr	r0, [pc, #244]	; (8007094 <WisolService_Callback+0x27c>)
 8006fa0:	f7fd fe04 	bl	8004bac <PrintStringVar>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_SaveParameters(&SigfoxModule,WAIT) );
 8006fa4:	4b34      	ldr	r3, [pc, #208]	; (8007078 <WisolService_Callback+0x260>)
 8006fa6:	2254      	movs	r2, #84	; 0x54
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	4940      	ldr	r1, [pc, #256]	; (80070ac <WisolService_Callback+0x294>)
 8006fac:	483b      	ldr	r0, [pc, #236]	; (800709c <WisolService_Callback+0x284>)
 8006fae:	f7fe f8e1 	bl	8005174 <WSSFM1XRX_SaveParameters>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d154      	bne.n	8007062 <WisolService_Callback+0x24a>
		SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_GET_ID;
 8006fb8:	4b34      	ldr	r3, [pc, #208]	; (800708c <WisolService_Callback+0x274>)
 8006fba:	2206      	movs	r2, #6
 8006fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 8006fc0:	4b32      	ldr	r3, [pc, #200]	; (800708c <WisolService_Callback+0x274>)
 8006fc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	461a      	mov	r2, r3
 8006fca:	4937      	ldr	r1, [pc, #220]	; (80070a8 <WisolService_Callback+0x290>)
 8006fcc:	4831      	ldr	r0, [pc, #196]	; (8007094 <WisolService_Callback+0x27c>)
 8006fce:	f7fd fded 	bl	8004bac <PrintStringVar>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_GetID(&SigfoxModule,WAIT,SigFoxData.ID) );
 8006fd2:	4b29      	ldr	r3, [pc, #164]	; (8007078 <WisolService_Callback+0x260>)
 8006fd4:	2258      	movs	r2, #88	; 0x58
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	4a2c      	ldr	r2, [pc, #176]	; (800708c <WisolService_Callback+0x274>)
 8006fda:	4934      	ldr	r1, [pc, #208]	; (80070ac <WisolService_Callback+0x294>)
 8006fdc:	482f      	ldr	r0, [pc, #188]	; (800709c <WisolService_Callback+0x284>)
 8006fde:	f7fd ffeb 	bl	8004fb8 <WSSFM1XRX_GetID>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b03      	cmp	r3, #3
 8006fe6:	d13e      	bne.n	8007066 <WisolService_Callback+0x24e>
		SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_GET_PAC;
 8006fe8:	4b28      	ldr	r3, [pc, #160]	; (800708c <WisolService_Callback+0x274>)
 8006fea:	2207      	movs	r2, #7
 8006fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 8006ff0:	4b26      	ldr	r3, [pc, #152]	; (800708c <WisolService_Callback+0x274>)
 8006ff2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	492b      	ldr	r1, [pc, #172]	; (80070a8 <WisolService_Callback+0x290>)
 8006ffc:	4825      	ldr	r0, [pc, #148]	; (8007094 <WisolService_Callback+0x27c>)
 8006ffe:	f7fd fdd5 	bl	8004bac <PrintStringVar>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_GetPAC(&SigfoxModule,WAIT,SigFoxData.PAC) );
 8007002:	4b1d      	ldr	r3, [pc, #116]	; (8007078 <WisolService_Callback+0x260>)
 8007004:	225c      	movs	r2, #92	; 0x5c
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	4a2a      	ldr	r2, [pc, #168]	; (80070b4 <WisolService_Callback+0x29c>)
 800700a:	4928      	ldr	r1, [pc, #160]	; (80070ac <WisolService_Callback+0x294>)
 800700c:	4823      	ldr	r0, [pc, #140]	; (800709c <WisolService_Callback+0x284>)
 800700e:	f7fd ffe7 	bl	8004fe0 <WSSFM1XRX_GetPAC>
 8007012:	4603      	mov	r3, r0
 8007014:	2b03      	cmp	r3, #3
 8007016:	d128      	bne.n	800706a <WisolService_Callback+0x252>
		SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_MODULE_INITIALIZED;
 8007018:	4b1c      	ldr	r3, [pc, #112]	; (800708c <WisolService_Callback+0x274>)
 800701a:	2208      	movs	r2, #8
 800701c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 8007020:	4b1a      	ldr	r3, [pc, #104]	; (800708c <WisolService_Callback+0x274>)
 8007022:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007026:	b29b      	uxth	r3, r3
 8007028:	461a      	mov	r2, r3
 800702a:	491f      	ldr	r1, [pc, #124]	; (80070a8 <WisolService_Callback+0x290>)
 800702c:	4819      	ldr	r0, [pc, #100]	; (8007094 <WisolService_Callback+0x27c>)
 800702e:	f7fd fdbd 	bl	8004bac <PrintStringVar>
		SigFoxData.ReadyToUplink = 1;
 8007032:	4b16      	ldr	r3, [pc, #88]	; (800708c <WisolService_Callback+0x274>)
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		qCoroutineWaitUntil( SigFoxData.WilsolService_Status == WSSFM1XRX_STATUS_IDLE  );
 800703a:	4b0f      	ldr	r3, [pc, #60]	; (8007078 <WisolService_Callback+0x260>)
 800703c:	2264      	movs	r2, #100	; 0x64
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	4b12      	ldr	r3, [pc, #72]	; (800708c <WisolService_Callback+0x274>)
 8007042:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007046:	2b0d      	cmp	r3, #13
 8007048:	d111      	bne.n	800706e <WisolService_Callback+0x256>
	}qCoroutineEnd;
 800704a:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <WisolService_Callback+0x260>)
 800704c:	4a0b      	ldr	r2, [pc, #44]	; (800707c <WisolService_Callback+0x264>)
 800704e:	601a      	str	r2, [r3, #0]
}
 8007050:	e00e      	b.n	8007070 <WisolService_Callback+0x258>
		qCoroutineWaitUntil( qSTimerExpired(&timeout) );
 8007052:	bf00      	nop
 8007054:	e00c      	b.n	8007070 <WisolService_Callback+0x258>
		qCoroutineWaitUntil( ( WSSFM1XRX_OK_RESPONSE == (ret = WSSFM1XRX_CheckModule(&SigfoxModule, WAIT)) )  || (WSSFM1XRX_MAX_RETRIES_REACHED == ret)  );
 8007056:	bf00      	nop
 8007058:	e00a      	b.n	8007070 <WisolService_Callback+0x258>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_GetVoltage(&SigfoxModule,WAIT,&SigFoxData.VBatt) );
 800705a:	bf00      	nop
 800705c:	e008      	b.n	8007070 <WisolService_Callback+0x258>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_ChangeFrequencyUL(&SigfoxModule,WAIT,WSSFM1XRX_RCZ4)   );
 800705e:	bf00      	nop
 8007060:	e006      	b.n	8007070 <WisolService_Callback+0x258>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_SaveParameters(&SigfoxModule,WAIT) );
 8007062:	bf00      	nop
 8007064:	e004      	b.n	8007070 <WisolService_Callback+0x258>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_GetID(&SigfoxModule,WAIT,SigFoxData.ID) );
 8007066:	bf00      	nop
 8007068:	e002      	b.n	8007070 <WisolService_Callback+0x258>
		qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_GetPAC(&SigfoxModule,WAIT,SigFoxData.PAC) );
 800706a:	bf00      	nop
 800706c:	e000      	b.n	8007070 <WisolService_Callback+0x258>
		qCoroutineWaitUntil( SigFoxData.WilsolService_Status == WSSFM1XRX_STATUS_IDLE  );
 800706e:	bf00      	nop
}
 8007070:	bf00      	nop
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	20000030 	.word	0x20000030
 800707c:	ffff8002 	.word	0xffff8002
 8007080:	48000800 	.word	0x48000800
 8007084:	08008884 	.word	0x08008884
 8007088:	080088a0 	.word	0x080088a0
 800708c:	20000318 	.word	0x20000318
 8007090:	080088a4 	.word	0x080088a4
 8007094:	20000358 	.word	0x20000358
 8007098:	08004e4d 	.word	0x08004e4d
 800709c:	20000540 	.word	0x20000540
 80070a0:	200002c1 	.word	0x200002c1
 80070a4:	200002c4 	.word	0x200002c4
 80070a8:	08008878 	.word	0x08008878
 80070ac:	08004dd1 	.word	0x08004dd1
 80070b0:	2000033a 	.word	0x2000033a
 80070b4:	20000324 	.word	0x20000324

080070b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af06      	add	r7, sp, #24
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80070be:	f7f9 fa5f 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80070c2:	f000 f8c3 	bl	800724c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80070c6:	f000 fa83 	bl	80075d0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80070ca:	f000 f9c1 	bl	8007450 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80070ce:	f000 fa1b 	bl	8007508 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80070d2:	f000 f9e9 	bl	80074a8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80070d6:	f000 f945 	bl	8007364 <MX_ADC1_Init>
  MX_RTC_Init();
 80070da:	f000 fa45 	bl	8007568 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart2,(uint8_t *)&UART_RX.Data,USART_RX_AMOUNT_BYTES);
 80070de:	2201      	movs	r2, #1
 80070e0:	493b      	ldr	r1, [pc, #236]	; (80071d0 <main+0x118>)
 80070e2:	483c      	ldr	r0, [pc, #240]	; (80071d4 <main+0x11c>)
 80070e4:	f7fc fd7e 	bl	8003be4 <HAL_UART_Receive_IT>
	SigfoxModule.StatusFlag = WSSFM1XRX_Init(&SigfoxModule, RSTCtrl_Sigfox,
 80070e8:	2304      	movs	r3, #4
 80070ea:	9305      	str	r3, [sp, #20]
 80070ec:	2325      	movs	r3, #37	; 0x25
 80070ee:	9304      	str	r3, [sp, #16]
 80070f0:	4b39      	ldr	r3, [pc, #228]	; (80071d8 <main+0x120>)
 80070f2:	9303      	str	r3, [sp, #12]
 80070f4:	4b39      	ldr	r3, [pc, #228]	; (80071dc <main+0x124>)
 80070f6:	9302      	str	r3, [sp, #8]
 80070f8:	4b39      	ldr	r3, [pc, #228]	; (80071e0 <main+0x128>)
 80070fa:	9301      	str	r3, [sp, #4]
 80070fc:	2303      	movs	r3, #3
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	4b38      	ldr	r3, [pc, #224]	; (80071e4 <main+0x12c>)
 8007102:	4a39      	ldr	r2, [pc, #228]	; (80071e8 <main+0x130>)
 8007104:	4939      	ldr	r1, [pc, #228]	; (80071ec <main+0x134>)
 8007106:	483a      	ldr	r0, [pc, #232]	; (80071f0 <main+0x138>)
 8007108:	f7fd fe22 	bl	8004d50 <WSSFM1XRX_Init>
 800710c:	4603      	mov	r3, r0
 800710e:	461a      	mov	r2, r3
 8007110:	4b37      	ldr	r3, [pc, #220]	; (80071f0 <main+0x138>)
 8007112:	76da      	strb	r2, [r3, #27]
			RST2Ctrl_Sigfox, PutCharWrapperUart_1,
			WSSFM1XRX_RCZ4, DiscrimateFrameType, HAL_GetTick,BufferRxFrame,
			sizeof(BufferRxFrame), 4);
	SigFoxData.ReadyToUplink = 0;
 8007114:	4b37      	ldr	r3, [pc, #220]	; (80071f4 <main+0x13c>)
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	SigFoxData.ReadyToUplink = 0;
 800711c:	4b35      	ldr	r3, [pc, #212]	; (80071f4 <main+0x13c>)
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_MODULE_NOT_INITIALIZED;
 8007124:	4b33      	ldr	r3, [pc, #204]	; (80071f4 <main+0x13c>)
 8007126:	220e      	movs	r2, #14
 8007128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	qSetDebugFcn(UART_DEBUG);
 800712c:	4b32      	ldr	r3, [pc, #200]	; (80071f8 <main+0x140>)
 800712e:	4a33      	ldr	r2, [pc, #204]	; (80071fc <main+0x144>)
 8007130:	601a      	str	r2, [r3, #0]
	//HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1); // quitar

	ProjectInformation();
 8007132:	f7fd fddf 	bl	8004cf4 <ProjectInformation>
	qSchedulerSetup(HAL_GetTick, 0.001, IdleTask_Callback, 0);
 8007136:	2300      	movs	r3, #0
 8007138:	463a      	mov	r2, r7
 800713a:	4931      	ldr	r1, [pc, #196]	; (8007200 <main+0x148>)
 800713c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8007204 <main+0x14c>
 8007140:	4826      	ldr	r0, [pc, #152]	; (80071dc <main+0x124>)
 8007142:	f7fe fb95 	bl	8005870 <_qInitScheduler>

	qEdgeCheck_Initialize(&InputCheck, QREG_32BIT, 100);
 8007146:	2264      	movs	r2, #100	; 0x64
 8007148:	492f      	ldr	r1, [pc, #188]	; (8007208 <main+0x150>)
 800714a:	4830      	ldr	r0, [pc, #192]	; (800720c <main+0x154>)
 800714c:	f7ff fc76 	bl	8006a3c <qEdgeCheck_Initialize>
	qEdgeCheck_InsertNode(&InputCheck, &InputButton, GPIOB_BASE, 0);
 8007150:	2300      	movs	r3, #0
 8007152:	4a2f      	ldr	r2, [pc, #188]	; (8007210 <main+0x158>)
 8007154:	492f      	ldr	r1, [pc, #188]	; (8007214 <main+0x15c>)
 8007156:	482d      	ldr	r0, [pc, #180]	; (800720c <main+0x154>)
 8007158:	f7ff fc98 	bl	8006a8c <qEdgeCheck_InsertNode>

	qQueueCreate(&SigFox_UplinkQueue, mQueue_Stack, sizeof(SigfoxServiceRequest_t), 2);
 800715c:	2302      	movs	r3, #2
 800715e:	220d      	movs	r2, #13
 8007160:	492d      	ldr	r1, [pc, #180]	; (8007218 <main+0x160>)
 8007162:	482e      	ldr	r0, [pc, #184]	; (800721c <main+0x164>)
 8007164:	f7ff f95c 	bl	8006420 <qQueueCreate>
	qTaskSetState(&Task_Wisol_Service,qEnabled);
 8007168:	2101      	movs	r1, #1
 800716a:	482d      	ldr	r0, [pc, #180]	; (8007220 <main+0x168>)
 800716c:	f7fe fad2 	bl	8005714 <qTaskSetState>

	qSchedulerAddSMTask(&Task_ApplicationFSM, MEDIUM_Priority, 0.01, &StateMachine_ApplicationFSM, State_Init,NULL, NULL, State_Failure, NULL, qEnabled, NULL);
 8007170:	2300      	movs	r3, #0
 8007172:	9305      	str	r3, [sp, #20]
 8007174:	2301      	movs	r3, #1
 8007176:	9304      	str	r3, [sp, #16]
 8007178:	2300      	movs	r3, #0
 800717a:	9303      	str	r3, [sp, #12]
 800717c:	4b29      	ldr	r3, [pc, #164]	; (8007224 <main+0x16c>)
 800717e:	9302      	str	r3, [sp, #8]
 8007180:	2300      	movs	r3, #0
 8007182:	9301      	str	r3, [sp, #4]
 8007184:	2300      	movs	r3, #0
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	4b27      	ldr	r3, [pc, #156]	; (8007228 <main+0x170>)
 800718a:	4a28      	ldr	r2, [pc, #160]	; (800722c <main+0x174>)
 800718c:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8007230 <main+0x178>
 8007190:	217f      	movs	r1, #127	; 0x7f
 8007192:	4828      	ldr	r0, [pc, #160]	; (8007234 <main+0x17c>)
 8007194:	f7fe fc62 	bl	8005a5c <qSchedulerAdd_StateMachineTask>
	qSchedulerAddxTask(&Task_Wisol_Service, WisolService_Callback, MEDIUM_Priority, 0.1, qPeriodic, qEnabled, NULL); /*en el mismo tiempo de la maquina de estados se pega en ATRC?? corutina??*/
 8007198:	2300      	movs	r3, #0
 800719a:	9301      	str	r3, [sp, #4]
 800719c:	2301      	movs	r3, #1
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	4b25      	ldr	r3, [pc, #148]	; (8007238 <main+0x180>)
 80071a2:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800723c <main+0x184>
 80071a6:	227f      	movs	r2, #127	; 0x7f
 80071a8:	4925      	ldr	r1, [pc, #148]	; (8007240 <main+0x188>)
 80071aa:	481d      	ldr	r0, [pc, #116]	; (8007220 <main+0x168>)
 80071ac:	f7fe fbba 	bl	8005924 <qSchedulerAdd_Task>
	qSchedulerAdd_EventTask(&Task_UplinkDispatcher, UplinkDispatcher_Callback, qHigh_Priority, NULL);
 80071b0:	2300      	movs	r3, #0
 80071b2:	22fe      	movs	r2, #254	; 0xfe
 80071b4:	4923      	ldr	r1, [pc, #140]	; (8007244 <main+0x18c>)
 80071b6:	4824      	ldr	r0, [pc, #144]	; (8007248 <main+0x190>)
 80071b8:	f7fe fc34 	bl	8005a24 <qSchedulerAdd_EventTask>
	qTaskAttachQueue(&Task_UplinkDispatcher, &SigFox_UplinkQueue, qQUEUE_COUNT, 1);
 80071bc:	2301      	movs	r3, #1
 80071be:	2205      	movs	r2, #5
 80071c0:	4916      	ldr	r1, [pc, #88]	; (800721c <main+0x164>)
 80071c2:	4821      	ldr	r0, [pc, #132]	; (8007248 <main+0x190>)
 80071c4:	f7fe fd2e 	bl	8005c24 <qTaskAttachQueue>

	qSchedulerRun();
 80071c8:	f7fe fe0a 	bl	8005de0 <qSchedulerRun>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80071cc:	e7fe      	b.n	80071cc <main+0x114>
 80071ce:	bf00      	nop
 80071d0:	2000053a 	.word	0x2000053a
 80071d4:	200004a0 	.word	0x200004a0
 80071d8:	20000434 	.word	0x20000434
 80071dc:	08000649 	.word	0x08000649
 80071e0:	08004c55 	.word	0x08004c55
 80071e4:	08004b11 	.word	0x08004b11
 80071e8:	08004ad9 	.word	0x08004ad9
 80071ec:	08004aa5 	.word	0x08004aa5
 80071f0:	20000540 	.word	0x20000540
 80071f4:	20000318 	.word	0x20000318
 80071f8:	20000298 	.word	0x20000298
 80071fc:	08004b49 	.word	0x08004b49
 8007200:	08006ca9 	.word	0x08006ca9
 8007204:	3a83126f 	.word	0x3a83126f
 8007208:	08006a01 	.word	0x08006a01
 800720c:	200003dc 	.word	0x200003dc
 8007210:	48000400 	.word	0x48000400
 8007214:	2000030c 	.word	0x2000030c
 8007218:	20000228 	.word	0x20000228
 800721c:	20000340 	.word	0x20000340
 8007220:	200003f0 	.word	0x200003f0
 8007224:	08006ae7 	.word	0x08006ae7
 8007228:	08006bdd 	.word	0x08006bdd
 800722c:	200002e0 	.word	0x200002e0
 8007230:	3c23d70a 	.word	0x3c23d70a
 8007234:	20000570 	.word	0x20000570
 8007238:	ffff8000 	.word	0xffff8000
 800723c:	3dcccccd 	.word	0x3dcccccd
 8007240:	08006e19 	.word	0x08006e19
 8007244:	08006cbd 	.word	0x08006cbd
 8007248:	200005b4 	.word	0x200005b4

0800724c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b0b8      	sub	sp, #224	; 0xe0
 8007250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007252:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007256:	2244      	movs	r2, #68	; 0x44
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fcca 	bl	8007bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007260:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	605a      	str	r2, [r3, #4]
 800726a:	609a      	str	r2, [r3, #8]
 800726c:	60da      	str	r2, [r3, #12]
 800726e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007270:	1d3b      	adds	r3, r7, #4
 8007272:	2284      	movs	r2, #132	; 0x84
 8007274:	2100      	movs	r1, #0
 8007276:	4618      	mov	r0, r3
 8007278:	f000 fcbc 	bl	8007bf4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800727c:	231a      	movs	r3, #26
 800727e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007286:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800728a:	2310      	movs	r3, #16
 800728c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007290:	2301      	movs	r3, #1
 8007292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007296:	2301      	movs	r3, #1
 8007298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800729c:	2300      	movs	r3, #0
 800729e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80072a2:	2360      	movs	r3, #96	; 0x60
 80072a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80072a8:	2300      	movs	r3, #0
 80072aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80072ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fb f844 	bl	8002340 <HAL_RCC_OscConfig>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80072be:	f000 fa03 	bl	80076c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80072c2:	230f      	movs	r3, #15
 80072c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80072c8:	2301      	movs	r3, #1
 80072ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80072ce:	2300      	movs	r3, #0
 80072d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80072d4:	2300      	movs	r3, #0
 80072d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80072da:	2300      	movs	r3, #0
 80072dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80072e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fb fbda 	bl	8002aa0 <HAL_RCC_ClockConfig>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80072f2:	f000 f9e9 	bl	80076c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80072f6:	4b1a      	ldr	r3, [pc, #104]	; (8007360 <SystemClock_Config+0x114>)
 80072f8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80072fa:	2300      	movs	r3, #0
 80072fc:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80072fe:	2300      	movs	r3, #0
 8007300:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007302:	2300      	movs	r3, #0
 8007304:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8007306:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800730a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800730c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8007314:	2301      	movs	r3, #1
 8007316:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007318:	2301      	movs	r3, #1
 800731a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800731c:	2310      	movs	r3, #16
 800731e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8007320:	2307      	movs	r3, #7
 8007322:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007324:	2302      	movs	r3, #2
 8007326:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007328:	2302      	movs	r3, #2
 800732a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800732c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007330:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007332:	1d3b      	adds	r3, r7, #4
 8007334:	4618      	mov	r0, r3
 8007336:	f7fb fdb7 	bl	8002ea8 <HAL_RCCEx_PeriphCLKConfig>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8007340:	f000 f9c2 	bl	80076c8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007344:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007348:	f7fa ffa4 	bl	8002294 <HAL_PWREx_ControlVoltageScaling>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8007352:	f000 f9b9 	bl	80076c8 <Error_Handler>
  }
}
 8007356:	bf00      	nop
 8007358:	37e0      	adds	r7, #224	; 0xe0
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	00024026 	.word	0x00024026

08007364 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08a      	sub	sp, #40	; 0x28
 8007368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800736a:	f107 031c 	add.w	r3, r7, #28
 800736e:	2200      	movs	r2, #0
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	605a      	str	r2, [r3, #4]
 8007374:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007376:	1d3b      	adds	r3, r7, #4
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	605a      	str	r2, [r3, #4]
 800737e:	609a      	str	r2, [r3, #8]
 8007380:	60da      	str	r2, [r3, #12]
 8007382:	611a      	str	r2, [r3, #16]
 8007384:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8007386:	4b2f      	ldr	r3, [pc, #188]	; (8007444 <MX_ADC1_Init+0xe0>)
 8007388:	4a2f      	ldr	r2, [pc, #188]	; (8007448 <MX_ADC1_Init+0xe4>)
 800738a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800738c:	4b2d      	ldr	r3, [pc, #180]	; (8007444 <MX_ADC1_Init+0xe0>)
 800738e:	2200      	movs	r2, #0
 8007390:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007392:	4b2c      	ldr	r3, [pc, #176]	; (8007444 <MX_ADC1_Init+0xe0>)
 8007394:	2200      	movs	r2, #0
 8007396:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007398:	4b2a      	ldr	r3, [pc, #168]	; (8007444 <MX_ADC1_Init+0xe0>)
 800739a:	2200      	movs	r2, #0
 800739c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800739e:	4b29      	ldr	r3, [pc, #164]	; (8007444 <MX_ADC1_Init+0xe0>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection =ADC_EOC_SEQ_CONV; //ADC_EOC_SINGLE_CONV;
 80073a4:	4b27      	ldr	r3, [pc, #156]	; (8007444 <MX_ADC1_Init+0xe0>)
 80073a6:	2208      	movs	r2, #8
 80073a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80073aa:	4b26      	ldr	r3, [pc, #152]	; (8007444 <MX_ADC1_Init+0xe0>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80073b0:	4b24      	ldr	r3, [pc, #144]	; (8007444 <MX_ADC1_Init+0xe0>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80073b6:	4b23      	ldr	r3, [pc, #140]	; (8007444 <MX_ADC1_Init+0xe0>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80073bc:	4b21      	ldr	r3, [pc, #132]	; (8007444 <MX_ADC1_Init+0xe0>)
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80073c4:	4b1f      	ldr	r3, [pc, #124]	; (8007444 <MX_ADC1_Init+0xe0>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80073ca:	4b1e      	ldr	r3, [pc, #120]	; (8007444 <MX_ADC1_Init+0xe0>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80073d0:	4b1c      	ldr	r3, [pc, #112]	; (8007444 <MX_ADC1_Init+0xe0>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80073d8:	4b1a      	ldr	r3, [pc, #104]	; (8007444 <MX_ADC1_Init+0xe0>)
 80073da:	2200      	movs	r2, #0
 80073dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80073de:	4b19      	ldr	r3, [pc, #100]	; (8007444 <MX_ADC1_Init+0xe0>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80073e6:	4817      	ldr	r0, [pc, #92]	; (8007444 <MX_ADC1_Init+0xe0>)
 80073e8:	f7f9 fb5e 	bl	8000aa8 <HAL_ADC_Init>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80073f2:	f000 f969 	bl	80076c8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80073f6:	2300      	movs	r3, #0
 80073f8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80073fa:	f107 031c 	add.w	r3, r7, #28
 80073fe:	4619      	mov	r1, r3
 8007400:	4810      	ldr	r0, [pc, #64]	; (8007444 <MX_ADC1_Init+0xe0>)
 8007402:	f7fa fb61 	bl	8001ac8 <HAL_ADCEx_MultiModeConfigChannel>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800740c:	f000 f95c 	bl	80076c8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007410:	4b0e      	ldr	r3, [pc, #56]	; (800744c <MX_ADC1_Init+0xe8>)
 8007412:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007414:	2306      	movs	r3, #6
 8007416:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8007418:	2300      	movs	r3, #0
 800741a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800741c:	237f      	movs	r3, #127	; 0x7f
 800741e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007420:	2304      	movs	r3, #4
 8007422:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007428:	1d3b      	adds	r3, r7, #4
 800742a:	4619      	mov	r1, r3
 800742c:	4805      	ldr	r0, [pc, #20]	; (8007444 <MX_ADC1_Init+0xe0>)
 800742e:	f7f9 fe5b 	bl	80010e8 <HAL_ADC_ConfigChannel>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8007438:	f000 f946 	bl	80076c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800743c:	bf00      	nop
 800743e:	3728      	adds	r7, #40	; 0x28
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	20000688 	.word	0x20000688
 8007448:	50040000 	.word	0x50040000
 800744c:	10c00010 	.word	0x10c00010

08007450 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8007454:	4b12      	ldr	r3, [pc, #72]	; (80074a0 <MX_LPUART1_UART_Init+0x50>)
 8007456:	4a13      	ldr	r2, [pc, #76]	; (80074a4 <MX_LPUART1_UART_Init+0x54>)
 8007458:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800745a:	4b11      	ldr	r3, [pc, #68]	; (80074a0 <MX_LPUART1_UART_Init+0x50>)
 800745c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007460:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007462:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <MX_LPUART1_UART_Init+0x50>)
 8007464:	2200      	movs	r2, #0
 8007466:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8007468:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <MX_LPUART1_UART_Init+0x50>)
 800746a:	2200      	movs	r2, #0
 800746c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800746e:	4b0c      	ldr	r3, [pc, #48]	; (80074a0 <MX_LPUART1_UART_Init+0x50>)
 8007470:	2200      	movs	r2, #0
 8007472:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8007474:	4b0a      	ldr	r3, [pc, #40]	; (80074a0 <MX_LPUART1_UART_Init+0x50>)
 8007476:	220c      	movs	r2, #12
 8007478:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800747a:	4b09      	ldr	r3, [pc, #36]	; (80074a0 <MX_LPUART1_UART_Init+0x50>)
 800747c:	2200      	movs	r2, #0
 800747e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007480:	4b07      	ldr	r3, [pc, #28]	; (80074a0 <MX_LPUART1_UART_Init+0x50>)
 8007482:	2200      	movs	r2, #0
 8007484:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007486:	4b06      	ldr	r3, [pc, #24]	; (80074a0 <MX_LPUART1_UART_Init+0x50>)
 8007488:	2200      	movs	r2, #0
 800748a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800748c:	4804      	ldr	r0, [pc, #16]	; (80074a0 <MX_LPUART1_UART_Init+0x50>)
 800748e:	f7fc fb5b 	bl	8003b48 <HAL_UART_Init>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8007498:	f000 f916 	bl	80076c8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800749c:	bf00      	nop
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20000358 	.word	0x20000358
 80074a4:	40008000 	.word	0x40008000

080074a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80074ac:	4b14      	ldr	r3, [pc, #80]	; (8007500 <MX_USART2_UART_Init+0x58>)
 80074ae:	4a15      	ldr	r2, [pc, #84]	; (8007504 <MX_USART2_UART_Init+0x5c>)
 80074b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80074b2:	4b13      	ldr	r3, [pc, #76]	; (8007500 <MX_USART2_UART_Init+0x58>)
 80074b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80074b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80074ba:	4b11      	ldr	r3, [pc, #68]	; (8007500 <MX_USART2_UART_Init+0x58>)
 80074bc:	2200      	movs	r2, #0
 80074be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80074c0:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <MX_USART2_UART_Init+0x58>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80074c6:	4b0e      	ldr	r3, [pc, #56]	; (8007500 <MX_USART2_UART_Init+0x58>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80074cc:	4b0c      	ldr	r3, [pc, #48]	; (8007500 <MX_USART2_UART_Init+0x58>)
 80074ce:	220c      	movs	r2, #12
 80074d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80074d2:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <MX_USART2_UART_Init+0x58>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80074d8:	4b09      	ldr	r3, [pc, #36]	; (8007500 <MX_USART2_UART_Init+0x58>)
 80074da:	2200      	movs	r2, #0
 80074dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80074de:	4b08      	ldr	r3, [pc, #32]	; (8007500 <MX_USART2_UART_Init+0x58>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80074e4:	4b06      	ldr	r3, [pc, #24]	; (8007500 <MX_USART2_UART_Init+0x58>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80074ea:	4805      	ldr	r0, [pc, #20]	; (8007500 <MX_USART2_UART_Init+0x58>)
 80074ec:	f7fc fb2c 	bl	8003b48 <HAL_UART_Init>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80074f6:	f000 f8e7 	bl	80076c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80074fa:	bf00      	nop
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	200004a0 	.word	0x200004a0
 8007504:	40004400 	.word	0x40004400

08007508 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800750c:	4b14      	ldr	r3, [pc, #80]	; (8007560 <MX_USART3_UART_Init+0x58>)
 800750e:	4a15      	ldr	r2, [pc, #84]	; (8007564 <MX_USART3_UART_Init+0x5c>)
 8007510:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8007512:	4b13      	ldr	r3, [pc, #76]	; (8007560 <MX_USART3_UART_Init+0x58>)
 8007514:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007518:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800751a:	4b11      	ldr	r3, [pc, #68]	; (8007560 <MX_USART3_UART_Init+0x58>)
 800751c:	2200      	movs	r2, #0
 800751e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007520:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <MX_USART3_UART_Init+0x58>)
 8007522:	2200      	movs	r2, #0
 8007524:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007526:	4b0e      	ldr	r3, [pc, #56]	; (8007560 <MX_USART3_UART_Init+0x58>)
 8007528:	2200      	movs	r2, #0
 800752a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800752c:	4b0c      	ldr	r3, [pc, #48]	; (8007560 <MX_USART3_UART_Init+0x58>)
 800752e:	220c      	movs	r2, #12
 8007530:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007532:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <MX_USART3_UART_Init+0x58>)
 8007534:	2200      	movs	r2, #0
 8007536:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007538:	4b09      	ldr	r3, [pc, #36]	; (8007560 <MX_USART3_UART_Init+0x58>)
 800753a:	2200      	movs	r2, #0
 800753c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800753e:	4b08      	ldr	r3, [pc, #32]	; (8007560 <MX_USART3_UART_Init+0x58>)
 8007540:	2200      	movs	r2, #0
 8007542:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007544:	4b06      	ldr	r3, [pc, #24]	; (8007560 <MX_USART3_UART_Init+0x58>)
 8007546:	2200      	movs	r2, #0
 8007548:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800754a:	4805      	ldr	r0, [pc, #20]	; (8007560 <MX_USART3_UART_Init+0x58>)
 800754c:	f7fc fafc 	bl	8003b48 <HAL_UART_Init>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8007556:	f000 f8b7 	bl	80076c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800755a:	bf00      	nop
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	20000608 	.word	0x20000608
 8007564:	40004800 	.word	0x40004800

08007568 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800756c:	4b16      	ldr	r3, [pc, #88]	; (80075c8 <MX_RTC_Init+0x60>)
 800756e:	4a17      	ldr	r2, [pc, #92]	; (80075cc <MX_RTC_Init+0x64>)
 8007570:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007572:	4b15      	ldr	r3, [pc, #84]	; (80075c8 <MX_RTC_Init+0x60>)
 8007574:	2200      	movs	r2, #0
 8007576:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007578:	4b13      	ldr	r3, [pc, #76]	; (80075c8 <MX_RTC_Init+0x60>)
 800757a:	227f      	movs	r2, #127	; 0x7f
 800757c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800757e:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <MX_RTC_Init+0x60>)
 8007580:	22ff      	movs	r2, #255	; 0xff
 8007582:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007584:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <MX_RTC_Init+0x60>)
 8007586:	2200      	movs	r2, #0
 8007588:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800758a:	4b0f      	ldr	r3, [pc, #60]	; (80075c8 <MX_RTC_Init+0x60>)
 800758c:	2200      	movs	r2, #0
 800758e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007590:	4b0d      	ldr	r3, [pc, #52]	; (80075c8 <MX_RTC_Init+0x60>)
 8007592:	2200      	movs	r2, #0
 8007594:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007596:	4b0c      	ldr	r3, [pc, #48]	; (80075c8 <MX_RTC_Init+0x60>)
 8007598:	2200      	movs	r2, #0
 800759a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800759c:	480a      	ldr	r0, [pc, #40]	; (80075c8 <MX_RTC_Init+0x60>)
 800759e:	f7fc f903 	bl	80037a8 <HAL_RTC_Init>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80075a8:	f000 f88e 	bl	80076c8 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 300, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80075ac:	2204      	movs	r2, #4
 80075ae:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80075b2:	4805      	ldr	r0, [pc, #20]	; (80075c8 <MX_RTC_Init+0x60>)
 80075b4:	f7fc fa0e 	bl	80039d4 <HAL_RTCEx_SetWakeUpTimer_IT>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80075be:	f000 f883 	bl	80076c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80075c2:	bf00      	nop
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	200006ec 	.word	0x200006ec
 80075cc:	40002800 	.word	0x40002800

080075d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075d6:	f107 030c 	add.w	r3, r7, #12
 80075da:	2200      	movs	r2, #0
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	605a      	str	r2, [r3, #4]
 80075e0:	609a      	str	r2, [r3, #8]
 80075e2:	60da      	str	r2, [r3, #12]
 80075e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80075e6:	4b29      	ldr	r3, [pc, #164]	; (800768c <MX_GPIO_Init+0xbc>)
 80075e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ea:	4a28      	ldr	r2, [pc, #160]	; (800768c <MX_GPIO_Init+0xbc>)
 80075ec:	f043 0304 	orr.w	r3, r3, #4
 80075f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075f2:	4b26      	ldr	r3, [pc, #152]	; (800768c <MX_GPIO_Init+0xbc>)
 80075f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075f6:	f003 0304 	and.w	r3, r3, #4
 80075fa:	60bb      	str	r3, [r7, #8]
 80075fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80075fe:	4b23      	ldr	r3, [pc, #140]	; (800768c <MX_GPIO_Init+0xbc>)
 8007600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007602:	4a22      	ldr	r2, [pc, #136]	; (800768c <MX_GPIO_Init+0xbc>)
 8007604:	f043 0301 	orr.w	r3, r3, #1
 8007608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800760a:	4b20      	ldr	r3, [pc, #128]	; (800768c <MX_GPIO_Init+0xbc>)
 800760c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	607b      	str	r3, [r7, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007616:	4b1d      	ldr	r3, [pc, #116]	; (800768c <MX_GPIO_Init+0xbc>)
 8007618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800761a:	4a1c      	ldr	r2, [pc, #112]	; (800768c <MX_GPIO_Init+0xbc>)
 800761c:	f043 0302 	orr.w	r3, r3, #2
 8007620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007622:	4b1a      	ldr	r3, [pc, #104]	; (800768c <MX_GPIO_Init+0xbc>)
 8007624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|Gpio2_Bus1_Wakeup_Pin|Gpio3_Bus1_Rst_Pin, GPIO_PIN_RESET);
 800762e:	2200      	movs	r2, #0
 8007630:	f44f 7111 	mov.w	r1, #580	; 0x244
 8007634:	4816      	ldr	r0, [pc, #88]	; (8007690 <MX_GPIO_Init+0xc0>)
 8007636:	f7fa fded 	bl	8002214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Gpio4_Bus1_Shutdown_Pin|GPIO_PIN_8|Sigfox_Rst_Pin|Sigfox_shutdown_Pin, GPIO_PIN_RESET);
 800763a:	2200      	movs	r2, #0
 800763c:	f44f 61e8 	mov.w	r1, #1856	; 0x740
 8007640:	4814      	ldr	r0, [pc, #80]	; (8007694 <MX_GPIO_Init+0xc4>)
 8007642:	f7fa fde7 	bl	8002214 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 Gpio2_Bus1_Wakeup_Pin Gpio3_Bus1_Rst_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|Gpio2_Bus1_Wakeup_Pin|Gpio3_Bus1_Rst_Pin;
 8007646:	f44f 7311 	mov.w	r3, #580	; 0x244
 800764a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800764c:	2301      	movs	r3, #1
 800764e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007650:	2300      	movs	r3, #0
 8007652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007654:	2300      	movs	r3, #0
 8007656:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007658:	f107 030c 	add.w	r3, r7, #12
 800765c:	4619      	mov	r1, r3
 800765e:	480c      	ldr	r0, [pc, #48]	; (8007690 <MX_GPIO_Init+0xc0>)
 8007660:	f7fa fc30 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Gpio4_Bus1_Shutdown_Pin PC8 Sigfox_Rst_Pin Sigfox_shutdown_Pin */
  GPIO_InitStruct.Pin = Gpio4_Bus1_Shutdown_Pin|GPIO_PIN_8|Sigfox_Rst_Pin|Sigfox_shutdown_Pin;
 8007664:	f44f 63e8 	mov.w	r3, #1856	; 0x740
 8007668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800766a:	2301      	movs	r3, #1
 800766c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007672:	2300      	movs	r3, #0
 8007674:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007676:	f107 030c 	add.w	r3, r7, #12
 800767a:	4619      	mov	r1, r3
 800767c:	4805      	ldr	r0, [pc, #20]	; (8007694 <MX_GPIO_Init+0xc4>)
 800767e:	f7fa fc21 	bl	8001ec4 <HAL_GPIO_Init>

}
 8007682:	bf00      	nop
 8007684:	3720      	adds	r7, #32
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	40021000 	.word	0x40021000
 8007690:	48000400 	.word	0x48000400
 8007694:	48000800 	.word	0x48000800

08007698 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
	PutStringWrapperUart_2(NULL,"=========================================\r\n");
 80076a0:	4907      	ldr	r1, [pc, #28]	; (80076c0 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 80076a2:	2000      	movs	r0, #0
 80076a4:	f7fd fa6c 	bl	8004b80 <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, "Wakeup Time\r\n");
 80076a8:	4906      	ldr	r1, [pc, #24]	; (80076c4 <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 80076aa:	2000      	movs	r0, #0
 80076ac:	f7fd fa68 	bl	8004b80 <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL,"=========================================\r\n");
 80076b0:	4903      	ldr	r1, [pc, #12]	; (80076c0 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 80076b2:	2000      	movs	r0, #0
 80076b4:	f7fd fa64 	bl	8004b80 <PutStringWrapperUart_2>
}
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	080088b4 	.word	0x080088b4
 80076c4:	080088e0 	.word	0x080088e0

080076c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076c8:	b480      	push	{r7}
 80076ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80076cc:	bf00      	nop
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
	...

080076d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076de:	4b0f      	ldr	r3, [pc, #60]	; (800771c <HAL_MspInit+0x44>)
 80076e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076e2:	4a0e      	ldr	r2, [pc, #56]	; (800771c <HAL_MspInit+0x44>)
 80076e4:	f043 0301 	orr.w	r3, r3, #1
 80076e8:	6613      	str	r3, [r2, #96]	; 0x60
 80076ea:	4b0c      	ldr	r3, [pc, #48]	; (800771c <HAL_MspInit+0x44>)
 80076ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	607b      	str	r3, [r7, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80076f6:	4b09      	ldr	r3, [pc, #36]	; (800771c <HAL_MspInit+0x44>)
 80076f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076fa:	4a08      	ldr	r2, [pc, #32]	; (800771c <HAL_MspInit+0x44>)
 80076fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007700:	6593      	str	r3, [r2, #88]	; 0x58
 8007702:	4b06      	ldr	r3, [pc, #24]	; (800771c <HAL_MspInit+0x44>)
 8007704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	40021000 	.word	0x40021000

08007720 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08a      	sub	sp, #40	; 0x28
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007728:	f107 0314 	add.w	r3, r7, #20
 800772c:	2200      	movs	r2, #0
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	605a      	str	r2, [r3, #4]
 8007732:	609a      	str	r2, [r3, #8]
 8007734:	60da      	str	r2, [r3, #12]
 8007736:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a15      	ldr	r2, [pc, #84]	; (8007794 <HAL_ADC_MspInit+0x74>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d123      	bne.n	800778a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8007742:	4b15      	ldr	r3, [pc, #84]	; (8007798 <HAL_ADC_MspInit+0x78>)
 8007744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007746:	4a14      	ldr	r2, [pc, #80]	; (8007798 <HAL_ADC_MspInit+0x78>)
 8007748:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800774c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800774e:	4b12      	ldr	r3, [pc, #72]	; (8007798 <HAL_ADC_MspInit+0x78>)
 8007750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007756:	613b      	str	r3, [r7, #16]
 8007758:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800775a:	4b0f      	ldr	r3, [pc, #60]	; (8007798 <HAL_ADC_MspInit+0x78>)
 800775c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800775e:	4a0e      	ldr	r2, [pc, #56]	; (8007798 <HAL_ADC_MspInit+0x78>)
 8007760:	f043 0304 	orr.w	r3, r3, #4
 8007764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007766:	4b0c      	ldr	r3, [pc, #48]	; (8007798 <HAL_ADC_MspInit+0x78>)
 8007768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800776a:	f003 0304 	and.w	r3, r3, #4
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007772:	2308      	movs	r3, #8
 8007774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8007776:	230b      	movs	r3, #11
 8007778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800777a:	2300      	movs	r3, #0
 800777c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800777e:	f107 0314 	add.w	r3, r7, #20
 8007782:	4619      	mov	r1, r3
 8007784:	4805      	ldr	r0, [pc, #20]	; (800779c <HAL_ADC_MspInit+0x7c>)
 8007786:	f7fa fb9d 	bl	8001ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800778a:	bf00      	nop
 800778c:	3728      	adds	r7, #40	; 0x28
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	50040000 	.word	0x50040000
 8007798:	40021000 	.word	0x40021000
 800779c:	48000800 	.word	0x48000800

080077a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08e      	sub	sp, #56	; 0x38
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ac:	2200      	movs	r2, #0
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	605a      	str	r2, [r3, #4]
 80077b2:	609a      	str	r2, [r3, #8]
 80077b4:	60da      	str	r2, [r3, #12]
 80077b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a60      	ldr	r2, [pc, #384]	; (8007940 <HAL_UART_MspInit+0x1a0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d14d      	bne.n	800785e <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80077c2:	4b60      	ldr	r3, [pc, #384]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 80077c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c6:	4a5f      	ldr	r2, [pc, #380]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 80077c8:	f043 0301 	orr.w	r3, r3, #1
 80077cc:	65d3      	str	r3, [r2, #92]	; 0x5c
 80077ce:	4b5d      	ldr	r3, [pc, #372]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 80077d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	623b      	str	r3, [r7, #32]
 80077d8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077da:	4b5a      	ldr	r3, [pc, #360]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 80077dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077de:	4a59      	ldr	r2, [pc, #356]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 80077e0:	f043 0304 	orr.w	r3, r3, #4
 80077e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077e6:	4b57      	ldr	r3, [pc, #348]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 80077e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ea:	f003 0304 	and.w	r3, r3, #4
 80077ee:	61fb      	str	r3, [r7, #28]
 80077f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077f2:	4b54      	ldr	r3, [pc, #336]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 80077f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f6:	4a53      	ldr	r2, [pc, #332]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 80077f8:	f043 0302 	orr.w	r3, r3, #2
 80077fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077fe:	4b51      	ldr	r3, [pc, #324]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 8007800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	61bb      	str	r3, [r7, #24]
 8007808:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration    
    PC1     ------> LPUART1_TX
    PB10     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800780a:	2302      	movs	r3, #2
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800780e:	2302      	movs	r3, #2
 8007810:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007812:	2300      	movs	r3, #0
 8007814:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007816:	2303      	movs	r3, #3
 8007818:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800781a:	2308      	movs	r3, #8
 800781c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800781e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007822:	4619      	mov	r1, r3
 8007824:	4848      	ldr	r0, [pc, #288]	; (8007948 <HAL_UART_MspInit+0x1a8>)
 8007826:	f7fa fb4d 	bl	8001ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800782a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800782e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007830:	2302      	movs	r3, #2
 8007832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007834:	2300      	movs	r3, #0
 8007836:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007838:	2303      	movs	r3, #3
 800783a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800783c:	2308      	movs	r3, #8
 800783e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007844:	4619      	mov	r1, r3
 8007846:	4841      	ldr	r0, [pc, #260]	; (800794c <HAL_UART_MspInit+0x1ac>)
 8007848:	f7fa fb3c 	bl	8001ec4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800784c:	2200      	movs	r2, #0
 800784e:	2100      	movs	r1, #0
 8007850:	2046      	movs	r0, #70	; 0x46
 8007852:	f7fa fac0 	bl	8001dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8007856:	2046      	movs	r0, #70	; 0x46
 8007858:	f7fa fad9 	bl	8001e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800785c:	e06b      	b.n	8007936 <HAL_UART_MspInit+0x196>
  else if(huart->Instance==USART2)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a3b      	ldr	r2, [pc, #236]	; (8007950 <HAL_UART_MspInit+0x1b0>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d131      	bne.n	80078cc <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007868:	4b36      	ldr	r3, [pc, #216]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 800786a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800786c:	4a35      	ldr	r2, [pc, #212]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 800786e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007872:	6593      	str	r3, [r2, #88]	; 0x58
 8007874:	4b33      	ldr	r3, [pc, #204]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 8007876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800787c:	617b      	str	r3, [r7, #20]
 800787e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007880:	4b30      	ldr	r3, [pc, #192]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 8007882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007884:	4a2f      	ldr	r2, [pc, #188]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 8007886:	f043 0301 	orr.w	r3, r3, #1
 800788a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800788c:	4b2d      	ldr	r3, [pc, #180]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 800788e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	613b      	str	r3, [r7, #16]
 8007896:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007898:	230c      	movs	r3, #12
 800789a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800789c:	2302      	movs	r3, #2
 800789e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a0:	2300      	movs	r3, #0
 80078a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078a4:	2303      	movs	r3, #3
 80078a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80078a8:	2307      	movs	r3, #7
 80078aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078b0:	4619      	mov	r1, r3
 80078b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80078b6:	f7fa fb05 	bl	8001ec4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80078ba:	2200      	movs	r2, #0
 80078bc:	2100      	movs	r1, #0
 80078be:	2026      	movs	r0, #38	; 0x26
 80078c0:	f7fa fa89 	bl	8001dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80078c4:	2026      	movs	r0, #38	; 0x26
 80078c6:	f7fa faa2 	bl	8001e0e <HAL_NVIC_EnableIRQ>
}
 80078ca:	e034      	b.n	8007936 <HAL_UART_MspInit+0x196>
  else if(huart->Instance==USART3)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a20      	ldr	r2, [pc, #128]	; (8007954 <HAL_UART_MspInit+0x1b4>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d12f      	bne.n	8007936 <HAL_UART_MspInit+0x196>
    __HAL_RCC_USART3_CLK_ENABLE();
 80078d6:	4b1b      	ldr	r3, [pc, #108]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 80078d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078da:	4a1a      	ldr	r2, [pc, #104]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 80078dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078e0:	6593      	str	r3, [r2, #88]	; 0x58
 80078e2:	4b18      	ldr	r3, [pc, #96]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 80078e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80078ee:	4b15      	ldr	r3, [pc, #84]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 80078f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078f2:	4a14      	ldr	r2, [pc, #80]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 80078f4:	f043 0304 	orr.w	r3, r3, #4
 80078f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078fa:	4b12      	ldr	r3, [pc, #72]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 80078fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	60bb      	str	r3, [r7, #8]
 8007904:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007906:	2330      	movs	r3, #48	; 0x30
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800790a:	2302      	movs	r3, #2
 800790c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800790e:	2300      	movs	r3, #0
 8007910:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007912:	2303      	movs	r3, #3
 8007914:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007916:	2307      	movs	r3, #7
 8007918:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800791a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800791e:	4619      	mov	r1, r3
 8007920:	4809      	ldr	r0, [pc, #36]	; (8007948 <HAL_UART_MspInit+0x1a8>)
 8007922:	f7fa facf 	bl	8001ec4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007926:	2200      	movs	r2, #0
 8007928:	2100      	movs	r1, #0
 800792a:	2027      	movs	r0, #39	; 0x27
 800792c:	f7fa fa53 	bl	8001dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007930:	2027      	movs	r0, #39	; 0x27
 8007932:	f7fa fa6c 	bl	8001e0e <HAL_NVIC_EnableIRQ>
}
 8007936:	bf00      	nop
 8007938:	3738      	adds	r7, #56	; 0x38
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	40008000 	.word	0x40008000
 8007944:	40021000 	.word	0x40021000
 8007948:	48000800 	.word	0x48000800
 800794c:	48000400 	.word	0x48000400
 8007950:	40004400 	.word	0x40004400
 8007954:	40004800 	.word	0x40004800

08007958 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a0b      	ldr	r2, [pc, #44]	; (8007994 <HAL_RTC_MspInit+0x3c>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d10f      	bne.n	800798a <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800796a:	4b0b      	ldr	r3, [pc, #44]	; (8007998 <HAL_RTC_MspInit+0x40>)
 800796c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007970:	4a09      	ldr	r2, [pc, #36]	; (8007998 <HAL_RTC_MspInit+0x40>)
 8007972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007976:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800797a:	2200      	movs	r2, #0
 800797c:	2100      	movs	r1, #0
 800797e:	2003      	movs	r0, #3
 8007980:	f7fa fa29 	bl	8001dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8007984:	2003      	movs	r0, #3
 8007986:	f7fa fa42 	bl	8001e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	40002800 	.word	0x40002800
 8007998:	40021000 	.word	0x40021000

0800799c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800799c:	b480      	push	{r7}
 800799e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80079a0:	bf00      	nop
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079aa:	b480      	push	{r7}
 80079ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80079ae:	e7fe      	b.n	80079ae <HardFault_Handler+0x4>

080079b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079b0:	b480      	push	{r7}
 80079b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80079b4:	e7fe      	b.n	80079b4 <MemManage_Handler+0x4>

080079b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079b6:	b480      	push	{r7}
 80079b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80079ba:	e7fe      	b.n	80079ba <BusFault_Handler+0x4>

080079bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079c0:	e7fe      	b.n	80079c0 <UsageFault_Handler+0x4>

080079c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80079c2:	b480      	push	{r7}
 80079c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80079c6:	bf00      	nop
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079d4:	bf00      	nop
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079de:	b480      	push	{r7}
 80079e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079e2:	bf00      	nop
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80079f0:	f7f8 fe18 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80079f4:	bf00      	nop
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80079fc:	4802      	ldr	r0, [pc, #8]	; (8007a08 <RTC_WKUP_IRQHandler+0x10>)
 80079fe:	f7fc f87d 	bl	8003afc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8007a02:	bf00      	nop
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	200006ec 	.word	0x200006ec

08007a0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007a10:	4802      	ldr	r0, [pc, #8]	; (8007a1c <USART2_IRQHandler+0x10>)
 8007a12:	f7fc f989 	bl	8003d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007a16:	bf00      	nop
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	200004a0 	.word	0x200004a0

08007a20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007a24:	4802      	ldr	r0, [pc, #8]	; (8007a30 <USART3_IRQHandler+0x10>)
 8007a26:	f7fc f97f 	bl	8003d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007a2a:	bf00      	nop
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20000608 	.word	0x20000608

08007a34 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8007a38:	4802      	ldr	r0, [pc, #8]	; (8007a44 <LPUART1_IRQHandler+0x10>)
 8007a3a:	f7fc f975 	bl	8003d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8007a3e:	bf00      	nop
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	20000358 	.word	0x20000358

08007a48 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007a50:	4b11      	ldr	r3, [pc, #68]	; (8007a98 <_sbrk+0x50>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d102      	bne.n	8007a5e <_sbrk+0x16>
		heap_end = &end;
 8007a58:	4b0f      	ldr	r3, [pc, #60]	; (8007a98 <_sbrk+0x50>)
 8007a5a:	4a10      	ldr	r2, [pc, #64]	; (8007a9c <_sbrk+0x54>)
 8007a5c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007a5e:	4b0e      	ldr	r3, [pc, #56]	; (8007a98 <_sbrk+0x50>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007a64:	4b0c      	ldr	r3, [pc, #48]	; (8007a98 <_sbrk+0x50>)
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	466a      	mov	r2, sp
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d907      	bls.n	8007a82 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007a72:	f000 f875 	bl	8007b60 <__errno>
 8007a76:	4602      	mov	r2, r0
 8007a78:	230c      	movs	r3, #12
 8007a7a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a80:	e006      	b.n	8007a90 <_sbrk+0x48>
	}

	heap_end += incr;
 8007a82:	4b05      	ldr	r3, [pc, #20]	; (8007a98 <_sbrk+0x50>)
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4413      	add	r3, r2
 8007a8a:	4a03      	ldr	r2, [pc, #12]	; (8007a98 <_sbrk+0x50>)
 8007a8c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	200002d0 	.word	0x200002d0
 8007a9c:	20000718 	.word	0x20000718

08007aa0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007aa4:	4b17      	ldr	r3, [pc, #92]	; (8007b04 <SystemInit+0x64>)
 8007aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aaa:	4a16      	ldr	r2, [pc, #88]	; (8007b04 <SystemInit+0x64>)
 8007aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007ab4:	4b14      	ldr	r3, [pc, #80]	; (8007b08 <SystemInit+0x68>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a13      	ldr	r2, [pc, #76]	; (8007b08 <SystemInit+0x68>)
 8007aba:	f043 0301 	orr.w	r3, r3, #1
 8007abe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007ac0:	4b11      	ldr	r3, [pc, #68]	; (8007b08 <SystemInit+0x68>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8007ac6:	4b10      	ldr	r3, [pc, #64]	; (8007b08 <SystemInit+0x68>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a0f      	ldr	r2, [pc, #60]	; (8007b08 <SystemInit+0x68>)
 8007acc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007ad0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007ad4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8007ad6:	4b0c      	ldr	r3, [pc, #48]	; (8007b08 <SystemInit+0x68>)
 8007ad8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007adc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007ade:	4b0a      	ldr	r3, [pc, #40]	; (8007b08 <SystemInit+0x68>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a09      	ldr	r2, [pc, #36]	; (8007b08 <SystemInit+0x68>)
 8007ae4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ae8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007aea:	4b07      	ldr	r3, [pc, #28]	; (8007b08 <SystemInit+0x68>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007af0:	4b04      	ldr	r3, [pc, #16]	; (8007b04 <SystemInit+0x64>)
 8007af2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007af6:	609a      	str	r2, [r3, #8]
#endif
}
 8007af8:	bf00      	nop
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	e000ed00 	.word	0xe000ed00
 8007b08:	40021000 	.word	0x40021000

08007b0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007b10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007b12:	e003      	b.n	8007b1c <LoopCopyDataInit>

08007b14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007b14:	4b0c      	ldr	r3, [pc, #48]	; (8007b48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007b16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007b18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007b1a:	3104      	adds	r1, #4

08007b1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007b1c:	480b      	ldr	r0, [pc, #44]	; (8007b4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8007b1e:	4b0c      	ldr	r3, [pc, #48]	; (8007b50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007b20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007b22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007b24:	d3f6      	bcc.n	8007b14 <CopyDataInit>
	ldr	r2, =_sbss
 8007b26:	4a0b      	ldr	r2, [pc, #44]	; (8007b54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007b28:	e002      	b.n	8007b30 <LoopFillZerobss>

08007b2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007b2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007b2c:	f842 3b04 	str.w	r3, [r2], #4

08007b30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007b30:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <LoopForever+0x16>)
	cmp	r2, r3
 8007b32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007b34:	d3f9      	bcc.n	8007b2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007b36:	f7ff ffb3 	bl	8007aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b3a:	f000 f817 	bl	8007b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007b3e:	f7ff fabb 	bl	80070b8 <main>

08007b42 <LoopForever>:

LoopForever:
    b LoopForever
 8007b42:	e7fe      	b.n	8007b42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007b44:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8007b48:	08008aa0 	.word	0x08008aa0
	ldr	r0, =_sdata
 8007b4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007b50:	2000020c 	.word	0x2000020c
	ldr	r2, =_sbss
 8007b54:	2000020c 	.word	0x2000020c
	ldr	r3, = _ebss
 8007b58:	20000714 	.word	0x20000714

08007b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007b5c:	e7fe      	b.n	8007b5c <ADC1_2_IRQHandler>
	...

08007b60 <__errno>:
 8007b60:	4b01      	ldr	r3, [pc, #4]	; (8007b68 <__errno+0x8>)
 8007b62:	6818      	ldr	r0, [r3, #0]
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	2000003c 	.word	0x2000003c

08007b6c <__libc_init_array>:
 8007b6c:	b570      	push	{r4, r5, r6, lr}
 8007b6e:	4e0d      	ldr	r6, [pc, #52]	; (8007ba4 <__libc_init_array+0x38>)
 8007b70:	4c0d      	ldr	r4, [pc, #52]	; (8007ba8 <__libc_init_array+0x3c>)
 8007b72:	1ba4      	subs	r4, r4, r6
 8007b74:	10a4      	asrs	r4, r4, #2
 8007b76:	2500      	movs	r5, #0
 8007b78:	42a5      	cmp	r5, r4
 8007b7a:	d109      	bne.n	8007b90 <__libc_init_array+0x24>
 8007b7c:	4e0b      	ldr	r6, [pc, #44]	; (8007bac <__libc_init_array+0x40>)
 8007b7e:	4c0c      	ldr	r4, [pc, #48]	; (8007bb0 <__libc_init_array+0x44>)
 8007b80:	f000 fd0a 	bl	8008598 <_init>
 8007b84:	1ba4      	subs	r4, r4, r6
 8007b86:	10a4      	asrs	r4, r4, #2
 8007b88:	2500      	movs	r5, #0
 8007b8a:	42a5      	cmp	r5, r4
 8007b8c:	d105      	bne.n	8007b9a <__libc_init_array+0x2e>
 8007b8e:	bd70      	pop	{r4, r5, r6, pc}
 8007b90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b94:	4798      	blx	r3
 8007b96:	3501      	adds	r5, #1
 8007b98:	e7ee      	b.n	8007b78 <__libc_init_array+0xc>
 8007b9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b9e:	4798      	blx	r3
 8007ba0:	3501      	adds	r5, #1
 8007ba2:	e7f2      	b.n	8007b8a <__libc_init_array+0x1e>
 8007ba4:	08008a98 	.word	0x08008a98
 8007ba8:	08008a98 	.word	0x08008a98
 8007bac:	08008a98 	.word	0x08008a98
 8007bb0:	08008a9c 	.word	0x08008a9c

08007bb4 <__locale_ctype_ptr_l>:
 8007bb4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007bb8:	4770      	bx	lr

08007bba <__ascii_mbtowc>:
 8007bba:	b082      	sub	sp, #8
 8007bbc:	b901      	cbnz	r1, 8007bc0 <__ascii_mbtowc+0x6>
 8007bbe:	a901      	add	r1, sp, #4
 8007bc0:	b142      	cbz	r2, 8007bd4 <__ascii_mbtowc+0x1a>
 8007bc2:	b14b      	cbz	r3, 8007bd8 <__ascii_mbtowc+0x1e>
 8007bc4:	7813      	ldrb	r3, [r2, #0]
 8007bc6:	600b      	str	r3, [r1, #0]
 8007bc8:	7812      	ldrb	r2, [r2, #0]
 8007bca:	1c10      	adds	r0, r2, #0
 8007bcc:	bf18      	it	ne
 8007bce:	2001      	movne	r0, #1
 8007bd0:	b002      	add	sp, #8
 8007bd2:	4770      	bx	lr
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	e7fb      	b.n	8007bd0 <__ascii_mbtowc+0x16>
 8007bd8:	f06f 0001 	mvn.w	r0, #1
 8007bdc:	e7f8      	b.n	8007bd0 <__ascii_mbtowc+0x16>

08007bde <memcpy>:
 8007bde:	b510      	push	{r4, lr}
 8007be0:	1e43      	subs	r3, r0, #1
 8007be2:	440a      	add	r2, r1
 8007be4:	4291      	cmp	r1, r2
 8007be6:	d100      	bne.n	8007bea <memcpy+0xc>
 8007be8:	bd10      	pop	{r4, pc}
 8007bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bf2:	e7f7      	b.n	8007be4 <memcpy+0x6>

08007bf4 <memset>:
 8007bf4:	4402      	add	r2, r0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d100      	bne.n	8007bfe <memset+0xa>
 8007bfc:	4770      	bx	lr
 8007bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8007c02:	e7f9      	b.n	8007bf8 <memset+0x4>

08007c04 <siprintf>:
 8007c04:	b40e      	push	{r1, r2, r3}
 8007c06:	b500      	push	{lr}
 8007c08:	b09c      	sub	sp, #112	; 0x70
 8007c0a:	ab1d      	add	r3, sp, #116	; 0x74
 8007c0c:	9002      	str	r0, [sp, #8]
 8007c0e:	9006      	str	r0, [sp, #24]
 8007c10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c14:	4809      	ldr	r0, [pc, #36]	; (8007c3c <siprintf+0x38>)
 8007c16:	9107      	str	r1, [sp, #28]
 8007c18:	9104      	str	r1, [sp, #16]
 8007c1a:	4909      	ldr	r1, [pc, #36]	; (8007c40 <siprintf+0x3c>)
 8007c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c20:	9105      	str	r1, [sp, #20]
 8007c22:	6800      	ldr	r0, [r0, #0]
 8007c24:	9301      	str	r3, [sp, #4]
 8007c26:	a902      	add	r1, sp, #8
 8007c28:	f000 f934 	bl	8007e94 <_svfiprintf_r>
 8007c2c:	9b02      	ldr	r3, [sp, #8]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	701a      	strb	r2, [r3, #0]
 8007c32:	b01c      	add	sp, #112	; 0x70
 8007c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c38:	b003      	add	sp, #12
 8007c3a:	4770      	bx	lr
 8007c3c:	2000003c 	.word	0x2000003c
 8007c40:	ffff0208 	.word	0xffff0208

08007c44 <strchr>:
 8007c44:	b2c9      	uxtb	r1, r1
 8007c46:	4603      	mov	r3, r0
 8007c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c4c:	b11a      	cbz	r2, 8007c56 <strchr+0x12>
 8007c4e:	428a      	cmp	r2, r1
 8007c50:	d1f9      	bne.n	8007c46 <strchr+0x2>
 8007c52:	4618      	mov	r0, r3
 8007c54:	4770      	bx	lr
 8007c56:	2900      	cmp	r1, #0
 8007c58:	bf18      	it	ne
 8007c5a:	2300      	movne	r3, #0
 8007c5c:	e7f9      	b.n	8007c52 <strchr+0xe>

08007c5e <strcpy>:
 8007c5e:	4603      	mov	r3, r0
 8007c60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c64:	f803 2b01 	strb.w	r2, [r3], #1
 8007c68:	2a00      	cmp	r2, #0
 8007c6a:	d1f9      	bne.n	8007c60 <strcpy+0x2>
 8007c6c:	4770      	bx	lr

08007c6e <strstr>:
 8007c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c70:	7803      	ldrb	r3, [r0, #0]
 8007c72:	b17b      	cbz	r3, 8007c94 <strstr+0x26>
 8007c74:	4604      	mov	r4, r0
 8007c76:	7823      	ldrb	r3, [r4, #0]
 8007c78:	4620      	mov	r0, r4
 8007c7a:	1c66      	adds	r6, r4, #1
 8007c7c:	b17b      	cbz	r3, 8007c9e <strstr+0x30>
 8007c7e:	1e4a      	subs	r2, r1, #1
 8007c80:	1e63      	subs	r3, r4, #1
 8007c82:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8007c86:	b14d      	cbz	r5, 8007c9c <strstr+0x2e>
 8007c88:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8007c8c:	42af      	cmp	r7, r5
 8007c8e:	4634      	mov	r4, r6
 8007c90:	d0f7      	beq.n	8007c82 <strstr+0x14>
 8007c92:	e7f0      	b.n	8007c76 <strstr+0x8>
 8007c94:	780b      	ldrb	r3, [r1, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	bf18      	it	ne
 8007c9a:	2000      	movne	r0, #0
 8007c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	e7fc      	b.n	8007c9c <strstr+0x2e>

08007ca2 <_strtol_l.isra.0>:
 8007ca2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca6:	4680      	mov	r8, r0
 8007ca8:	4689      	mov	r9, r1
 8007caa:	4692      	mov	sl, r2
 8007cac:	461e      	mov	r6, r3
 8007cae:	460f      	mov	r7, r1
 8007cb0:	463d      	mov	r5, r7
 8007cb2:	9808      	ldr	r0, [sp, #32]
 8007cb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cb8:	f7ff ff7c 	bl	8007bb4 <__locale_ctype_ptr_l>
 8007cbc:	4420      	add	r0, r4
 8007cbe:	7843      	ldrb	r3, [r0, #1]
 8007cc0:	f013 0308 	ands.w	r3, r3, #8
 8007cc4:	d132      	bne.n	8007d2c <_strtol_l.isra.0+0x8a>
 8007cc6:	2c2d      	cmp	r4, #45	; 0x2d
 8007cc8:	d132      	bne.n	8007d30 <_strtol_l.isra.0+0x8e>
 8007cca:	787c      	ldrb	r4, [r7, #1]
 8007ccc:	1cbd      	adds	r5, r7, #2
 8007cce:	2201      	movs	r2, #1
 8007cd0:	2e00      	cmp	r6, #0
 8007cd2:	d05d      	beq.n	8007d90 <_strtol_l.isra.0+0xee>
 8007cd4:	2e10      	cmp	r6, #16
 8007cd6:	d109      	bne.n	8007cec <_strtol_l.isra.0+0x4a>
 8007cd8:	2c30      	cmp	r4, #48	; 0x30
 8007cda:	d107      	bne.n	8007cec <_strtol_l.isra.0+0x4a>
 8007cdc:	782b      	ldrb	r3, [r5, #0]
 8007cde:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ce2:	2b58      	cmp	r3, #88	; 0x58
 8007ce4:	d14f      	bne.n	8007d86 <_strtol_l.isra.0+0xe4>
 8007ce6:	786c      	ldrb	r4, [r5, #1]
 8007ce8:	2610      	movs	r6, #16
 8007cea:	3502      	adds	r5, #2
 8007cec:	2a00      	cmp	r2, #0
 8007cee:	bf14      	ite	ne
 8007cf0:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007cf4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007cf8:	2700      	movs	r7, #0
 8007cfa:	fbb1 fcf6 	udiv	ip, r1, r6
 8007cfe:	4638      	mov	r0, r7
 8007d00:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007d04:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007d08:	2b09      	cmp	r3, #9
 8007d0a:	d817      	bhi.n	8007d3c <_strtol_l.isra.0+0x9a>
 8007d0c:	461c      	mov	r4, r3
 8007d0e:	42a6      	cmp	r6, r4
 8007d10:	dd23      	ble.n	8007d5a <_strtol_l.isra.0+0xb8>
 8007d12:	1c7b      	adds	r3, r7, #1
 8007d14:	d007      	beq.n	8007d26 <_strtol_l.isra.0+0x84>
 8007d16:	4584      	cmp	ip, r0
 8007d18:	d31c      	bcc.n	8007d54 <_strtol_l.isra.0+0xb2>
 8007d1a:	d101      	bne.n	8007d20 <_strtol_l.isra.0+0x7e>
 8007d1c:	45a6      	cmp	lr, r4
 8007d1e:	db19      	blt.n	8007d54 <_strtol_l.isra.0+0xb2>
 8007d20:	fb00 4006 	mla	r0, r0, r6, r4
 8007d24:	2701      	movs	r7, #1
 8007d26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d2a:	e7eb      	b.n	8007d04 <_strtol_l.isra.0+0x62>
 8007d2c:	462f      	mov	r7, r5
 8007d2e:	e7bf      	b.n	8007cb0 <_strtol_l.isra.0+0xe>
 8007d30:	2c2b      	cmp	r4, #43	; 0x2b
 8007d32:	bf04      	itt	eq
 8007d34:	1cbd      	addeq	r5, r7, #2
 8007d36:	787c      	ldrbeq	r4, [r7, #1]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	e7c9      	b.n	8007cd0 <_strtol_l.isra.0+0x2e>
 8007d3c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007d40:	2b19      	cmp	r3, #25
 8007d42:	d801      	bhi.n	8007d48 <_strtol_l.isra.0+0xa6>
 8007d44:	3c37      	subs	r4, #55	; 0x37
 8007d46:	e7e2      	b.n	8007d0e <_strtol_l.isra.0+0x6c>
 8007d48:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007d4c:	2b19      	cmp	r3, #25
 8007d4e:	d804      	bhi.n	8007d5a <_strtol_l.isra.0+0xb8>
 8007d50:	3c57      	subs	r4, #87	; 0x57
 8007d52:	e7dc      	b.n	8007d0e <_strtol_l.isra.0+0x6c>
 8007d54:	f04f 37ff 	mov.w	r7, #4294967295
 8007d58:	e7e5      	b.n	8007d26 <_strtol_l.isra.0+0x84>
 8007d5a:	1c7b      	adds	r3, r7, #1
 8007d5c:	d108      	bne.n	8007d70 <_strtol_l.isra.0+0xce>
 8007d5e:	2322      	movs	r3, #34	; 0x22
 8007d60:	f8c8 3000 	str.w	r3, [r8]
 8007d64:	4608      	mov	r0, r1
 8007d66:	f1ba 0f00 	cmp.w	sl, #0
 8007d6a:	d107      	bne.n	8007d7c <_strtol_l.isra.0+0xda>
 8007d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d70:	b102      	cbz	r2, 8007d74 <_strtol_l.isra.0+0xd2>
 8007d72:	4240      	negs	r0, r0
 8007d74:	f1ba 0f00 	cmp.w	sl, #0
 8007d78:	d0f8      	beq.n	8007d6c <_strtol_l.isra.0+0xca>
 8007d7a:	b10f      	cbz	r7, 8007d80 <_strtol_l.isra.0+0xde>
 8007d7c:	f105 39ff 	add.w	r9, r5, #4294967295
 8007d80:	f8ca 9000 	str.w	r9, [sl]
 8007d84:	e7f2      	b.n	8007d6c <_strtol_l.isra.0+0xca>
 8007d86:	2430      	movs	r4, #48	; 0x30
 8007d88:	2e00      	cmp	r6, #0
 8007d8a:	d1af      	bne.n	8007cec <_strtol_l.isra.0+0x4a>
 8007d8c:	2608      	movs	r6, #8
 8007d8e:	e7ad      	b.n	8007cec <_strtol_l.isra.0+0x4a>
 8007d90:	2c30      	cmp	r4, #48	; 0x30
 8007d92:	d0a3      	beq.n	8007cdc <_strtol_l.isra.0+0x3a>
 8007d94:	260a      	movs	r6, #10
 8007d96:	e7a9      	b.n	8007cec <_strtol_l.isra.0+0x4a>

08007d98 <strtol>:
 8007d98:	4b08      	ldr	r3, [pc, #32]	; (8007dbc <strtol+0x24>)
 8007d9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d9c:	681c      	ldr	r4, [r3, #0]
 8007d9e:	4d08      	ldr	r5, [pc, #32]	; (8007dc0 <strtol+0x28>)
 8007da0:	6a23      	ldr	r3, [r4, #32]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	bf08      	it	eq
 8007da6:	462b      	moveq	r3, r5
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	4613      	mov	r3, r2
 8007dac:	460a      	mov	r2, r1
 8007dae:	4601      	mov	r1, r0
 8007db0:	4620      	mov	r0, r4
 8007db2:	f7ff ff76 	bl	8007ca2 <_strtol_l.isra.0>
 8007db6:	b003      	add	sp, #12
 8007db8:	bd30      	pop	{r4, r5, pc}
 8007dba:	bf00      	nop
 8007dbc:	2000003c 	.word	0x2000003c
 8007dc0:	200000a0 	.word	0x200000a0

08007dc4 <__ascii_wctomb>:
 8007dc4:	b149      	cbz	r1, 8007dda <__ascii_wctomb+0x16>
 8007dc6:	2aff      	cmp	r2, #255	; 0xff
 8007dc8:	bf85      	ittet	hi
 8007dca:	238a      	movhi	r3, #138	; 0x8a
 8007dcc:	6003      	strhi	r3, [r0, #0]
 8007dce:	700a      	strbls	r2, [r1, #0]
 8007dd0:	f04f 30ff 	movhi.w	r0, #4294967295
 8007dd4:	bf98      	it	ls
 8007dd6:	2001      	movls	r0, #1
 8007dd8:	4770      	bx	lr
 8007dda:	4608      	mov	r0, r1
 8007ddc:	4770      	bx	lr

08007dde <__ssputs_r>:
 8007dde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de2:	688e      	ldr	r6, [r1, #8]
 8007de4:	429e      	cmp	r6, r3
 8007de6:	4682      	mov	sl, r0
 8007de8:	460c      	mov	r4, r1
 8007dea:	4690      	mov	r8, r2
 8007dec:	4699      	mov	r9, r3
 8007dee:	d837      	bhi.n	8007e60 <__ssputs_r+0x82>
 8007df0:	898a      	ldrh	r2, [r1, #12]
 8007df2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007df6:	d031      	beq.n	8007e5c <__ssputs_r+0x7e>
 8007df8:	6825      	ldr	r5, [r4, #0]
 8007dfa:	6909      	ldr	r1, [r1, #16]
 8007dfc:	1a6f      	subs	r7, r5, r1
 8007dfe:	6965      	ldr	r5, [r4, #20]
 8007e00:	2302      	movs	r3, #2
 8007e02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e06:	fb95 f5f3 	sdiv	r5, r5, r3
 8007e0a:	f109 0301 	add.w	r3, r9, #1
 8007e0e:	443b      	add	r3, r7
 8007e10:	429d      	cmp	r5, r3
 8007e12:	bf38      	it	cc
 8007e14:	461d      	movcc	r5, r3
 8007e16:	0553      	lsls	r3, r2, #21
 8007e18:	d530      	bpl.n	8007e7c <__ssputs_r+0x9e>
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	f000 fb22 	bl	8008464 <_malloc_r>
 8007e20:	4606      	mov	r6, r0
 8007e22:	b950      	cbnz	r0, 8007e3a <__ssputs_r+0x5c>
 8007e24:	230c      	movs	r3, #12
 8007e26:	f8ca 3000 	str.w	r3, [sl]
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e30:	81a3      	strh	r3, [r4, #12]
 8007e32:	f04f 30ff 	mov.w	r0, #4294967295
 8007e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3a:	463a      	mov	r2, r7
 8007e3c:	6921      	ldr	r1, [r4, #16]
 8007e3e:	f7ff fece 	bl	8007bde <memcpy>
 8007e42:	89a3      	ldrh	r3, [r4, #12]
 8007e44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e4c:	81a3      	strh	r3, [r4, #12]
 8007e4e:	6126      	str	r6, [r4, #16]
 8007e50:	6165      	str	r5, [r4, #20]
 8007e52:	443e      	add	r6, r7
 8007e54:	1bed      	subs	r5, r5, r7
 8007e56:	6026      	str	r6, [r4, #0]
 8007e58:	60a5      	str	r5, [r4, #8]
 8007e5a:	464e      	mov	r6, r9
 8007e5c:	454e      	cmp	r6, r9
 8007e5e:	d900      	bls.n	8007e62 <__ssputs_r+0x84>
 8007e60:	464e      	mov	r6, r9
 8007e62:	4632      	mov	r2, r6
 8007e64:	4641      	mov	r1, r8
 8007e66:	6820      	ldr	r0, [r4, #0]
 8007e68:	f000 fa94 	bl	8008394 <memmove>
 8007e6c:	68a3      	ldr	r3, [r4, #8]
 8007e6e:	1b9b      	subs	r3, r3, r6
 8007e70:	60a3      	str	r3, [r4, #8]
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	441e      	add	r6, r3
 8007e76:	6026      	str	r6, [r4, #0]
 8007e78:	2000      	movs	r0, #0
 8007e7a:	e7dc      	b.n	8007e36 <__ssputs_r+0x58>
 8007e7c:	462a      	mov	r2, r5
 8007e7e:	f000 fb4b 	bl	8008518 <_realloc_r>
 8007e82:	4606      	mov	r6, r0
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d1e2      	bne.n	8007e4e <__ssputs_r+0x70>
 8007e88:	6921      	ldr	r1, [r4, #16]
 8007e8a:	4650      	mov	r0, sl
 8007e8c:	f000 fa9c 	bl	80083c8 <_free_r>
 8007e90:	e7c8      	b.n	8007e24 <__ssputs_r+0x46>
	...

08007e94 <_svfiprintf_r>:
 8007e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e98:	461d      	mov	r5, r3
 8007e9a:	898b      	ldrh	r3, [r1, #12]
 8007e9c:	061f      	lsls	r7, r3, #24
 8007e9e:	b09d      	sub	sp, #116	; 0x74
 8007ea0:	4680      	mov	r8, r0
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	4616      	mov	r6, r2
 8007ea6:	d50f      	bpl.n	8007ec8 <_svfiprintf_r+0x34>
 8007ea8:	690b      	ldr	r3, [r1, #16]
 8007eaa:	b96b      	cbnz	r3, 8007ec8 <_svfiprintf_r+0x34>
 8007eac:	2140      	movs	r1, #64	; 0x40
 8007eae:	f000 fad9 	bl	8008464 <_malloc_r>
 8007eb2:	6020      	str	r0, [r4, #0]
 8007eb4:	6120      	str	r0, [r4, #16]
 8007eb6:	b928      	cbnz	r0, 8007ec4 <_svfiprintf_r+0x30>
 8007eb8:	230c      	movs	r3, #12
 8007eba:	f8c8 3000 	str.w	r3, [r8]
 8007ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec2:	e0c8      	b.n	8008056 <_svfiprintf_r+0x1c2>
 8007ec4:	2340      	movs	r3, #64	; 0x40
 8007ec6:	6163      	str	r3, [r4, #20]
 8007ec8:	2300      	movs	r3, #0
 8007eca:	9309      	str	r3, [sp, #36]	; 0x24
 8007ecc:	2320      	movs	r3, #32
 8007ece:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ed2:	2330      	movs	r3, #48	; 0x30
 8007ed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ed8:	9503      	str	r5, [sp, #12]
 8007eda:	f04f 0b01 	mov.w	fp, #1
 8007ede:	4637      	mov	r7, r6
 8007ee0:	463d      	mov	r5, r7
 8007ee2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ee6:	b10b      	cbz	r3, 8007eec <_svfiprintf_r+0x58>
 8007ee8:	2b25      	cmp	r3, #37	; 0x25
 8007eea:	d13e      	bne.n	8007f6a <_svfiprintf_r+0xd6>
 8007eec:	ebb7 0a06 	subs.w	sl, r7, r6
 8007ef0:	d00b      	beq.n	8007f0a <_svfiprintf_r+0x76>
 8007ef2:	4653      	mov	r3, sl
 8007ef4:	4632      	mov	r2, r6
 8007ef6:	4621      	mov	r1, r4
 8007ef8:	4640      	mov	r0, r8
 8007efa:	f7ff ff70 	bl	8007dde <__ssputs_r>
 8007efe:	3001      	adds	r0, #1
 8007f00:	f000 80a4 	beq.w	800804c <_svfiprintf_r+0x1b8>
 8007f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f06:	4453      	add	r3, sl
 8007f08:	9309      	str	r3, [sp, #36]	; 0x24
 8007f0a:	783b      	ldrb	r3, [r7, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 809d 	beq.w	800804c <_svfiprintf_r+0x1b8>
 8007f12:	2300      	movs	r3, #0
 8007f14:	f04f 32ff 	mov.w	r2, #4294967295
 8007f18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f1c:	9304      	str	r3, [sp, #16]
 8007f1e:	9307      	str	r3, [sp, #28]
 8007f20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f24:	931a      	str	r3, [sp, #104]	; 0x68
 8007f26:	462f      	mov	r7, r5
 8007f28:	2205      	movs	r2, #5
 8007f2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007f2e:	4850      	ldr	r0, [pc, #320]	; (8008070 <_svfiprintf_r+0x1dc>)
 8007f30:	f7f8 f956 	bl	80001e0 <memchr>
 8007f34:	9b04      	ldr	r3, [sp, #16]
 8007f36:	b9d0      	cbnz	r0, 8007f6e <_svfiprintf_r+0xda>
 8007f38:	06d9      	lsls	r1, r3, #27
 8007f3a:	bf44      	itt	mi
 8007f3c:	2220      	movmi	r2, #32
 8007f3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f42:	071a      	lsls	r2, r3, #28
 8007f44:	bf44      	itt	mi
 8007f46:	222b      	movmi	r2, #43	; 0x2b
 8007f48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f4c:	782a      	ldrb	r2, [r5, #0]
 8007f4e:	2a2a      	cmp	r2, #42	; 0x2a
 8007f50:	d015      	beq.n	8007f7e <_svfiprintf_r+0xea>
 8007f52:	9a07      	ldr	r2, [sp, #28]
 8007f54:	462f      	mov	r7, r5
 8007f56:	2000      	movs	r0, #0
 8007f58:	250a      	movs	r5, #10
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f60:	3b30      	subs	r3, #48	; 0x30
 8007f62:	2b09      	cmp	r3, #9
 8007f64:	d94d      	bls.n	8008002 <_svfiprintf_r+0x16e>
 8007f66:	b1b8      	cbz	r0, 8007f98 <_svfiprintf_r+0x104>
 8007f68:	e00f      	b.n	8007f8a <_svfiprintf_r+0xf6>
 8007f6a:	462f      	mov	r7, r5
 8007f6c:	e7b8      	b.n	8007ee0 <_svfiprintf_r+0x4c>
 8007f6e:	4a40      	ldr	r2, [pc, #256]	; (8008070 <_svfiprintf_r+0x1dc>)
 8007f70:	1a80      	subs	r0, r0, r2
 8007f72:	fa0b f000 	lsl.w	r0, fp, r0
 8007f76:	4318      	orrs	r0, r3
 8007f78:	9004      	str	r0, [sp, #16]
 8007f7a:	463d      	mov	r5, r7
 8007f7c:	e7d3      	b.n	8007f26 <_svfiprintf_r+0x92>
 8007f7e:	9a03      	ldr	r2, [sp, #12]
 8007f80:	1d11      	adds	r1, r2, #4
 8007f82:	6812      	ldr	r2, [r2, #0]
 8007f84:	9103      	str	r1, [sp, #12]
 8007f86:	2a00      	cmp	r2, #0
 8007f88:	db01      	blt.n	8007f8e <_svfiprintf_r+0xfa>
 8007f8a:	9207      	str	r2, [sp, #28]
 8007f8c:	e004      	b.n	8007f98 <_svfiprintf_r+0x104>
 8007f8e:	4252      	negs	r2, r2
 8007f90:	f043 0302 	orr.w	r3, r3, #2
 8007f94:	9207      	str	r2, [sp, #28]
 8007f96:	9304      	str	r3, [sp, #16]
 8007f98:	783b      	ldrb	r3, [r7, #0]
 8007f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8007f9c:	d10c      	bne.n	8007fb8 <_svfiprintf_r+0x124>
 8007f9e:	787b      	ldrb	r3, [r7, #1]
 8007fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8007fa2:	d133      	bne.n	800800c <_svfiprintf_r+0x178>
 8007fa4:	9b03      	ldr	r3, [sp, #12]
 8007fa6:	1d1a      	adds	r2, r3, #4
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	9203      	str	r2, [sp, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	bfb8      	it	lt
 8007fb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fb4:	3702      	adds	r7, #2
 8007fb6:	9305      	str	r3, [sp, #20]
 8007fb8:	4d2e      	ldr	r5, [pc, #184]	; (8008074 <_svfiprintf_r+0x1e0>)
 8007fba:	7839      	ldrb	r1, [r7, #0]
 8007fbc:	2203      	movs	r2, #3
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f7f8 f90e 	bl	80001e0 <memchr>
 8007fc4:	b138      	cbz	r0, 8007fd6 <_svfiprintf_r+0x142>
 8007fc6:	2340      	movs	r3, #64	; 0x40
 8007fc8:	1b40      	subs	r0, r0, r5
 8007fca:	fa03 f000 	lsl.w	r0, r3, r0
 8007fce:	9b04      	ldr	r3, [sp, #16]
 8007fd0:	4303      	orrs	r3, r0
 8007fd2:	3701      	adds	r7, #1
 8007fd4:	9304      	str	r3, [sp, #16]
 8007fd6:	7839      	ldrb	r1, [r7, #0]
 8007fd8:	4827      	ldr	r0, [pc, #156]	; (8008078 <_svfiprintf_r+0x1e4>)
 8007fda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fde:	2206      	movs	r2, #6
 8007fe0:	1c7e      	adds	r6, r7, #1
 8007fe2:	f7f8 f8fd 	bl	80001e0 <memchr>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	d038      	beq.n	800805c <_svfiprintf_r+0x1c8>
 8007fea:	4b24      	ldr	r3, [pc, #144]	; (800807c <_svfiprintf_r+0x1e8>)
 8007fec:	bb13      	cbnz	r3, 8008034 <_svfiprintf_r+0x1a0>
 8007fee:	9b03      	ldr	r3, [sp, #12]
 8007ff0:	3307      	adds	r3, #7
 8007ff2:	f023 0307 	bic.w	r3, r3, #7
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	9303      	str	r3, [sp, #12]
 8007ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffc:	444b      	add	r3, r9
 8007ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8008000:	e76d      	b.n	8007ede <_svfiprintf_r+0x4a>
 8008002:	fb05 3202 	mla	r2, r5, r2, r3
 8008006:	2001      	movs	r0, #1
 8008008:	460f      	mov	r7, r1
 800800a:	e7a6      	b.n	8007f5a <_svfiprintf_r+0xc6>
 800800c:	2300      	movs	r3, #0
 800800e:	3701      	adds	r7, #1
 8008010:	9305      	str	r3, [sp, #20]
 8008012:	4619      	mov	r1, r3
 8008014:	250a      	movs	r5, #10
 8008016:	4638      	mov	r0, r7
 8008018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800801c:	3a30      	subs	r2, #48	; 0x30
 800801e:	2a09      	cmp	r2, #9
 8008020:	d903      	bls.n	800802a <_svfiprintf_r+0x196>
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0c8      	beq.n	8007fb8 <_svfiprintf_r+0x124>
 8008026:	9105      	str	r1, [sp, #20]
 8008028:	e7c6      	b.n	8007fb8 <_svfiprintf_r+0x124>
 800802a:	fb05 2101 	mla	r1, r5, r1, r2
 800802e:	2301      	movs	r3, #1
 8008030:	4607      	mov	r7, r0
 8008032:	e7f0      	b.n	8008016 <_svfiprintf_r+0x182>
 8008034:	ab03      	add	r3, sp, #12
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	4622      	mov	r2, r4
 800803a:	4b11      	ldr	r3, [pc, #68]	; (8008080 <_svfiprintf_r+0x1ec>)
 800803c:	a904      	add	r1, sp, #16
 800803e:	4640      	mov	r0, r8
 8008040:	f3af 8000 	nop.w
 8008044:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008048:	4681      	mov	r9, r0
 800804a:	d1d6      	bne.n	8007ffa <_svfiprintf_r+0x166>
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	065b      	lsls	r3, r3, #25
 8008050:	f53f af35 	bmi.w	8007ebe <_svfiprintf_r+0x2a>
 8008054:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008056:	b01d      	add	sp, #116	; 0x74
 8008058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800805c:	ab03      	add	r3, sp, #12
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	4622      	mov	r2, r4
 8008062:	4b07      	ldr	r3, [pc, #28]	; (8008080 <_svfiprintf_r+0x1ec>)
 8008064:	a904      	add	r1, sp, #16
 8008066:	4640      	mov	r0, r8
 8008068:	f000 f882 	bl	8008170 <_printf_i>
 800806c:	e7ea      	b.n	8008044 <_svfiprintf_r+0x1b0>
 800806e:	bf00      	nop
 8008070:	08008a5b 	.word	0x08008a5b
 8008074:	08008a61 	.word	0x08008a61
 8008078:	08008a65 	.word	0x08008a65
 800807c:	00000000 	.word	0x00000000
 8008080:	08007ddf 	.word	0x08007ddf

08008084 <_printf_common>:
 8008084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008088:	4691      	mov	r9, r2
 800808a:	461f      	mov	r7, r3
 800808c:	688a      	ldr	r2, [r1, #8]
 800808e:	690b      	ldr	r3, [r1, #16]
 8008090:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008094:	4293      	cmp	r3, r2
 8008096:	bfb8      	it	lt
 8008098:	4613      	movlt	r3, r2
 800809a:	f8c9 3000 	str.w	r3, [r9]
 800809e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080a2:	4606      	mov	r6, r0
 80080a4:	460c      	mov	r4, r1
 80080a6:	b112      	cbz	r2, 80080ae <_printf_common+0x2a>
 80080a8:	3301      	adds	r3, #1
 80080aa:	f8c9 3000 	str.w	r3, [r9]
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	0699      	lsls	r1, r3, #26
 80080b2:	bf42      	ittt	mi
 80080b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80080b8:	3302      	addmi	r3, #2
 80080ba:	f8c9 3000 	strmi.w	r3, [r9]
 80080be:	6825      	ldr	r5, [r4, #0]
 80080c0:	f015 0506 	ands.w	r5, r5, #6
 80080c4:	d107      	bne.n	80080d6 <_printf_common+0x52>
 80080c6:	f104 0a19 	add.w	sl, r4, #25
 80080ca:	68e3      	ldr	r3, [r4, #12]
 80080cc:	f8d9 2000 	ldr.w	r2, [r9]
 80080d0:	1a9b      	subs	r3, r3, r2
 80080d2:	42ab      	cmp	r3, r5
 80080d4:	dc28      	bgt.n	8008128 <_printf_common+0xa4>
 80080d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80080da:	6822      	ldr	r2, [r4, #0]
 80080dc:	3300      	adds	r3, #0
 80080de:	bf18      	it	ne
 80080e0:	2301      	movne	r3, #1
 80080e2:	0692      	lsls	r2, r2, #26
 80080e4:	d42d      	bmi.n	8008142 <_printf_common+0xbe>
 80080e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080ea:	4639      	mov	r1, r7
 80080ec:	4630      	mov	r0, r6
 80080ee:	47c0      	blx	r8
 80080f0:	3001      	adds	r0, #1
 80080f2:	d020      	beq.n	8008136 <_printf_common+0xb2>
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	68e5      	ldr	r5, [r4, #12]
 80080f8:	f8d9 2000 	ldr.w	r2, [r9]
 80080fc:	f003 0306 	and.w	r3, r3, #6
 8008100:	2b04      	cmp	r3, #4
 8008102:	bf08      	it	eq
 8008104:	1aad      	subeq	r5, r5, r2
 8008106:	68a3      	ldr	r3, [r4, #8]
 8008108:	6922      	ldr	r2, [r4, #16]
 800810a:	bf0c      	ite	eq
 800810c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008110:	2500      	movne	r5, #0
 8008112:	4293      	cmp	r3, r2
 8008114:	bfc4      	itt	gt
 8008116:	1a9b      	subgt	r3, r3, r2
 8008118:	18ed      	addgt	r5, r5, r3
 800811a:	f04f 0900 	mov.w	r9, #0
 800811e:	341a      	adds	r4, #26
 8008120:	454d      	cmp	r5, r9
 8008122:	d11a      	bne.n	800815a <_printf_common+0xd6>
 8008124:	2000      	movs	r0, #0
 8008126:	e008      	b.n	800813a <_printf_common+0xb6>
 8008128:	2301      	movs	r3, #1
 800812a:	4652      	mov	r2, sl
 800812c:	4639      	mov	r1, r7
 800812e:	4630      	mov	r0, r6
 8008130:	47c0      	blx	r8
 8008132:	3001      	adds	r0, #1
 8008134:	d103      	bne.n	800813e <_printf_common+0xba>
 8008136:	f04f 30ff 	mov.w	r0, #4294967295
 800813a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800813e:	3501      	adds	r5, #1
 8008140:	e7c3      	b.n	80080ca <_printf_common+0x46>
 8008142:	18e1      	adds	r1, r4, r3
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	2030      	movs	r0, #48	; 0x30
 8008148:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800814c:	4422      	add	r2, r4
 800814e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008152:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008156:	3302      	adds	r3, #2
 8008158:	e7c5      	b.n	80080e6 <_printf_common+0x62>
 800815a:	2301      	movs	r3, #1
 800815c:	4622      	mov	r2, r4
 800815e:	4639      	mov	r1, r7
 8008160:	4630      	mov	r0, r6
 8008162:	47c0      	blx	r8
 8008164:	3001      	adds	r0, #1
 8008166:	d0e6      	beq.n	8008136 <_printf_common+0xb2>
 8008168:	f109 0901 	add.w	r9, r9, #1
 800816c:	e7d8      	b.n	8008120 <_printf_common+0x9c>
	...

08008170 <_printf_i>:
 8008170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008174:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008178:	460c      	mov	r4, r1
 800817a:	7e09      	ldrb	r1, [r1, #24]
 800817c:	b085      	sub	sp, #20
 800817e:	296e      	cmp	r1, #110	; 0x6e
 8008180:	4617      	mov	r7, r2
 8008182:	4606      	mov	r6, r0
 8008184:	4698      	mov	r8, r3
 8008186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008188:	f000 80b3 	beq.w	80082f2 <_printf_i+0x182>
 800818c:	d822      	bhi.n	80081d4 <_printf_i+0x64>
 800818e:	2963      	cmp	r1, #99	; 0x63
 8008190:	d036      	beq.n	8008200 <_printf_i+0x90>
 8008192:	d80a      	bhi.n	80081aa <_printf_i+0x3a>
 8008194:	2900      	cmp	r1, #0
 8008196:	f000 80b9 	beq.w	800830c <_printf_i+0x19c>
 800819a:	2958      	cmp	r1, #88	; 0x58
 800819c:	f000 8083 	beq.w	80082a6 <_printf_i+0x136>
 80081a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80081a8:	e032      	b.n	8008210 <_printf_i+0xa0>
 80081aa:	2964      	cmp	r1, #100	; 0x64
 80081ac:	d001      	beq.n	80081b2 <_printf_i+0x42>
 80081ae:	2969      	cmp	r1, #105	; 0x69
 80081b0:	d1f6      	bne.n	80081a0 <_printf_i+0x30>
 80081b2:	6820      	ldr	r0, [r4, #0]
 80081b4:	6813      	ldr	r3, [r2, #0]
 80081b6:	0605      	lsls	r5, r0, #24
 80081b8:	f103 0104 	add.w	r1, r3, #4
 80081bc:	d52a      	bpl.n	8008214 <_printf_i+0xa4>
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6011      	str	r1, [r2, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	da03      	bge.n	80081ce <_printf_i+0x5e>
 80081c6:	222d      	movs	r2, #45	; 0x2d
 80081c8:	425b      	negs	r3, r3
 80081ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80081ce:	486f      	ldr	r0, [pc, #444]	; (800838c <_printf_i+0x21c>)
 80081d0:	220a      	movs	r2, #10
 80081d2:	e039      	b.n	8008248 <_printf_i+0xd8>
 80081d4:	2973      	cmp	r1, #115	; 0x73
 80081d6:	f000 809d 	beq.w	8008314 <_printf_i+0x1a4>
 80081da:	d808      	bhi.n	80081ee <_printf_i+0x7e>
 80081dc:	296f      	cmp	r1, #111	; 0x6f
 80081de:	d020      	beq.n	8008222 <_printf_i+0xb2>
 80081e0:	2970      	cmp	r1, #112	; 0x70
 80081e2:	d1dd      	bne.n	80081a0 <_printf_i+0x30>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	f043 0320 	orr.w	r3, r3, #32
 80081ea:	6023      	str	r3, [r4, #0]
 80081ec:	e003      	b.n	80081f6 <_printf_i+0x86>
 80081ee:	2975      	cmp	r1, #117	; 0x75
 80081f0:	d017      	beq.n	8008222 <_printf_i+0xb2>
 80081f2:	2978      	cmp	r1, #120	; 0x78
 80081f4:	d1d4      	bne.n	80081a0 <_printf_i+0x30>
 80081f6:	2378      	movs	r3, #120	; 0x78
 80081f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081fc:	4864      	ldr	r0, [pc, #400]	; (8008390 <_printf_i+0x220>)
 80081fe:	e055      	b.n	80082ac <_printf_i+0x13c>
 8008200:	6813      	ldr	r3, [r2, #0]
 8008202:	1d19      	adds	r1, r3, #4
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6011      	str	r1, [r2, #0]
 8008208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800820c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008210:	2301      	movs	r3, #1
 8008212:	e08c      	b.n	800832e <_printf_i+0x1be>
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6011      	str	r1, [r2, #0]
 8008218:	f010 0f40 	tst.w	r0, #64	; 0x40
 800821c:	bf18      	it	ne
 800821e:	b21b      	sxthne	r3, r3
 8008220:	e7cf      	b.n	80081c2 <_printf_i+0x52>
 8008222:	6813      	ldr	r3, [r2, #0]
 8008224:	6825      	ldr	r5, [r4, #0]
 8008226:	1d18      	adds	r0, r3, #4
 8008228:	6010      	str	r0, [r2, #0]
 800822a:	0628      	lsls	r0, r5, #24
 800822c:	d501      	bpl.n	8008232 <_printf_i+0xc2>
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	e002      	b.n	8008238 <_printf_i+0xc8>
 8008232:	0668      	lsls	r0, r5, #25
 8008234:	d5fb      	bpl.n	800822e <_printf_i+0xbe>
 8008236:	881b      	ldrh	r3, [r3, #0]
 8008238:	4854      	ldr	r0, [pc, #336]	; (800838c <_printf_i+0x21c>)
 800823a:	296f      	cmp	r1, #111	; 0x6f
 800823c:	bf14      	ite	ne
 800823e:	220a      	movne	r2, #10
 8008240:	2208      	moveq	r2, #8
 8008242:	2100      	movs	r1, #0
 8008244:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008248:	6865      	ldr	r5, [r4, #4]
 800824a:	60a5      	str	r5, [r4, #8]
 800824c:	2d00      	cmp	r5, #0
 800824e:	f2c0 8095 	blt.w	800837c <_printf_i+0x20c>
 8008252:	6821      	ldr	r1, [r4, #0]
 8008254:	f021 0104 	bic.w	r1, r1, #4
 8008258:	6021      	str	r1, [r4, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d13d      	bne.n	80082da <_printf_i+0x16a>
 800825e:	2d00      	cmp	r5, #0
 8008260:	f040 808e 	bne.w	8008380 <_printf_i+0x210>
 8008264:	4665      	mov	r5, ip
 8008266:	2a08      	cmp	r2, #8
 8008268:	d10b      	bne.n	8008282 <_printf_i+0x112>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	07db      	lsls	r3, r3, #31
 800826e:	d508      	bpl.n	8008282 <_printf_i+0x112>
 8008270:	6923      	ldr	r3, [r4, #16]
 8008272:	6862      	ldr	r2, [r4, #4]
 8008274:	429a      	cmp	r2, r3
 8008276:	bfde      	ittt	le
 8008278:	2330      	movle	r3, #48	; 0x30
 800827a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800827e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008282:	ebac 0305 	sub.w	r3, ip, r5
 8008286:	6123      	str	r3, [r4, #16]
 8008288:	f8cd 8000 	str.w	r8, [sp]
 800828c:	463b      	mov	r3, r7
 800828e:	aa03      	add	r2, sp, #12
 8008290:	4621      	mov	r1, r4
 8008292:	4630      	mov	r0, r6
 8008294:	f7ff fef6 	bl	8008084 <_printf_common>
 8008298:	3001      	adds	r0, #1
 800829a:	d14d      	bne.n	8008338 <_printf_i+0x1c8>
 800829c:	f04f 30ff 	mov.w	r0, #4294967295
 80082a0:	b005      	add	sp, #20
 80082a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082a6:	4839      	ldr	r0, [pc, #228]	; (800838c <_printf_i+0x21c>)
 80082a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80082ac:	6813      	ldr	r3, [r2, #0]
 80082ae:	6821      	ldr	r1, [r4, #0]
 80082b0:	1d1d      	adds	r5, r3, #4
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6015      	str	r5, [r2, #0]
 80082b6:	060a      	lsls	r2, r1, #24
 80082b8:	d50b      	bpl.n	80082d2 <_printf_i+0x162>
 80082ba:	07ca      	lsls	r2, r1, #31
 80082bc:	bf44      	itt	mi
 80082be:	f041 0120 	orrmi.w	r1, r1, #32
 80082c2:	6021      	strmi	r1, [r4, #0]
 80082c4:	b91b      	cbnz	r3, 80082ce <_printf_i+0x15e>
 80082c6:	6822      	ldr	r2, [r4, #0]
 80082c8:	f022 0220 	bic.w	r2, r2, #32
 80082cc:	6022      	str	r2, [r4, #0]
 80082ce:	2210      	movs	r2, #16
 80082d0:	e7b7      	b.n	8008242 <_printf_i+0xd2>
 80082d2:	064d      	lsls	r5, r1, #25
 80082d4:	bf48      	it	mi
 80082d6:	b29b      	uxthmi	r3, r3
 80082d8:	e7ef      	b.n	80082ba <_printf_i+0x14a>
 80082da:	4665      	mov	r5, ip
 80082dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80082e0:	fb02 3311 	mls	r3, r2, r1, r3
 80082e4:	5cc3      	ldrb	r3, [r0, r3]
 80082e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80082ea:	460b      	mov	r3, r1
 80082ec:	2900      	cmp	r1, #0
 80082ee:	d1f5      	bne.n	80082dc <_printf_i+0x16c>
 80082f0:	e7b9      	b.n	8008266 <_printf_i+0xf6>
 80082f2:	6813      	ldr	r3, [r2, #0]
 80082f4:	6825      	ldr	r5, [r4, #0]
 80082f6:	6961      	ldr	r1, [r4, #20]
 80082f8:	1d18      	adds	r0, r3, #4
 80082fa:	6010      	str	r0, [r2, #0]
 80082fc:	0628      	lsls	r0, r5, #24
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	d501      	bpl.n	8008306 <_printf_i+0x196>
 8008302:	6019      	str	r1, [r3, #0]
 8008304:	e002      	b.n	800830c <_printf_i+0x19c>
 8008306:	066a      	lsls	r2, r5, #25
 8008308:	d5fb      	bpl.n	8008302 <_printf_i+0x192>
 800830a:	8019      	strh	r1, [r3, #0]
 800830c:	2300      	movs	r3, #0
 800830e:	6123      	str	r3, [r4, #16]
 8008310:	4665      	mov	r5, ip
 8008312:	e7b9      	b.n	8008288 <_printf_i+0x118>
 8008314:	6813      	ldr	r3, [r2, #0]
 8008316:	1d19      	adds	r1, r3, #4
 8008318:	6011      	str	r1, [r2, #0]
 800831a:	681d      	ldr	r5, [r3, #0]
 800831c:	6862      	ldr	r2, [r4, #4]
 800831e:	2100      	movs	r1, #0
 8008320:	4628      	mov	r0, r5
 8008322:	f7f7 ff5d 	bl	80001e0 <memchr>
 8008326:	b108      	cbz	r0, 800832c <_printf_i+0x1bc>
 8008328:	1b40      	subs	r0, r0, r5
 800832a:	6060      	str	r0, [r4, #4]
 800832c:	6863      	ldr	r3, [r4, #4]
 800832e:	6123      	str	r3, [r4, #16]
 8008330:	2300      	movs	r3, #0
 8008332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008336:	e7a7      	b.n	8008288 <_printf_i+0x118>
 8008338:	6923      	ldr	r3, [r4, #16]
 800833a:	462a      	mov	r2, r5
 800833c:	4639      	mov	r1, r7
 800833e:	4630      	mov	r0, r6
 8008340:	47c0      	blx	r8
 8008342:	3001      	adds	r0, #1
 8008344:	d0aa      	beq.n	800829c <_printf_i+0x12c>
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	079b      	lsls	r3, r3, #30
 800834a:	d413      	bmi.n	8008374 <_printf_i+0x204>
 800834c:	68e0      	ldr	r0, [r4, #12]
 800834e:	9b03      	ldr	r3, [sp, #12]
 8008350:	4298      	cmp	r0, r3
 8008352:	bfb8      	it	lt
 8008354:	4618      	movlt	r0, r3
 8008356:	e7a3      	b.n	80082a0 <_printf_i+0x130>
 8008358:	2301      	movs	r3, #1
 800835a:	464a      	mov	r2, r9
 800835c:	4639      	mov	r1, r7
 800835e:	4630      	mov	r0, r6
 8008360:	47c0      	blx	r8
 8008362:	3001      	adds	r0, #1
 8008364:	d09a      	beq.n	800829c <_printf_i+0x12c>
 8008366:	3501      	adds	r5, #1
 8008368:	68e3      	ldr	r3, [r4, #12]
 800836a:	9a03      	ldr	r2, [sp, #12]
 800836c:	1a9b      	subs	r3, r3, r2
 800836e:	42ab      	cmp	r3, r5
 8008370:	dcf2      	bgt.n	8008358 <_printf_i+0x1e8>
 8008372:	e7eb      	b.n	800834c <_printf_i+0x1dc>
 8008374:	2500      	movs	r5, #0
 8008376:	f104 0919 	add.w	r9, r4, #25
 800837a:	e7f5      	b.n	8008368 <_printf_i+0x1f8>
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1ac      	bne.n	80082da <_printf_i+0x16a>
 8008380:	7803      	ldrb	r3, [r0, #0]
 8008382:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008386:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800838a:	e76c      	b.n	8008266 <_printf_i+0xf6>
 800838c:	08008a6c 	.word	0x08008a6c
 8008390:	08008a7d 	.word	0x08008a7d

08008394 <memmove>:
 8008394:	4288      	cmp	r0, r1
 8008396:	b510      	push	{r4, lr}
 8008398:	eb01 0302 	add.w	r3, r1, r2
 800839c:	d807      	bhi.n	80083ae <memmove+0x1a>
 800839e:	1e42      	subs	r2, r0, #1
 80083a0:	4299      	cmp	r1, r3
 80083a2:	d00a      	beq.n	80083ba <memmove+0x26>
 80083a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80083ac:	e7f8      	b.n	80083a0 <memmove+0xc>
 80083ae:	4283      	cmp	r3, r0
 80083b0:	d9f5      	bls.n	800839e <memmove+0xa>
 80083b2:	1881      	adds	r1, r0, r2
 80083b4:	1ad2      	subs	r2, r2, r3
 80083b6:	42d3      	cmn	r3, r2
 80083b8:	d100      	bne.n	80083bc <memmove+0x28>
 80083ba:	bd10      	pop	{r4, pc}
 80083bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80083c4:	e7f7      	b.n	80083b6 <memmove+0x22>
	...

080083c8 <_free_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4605      	mov	r5, r0
 80083cc:	2900      	cmp	r1, #0
 80083ce:	d045      	beq.n	800845c <_free_r+0x94>
 80083d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083d4:	1f0c      	subs	r4, r1, #4
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	bfb8      	it	lt
 80083da:	18e4      	addlt	r4, r4, r3
 80083dc:	f000 f8d2 	bl	8008584 <__malloc_lock>
 80083e0:	4a1f      	ldr	r2, [pc, #124]	; (8008460 <_free_r+0x98>)
 80083e2:	6813      	ldr	r3, [r2, #0]
 80083e4:	4610      	mov	r0, r2
 80083e6:	b933      	cbnz	r3, 80083f6 <_free_r+0x2e>
 80083e8:	6063      	str	r3, [r4, #4]
 80083ea:	6014      	str	r4, [r2, #0]
 80083ec:	4628      	mov	r0, r5
 80083ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083f2:	f000 b8c8 	b.w	8008586 <__malloc_unlock>
 80083f6:	42a3      	cmp	r3, r4
 80083f8:	d90c      	bls.n	8008414 <_free_r+0x4c>
 80083fa:	6821      	ldr	r1, [r4, #0]
 80083fc:	1862      	adds	r2, r4, r1
 80083fe:	4293      	cmp	r3, r2
 8008400:	bf04      	itt	eq
 8008402:	681a      	ldreq	r2, [r3, #0]
 8008404:	685b      	ldreq	r3, [r3, #4]
 8008406:	6063      	str	r3, [r4, #4]
 8008408:	bf04      	itt	eq
 800840a:	1852      	addeq	r2, r2, r1
 800840c:	6022      	streq	r2, [r4, #0]
 800840e:	6004      	str	r4, [r0, #0]
 8008410:	e7ec      	b.n	80083ec <_free_r+0x24>
 8008412:	4613      	mov	r3, r2
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	b10a      	cbz	r2, 800841c <_free_r+0x54>
 8008418:	42a2      	cmp	r2, r4
 800841a:	d9fa      	bls.n	8008412 <_free_r+0x4a>
 800841c:	6819      	ldr	r1, [r3, #0]
 800841e:	1858      	adds	r0, r3, r1
 8008420:	42a0      	cmp	r0, r4
 8008422:	d10b      	bne.n	800843c <_free_r+0x74>
 8008424:	6820      	ldr	r0, [r4, #0]
 8008426:	4401      	add	r1, r0
 8008428:	1858      	adds	r0, r3, r1
 800842a:	4282      	cmp	r2, r0
 800842c:	6019      	str	r1, [r3, #0]
 800842e:	d1dd      	bne.n	80083ec <_free_r+0x24>
 8008430:	6810      	ldr	r0, [r2, #0]
 8008432:	6852      	ldr	r2, [r2, #4]
 8008434:	605a      	str	r2, [r3, #4]
 8008436:	4401      	add	r1, r0
 8008438:	6019      	str	r1, [r3, #0]
 800843a:	e7d7      	b.n	80083ec <_free_r+0x24>
 800843c:	d902      	bls.n	8008444 <_free_r+0x7c>
 800843e:	230c      	movs	r3, #12
 8008440:	602b      	str	r3, [r5, #0]
 8008442:	e7d3      	b.n	80083ec <_free_r+0x24>
 8008444:	6820      	ldr	r0, [r4, #0]
 8008446:	1821      	adds	r1, r4, r0
 8008448:	428a      	cmp	r2, r1
 800844a:	bf04      	itt	eq
 800844c:	6811      	ldreq	r1, [r2, #0]
 800844e:	6852      	ldreq	r2, [r2, #4]
 8008450:	6062      	str	r2, [r4, #4]
 8008452:	bf04      	itt	eq
 8008454:	1809      	addeq	r1, r1, r0
 8008456:	6021      	streq	r1, [r4, #0]
 8008458:	605c      	str	r4, [r3, #4]
 800845a:	e7c7      	b.n	80083ec <_free_r+0x24>
 800845c:	bd38      	pop	{r3, r4, r5, pc}
 800845e:	bf00      	nop
 8008460:	200002d4 	.word	0x200002d4

08008464 <_malloc_r>:
 8008464:	b570      	push	{r4, r5, r6, lr}
 8008466:	1ccd      	adds	r5, r1, #3
 8008468:	f025 0503 	bic.w	r5, r5, #3
 800846c:	3508      	adds	r5, #8
 800846e:	2d0c      	cmp	r5, #12
 8008470:	bf38      	it	cc
 8008472:	250c      	movcc	r5, #12
 8008474:	2d00      	cmp	r5, #0
 8008476:	4606      	mov	r6, r0
 8008478:	db01      	blt.n	800847e <_malloc_r+0x1a>
 800847a:	42a9      	cmp	r1, r5
 800847c:	d903      	bls.n	8008486 <_malloc_r+0x22>
 800847e:	230c      	movs	r3, #12
 8008480:	6033      	str	r3, [r6, #0]
 8008482:	2000      	movs	r0, #0
 8008484:	bd70      	pop	{r4, r5, r6, pc}
 8008486:	f000 f87d 	bl	8008584 <__malloc_lock>
 800848a:	4a21      	ldr	r2, [pc, #132]	; (8008510 <_malloc_r+0xac>)
 800848c:	6814      	ldr	r4, [r2, #0]
 800848e:	4621      	mov	r1, r4
 8008490:	b991      	cbnz	r1, 80084b8 <_malloc_r+0x54>
 8008492:	4c20      	ldr	r4, [pc, #128]	; (8008514 <_malloc_r+0xb0>)
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	b91b      	cbnz	r3, 80084a0 <_malloc_r+0x3c>
 8008498:	4630      	mov	r0, r6
 800849a:	f000 f863 	bl	8008564 <_sbrk_r>
 800849e:	6020      	str	r0, [r4, #0]
 80084a0:	4629      	mov	r1, r5
 80084a2:	4630      	mov	r0, r6
 80084a4:	f000 f85e 	bl	8008564 <_sbrk_r>
 80084a8:	1c43      	adds	r3, r0, #1
 80084aa:	d124      	bne.n	80084f6 <_malloc_r+0x92>
 80084ac:	230c      	movs	r3, #12
 80084ae:	6033      	str	r3, [r6, #0]
 80084b0:	4630      	mov	r0, r6
 80084b2:	f000 f868 	bl	8008586 <__malloc_unlock>
 80084b6:	e7e4      	b.n	8008482 <_malloc_r+0x1e>
 80084b8:	680b      	ldr	r3, [r1, #0]
 80084ba:	1b5b      	subs	r3, r3, r5
 80084bc:	d418      	bmi.n	80084f0 <_malloc_r+0x8c>
 80084be:	2b0b      	cmp	r3, #11
 80084c0:	d90f      	bls.n	80084e2 <_malloc_r+0x7e>
 80084c2:	600b      	str	r3, [r1, #0]
 80084c4:	50cd      	str	r5, [r1, r3]
 80084c6:	18cc      	adds	r4, r1, r3
 80084c8:	4630      	mov	r0, r6
 80084ca:	f000 f85c 	bl	8008586 <__malloc_unlock>
 80084ce:	f104 000b 	add.w	r0, r4, #11
 80084d2:	1d23      	adds	r3, r4, #4
 80084d4:	f020 0007 	bic.w	r0, r0, #7
 80084d8:	1ac3      	subs	r3, r0, r3
 80084da:	d0d3      	beq.n	8008484 <_malloc_r+0x20>
 80084dc:	425a      	negs	r2, r3
 80084de:	50e2      	str	r2, [r4, r3]
 80084e0:	e7d0      	b.n	8008484 <_malloc_r+0x20>
 80084e2:	428c      	cmp	r4, r1
 80084e4:	684b      	ldr	r3, [r1, #4]
 80084e6:	bf16      	itet	ne
 80084e8:	6063      	strne	r3, [r4, #4]
 80084ea:	6013      	streq	r3, [r2, #0]
 80084ec:	460c      	movne	r4, r1
 80084ee:	e7eb      	b.n	80084c8 <_malloc_r+0x64>
 80084f0:	460c      	mov	r4, r1
 80084f2:	6849      	ldr	r1, [r1, #4]
 80084f4:	e7cc      	b.n	8008490 <_malloc_r+0x2c>
 80084f6:	1cc4      	adds	r4, r0, #3
 80084f8:	f024 0403 	bic.w	r4, r4, #3
 80084fc:	42a0      	cmp	r0, r4
 80084fe:	d005      	beq.n	800850c <_malloc_r+0xa8>
 8008500:	1a21      	subs	r1, r4, r0
 8008502:	4630      	mov	r0, r6
 8008504:	f000 f82e 	bl	8008564 <_sbrk_r>
 8008508:	3001      	adds	r0, #1
 800850a:	d0cf      	beq.n	80084ac <_malloc_r+0x48>
 800850c:	6025      	str	r5, [r4, #0]
 800850e:	e7db      	b.n	80084c8 <_malloc_r+0x64>
 8008510:	200002d4 	.word	0x200002d4
 8008514:	200002d8 	.word	0x200002d8

08008518 <_realloc_r>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	4607      	mov	r7, r0
 800851c:	4614      	mov	r4, r2
 800851e:	460e      	mov	r6, r1
 8008520:	b921      	cbnz	r1, 800852c <_realloc_r+0x14>
 8008522:	4611      	mov	r1, r2
 8008524:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008528:	f7ff bf9c 	b.w	8008464 <_malloc_r>
 800852c:	b922      	cbnz	r2, 8008538 <_realloc_r+0x20>
 800852e:	f7ff ff4b 	bl	80083c8 <_free_r>
 8008532:	4625      	mov	r5, r4
 8008534:	4628      	mov	r0, r5
 8008536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008538:	f000 f826 	bl	8008588 <_malloc_usable_size_r>
 800853c:	42a0      	cmp	r0, r4
 800853e:	d20f      	bcs.n	8008560 <_realloc_r+0x48>
 8008540:	4621      	mov	r1, r4
 8008542:	4638      	mov	r0, r7
 8008544:	f7ff ff8e 	bl	8008464 <_malloc_r>
 8008548:	4605      	mov	r5, r0
 800854a:	2800      	cmp	r0, #0
 800854c:	d0f2      	beq.n	8008534 <_realloc_r+0x1c>
 800854e:	4631      	mov	r1, r6
 8008550:	4622      	mov	r2, r4
 8008552:	f7ff fb44 	bl	8007bde <memcpy>
 8008556:	4631      	mov	r1, r6
 8008558:	4638      	mov	r0, r7
 800855a:	f7ff ff35 	bl	80083c8 <_free_r>
 800855e:	e7e9      	b.n	8008534 <_realloc_r+0x1c>
 8008560:	4635      	mov	r5, r6
 8008562:	e7e7      	b.n	8008534 <_realloc_r+0x1c>

08008564 <_sbrk_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	4c06      	ldr	r4, [pc, #24]	; (8008580 <_sbrk_r+0x1c>)
 8008568:	2300      	movs	r3, #0
 800856a:	4605      	mov	r5, r0
 800856c:	4608      	mov	r0, r1
 800856e:	6023      	str	r3, [r4, #0]
 8008570:	f7ff fa6a 	bl	8007a48 <_sbrk>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	d102      	bne.n	800857e <_sbrk_r+0x1a>
 8008578:	6823      	ldr	r3, [r4, #0]
 800857a:	b103      	cbz	r3, 800857e <_sbrk_r+0x1a>
 800857c:	602b      	str	r3, [r5, #0]
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	20000710 	.word	0x20000710

08008584 <__malloc_lock>:
 8008584:	4770      	bx	lr

08008586 <__malloc_unlock>:
 8008586:	4770      	bx	lr

08008588 <_malloc_usable_size_r>:
 8008588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800858c:	1f18      	subs	r0, r3, #4
 800858e:	2b00      	cmp	r3, #0
 8008590:	bfbc      	itt	lt
 8008592:	580b      	ldrlt	r3, [r1, r0]
 8008594:	18c0      	addlt	r0, r0, r3
 8008596:	4770      	bx	lr

08008598 <_init>:
 8008598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859a:	bf00      	nop
 800859c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859e:	bc08      	pop	{r3}
 80085a0:	469e      	mov	lr, r3
 80085a2:	4770      	bx	lr

080085a4 <_fini>:
 80085a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a6:	bf00      	nop
 80085a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085aa:	bc08      	pop	{r3}
 80085ac:	469e      	mov	lr, r3
 80085ae:	4770      	bx	lr
