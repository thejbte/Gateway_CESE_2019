
Gateway_prueba_prog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08007f2c  08007f2c  00017f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083fc  080083fc  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080083fc  080083fc  000183fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008404  08008404  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008404  08008404  00018404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008408  08008408  00018408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800840c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  20000084  08008490  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  08008490  0002061c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e186  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000314f  00000000  00000000  0003e23a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001520  00000000  00000000  00041390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013b8  00000000  00000000  000428b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026d81  00000000  00000000  00043c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010fc1  00000000  00000000  0006a9e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f86f9  00000000  00000000  0007b9aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001740a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d34  00000000  00000000  00174120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f14 	.word	0x08007f14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08007f14 	.word	0x08007f14

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
 800058a:	2003      	movs	r0, #3
 800058c:	f001 f842 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f80d 	bl	80005b0 <HAL_InitTick>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <HAL_Init+0x22>
 800059c:	2301      	movs	r3, #1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	e001      	b.n	80005a6 <HAL_Init+0x26>
 80005a2:	f006 fe09 	bl	80071b8 <HAL_MspInit>
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <HAL_InitTick>:
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_InitTick+0x68>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d022      	beq.n	800060a <HAL_InitTick+0x5a>
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <HAL_InitTick+0x6c>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <HAL_InitTick+0x68>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80005d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 f850 	bl	800167e <HAL_SYSTICK_Config>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d10f      	bne.n	8000604 <HAL_InitTick+0x54>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d809      	bhi.n	80005fe <HAL_InitTick+0x4e>
 80005ea:	2200      	movs	r2, #0
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	f04f 30ff 	mov.w	r0, #4294967295
 80005f2:	f001 f81a 	bl	800162a <HAL_NVIC_SetPriority>
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <HAL_InitTick+0x70>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	e007      	b.n	800060e <HAL_InitTick+0x5e>
 80005fe:	2301      	movs	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	e004      	b.n	800060e <HAL_InitTick+0x5e>
 8000604:	2301      	movs	r3, #1
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	e001      	b.n	800060e <HAL_InitTick+0x5e>
 800060a:	2301      	movs	r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000004 	.word	0x20000004
 800061c:	2000001c 	.word	0x2000001c
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <HAL_IncTick+0x1c>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <HAL_IncTick+0x20>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4413      	add	r3, r2
 8000632:	4a03      	ldr	r2, [pc, #12]	; (8000640 <HAL_IncTick+0x1c>)
 8000634:	6013      	str	r3, [r2, #0]
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	2000019c 	.word	0x2000019c
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_GetTick>:
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <HAL_GetTick+0x14>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	2000019c 	.word	0x2000019c

08000660 <LL_ADC_SetCommonClock>:
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	431a      	orrs	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <LL_ADC_SetCommonPathInternalCh>:
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	6039      	str	r1, [r7, #0]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	431a      	orrs	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <LL_ADC_GetCommonPathInternalCh>:
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 80006bc:	4618      	mov	r0, r3
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <LL_ADC_SetOffset>:
 80006c8:	b490      	push	{r4, r7}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3360      	adds	r3, #96	; 0x60
 80006da:	461a      	mov	r2, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	4413      	add	r3, r2
 80006e2:	461c      	mov	r4, r3
 80006e4:	6822      	ldr	r2, [r4, #0]
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <LL_ADC_SetOffset+0x40>)
 80006e8:	4013      	ands	r3, r2
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	430a      	orrs	r2, r1
 80006f4:	4313      	orrs	r3, r2
 80006f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006fa:	6023      	str	r3, [r4, #0]
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bc90      	pop	{r4, r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	03fff000 	.word	0x03fff000

0800070c <LL_ADC_GetOffsetChannel>:
 800070c:	b490      	push	{r4, r7}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	3360      	adds	r3, #96	; 0x60
 800071a:	461a      	mov	r2, r3
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4413      	add	r3, r2
 8000722:	461c      	mov	r4, r3
 8000724:	6823      	ldr	r3, [r4, #0]
 8000726:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bc90      	pop	{r4, r7}
 8000732:	4770      	bx	lr

08000734 <LL_ADC_SetOffsetState>:
 8000734:	b490      	push	{r4, r7}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	3360      	adds	r3, #96	; 0x60
 8000744:	461a      	mov	r2, r3
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4413      	add	r3, r2
 800074c:	461c      	mov	r4, r3
 800074e:	6823      	ldr	r3, [r4, #0]
 8000750:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4313      	orrs	r3, r2
 8000758:	6023      	str	r3, [r4, #0]
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bc90      	pop	{r4, r7}
 8000762:	4770      	bx	lr

08000764 <LL_ADC_REG_SetSequencerRanks>:
 8000764:	b490      	push	{r4, r7}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	3330      	adds	r3, #48	; 0x30
 8000774:	461a      	mov	r2, r3
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	f003 030c 	and.w	r3, r3, #12
 8000780:	4413      	add	r3, r2
 8000782:	461c      	mov	r4, r3
 8000784:	6822      	ldr	r2, [r4, #0]
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	f003 031f 	and.w	r3, r3, #31
 800078c:	211f      	movs	r1, #31
 800078e:	fa01 f303 	lsl.w	r3, r1, r3
 8000792:	43db      	mvns	r3, r3
 8000794:	401a      	ands	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	0e9b      	lsrs	r3, r3, #26
 800079a:	f003 011f 	and.w	r1, r3, #31
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	f003 031f 	and.w	r3, r3, #31
 80007a4:	fa01 f303 	lsl.w	r3, r1, r3
 80007a8:	4313      	orrs	r3, r2
 80007aa:	6023      	str	r3, [r4, #0]
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc90      	pop	{r4, r7}
 80007b4:	4770      	bx	lr

080007b6 <LL_ADC_SetChannelSamplingTime>:
 80007b6:	b490      	push	{r4, r7}
 80007b8:	b084      	sub	sp, #16
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	60f8      	str	r0, [r7, #12]
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	3314      	adds	r3, #20
 80007c6:	461a      	mov	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	0e5b      	lsrs	r3, r3, #25
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	4413      	add	r3, r2
 80007d4:	461c      	mov	r4, r3
 80007d6:	6822      	ldr	r2, [r4, #0]
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	0d1b      	lsrs	r3, r3, #20
 80007dc:	f003 031f 	and.w	r3, r3, #31
 80007e0:	2107      	movs	r1, #7
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	43db      	mvns	r3, r3
 80007e8:	401a      	ands	r2, r3
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	0d1b      	lsrs	r3, r3, #20
 80007ee:	f003 031f 	and.w	r3, r3, #31
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	fa01 f303 	lsl.w	r3, r1, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	6023      	str	r3, [r4, #0]
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bc90      	pop	{r4, r7}
 8000804:	4770      	bx	lr
	...

08000808 <LL_ADC_SetChannelSingleDiff>:
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000820:	43db      	mvns	r3, r3
 8000822:	401a      	ands	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f003 0318 	and.w	r3, r3, #24
 800082a:	4908      	ldr	r1, [pc, #32]	; (800084c <LL_ADC_SetChannelSingleDiff+0x44>)
 800082c:	40d9      	lsrs	r1, r3
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	400b      	ands	r3, r1
 8000832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000836:	431a      	orrs	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800083e:	bf00      	nop
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	0007ffff 	.word	0x0007ffff

08000850 <LL_ADC_DisableDeepPowerDown>:
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000860:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	6093      	str	r3, [r2, #8]
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <LL_ADC_IsDeepPowerDownEnabled>:
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000888:	d101      	bne.n	800088e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800088a:	2301      	movs	r3, #1
 800088c:	e000      	b.n	8000890 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800088e:	2300      	movs	r3, #0
 8000890:	4618      	mov	r0, r3
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <LL_ADC_EnableInternalRegulator>:
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80008ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <LL_ADC_IsInternalRegulatorEnabled>:
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008d8:	d101      	bne.n	80008de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80008da:	2301      	movs	r3, #1
 80008dc:	e000      	b.n	80008e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80008de:	2300      	movs	r3, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <LL_ADC_IsEnabled>:
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d101      	bne.n	8000904 <LL_ADC_IsEnabled+0x18>
 8000900:	2301      	movs	r3, #1
 8000902:	e000      	b.n	8000906 <LL_ADC_IsEnabled+0x1a>
 8000904:	2300      	movs	r3, #0
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <LL_ADC_REG_IsConversionOngoing>:
 8000912:	b480      	push	{r7}
 8000914:	b083      	sub	sp, #12
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	2b04      	cmp	r3, #4
 8000924:	d101      	bne.n	800092a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000926:	2301      	movs	r3, #1
 8000928:	e000      	b.n	800092c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800092a:	2300      	movs	r3, #0
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <LL_ADC_INJ_IsConversionOngoing>:
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	f003 0308 	and.w	r3, r3, #8
 8000948:	2b08      	cmp	r3, #8
 800094a:	d101      	bne.n	8000950 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800094c:	2301      	movs	r3, #1
 800094e:	e000      	b.n	8000952 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000950:	2300      	movs	r3, #0
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <HAL_ADC_Init>:
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b089      	sub	sp, #36	; 0x24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	2300      	movs	r3, #0
 800096a:	77fb      	strb	r3, [r7, #31]
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d101      	bne.n	800097a <HAL_ADC_Init+0x1a>
 8000976:	2301      	movs	r3, #1
 8000978:	e134      	b.n	8000be4 <HAL_ADC_Init+0x284>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	2b00      	cmp	r3, #0
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000984:	2b00      	cmp	r3, #0
 8000986:	d109      	bne.n	800099c <HAL_ADC_Init+0x3c>
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f006 fc39 	bl	8007200 <HAL_ADC_MspInit>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2200      	movs	r2, #0
 8000992:	659a      	str	r2, [r3, #88]	; 0x58
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff67 	bl	8000874 <LL_ADC_IsDeepPowerDownEnabled>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d004      	beq.n	80009b6 <HAL_ADC_Init+0x56>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff4d 	bl	8000850 <LL_ADC_DisableDeepPowerDown>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff82 	bl	80008c4 <LL_ADC_IsInternalRegulatorEnabled>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d113      	bne.n	80009ee <HAL_ADC_Init+0x8e>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff66 	bl	800089c <LL_ADC_EnableInternalRegulator>
 80009d0:	4b86      	ldr	r3, [pc, #536]	; (8000bec <HAL_ADC_Init+0x28c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	099b      	lsrs	r3, r3, #6
 80009d6:	4a86      	ldr	r2, [pc, #536]	; (8000bf0 <HAL_ADC_Init+0x290>)
 80009d8:	fba2 2303 	umull	r2, r3, r2, r3
 80009dc:	099b      	lsrs	r3, r3, #6
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	e002      	b.n	80009e8 <HAL_ADC_Init+0x88>
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	3b01      	subs	r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d1f9      	bne.n	80009e2 <HAL_ADC_Init+0x82>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ff66 	bl	80008c4 <LL_ADC_IsInternalRegulatorEnabled>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d10d      	bne.n	8000a1a <HAL_ADC_Init+0xba>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a02:	f043 0210 	orr.w	r2, r3, #16
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	655a      	str	r2, [r3, #84]	; 0x54
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0e:	f043 0201 	orr.w	r2, r3, #1
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	659a      	str	r2, [r3, #88]	; 0x58
 8000a16:	2301      	movs	r3, #1
 8000a18:	77fb      	strb	r3, [r7, #31]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff77 	bl	8000912 <LL_ADC_REG_IsConversionOngoing>
 8000a24:	6178      	str	r0, [r7, #20]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a2a:	f003 0310 	and.w	r3, r3, #16
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f040 80cf 	bne.w	8000bd2 <HAL_ADC_Init+0x272>
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 80cb 	bne.w	8000bd2 <HAL_ADC_Init+0x272>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a40:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000a44:	f043 0202 	orr.w	r2, r3, #2
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	655a      	str	r2, [r3, #84]	; 0x54
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff4b 	bl	80008ec <LL_ADC_IsEnabled>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d115      	bne.n	8000a88 <HAL_ADC_Init+0x128>
 8000a5c:	4865      	ldr	r0, [pc, #404]	; (8000bf4 <HAL_ADC_Init+0x294>)
 8000a5e:	f7ff ff45 	bl	80008ec <LL_ADC_IsEnabled>
 8000a62:	4604      	mov	r4, r0
 8000a64:	4864      	ldr	r0, [pc, #400]	; (8000bf8 <HAL_ADC_Init+0x298>)
 8000a66:	f7ff ff41 	bl	80008ec <LL_ADC_IsEnabled>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	431c      	orrs	r4, r3
 8000a6e:	4863      	ldr	r0, [pc, #396]	; (8000bfc <HAL_ADC_Init+0x29c>)
 8000a70:	f7ff ff3c 	bl	80008ec <LL_ADC_IsEnabled>
 8000a74:	4603      	mov	r3, r0
 8000a76:	4323      	orrs	r3, r4
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d105      	bne.n	8000a88 <HAL_ADC_Init+0x128>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	4619      	mov	r1, r3
 8000a82:	485f      	ldr	r0, [pc, #380]	; (8000c00 <HAL_ADC_Init+0x2a0>)
 8000a84:	f7ff fdec 	bl	8000660 <LL_ADC_SetCommonClock>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	7e5b      	ldrb	r3, [r3, #25]
 8000a8c:	035a      	lsls	r2, r3, #13
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a92:	431a      	orrs	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aa6:	041b      	lsls	r3, r3, #16
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d106      	bne.n	8000ac4 <HAL_ADC_Init+0x164>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aba:	3b01      	subs	r3, #1
 8000abc:	045b      	lsls	r3, r3, #17
 8000abe:	69ba      	ldr	r2, [r7, #24]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d009      	beq.n	8000ae0 <HAL_ADC_Init+0x180>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	68da      	ldr	r2, [r3, #12]
 8000ae6:	4b47      	ldr	r3, [pc, #284]	; (8000c04 <HAL_ADC_Init+0x2a4>)
 8000ae8:	4013      	ands	r3, r2
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	69b9      	ldr	r1, [r7, #24]
 8000af0:	430b      	orrs	r3, r1
 8000af2:	60d3      	str	r3, [r2, #12]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff0a 	bl	8000912 <LL_ADC_REG_IsConversionOngoing>
 8000afe:	6138      	str	r0, [r7, #16]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff17 	bl	8000938 <LL_ADC_INJ_IsConversionOngoing>
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d13d      	bne.n	8000b8e <HAL_ADC_Init+0x22e>
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d13a      	bne.n	8000b8e <HAL_ADC_Init+0x22e>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	7e1b      	ldrb	r3, [r3, #24]
 8000b1c:	039a      	lsls	r2, r3, #14
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4313      	orrs	r3, r2
 8000b28:	61bb      	str	r3, [r7, #24]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b34:	f023 0302 	bic.w	r3, r3, #2
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	6812      	ldr	r2, [r2, #0]
 8000b3c:	69b9      	ldr	r1, [r7, #24]
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	60d3      	str	r3, [r2, #12]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d118      	bne.n	8000b7e <HAL_ADC_Init+0x21e>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	691b      	ldr	r3, [r3, #16]
 8000b52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000b56:	f023 0304 	bic.w	r3, r3, #4
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000b62:	4311      	orrs	r1, r2
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b68:	4311      	orrs	r1, r2
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	431a      	orrs	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f042 0201 	orr.w	r2, r2, #1
 8000b7a:	611a      	str	r2, [r3, #16]
 8000b7c:	e007      	b.n	8000b8e <HAL_ADC_Init+0x22e>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	691a      	ldr	r2, [r3, #16]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f022 0201 	bic.w	r2, r2, #1
 8000b8c:	611a      	str	r2, [r3, #16]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d10c      	bne.n	8000bb0 <HAL_ADC_Init+0x250>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	f023 010f 	bic.w	r1, r3, #15
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	1e5a      	subs	r2, r3, #1
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	430a      	orrs	r2, r1
 8000bac:	631a      	str	r2, [r3, #48]	; 0x30
 8000bae:	e007      	b.n	8000bc0 <HAL_ADC_Init+0x260>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f022 020f 	bic.w	r2, r2, #15
 8000bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bc4:	f023 0303 	bic.w	r3, r3, #3
 8000bc8:	f043 0201 	orr.w	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	655a      	str	r2, [r3, #84]	; 0x54
 8000bd0:	e007      	b.n	8000be2 <HAL_ADC_Init+0x282>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bd6:	f043 0210 	orr.w	r2, r3, #16
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	655a      	str	r2, [r3, #84]	; 0x54
 8000bde:	2301      	movs	r3, #1
 8000be0:	77fb      	strb	r3, [r7, #31]
 8000be2:	7ffb      	ldrb	r3, [r7, #31]
 8000be4:	4618      	mov	r0, r3
 8000be6:	3724      	adds	r7, #36	; 0x24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd90      	pop	{r4, r7, pc}
 8000bec:	2000001c 	.word	0x2000001c
 8000bf0:	053e2d63 	.word	0x053e2d63
 8000bf4:	50040000 	.word	0x50040000
 8000bf8:	50040100 	.word	0x50040100
 8000bfc:	50040200 	.word	0x50040200
 8000c00:	50040300 	.word	0x50040300
 8000c04:	fff0c007 	.word	0xfff0c007

08000c08 <HAL_ADC_ConfigChannel>:
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b0a6      	sub	sp, #152	; 0x98
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	2300      	movs	r3, #0
 8000c14:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d101      	bne.n	8000c2a <HAL_ADC_ConfigChannel+0x22>
 8000c26:	2302      	movs	r3, #2
 8000c28:	e348      	b.n	80012bc <HAL_ADC_ConfigChannel+0x6b4>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fe6b 	bl	8000912 <LL_ADC_REG_IsConversionOngoing>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f040 8329 	bne.w	8001296 <HAL_ADC_ConfigChannel+0x68e>
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	2b05      	cmp	r3, #5
 8000c4a:	d824      	bhi.n	8000c96 <HAL_ADC_ConfigChannel+0x8e>
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	3b02      	subs	r3, #2
 8000c52:	2b03      	cmp	r3, #3
 8000c54:	d81b      	bhi.n	8000c8e <HAL_ADC_ConfigChannel+0x86>
 8000c56:	a201      	add	r2, pc, #4	; (adr r2, 8000c5c <HAL_ADC_ConfigChannel+0x54>)
 8000c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5c:	08000c6d 	.word	0x08000c6d
 8000c60:	08000c75 	.word	0x08000c75
 8000c64:	08000c7d 	.word	0x08000c7d
 8000c68:	08000c85 	.word	0x08000c85
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	220c      	movs	r2, #12
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	e011      	b.n	8000c98 <HAL_ADC_ConfigChannel+0x90>
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	2212      	movs	r2, #18
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	e00d      	b.n	8000c98 <HAL_ADC_ConfigChannel+0x90>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	2218      	movs	r2, #24
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	e009      	b.n	8000c98 <HAL_ADC_ConfigChannel+0x90>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	e004      	b.n	8000c98 <HAL_ADC_ConfigChannel+0x90>
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	2206      	movs	r2, #6
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	e000      	b.n	8000c98 <HAL_ADC_ConfigChannel+0x90>
 8000c96:	bf00      	nop
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6818      	ldr	r0, [r3, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	6859      	ldr	r1, [r3, #4]
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	f7ff fd5d 	bl	8000764 <LL_ADC_REG_SetSequencerRanks>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fe2f 	bl	8000912 <LL_ADC_REG_IsConversionOngoing>
 8000cb4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fe3b 	bl	8000938 <LL_ADC_INJ_IsConversionOngoing>
 8000cc2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8000cc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f040 8148 	bne.w	8000f60 <HAL_ADC_ConfigChannel+0x358>
 8000cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f040 8143 	bne.w	8000f60 <HAL_ADC_ConfigChannel+0x358>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	6819      	ldr	r1, [r3, #0]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	f7ff fd65 	bl	80007b6 <LL_ADC_SetChannelSamplingTime>
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	695a      	ldr	r2, [r3, #20]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d00a      	beq.n	8000d24 <HAL_ADC_ConfigChannel+0x11c>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6818      	ldr	r0, [r3, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	6919      	ldr	r1, [r3, #16]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d1e:	f7ff fcd3 	bl	80006c8 <LL_ADC_SetOffset>
 8000d22:	e11d      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x358>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcee 	bl	800070c <LL_ADC_GetOffsetChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10a      	bne.n	8000d50 <HAL_ADC_ConfigChannel+0x148>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fce3 	bl	800070c <LL_ADC_GetOffsetChannel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	0e9b      	lsrs	r3, r3, #26
 8000d4a:	f003 021f 	and.w	r2, r3, #31
 8000d4e:	e012      	b.n	8000d76 <HAL_ADC_ConfigChannel+0x16e>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fcd8 	bl	800070c <LL_ADC_GetOffsetChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000d62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d66:	fa93 f3a3 	rbit	r3, r3
 8000d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000d6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d6e:	fab3 f383 	clz	r3, r3
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	461a      	mov	r2, r3
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d105      	bne.n	8000d8e <HAL_ADC_ConfigChannel+0x186>
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	0e9b      	lsrs	r3, r3, #26
 8000d88:	f003 031f 	and.w	r3, r3, #31
 8000d8c:	e00a      	b.n	8000da4 <HAL_ADC_ConfigChannel+0x19c>
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d96:	fa93 f3a3 	rbit	r3, r3
 8000d9a:	677b      	str	r3, [r7, #116]	; 0x74
 8000d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d9e:	fab3 f383 	clz	r3, r3
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d106      	bne.n	8000db6 <HAL_ADC_ConfigChannel+0x1ae>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2200      	movs	r2, #0
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fcbf 	bl	8000734 <LL_ADC_SetOffsetState>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2101      	movs	r1, #1
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fca5 	bl	800070c <LL_ADC_GetOffsetChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d10a      	bne.n	8000de2 <HAL_ADC_ConfigChannel+0x1da>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fc9a 	bl	800070c <LL_ADC_GetOffsetChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	0e9b      	lsrs	r3, r3, #26
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	e010      	b.n	8000e04 <HAL_ADC_ConfigChannel+0x1fc>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2101      	movs	r1, #1
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fc8f 	bl	800070c <LL_ADC_GetOffsetChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	673b      	str	r3, [r7, #112]	; 0x70
 8000df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000df4:	fa93 f3a3 	rbit	r3, r3
 8000df8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dfc:	fab3 f383 	clz	r3, r3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	461a      	mov	r2, r3
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d105      	bne.n	8000e1c <HAL_ADC_ConfigChannel+0x214>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	0e9b      	lsrs	r3, r3, #26
 8000e16:	f003 031f 	and.w	r3, r3, #31
 8000e1a:	e00a      	b.n	8000e32 <HAL_ADC_ConfigChannel+0x22a>
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	66bb      	str	r3, [r7, #104]	; 0x68
 8000e22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e24:	fa93 f3a3 	rbit	r3, r3
 8000e28:	667b      	str	r3, [r7, #100]	; 0x64
 8000e2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e2c:	fab3 f383 	clz	r3, r3
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d106      	bne.n	8000e44 <HAL_ADC_ConfigChannel+0x23c>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fc78 	bl	8000734 <LL_ADC_SetOffsetState>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2102      	movs	r1, #2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fc5e 	bl	800070c <LL_ADC_GetOffsetChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10a      	bne.n	8000e70 <HAL_ADC_ConfigChannel+0x268>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2102      	movs	r1, #2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fc53 	bl	800070c <LL_ADC_GetOffsetChannel>
 8000e66:	4603      	mov	r3, r0
 8000e68:	0e9b      	lsrs	r3, r3, #26
 8000e6a:	f003 021f 	and.w	r2, r3, #31
 8000e6e:	e010      	b.n	8000e92 <HAL_ADC_ConfigChannel+0x28a>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2102      	movs	r1, #2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fc48 	bl	800070c <LL_ADC_GetOffsetChannel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	663b      	str	r3, [r7, #96]	; 0x60
 8000e80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e82:	fa93 f3a3 	rbit	r3, r3
 8000e86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e8a:	fab3 f383 	clz	r3, r3
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	461a      	mov	r2, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d105      	bne.n	8000eaa <HAL_ADC_ConfigChannel+0x2a2>
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	0e9b      	lsrs	r3, r3, #26
 8000ea4:	f003 031f 	and.w	r3, r3, #31
 8000ea8:	e00a      	b.n	8000ec0 <HAL_ADC_ConfigChannel+0x2b8>
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	65bb      	str	r3, [r7, #88]	; 0x58
 8000eb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000eb2:	fa93 f3a3 	rbit	r3, r3
 8000eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8000eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000eba:	fab3 f383 	clz	r3, r3
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d106      	bne.n	8000ed2 <HAL_ADC_ConfigChannel+0x2ca>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2102      	movs	r1, #2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fc31 	bl	8000734 <LL_ADC_SetOffsetState>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2103      	movs	r1, #3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fc17 	bl	800070c <LL_ADC_GetOffsetChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10a      	bne.n	8000efe <HAL_ADC_ConfigChannel+0x2f6>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2103      	movs	r1, #3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fc0c 	bl	800070c <LL_ADC_GetOffsetChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	0e9b      	lsrs	r3, r3, #26
 8000ef8:	f003 021f 	and.w	r2, r3, #31
 8000efc:	e010      	b.n	8000f20 <HAL_ADC_ConfigChannel+0x318>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2103      	movs	r1, #3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fc01 	bl	800070c <LL_ADC_GetOffsetChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	653b      	str	r3, [r7, #80]	; 0x50
 8000f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f10:	fa93 f3a3 	rbit	r3, r3
 8000f14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f18:	fab3 f383 	clz	r3, r3
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	461a      	mov	r2, r3
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d105      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x330>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	0e9b      	lsrs	r3, r3, #26
 8000f32:	f003 031f 	and.w	r3, r3, #31
 8000f36:	e00a      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x346>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f40:	fa93 f3a3 	rbit	r3, r3
 8000f44:	647b      	str	r3, [r7, #68]	; 0x44
 8000f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f48:	fab3 f383 	clz	r3, r3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d106      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x358>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2200      	movs	r2, #0
 8000f58:	2103      	movs	r1, #3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fbea 	bl	8000734 <LL_ADC_SetOffsetState>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fcc1 	bl	80008ec <LL_ADC_IsEnabled>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f040 810c 	bne.w	800118a <HAL_ADC_ConfigChannel+0x582>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	6819      	ldr	r1, [r3, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f7ff fc42 	bl	8000808 <LL_ADC_SetChannelSingleDiff>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	4aad      	ldr	r2, [pc, #692]	; (8001240 <HAL_ADC_ConfigChannel+0x638>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	f040 80fd 	bne.w	800118a <HAL_ADC_ConfigChannel+0x582>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d10b      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x3b0>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	0e9b      	lsrs	r3, r3, #26
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	f003 031f 	and.w	r3, r3, #31
 8000fac:	2b09      	cmp	r3, #9
 8000fae:	bf94      	ite	ls
 8000fb0:	2301      	movls	r3, #1
 8000fb2:	2300      	movhi	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	e012      	b.n	8000fde <HAL_ADC_ConfigChannel+0x3d6>
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	643b      	str	r3, [r7, #64]	; 0x40
 8000fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fc0:	fa93 f3a3 	rbit	r3, r3
 8000fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fc8:	fab3 f383 	clz	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	3301      	adds	r3, #1
 8000fd0:	f003 031f 	and.w	r3, r3, #31
 8000fd4:	2b09      	cmp	r3, #9
 8000fd6:	bf94      	ite	ls
 8000fd8:	2301      	movls	r3, #1
 8000fda:	2300      	movhi	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d064      	beq.n	80010ac <HAL_ADC_ConfigChannel+0x4a4>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d107      	bne.n	8000ffe <HAL_ADC_ConfigChannel+0x3f6>
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	0e9b      	lsrs	r3, r3, #26
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	069b      	lsls	r3, r3, #26
 8000ff8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ffc:	e00e      	b.n	800101c <HAL_ADC_ConfigChannel+0x414>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	63bb      	str	r3, [r7, #56]	; 0x38
 8001004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001006:	fa93 f3a3 	rbit	r3, r3
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
 800100c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100e:	fab3 f383 	clz	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	3301      	adds	r3, #1
 8001016:	069b      	lsls	r3, r3, #26
 8001018:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001024:	2b00      	cmp	r3, #0
 8001026:	d109      	bne.n	800103c <HAL_ADC_ConfigChannel+0x434>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	0e9b      	lsrs	r3, r3, #26
 800102e:	3301      	adds	r3, #1
 8001030:	f003 031f 	and.w	r3, r3, #31
 8001034:	2101      	movs	r1, #1
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	e010      	b.n	800105e <HAL_ADC_ConfigChannel+0x456>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	633b      	str	r3, [r7, #48]	; 0x30
 8001042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001044:	fa93 f3a3 	rbit	r3, r3
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800104a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104c:	fab3 f383 	clz	r3, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	3301      	adds	r3, #1
 8001054:	f003 031f 	and.w	r3, r3, #31
 8001058:	2101      	movs	r1, #1
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	ea42 0103 	orr.w	r1, r2, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10a      	bne.n	8001084 <HAL_ADC_ConfigChannel+0x47c>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	0e9b      	lsrs	r3, r3, #26
 8001074:	3301      	adds	r3, #1
 8001076:	f003 021f 	and.w	r2, r3, #31
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	051b      	lsls	r3, r3, #20
 8001082:	e011      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x4a0>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
 800108a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800108c:	fa93 f3a3 	rbit	r3, r3
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	fab3 f383 	clz	r3, r3
 8001098:	b2db      	uxtb	r3, r3
 800109a:	3301      	adds	r3, #1
 800109c:	f003 021f 	and.w	r2, r3, #31
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	051b      	lsls	r3, r3, #20
 80010a8:	430b      	orrs	r3, r1
 80010aa:	e069      	b.n	8001180 <HAL_ADC_ConfigChannel+0x578>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d107      	bne.n	80010c8 <HAL_ADC_ConfigChannel+0x4c0>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0e9b      	lsrs	r3, r3, #26
 80010be:	3301      	adds	r3, #1
 80010c0:	069b      	lsls	r3, r3, #26
 80010c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010c6:	e00e      	b.n	80010e6 <HAL_ADC_ConfigChannel+0x4de>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	623b      	str	r3, [r7, #32]
 80010ce:	6a3b      	ldr	r3, [r7, #32]
 80010d0:	fa93 f3a3 	rbit	r3, r3
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fab3 f383 	clz	r3, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	3301      	adds	r3, #1
 80010e0:	069b      	lsls	r3, r3, #26
 80010e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d109      	bne.n	8001106 <HAL_ADC_ConfigChannel+0x4fe>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	0e9b      	lsrs	r3, r3, #26
 80010f8:	3301      	adds	r3, #1
 80010fa:	f003 031f 	and.w	r3, r3, #31
 80010fe:	2101      	movs	r1, #1
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	e010      	b.n	8001128 <HAL_ADC_ConfigChannel+0x520>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa93 f3a3 	rbit	r3, r3
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fab3 f383 	clz	r3, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	3301      	adds	r3, #1
 800111e:	f003 031f 	and.w	r3, r3, #31
 8001122:	2101      	movs	r1, #1
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	ea42 0103 	orr.w	r1, r2, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10d      	bne.n	8001154 <HAL_ADC_ConfigChannel+0x54c>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	0e9b      	lsrs	r3, r3, #26
 800113e:	3301      	adds	r3, #1
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	3b1e      	subs	r3, #30
 800114c:	051b      	lsls	r3, r3, #20
 800114e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001152:	e014      	b.n	800117e <HAL_ADC_ConfigChannel+0x576>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	fab3 f383 	clz	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	3301      	adds	r3, #1
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	3b1e      	subs	r3, #30
 8001178:	051b      	lsls	r3, r3, #20
 800117a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800117e:	430b      	orrs	r3, r1
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	6892      	ldr	r2, [r2, #8]
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fb16 	bl	80007b6 <LL_ADC_SetChannelSamplingTime>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <HAL_ADC_ConfigChannel+0x63c>)
 8001190:	4013      	ands	r3, r2
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 808c 	beq.w	80012b0 <HAL_ADC_ConfigChannel+0x6a8>
 8001198:	482b      	ldr	r0, [pc, #172]	; (8001248 <HAL_ADC_ConfigChannel+0x640>)
 800119a:	f7ff fa87 	bl	80006ac <LL_ADC_GetCommonPathInternalCh>
 800119e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a29      	ldr	r2, [pc, #164]	; (800124c <HAL_ADC_ConfigChannel+0x644>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d12b      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x5fc>
 80011ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d125      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x5fc>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a24      	ldr	r2, [pc, #144]	; (8001250 <HAL_ADC_ConfigChannel+0x648>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d004      	beq.n	80011cc <HAL_ADC_ConfigChannel+0x5c4>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a23      	ldr	r2, [pc, #140]	; (8001254 <HAL_ADC_ConfigChannel+0x64c>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d16e      	bne.n	80012aa <HAL_ADC_ConfigChannel+0x6a2>
 80011cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011d4:	4619      	mov	r1, r3
 80011d6:	481c      	ldr	r0, [pc, #112]	; (8001248 <HAL_ADC_ConfigChannel+0x640>)
 80011d8:	f7ff fa55 	bl	8000686 <LL_ADC_SetCommonPathInternalCh>
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <HAL_ADC_ConfigChannel+0x650>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	099b      	lsrs	r3, r3, #6
 80011e2:	4a1e      	ldr	r2, [pc, #120]	; (800125c <HAL_ADC_ConfigChannel+0x654>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	099a      	lsrs	r2, r3, #6
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	e002      	b.n	80011fc <HAL_ADC_ConfigChannel+0x5f4>
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f9      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x5ee>
 8001202:	e052      	b.n	80012aa <HAL_ADC_ConfigChannel+0x6a2>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a15      	ldr	r2, [pc, #84]	; (8001260 <HAL_ADC_ConfigChannel+0x658>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d12a      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x65c>
 800120e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d124      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x65c>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a0c      	ldr	r2, [pc, #48]	; (8001250 <HAL_ADC_ConfigChannel+0x648>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d004      	beq.n	800122e <HAL_ADC_ConfigChannel+0x626>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <HAL_ADC_ConfigChannel+0x64c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d13f      	bne.n	80012ae <HAL_ADC_ConfigChannel+0x6a6>
 800122e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001236:	4619      	mov	r1, r3
 8001238:	4803      	ldr	r0, [pc, #12]	; (8001248 <HAL_ADC_ConfigChannel+0x640>)
 800123a:	f7ff fa24 	bl	8000686 <LL_ADC_SetCommonPathInternalCh>
 800123e:	e036      	b.n	80012ae <HAL_ADC_ConfigChannel+0x6a6>
 8001240:	407f0000 	.word	0x407f0000
 8001244:	80080000 	.word	0x80080000
 8001248:	50040300 	.word	0x50040300
 800124c:	c7520000 	.word	0xc7520000
 8001250:	50040000 	.word	0x50040000
 8001254:	50040200 	.word	0x50040200
 8001258:	2000001c 	.word	0x2000001c
 800125c:	053e2d63 	.word	0x053e2d63
 8001260:	cb840000 	.word	0xcb840000
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <HAL_ADC_ConfigChannel+0x6bc>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d120      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x6a8>
 800126e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d11a      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x6a8>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <HAL_ADC_ConfigChannel+0x6c0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d115      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x6a8>
 8001284:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001288:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800128c:	4619      	mov	r1, r3
 800128e:	480f      	ldr	r0, [pc, #60]	; (80012cc <HAL_ADC_ConfigChannel+0x6c4>)
 8001290:	f7ff f9f9 	bl	8000686 <LL_ADC_SetCommonPathInternalCh>
 8001294:	e00c      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x6a8>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129a:	f043 0220 	orr.w	r2, r3, #32
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	655a      	str	r2, [r3, #84]	; 0x54
 80012a2:	2301      	movs	r3, #1
 80012a4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80012a8:	e002      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x6a8>
 80012aa:	bf00      	nop
 80012ac:	e000      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x6a8>
 80012ae:	bf00      	nop
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80012b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80012bc:	4618      	mov	r0, r3
 80012be:	3798      	adds	r7, #152	; 0x98
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	80000001 	.word	0x80000001
 80012c8:	50040000 	.word	0x50040000
 80012cc:	50040300 	.word	0x50040300

080012d0 <LL_ADC_IsEnabled>:
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <LL_ADC_IsEnabled+0x18>
 80012e4:	2301      	movs	r3, #1
 80012e6:	e000      	b.n	80012ea <LL_ADC_IsEnabled+0x1a>
 80012e8:	2300      	movs	r3, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <LL_ADC_REG_IsConversionOngoing>:
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	2b04      	cmp	r3, #4
 8001308:	d101      	bne.n	800130e <LL_ADC_REG_IsConversionOngoing+0x18>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800130e:	2300      	movs	r3, #0
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_ADCEx_MultiModeConfigChannel>:
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b09f      	sub	sp, #124	; 0x7c
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	2300      	movs	r3, #0
 8001328:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001336:	2302      	movs	r3, #2
 8001338:	e08f      	b.n	800145a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a47      	ldr	r2, [pc, #284]	; (8001464 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d102      	bne.n	8001352 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800134c:	4b46      	ldr	r3, [pc, #280]	; (8001468 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	e001      	b.n	8001356 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10b      	bne.n	8001374 <HAL_ADCEx_MultiModeConfigChannel+0x58>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001360:	f043 0220 	orr.w	r2, r3, #32
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	655a      	str	r2, [r3, #84]	; 0x54
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001370:	2301      	movs	r3, #1
 8001372:	e072      	b.n	800145a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ffbd 	bl	80012f6 <LL_ADC_REG_IsConversionOngoing>
 800137c:	6738      	str	r0, [r7, #112]	; 0x70
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ffb7 	bl	80012f6 <LL_ADC_REG_IsConversionOngoing>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d154      	bne.n	8001438 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800138e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001390:	2b00      	cmp	r3, #0
 8001392:	d151      	bne.n	8001438 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001394:	4b35      	ldr	r3, [pc, #212]	; (800146c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001396:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d02c      	beq.n	80013fa <HAL_ADCEx_MultiModeConfigChannel+0xde>
 80013a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	6859      	ldr	r1, [r3, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013b2:	035b      	lsls	r3, r3, #13
 80013b4:	430b      	orrs	r3, r1
 80013b6:	431a      	orrs	r2, r3
 80013b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	4829      	ldr	r0, [pc, #164]	; (8001464 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80013be:	f7ff ff87 	bl	80012d0 <LL_ADC_IsEnabled>
 80013c2:	4604      	mov	r4, r0
 80013c4:	4828      	ldr	r0, [pc, #160]	; (8001468 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80013c6:	f7ff ff83 	bl	80012d0 <LL_ADC_IsEnabled>
 80013ca:	4603      	mov	r3, r0
 80013cc:	431c      	orrs	r4, r3
 80013ce:	4828      	ldr	r0, [pc, #160]	; (8001470 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80013d0:	f7ff ff7e 	bl	80012d0 <LL_ADC_IsEnabled>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4323      	orrs	r3, r4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d137      	bne.n	800144c <HAL_ADCEx_MultiModeConfigChannel+0x130>
 80013dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80013e4:	f023 030f 	bic.w	r3, r3, #15
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	6811      	ldr	r1, [r2, #0]
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	6892      	ldr	r2, [r2, #8]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	431a      	orrs	r2, r3
 80013f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	e028      	b.n	800144c <HAL_ADCEx_MultiModeConfigChannel+0x130>
 80013fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	4817      	ldr	r0, [pc, #92]	; (8001464 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001408:	f7ff ff62 	bl	80012d0 <LL_ADC_IsEnabled>
 800140c:	4604      	mov	r4, r0
 800140e:	4816      	ldr	r0, [pc, #88]	; (8001468 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001410:	f7ff ff5e 	bl	80012d0 <LL_ADC_IsEnabled>
 8001414:	4603      	mov	r3, r0
 8001416:	431c      	orrs	r4, r3
 8001418:	4815      	ldr	r0, [pc, #84]	; (8001470 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800141a:	f7ff ff59 	bl	80012d0 <LL_ADC_IsEnabled>
 800141e:	4603      	mov	r3, r0
 8001420:	4323      	orrs	r3, r4
 8001422:	2b00      	cmp	r3, #0
 8001424:	d112      	bne.n	800144c <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8001426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800142e:	f023 030f 	bic.w	r3, r3, #15
 8001432:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001434:	6093      	str	r3, [r2, #8]
 8001436:	e009      	b.n	800144c <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143c:	f043 0220 	orr.w	r2, r3, #32
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	655a      	str	r2, [r3, #84]	; 0x54
 8001444:	2301      	movs	r3, #1
 8001446:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800144a:	e000      	b.n	800144e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800144c:	bf00      	nop
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001456:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800145a:	4618      	mov	r0, r3
 800145c:	377c      	adds	r7, #124	; 0x7c
 800145e:	46bd      	mov	sp, r7
 8001460:	bd90      	pop	{r4, r7, pc}
 8001462:	bf00      	nop
 8001464:	50040000 	.word	0x50040000
 8001468:	50040100 	.word	0x50040100
 800146c:	50040300 	.word	0x50040300
 8001470:	50040200 	.word	0x50040200

08001474 <__NVIC_SetPriorityGrouping>:
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001490:	4013      	ands	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	021a      	lsls	r2, r3, #8
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4313      	orrs	r3, r2
 800149c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_GetPriorityGrouping>:
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <__NVIC_GetPriorityGrouping+0x18>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_EnableIRQ>:
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db0b      	blt.n	8001502 <__NVIC_EnableIRQ+0x2a>
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f003 021f 	and.w	r2, r3, #31
 80014f0:	4907      	ldr	r1, [pc, #28]	; (8001510 <__NVIC_EnableIRQ+0x38>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	2001      	movs	r0, #1
 80014fa:	fa00 f202 	lsl.w	r2, r0, r2
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000e100 	.word	0xe000e100

08001514 <__NVIC_SetPriority>:
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	; (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	f04f 32ff 	mov.w	r2, #4294967295
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
 80015c0:	4313      	orrs	r3, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <SysTick_Config>:
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f7ff ff8e 	bl	8001514 <__NVIC_SetPriority>
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	2300      	movs	r3, #0
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff29 	bl	8001474 <__NVIC_SetPriorityGrouping>
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	f7ff ff3e 	bl	80014bc <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff8e 	bl	8001568 <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5d 	bl	8001514 <__NVIC_SetPriority>
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_EnableIRQ>:
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff31 	bl	80014d8 <__NVIC_EnableIRQ>
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffa2 	bl	80015d0 <SysTick_Config>
 800168c:	4603      	mov	r3, r0
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_DMA_Abort_IT>:
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d005      	beq.n	80016ba <HAL_DMA_Abort_IT+0x24>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2204      	movs	r2, #4
 80016b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e029      	b.n	800170e <HAL_DMA_Abort_IT+0x78>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 020e 	bic.w	r2, r2, #14
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0201 	bic.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f003 021c 	and.w	r2, r3, #28
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	2101      	movs	r1, #1
 80016e8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_DMA_Abort_IT+0x78>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	4798      	blx	r3
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_GPIO_Init>:
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e17f      	b.n	8001a28 <HAL_GPIO_Init+0x310>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2101      	movs	r1, #1
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8171 	beq.w	8001a22 <HAL_GPIO_Init+0x30a>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x38>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b12      	cmp	r3, #18
 800174e:	d123      	bne.n	8001798 <HAL_GPIO_Init+0x80>
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	6939      	ldr	r1, [r7, #16]
 8001794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0203 	and.w	r2, r3, #3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d00b      	beq.n	80017ec <HAL_GPIO_Init+0xd4>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d007      	beq.n	80017ec <HAL_GPIO_Init+0xd4>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b11      	cmp	r3, #17
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0xd4>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b12      	cmp	r3, #18
 80017ea:	d130      	bne.n	800184e <HAL_GPIO_Init+0x136>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	2201      	movs	r2, #1
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	091b      	lsrs	r3, r3, #4
 8001838:	f003 0201 	and.w	r2, r3, #1
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b03      	cmp	r3, #3
 8001858:	d118      	bne.n	800188c <HAL_GPIO_Init+0x174>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	2201      	movs	r2, #1
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	08db      	lsrs	r3, r3, #3
 8001876:	f003 0201 	and.w	r2, r3, #1
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80ac 	beq.w	8001a22 <HAL_GPIO_Init+0x30a>
 80018ca:	4b5e      	ldr	r3, [pc, #376]	; (8001a44 <HAL_GPIO_Init+0x32c>)
 80018cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ce:	4a5d      	ldr	r2, [pc, #372]	; (8001a44 <HAL_GPIO_Init+0x32c>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6613      	str	r3, [r2, #96]	; 0x60
 80018d6:	4b5b      	ldr	r3, [pc, #364]	; (8001a44 <HAL_GPIO_Init+0x32c>)
 80018d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4a59      	ldr	r2, [pc, #356]	; (8001a48 <HAL_GPIO_Init+0x330>)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3302      	adds	r3, #2
 80018ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800190c:	d025      	beq.n	800195a <HAL_GPIO_Init+0x242>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4e      	ldr	r2, [pc, #312]	; (8001a4c <HAL_GPIO_Init+0x334>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d01f      	beq.n	8001956 <HAL_GPIO_Init+0x23e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4d      	ldr	r2, [pc, #308]	; (8001a50 <HAL_GPIO_Init+0x338>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d019      	beq.n	8001952 <HAL_GPIO_Init+0x23a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4c      	ldr	r2, [pc, #304]	; (8001a54 <HAL_GPIO_Init+0x33c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0x236>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4b      	ldr	r2, [pc, #300]	; (8001a58 <HAL_GPIO_Init+0x340>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00d      	beq.n	800194a <HAL_GPIO_Init+0x232>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4a      	ldr	r2, [pc, #296]	; (8001a5c <HAL_GPIO_Init+0x344>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d007      	beq.n	8001946 <HAL_GPIO_Init+0x22e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a49      	ldr	r2, [pc, #292]	; (8001a60 <HAL_GPIO_Init+0x348>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_GPIO_Init+0x22a>
 800193e:	2306      	movs	r3, #6
 8001940:	e00c      	b.n	800195c <HAL_GPIO_Init+0x244>
 8001942:	2307      	movs	r3, #7
 8001944:	e00a      	b.n	800195c <HAL_GPIO_Init+0x244>
 8001946:	2305      	movs	r3, #5
 8001948:	e008      	b.n	800195c <HAL_GPIO_Init+0x244>
 800194a:	2304      	movs	r3, #4
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x244>
 800194e:	2303      	movs	r3, #3
 8001950:	e004      	b.n	800195c <HAL_GPIO_Init+0x244>
 8001952:	2302      	movs	r3, #2
 8001954:	e002      	b.n	800195c <HAL_GPIO_Init+0x244>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_GPIO_Init+0x244>
 800195a:	2300      	movs	r3, #0
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	f002 0203 	and.w	r2, r2, #3
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	4093      	lsls	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	4936      	ldr	r1, [pc, #216]	; (8001a48 <HAL_GPIO_Init+0x330>)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3302      	adds	r3, #2
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800197a:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <HAL_GPIO_Init+0x34c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x286>
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	4a31      	ldr	r2, [pc, #196]	; (8001a64 <HAL_GPIO_Init+0x34c>)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <HAL_GPIO_Init+0x34c>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x2b0>
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <HAL_GPIO_Init+0x34c>)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	6053      	str	r3, [r2, #4]
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_GPIO_Init+0x34c>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x2da>
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <HAL_GPIO_Init+0x34c>)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	6093      	str	r3, [r2, #8]
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_GPIO_Init+0x34c>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x304>
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <HAL_GPIO_Init+0x34c>)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	60d3      	str	r3, [r2, #12]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f47f ae78 	bne.w	8001728 <HAL_GPIO_Init+0x10>
 8001a38:	bf00      	nop
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	48000400 	.word	0x48000400
 8001a50:	48000800 	.word	0x48000800
 8001a54:	48000c00 	.word	0x48000c00
 8001a58:	48001000 	.word	0x48001000
 8001a5c:	48001400 	.word	0x48001400
 8001a60:	48001800 	.word	0x48001800
 8001a64:	40010400 	.word	0x40010400

08001a68 <HAL_GPIO_WritePin>:
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
 8001a74:	4613      	mov	r3, r2
 8001a76:	707b      	strb	r3, [r7, #1]
 8001a78:	787b      	ldrb	r3, [r7, #1]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_WritePin+0x1e>
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	619a      	str	r2, [r3, #24]
 8001a84:	e002      	b.n	8001a8c <HAL_GPIO_WritePin+0x24>
 8001a86:	887a      	ldrh	r2, [r7, #2]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_PWREx_GetVoltageRange>:
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40007000 	.word	0x40007000

08001ab4 <HAL_PWREx_ControlVoltageScaling>:
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ac2:	d130      	bne.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x72>
 8001ac4:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad0:	d038      	beq.n	8001b44 <HAL_PWREx_ControlVoltageScaling+0x90>
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ada:	4a1e      	ldr	r2, [pc, #120]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001adc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2232      	movs	r2, #50	; 0x32
 8001ae8:	fb02 f303 	mul.w	r3, r2, r3
 8001aec:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	0c9b      	lsrs	r3, r3, #18
 8001af4:	3301      	adds	r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	e002      	b.n	8001b00 <HAL_PWREx_ControlVoltageScaling+0x4c>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b0c:	d102      	bne.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f2      	bne.n	8001afa <HAL_PWREx_ControlVoltageScaling+0x46>
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b20:	d110      	bne.n	8001b44 <HAL_PWREx_ControlVoltageScaling+0x90>
 8001b22:	2303      	movs	r3, #3
 8001b24:	e00f      	b.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x92>
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b32:	d007      	beq.n	8001b44 <HAL_PWREx_ControlVoltageScaling+0x90>
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b3c:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	2300      	movs	r3, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40007000 	.word	0x40007000
 8001b58:	2000001c 	.word	0x2000001c
 8001b5c:	431bde83 	.word	0x431bde83

08001b60 <HAL_RCC_OscConfig>:
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x12>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e39d      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8001b72:	4ba4      	ldr	r3, [pc, #656]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	4ba1      	ldr	r3, [pc, #644]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 80e1 	beq.w	8001d56 <HAL_RCC_OscConfig+0x1f6>
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <HAL_RCC_OscConfig+0x4a>
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	2b0c      	cmp	r3, #12
 8001b9e:	f040 8088 	bne.w	8001cb2 <HAL_RCC_OscConfig+0x152>
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	f040 8084 	bne.w	8001cb2 <HAL_RCC_OscConfig+0x152>
 8001baa:	4b96      	ldr	r3, [pc, #600]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x62>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x62>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e375      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1a      	ldr	r2, [r3, #32]
 8001bc6:	4b8f      	ldr	r3, [pc, #572]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d004      	beq.n	8001bdc <HAL_RCC_OscConfig+0x7c>
 8001bd2:	4b8c      	ldr	r3, [pc, #560]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bda:	e005      	b.n	8001be8 <HAL_RCC_OscConfig+0x88>
 8001bdc:	4b89      	ldr	r3, [pc, #548]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d223      	bcs.n	8001c34 <HAL_RCC_OscConfig+0xd4>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 fd09 	bl	8002608 <RCC_SetFlashLatencyFromMSIRange>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_OscConfig+0xa0>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e356      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8001c00:	4b80      	ldr	r3, [pc, #512]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a7f      	ldr	r2, [pc, #508]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001c06:	f043 0308 	orr.w	r3, r3, #8
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b7d      	ldr	r3, [pc, #500]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	497a      	ldr	r1, [pc, #488]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
 8001c1e:	4b79      	ldr	r3, [pc, #484]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	4975      	ldr	r1, [pc, #468]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	604b      	str	r3, [r1, #4]
 8001c32:	e022      	b.n	8001c7a <HAL_RCC_OscConfig+0x11a>
 8001c34:	4b73      	ldr	r3, [pc, #460]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a72      	ldr	r2, [pc, #456]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001c3a:	f043 0308 	orr.w	r3, r3, #8
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4b70      	ldr	r3, [pc, #448]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	496d      	ldr	r1, [pc, #436]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
 8001c52:	4b6c      	ldr	r3, [pc, #432]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	4968      	ldr	r1, [pc, #416]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	604b      	str	r3, [r1, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 fccc 	bl	8002608 <RCC_SetFlashLatencyFromMSIRange>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x11a>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e319      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8001c7a:	f000 fc03 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 8001c7e:	4601      	mov	r1, r0
 8001c80:	4b60      	ldr	r3, [pc, #384]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	4a5f      	ldr	r2, [pc, #380]	; (8001e08 <HAL_RCC_OscConfig+0x2a8>)
 8001c8c:	5cd3      	ldrb	r3, [r2, r3]
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	fa21 f303 	lsr.w	r3, r1, r3
 8001c96:	4a5d      	ldr	r2, [pc, #372]	; (8001e0c <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	; (8001e10 <HAL_RCC_OscConfig+0x2b0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fc86 	bl	80005b0 <HAL_InitTick>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d052      	beq.n	8001d54 <HAL_RCC_OscConfig+0x1f4>
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	e2fd      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d032      	beq.n	8001d20 <HAL_RCC_OscConfig+0x1c0>
 8001cba:	4b52      	ldr	r3, [pc, #328]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a51      	ldr	r2, [pc, #324]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	f7fe fcbf 	bl	8000648 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x180>
 8001cce:	f7fe fcbb 	bl	8000648 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x180>
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e2e6      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8001ce0:	4b48      	ldr	r3, [pc, #288]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x16e>
 8001cec:	4b45      	ldr	r3, [pc, #276]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a44      	ldr	r2, [pc, #272]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001cf2:	f043 0308 	orr.w	r3, r3, #8
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b42      	ldr	r3, [pc, #264]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	493f      	ldr	r1, [pc, #252]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]
 8001d0a:	4b3e      	ldr	r3, [pc, #248]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	021b      	lsls	r3, r3, #8
 8001d18:	493a      	ldr	r1, [pc, #232]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]
 8001d1e:	e01a      	b.n	8001d56 <HAL_RCC_OscConfig+0x1f6>
 8001d20:	4b38      	ldr	r3, [pc, #224]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a37      	ldr	r2, [pc, #220]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001d26:	f023 0301 	bic.w	r3, r3, #1
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	f7fe fc8c 	bl	8000648 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x1e6>
 8001d34:	f7fe fc88 	bl	8000648 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x1e6>
 8001d42:	2303      	movs	r3, #3
 8001d44:	e2b3      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8001d46:	4b2f      	ldr	r3, [pc, #188]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x1d4>
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x1f6>
 8001d54:	bf00      	nop
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d074      	beq.n	8001e4c <HAL_RCC_OscConfig+0x2ec>
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_OscConfig+0x214>
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d10e      	bne.n	8001d8c <HAL_RCC_OscConfig+0x22c>
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d10b      	bne.n	8001d8c <HAL_RCC_OscConfig+0x22c>
 8001d74:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d064      	beq.n	8001e4a <HAL_RCC_OscConfig+0x2ea>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d160      	bne.n	8001e4a <HAL_RCC_OscConfig+0x2ea>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e290      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d94:	d106      	bne.n	8001da4 <HAL_RCC_OscConfig+0x244>
 8001d96:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a1a      	ldr	r2, [pc, #104]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e01d      	b.n	8001de0 <HAL_RCC_OscConfig+0x280>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x268>
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a14      	ldr	r2, [pc, #80]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e00b      	b.n	8001de0 <HAL_RCC_OscConfig+0x280>
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_RCC_OscConfig+0x2a4>)
 8001dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01c      	beq.n	8001e22 <HAL_RCC_OscConfig+0x2c2>
 8001de8:	f7fe fc2e 	bl	8000648 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]
 8001dee:	e011      	b.n	8001e14 <HAL_RCC_OscConfig+0x2b4>
 8001df0:	f7fe fc2a 	bl	8000648 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d90a      	bls.n	8001e14 <HAL_RCC_OscConfig+0x2b4>
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e255      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	08008380 	.word	0x08008380
 8001e0c:	2000001c 	.word	0x2000001c
 8001e10:	20000000 	.word	0x20000000
 8001e14:	4bae      	ldr	r3, [pc, #696]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0e7      	beq.n	8001df0 <HAL_RCC_OscConfig+0x290>
 8001e20:	e014      	b.n	8001e4c <HAL_RCC_OscConfig+0x2ec>
 8001e22:	f7fe fc11 	bl	8000648 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x2dc>
 8001e2a:	f7fe fc0d 	bl	8000648 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b64      	cmp	r3, #100	; 0x64
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x2dc>
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e238      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8001e3c:	4ba4      	ldr	r3, [pc, #656]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x2ca>
 8001e48:	e000      	b.n	8001e4c <HAL_RCC_OscConfig+0x2ec>
 8001e4a:	bf00      	nop
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d060      	beq.n	8001f1a <HAL_RCC_OscConfig+0x3ba>
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d005      	beq.n	8001e6a <HAL_RCC_OscConfig+0x30a>
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b0c      	cmp	r3, #12
 8001e62:	d119      	bne.n	8001e98 <HAL_RCC_OscConfig+0x338>
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d116      	bne.n	8001e98 <HAL_RCC_OscConfig+0x338>
 8001e6a:	4b99      	ldr	r3, [pc, #612]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_RCC_OscConfig+0x322>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_OscConfig+0x322>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e215      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8001e82:	4b93      	ldr	r3, [pc, #588]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	061b      	lsls	r3, r3, #24
 8001e90:	498f      	ldr	r1, [pc, #572]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
 8001e96:	e040      	b.n	8001f1a <HAL_RCC_OscConfig+0x3ba>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d023      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x388>
 8001ea0:	4b8b      	ldr	r3, [pc, #556]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a8a      	ldr	r2, [pc, #552]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	f7fe fbcc 	bl	8000648 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x366>
 8001eb4:	f7fe fbc8 	bl	8000648 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x366>
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e1f3      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8001ec6:	4b82      	ldr	r3, [pc, #520]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x354>
 8001ed2:	4b7f      	ldr	r3, [pc, #508]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	061b      	lsls	r3, r3, #24
 8001ee0:	497b      	ldr	r1, [pc, #492]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
 8001ee6:	e018      	b.n	8001f1a <HAL_RCC_OscConfig+0x3ba>
 8001ee8:	4b79      	ldr	r3, [pc, #484]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a78      	ldr	r2, [pc, #480]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001eee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	f7fe fba8 	bl	8000648 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x3ae>
 8001efc:	f7fe fba4 	bl	8000648 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x3ae>
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e1cf      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8001f0e:	4b70      	ldr	r3, [pc, #448]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x39c>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d03c      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x440>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d01c      	beq.n	8001f68 <HAL_RCC_OscConfig+0x408>
 8001f2e:	4b68      	ldr	r3, [pc, #416]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f34:	4a66      	ldr	r2, [pc, #408]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001f3e:	f7fe fb83 	bl	8000648 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x3f8>
 8001f46:	f7fe fb7f 	bl	8000648 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x3f8>
 8001f54:	2303      	movs	r3, #3
 8001f56:	e1aa      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8001f58:	4b5d      	ldr	r3, [pc, #372]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0ef      	beq.n	8001f46 <HAL_RCC_OscConfig+0x3e6>
 8001f66:	e01b      	b.n	8001fa0 <HAL_RCC_OscConfig+0x440>
 8001f68:	4b59      	ldr	r3, [pc, #356]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6e:	4a58      	ldr	r2, [pc, #352]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001f78:	f7fe fb66 	bl	8000648 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x432>
 8001f80:	f7fe fb62 	bl	8000648 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x432>
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e18d      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8001f92:	4b4f      	ldr	r3, [pc, #316]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ef      	bne.n	8001f80 <HAL_RCC_OscConfig+0x420>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80a5 	beq.w	80020f8 <HAL_RCC_OscConfig+0x598>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	77fb      	strb	r3, [r7, #31]
 8001fb2:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10d      	bne.n	8001fda <HAL_RCC_OscConfig+0x47a>
 8001fbe:	4b44      	ldr	r3, [pc, #272]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	4a43      	ldr	r2, [pc, #268]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	77fb      	strb	r3, [r7, #31]
 8001fda:	4b3e      	ldr	r3, [pc, #248]	; (80020d4 <HAL_RCC_OscConfig+0x574>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d118      	bne.n	8002018 <HAL_RCC_OscConfig+0x4b8>
 8001fe6:	4b3b      	ldr	r3, [pc, #236]	; (80020d4 <HAL_RCC_OscConfig+0x574>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a3a      	ldr	r2, [pc, #232]	; (80020d4 <HAL_RCC_OscConfig+0x574>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	f7fe fb29 	bl	8000648 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x4ac>
 8001ffa:	f7fe fb25 	bl	8000648 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x4ac>
 8002008:	2303      	movs	r3, #3
 800200a:	e150      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 800200c:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <HAL_RCC_OscConfig+0x574>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x49a>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d108      	bne.n	8002032 <HAL_RCC_OscConfig+0x4d2>
 8002020:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	4a2a      	ldr	r2, [pc, #168]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002030:	e024      	b.n	800207c <HAL_RCC_OscConfig+0x51c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b05      	cmp	r3, #5
 8002038:	d110      	bne.n	800205c <HAL_RCC_OscConfig+0x4fc>
 800203a:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002040:	4a23      	ldr	r2, [pc, #140]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8002042:	f043 0304 	orr.w	r3, r3, #4
 8002046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800204a:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002050:	4a1f      	ldr	r2, [pc, #124]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800205a:	e00f      	b.n	800207c <HAL_RCC_OscConfig+0x51c>
 800205c:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d016      	beq.n	80020b2 <HAL_RCC_OscConfig+0x552>
 8002084:	f7fe fae0 	bl	8000648 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_OscConfig+0x542>
 800208c:	f7fe fadc 	bl	8000648 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	; 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x542>
 800209e:	2303      	movs	r3, #3
 80020a0:	e105      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_OscConfig+0x570>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0ed      	beq.n	800208c <HAL_RCC_OscConfig+0x52c>
 80020b0:	e019      	b.n	80020e6 <HAL_RCC_OscConfig+0x586>
 80020b2:	f7fe fac9 	bl	8000648 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]
 80020b8:	e00e      	b.n	80020d8 <HAL_RCC_OscConfig+0x578>
 80020ba:	f7fe fac5 	bl	8000648 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d905      	bls.n	80020d8 <HAL_RCC_OscConfig+0x578>
 80020cc:	2303      	movs	r3, #3
 80020ce:	e0ee      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40007000 	.word	0x40007000
 80020d8:	4b77      	ldr	r3, [pc, #476]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1e9      	bne.n	80020ba <HAL_RCC_OscConfig+0x55a>
 80020e6:	7ffb      	ldrb	r3, [r7, #31]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <HAL_RCC_OscConfig+0x598>
 80020ec:	4b72      	ldr	r3, [pc, #456]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	4a71      	ldr	r2, [pc, #452]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 80020f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f6:	6593      	str	r3, [r2, #88]	; 0x58
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80d5 	beq.w	80022ac <HAL_RCC_OscConfig+0x74c>
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b0c      	cmp	r3, #12
 8002106:	f000 808e 	beq.w	8002226 <HAL_RCC_OscConfig+0x6c6>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	2b02      	cmp	r3, #2
 8002110:	d15b      	bne.n	80021ca <HAL_RCC_OscConfig+0x66a>
 8002112:	4b69      	ldr	r3, [pc, #420]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a68      	ldr	r2, [pc, #416]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 8002118:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	f7fe fa93 	bl	8000648 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x5d8>
 8002126:	f7fe fa8f 	bl	8000648 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x5d8>
 8002134:	2303      	movs	r3, #3
 8002136:	e0ba      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8002138:	4b5f      	ldr	r3, [pc, #380]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f0      	bne.n	8002126 <HAL_RCC_OscConfig+0x5c6>
 8002144:	4b5c      	ldr	r3, [pc, #368]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	4b5c      	ldr	r3, [pc, #368]	; (80022bc <HAL_RCC_OscConfig+0x75c>)
 800214a:	4013      	ands	r3, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002154:	3a01      	subs	r2, #1
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	4311      	orrs	r1, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800215e:	0212      	lsls	r2, r2, #8
 8002160:	4311      	orrs	r1, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002166:	0852      	lsrs	r2, r2, #1
 8002168:	3a01      	subs	r2, #1
 800216a:	0552      	lsls	r2, r2, #21
 800216c:	4311      	orrs	r1, r2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002172:	0852      	lsrs	r2, r2, #1
 8002174:	3a01      	subs	r2, #1
 8002176:	0652      	lsls	r2, r2, #25
 8002178:	4311      	orrs	r1, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800217e:	0912      	lsrs	r2, r2, #4
 8002180:	0452      	lsls	r2, r2, #17
 8002182:	430a      	orrs	r2, r1
 8002184:	494c      	ldr	r1, [pc, #304]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 8002186:	4313      	orrs	r3, r2
 8002188:	60cb      	str	r3, [r1, #12]
 800218a:	4b4b      	ldr	r3, [pc, #300]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a4a      	ldr	r2, [pc, #296]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 8002190:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b48      	ldr	r3, [pc, #288]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	4a47      	ldr	r2, [pc, #284]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 800219c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a0:	60d3      	str	r3, [r2, #12]
 80021a2:	f7fe fa51 	bl	8000648 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x65c>
 80021aa:	f7fe fa4d 	bl	8000648 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x65c>
 80021b8:	2303      	movs	r3, #3
 80021ba:	e078      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 80021bc:	4b3e      	ldr	r3, [pc, #248]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x64a>
 80021c8:	e070      	b.n	80022ac <HAL_RCC_OscConfig+0x74c>
 80021ca:	4b3b      	ldr	r3, [pc, #236]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a3a      	ldr	r2, [pc, #232]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 80021d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b38      	ldr	r3, [pc, #224]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <HAL_RCC_OscConfig+0x68e>
 80021e2:	4b35      	ldr	r3, [pc, #212]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	4a34      	ldr	r2, [pc, #208]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 80021e8:	f023 0303 	bic.w	r3, r3, #3
 80021ec:	60d3      	str	r3, [r2, #12]
 80021ee:	4b32      	ldr	r3, [pc, #200]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	4a31      	ldr	r2, [pc, #196]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 80021f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fc:	60d3      	str	r3, [r2, #12]
 80021fe:	f7fe fa23 	bl	8000648 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x6b8>
 8002206:	f7fe fa1f 	bl	8000648 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x6b8>
 8002214:	2303      	movs	r3, #3
 8002216:	e04a      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8002218:	4b27      	ldr	r3, [pc, #156]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x6a6>
 8002224:	e042      	b.n	80022ac <HAL_RCC_OscConfig+0x74c>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_RCC_OscConfig+0x6d2>
 800222e:	2301      	movs	r3, #1
 8002230:	e03d      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 8002232:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <HAL_RCC_OscConfig+0x758>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0203 	and.w	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	429a      	cmp	r2, r3
 8002244:	d130      	bne.n	80022a8 <HAL_RCC_OscConfig+0x748>
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	3b01      	subs	r3, #1
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	429a      	cmp	r2, r3
 8002256:	d127      	bne.n	80022a8 <HAL_RCC_OscConfig+0x748>
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	429a      	cmp	r2, r3
 8002266:	d11f      	bne.n	80022a8 <HAL_RCC_OscConfig+0x748>
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002272:	2a07      	cmp	r2, #7
 8002274:	bf14      	ite	ne
 8002276:	2201      	movne	r2, #1
 8002278:	2200      	moveq	r2, #0
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	4293      	cmp	r3, r2
 800227e:	d113      	bne.n	80022a8 <HAL_RCC_OscConfig+0x748>
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228a:	085b      	lsrs	r3, r3, #1
 800228c:	3b01      	subs	r3, #1
 800228e:	055b      	lsls	r3, r3, #21
 8002290:	429a      	cmp	r2, r3
 8002292:	d109      	bne.n	80022a8 <HAL_RCC_OscConfig+0x748>
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	085b      	lsrs	r3, r3, #1
 80022a0:	3b01      	subs	r3, #1
 80022a2:	065b      	lsls	r3, r3, #25
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_OscConfig+0x74c>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x74e>
 80022ac:	2300      	movs	r3, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	f99d808c 	.word	0xf99d808c

080022c0 <HAL_RCC_ClockConfig>:
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x14>
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0c8      	b.n	8002466 <HAL_RCC_ClockConfig+0x1a6>
 80022d4:	4b66      	ldr	r3, [pc, #408]	; (8002470 <HAL_RCC_ClockConfig+0x1b0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d910      	bls.n	8002304 <HAL_RCC_ClockConfig+0x44>
 80022e2:	4b63      	ldr	r3, [pc, #396]	; (8002470 <HAL_RCC_ClockConfig+0x1b0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 0207 	bic.w	r2, r3, #7
 80022ea:	4961      	ldr	r1, [pc, #388]	; (8002470 <HAL_RCC_ClockConfig+0x1b0>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
 80022f2:	4b5f      	ldr	r3, [pc, #380]	; (8002470 <HAL_RCC_ClockConfig+0x1b0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x44>
 8002300:	2301      	movs	r3, #1
 8002302:	e0b0      	b.n	8002466 <HAL_RCC_ClockConfig+0x1a6>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d04c      	beq.n	80023aa <HAL_RCC_ClockConfig+0xea>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d107      	bne.n	8002328 <HAL_RCC_ClockConfig+0x68>
 8002318:	4b56      	ldr	r3, [pc, #344]	; (8002474 <HAL_RCC_ClockConfig+0x1b4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d121      	bne.n	8002368 <HAL_RCC_ClockConfig+0xa8>
 8002324:	2301      	movs	r3, #1
 8002326:	e09e      	b.n	8002466 <HAL_RCC_ClockConfig+0x1a6>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b02      	cmp	r3, #2
 800232e:	d107      	bne.n	8002340 <HAL_RCC_ClockConfig+0x80>
 8002330:	4b50      	ldr	r3, [pc, #320]	; (8002474 <HAL_RCC_ClockConfig+0x1b4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d115      	bne.n	8002368 <HAL_RCC_ClockConfig+0xa8>
 800233c:	2301      	movs	r3, #1
 800233e:	e092      	b.n	8002466 <HAL_RCC_ClockConfig+0x1a6>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d107      	bne.n	8002358 <HAL_RCC_ClockConfig+0x98>
 8002348:	4b4a      	ldr	r3, [pc, #296]	; (8002474 <HAL_RCC_ClockConfig+0x1b4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_RCC_ClockConfig+0xa8>
 8002354:	2301      	movs	r3, #1
 8002356:	e086      	b.n	8002466 <HAL_RCC_ClockConfig+0x1a6>
 8002358:	4b46      	ldr	r3, [pc, #280]	; (8002474 <HAL_RCC_ClockConfig+0x1b4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0xa8>
 8002364:	2301      	movs	r3, #1
 8002366:	e07e      	b.n	8002466 <HAL_RCC_ClockConfig+0x1a6>
 8002368:	4b42      	ldr	r3, [pc, #264]	; (8002474 <HAL_RCC_ClockConfig+0x1b4>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f023 0203 	bic.w	r2, r3, #3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	493f      	ldr	r1, [pc, #252]	; (8002474 <HAL_RCC_ClockConfig+0x1b4>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
 800237a:	f7fe f965 	bl	8000648 <HAL_GetTick>
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	e00a      	b.n	8002398 <HAL_RCC_ClockConfig+0xd8>
 8002382:	f7fe f961 	bl	8000648 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_ClockConfig+0xd8>
 8002394:	2303      	movs	r3, #3
 8002396:	e066      	b.n	8002466 <HAL_RCC_ClockConfig+0x1a6>
 8002398:	4b36      	ldr	r3, [pc, #216]	; (8002474 <HAL_RCC_ClockConfig+0x1b4>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 020c 	and.w	r2, r3, #12
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d1eb      	bne.n	8002382 <HAL_RCC_ClockConfig+0xc2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x108>
 80023b6:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <HAL_RCC_ClockConfig+0x1b4>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	492c      	ldr	r1, [pc, #176]	; (8002474 <HAL_RCC_ClockConfig+0x1b4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]
 80023c8:	4b29      	ldr	r3, [pc, #164]	; (8002470 <HAL_RCC_ClockConfig+0x1b0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d210      	bcs.n	80023f8 <HAL_RCC_ClockConfig+0x138>
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <HAL_RCC_ClockConfig+0x1b0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 0207 	bic.w	r2, r3, #7
 80023de:	4924      	ldr	r1, [pc, #144]	; (8002470 <HAL_RCC_ClockConfig+0x1b0>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]
 80023e6:	4b22      	ldr	r3, [pc, #136]	; (8002470 <HAL_RCC_ClockConfig+0x1b0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x138>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e036      	b.n	8002466 <HAL_RCC_ClockConfig+0x1a6>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_RCC_ClockConfig+0x156>
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_RCC_ClockConfig+0x1b4>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4918      	ldr	r1, [pc, #96]	; (8002474 <HAL_RCC_ClockConfig+0x1b4>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <HAL_RCC_ClockConfig+0x176>
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <HAL_RCC_ClockConfig+0x1b4>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4910      	ldr	r1, [pc, #64]	; (8002474 <HAL_RCC_ClockConfig+0x1b4>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
 8002436:	f000 f825 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 800243a:	4601      	mov	r1, r0
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <HAL_RCC_ClockConfig+0x1b4>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	4a0c      	ldr	r2, [pc, #48]	; (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 8002448:	5cd3      	ldrb	r3, [r2, r3]
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	fa21 f303 	lsr.w	r3, r1, r3
 8002452:	4a0a      	ldr	r2, [pc, #40]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe f8a8 	bl	80005b0 <HAL_InitTick>
 8002460:	4603      	mov	r3, r0
 8002462:	72fb      	strb	r3, [r7, #11]
 8002464:	7afb      	ldrb	r3, [r7, #11]
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40022000 	.word	0x40022000
 8002474:	40021000 	.word	0x40021000
 8002478:	08008380 	.word	0x08008380
 800247c:	2000001c 	.word	0x2000001c
 8002480:	20000000 	.word	0x20000000

08002484 <HAL_RCC_GetSysClockFreq>:
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	; 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <HAL_RCC_GetSysClockFreq+0x104>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	4b3a      	ldr	r3, [pc, #232]	; (8002588 <HAL_RCC_GetSysClockFreq+0x104>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x34>
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	2b0c      	cmp	r3, #12
 80024b0:	d121      	bne.n	80024f6 <HAL_RCC_GetSysClockFreq+0x72>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d11e      	bne.n	80024f6 <HAL_RCC_GetSysClockFreq+0x72>
 80024b8:	4b33      	ldr	r3, [pc, #204]	; (8002588 <HAL_RCC_GetSysClockFreq+0x104>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d107      	bne.n	80024d4 <HAL_RCC_GetSysClockFreq+0x50>
 80024c4:	4b30      	ldr	r3, [pc, #192]	; (8002588 <HAL_RCC_GetSysClockFreq+0x104>)
 80024c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	e005      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x5c>
 80024d4:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <HAL_RCC_GetSysClockFreq+0x104>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	4a2a      	ldr	r2, [pc, #168]	; (800258c <HAL_RCC_GetSysClockFreq+0x108>)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10d      	bne.n	800250c <HAL_RCC_GetSysClockFreq+0x88>
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	e00a      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x88>
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d102      	bne.n	8002502 <HAL_RCC_GetSysClockFreq+0x7e>
 80024fc:	4b24      	ldr	r3, [pc, #144]	; (8002590 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024fe:	61bb      	str	r3, [r7, #24]
 8002500:	e004      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x88>
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d101      	bne.n	800250c <HAL_RCC_GetSysClockFreq+0x88>
 8002508:	4b22      	ldr	r3, [pc, #136]	; (8002594 <HAL_RCC_GetSysClockFreq+0x110>)
 800250a:	61bb      	str	r3, [r7, #24]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	2b0c      	cmp	r3, #12
 8002510:	d133      	bne.n	800257a <HAL_RCC_GetSysClockFreq+0xf6>
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_RCC_GetSysClockFreq+0x104>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d002      	beq.n	8002528 <HAL_RCC_GetSysClockFreq+0xa4>
 8002522:	2b03      	cmp	r3, #3
 8002524:	d003      	beq.n	800252e <HAL_RCC_GetSysClockFreq+0xaa>
 8002526:	e005      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0xb0>
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_RCC_GetSysClockFreq+0x10c>)
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	e005      	b.n	800253a <HAL_RCC_GetSysClockFreq+0xb6>
 800252e:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_RCC_GetSysClockFreq+0x110>)
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	e002      	b.n	800253a <HAL_RCC_GetSysClockFreq+0xb6>
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	bf00      	nop
 800253a:	4b13      	ldr	r3, [pc, #76]	; (8002588 <HAL_RCC_GetSysClockFreq+0x104>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	091b      	lsrs	r3, r3, #4
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	3301      	adds	r3, #1
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <HAL_RCC_GetSysClockFreq+0x104>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	fb02 f203 	mul.w	r2, r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	fbb2 f3f3 	udiv	r3, r2, r3
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_RCC_GetSysClockFreq+0x104>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0e5b      	lsrs	r3, r3, #25
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	3301      	adds	r3, #1
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	fbb2 f3f3 	udiv	r3, r2, r3
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	4618      	mov	r0, r3
 800257e:	3724      	adds	r7, #36	; 0x24
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	40021000 	.word	0x40021000
 800258c:	08008398 	.word	0x08008398
 8002590:	00f42400 	.word	0x00f42400
 8002594:	007a1200 	.word	0x007a1200

08002598 <HAL_RCC_GetHCLKFreq>:
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <HAL_RCC_GetHCLKFreq+0x14>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	2000001c 	.word	0x2000001c

080025b0 <HAL_RCC_GetPCLK1Freq>:
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	f7ff fff0 	bl	8002598 <HAL_RCC_GetHCLKFreq>
 80025b8:	4601      	mov	r1, r0
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	fa21 f303 	lsr.w	r3, r1, r3
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000
 80025d8:	08008390 	.word	0x08008390

080025dc <HAL_RCC_GetPCLK2Freq>:
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
 80025e0:	f7ff ffda 	bl	8002598 <HAL_RCC_GetHCLKFreq>
 80025e4:	4601      	mov	r1, r0
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	0adb      	lsrs	r3, r3, #11
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4a04      	ldr	r2, [pc, #16]	; (8002604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	fa21 f303 	lsr.w	r3, r1, r3
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000
 8002604:	08008390 	.word	0x08008390

08002608 <RCC_SetFlashLatencyFromMSIRange>:
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	2300      	movs	r3, #0
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <RCC_SetFlashLatencyFromMSIRange+0x20>
 8002620:	f7ff fa3a 	bl	8001a98 <HAL_PWREx_GetVoltageRange>
 8002624:	6178      	str	r0, [r7, #20]
 8002626:	e014      	b.n	8002652 <RCC_SetFlashLatencyFromMSIRange+0x4a>
 8002628:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	4a24      	ldr	r2, [pc, #144]	; (80026c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800262e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002632:	6593      	str	r3, [r2, #88]	; 0x58
 8002634:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f7ff fa2a 	bl	8001a98 <HAL_PWREx_GetVoltageRange>
 8002644:	6178      	str	r0, [r7, #20]
 8002646:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800264c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002650:	6593      	str	r3, [r2, #88]	; 0x58
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002658:	d10b      	bne.n	8002672 <RCC_SetFlashLatencyFromMSIRange+0x6a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b80      	cmp	r3, #128	; 0x80
 800265e:	d919      	bls.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2ba0      	cmp	r3, #160	; 0xa0
 8002664:	d902      	bls.n	800266c <RCC_SetFlashLatencyFromMSIRange+0x64>
 8002666:	2302      	movs	r3, #2
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	e013      	b.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800266c:	2301      	movs	r3, #1
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	e010      	b.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b80      	cmp	r3, #128	; 0x80
 8002676:	d902      	bls.n	800267e <RCC_SetFlashLatencyFromMSIRange+0x76>
 8002678:	2303      	movs	r3, #3
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	e00a      	b.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b80      	cmp	r3, #128	; 0x80
 8002682:	d102      	bne.n	800268a <RCC_SetFlashLatencyFromMSIRange+0x82>
 8002684:	2302      	movs	r3, #2
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	e004      	b.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b70      	cmp	r3, #112	; 0x70
 800268e:	d101      	bne.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8002690:	2301      	movs	r3, #1
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f023 0207 	bic.w	r2, r3, #7
 800269c:	4909      	ldr	r1, [pc, #36]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
 80026a4:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d001      	beq.n	80026b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 80026b6:	2300      	movs	r3, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40022000 	.word	0x40022000

080026c8 <HAL_RCCEx_PeriphCLKConfig>:
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	2300      	movs	r3, #0
 80026d2:	74fb      	strb	r3, [r7, #19]
 80026d4:	2300      	movs	r3, #0
 80026d6:	74bb      	strb	r3, [r7, #18]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d03f      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ec:	d01c      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80026ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f2:	d802      	bhi.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00e      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80026f8:	e01f      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80026fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026fe:	d003      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002700:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002704:	d01c      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002706:	e018      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002708:	4b85      	ldr	r3, [pc, #532]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4a84      	ldr	r2, [pc, #528]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800270e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002712:	60d3      	str	r3, [r2, #12]
 8002714:	e015      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3304      	adds	r3, #4
 800271a:	2100      	movs	r1, #0
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fa89 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 8002722:	4603      	mov	r3, r0
 8002724:	74fb      	strb	r3, [r7, #19]
 8002726:	e00c      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3320      	adds	r3, #32
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fb70 	bl	8002e14 <RCCEx_PLLSAI2_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	74fb      	strb	r3, [r7, #19]
 8002738:	e003      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800273a:	2301      	movs	r3, #1
 800273c:	74fb      	strb	r3, [r7, #19]
 800273e:	e000      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002740:	bf00      	nop
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10b      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002748:	4b75      	ldr	r3, [pc, #468]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002756:	4972      	ldr	r1, [pc, #456]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800275e:	e001      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	74bb      	strb	r3, [r7, #18]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d03f      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002778:	d01c      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800277a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800277e:	d802      	bhi.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00e      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002784:	e01f      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002786:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800278a:	d003      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800278c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002790:	d01c      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002792:	e018      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002794:	4b62      	ldr	r3, [pc, #392]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a61      	ldr	r2, [pc, #388]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800279a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279e:	60d3      	str	r3, [r2, #12]
 80027a0:	e015      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3304      	adds	r3, #4
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 fa43 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	74fb      	strb	r3, [r7, #19]
 80027b2:	e00c      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3320      	adds	r3, #32
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fb2a 	bl	8002e14 <RCCEx_PLLSAI2_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	74fb      	strb	r3, [r7, #19]
 80027c4:	e003      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027c6:	2301      	movs	r3, #1
 80027c8:	74fb      	strb	r3, [r7, #19]
 80027ca:	e000      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027cc:	bf00      	nop
 80027ce:	7cfb      	ldrb	r3, [r7, #19]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10b      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x124>
 80027d4:	4b52      	ldr	r3, [pc, #328]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027e2:	494f      	ldr	r1, [pc, #316]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027ea:	e001      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80027ec:	7cfb      	ldrb	r3, [r7, #19]
 80027ee:	74bb      	strb	r3, [r7, #18]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80a0 	beq.w	800293e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80027fe:	2300      	movs	r3, #0
 8002800:	747b      	strb	r3, [r7, #17]
 8002802:	4b47      	ldr	r3, [pc, #284]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002812:	2300      	movs	r3, #0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00d      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002818:	4b41      	ldr	r3, [pc, #260]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	4a40      	ldr	r2, [pc, #256]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800281e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002822:	6593      	str	r3, [r2, #88]	; 0x58
 8002824:	4b3e      	ldr	r3, [pc, #248]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2301      	movs	r3, #1
 8002832:	747b      	strb	r3, [r7, #17]
 8002834:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a3a      	ldr	r2, [pc, #232]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800283a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	f7fd ff02 	bl	8000648 <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	e009      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x194>
 8002848:	f7fd fefe 	bl	8000648 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d902      	bls.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x194>
 8002856:	2303      	movs	r3, #3
 8002858:	74fb      	strb	r3, [r7, #19]
 800285a:	e005      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800285c:	4b31      	ldr	r3, [pc, #196]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0ef      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d15c      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x260>
 800286e:	4b2c      	ldr	r3, [pc, #176]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01f      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	429a      	cmp	r2, r3
 800288a:	d019      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289e:	4a20      	ldr	r2, [pc, #128]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028a8:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ae:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028b8:	4a19      	ldr	r2, [pc, #100]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d016      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80028ca:	f7fd febd 	bl	8000648 <HAL_GetTick>
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	e00b      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x222>
 80028d2:	f7fd feb9 	bl	8000648 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d902      	bls.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x222>
 80028e4:	2303      	movs	r3, #3
 80028e6:	74fb      	strb	r3, [r7, #19]
 80028e8:	e006      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ec      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10c      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x250>
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800290e:	4904      	ldr	r1, [pc, #16]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002916:	e009      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	74bb      	strb	r3, [r7, #18]
 800291c:	e006      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800291e:	bf00      	nop
 8002920:	40021000 	.word	0x40021000
 8002924:	40007000 	.word	0x40007000
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	74bb      	strb	r3, [r7, #18]
 800292c:	7c7b      	ldrb	r3, [r7, #17]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d105      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8002932:	4ba1      	ldr	r3, [pc, #644]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	4aa0      	ldr	r2, [pc, #640]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293c:	6593      	str	r3, [r2, #88]	; 0x58
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800294a:	4b9b      	ldr	r3, [pc, #620]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	f023 0203 	bic.w	r2, r3, #3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	4997      	ldr	r1, [pc, #604]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800296c:	4b92      	ldr	r3, [pc, #584]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f023 020c 	bic.w	r2, r3, #12
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297a:	498f      	ldr	r1, [pc, #572]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800298e:	4b8a      	ldr	r3, [pc, #552]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	4986      	ldr	r1, [pc, #536]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80029b0:	4b81      	ldr	r3, [pc, #516]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	497e      	ldr	r1, [pc, #504]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x320>
 80029d2:	4b79      	ldr	r3, [pc, #484]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80029d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e0:	4975      	ldr	r1, [pc, #468]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80029f4:	4b70      	ldr	r3, [pc, #448]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	496d      	ldr	r1, [pc, #436]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002a16:	4b68      	ldr	r3, [pc, #416]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a24:	4964      	ldr	r1, [pc, #400]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002a38:	4b5f      	ldr	r3, [pc, #380]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a46:	495c      	ldr	r1, [pc, #368]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8002a5a:	4b57      	ldr	r3, [pc, #348]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a68:	4953      	ldr	r1, [pc, #332]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8002a7c:	4b4e      	ldr	r3, [pc, #312]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	494b      	ldr	r1, [pc, #300]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002a9e:	4b46      	ldr	r3, [pc, #280]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aac:	4942      	ldr	r1, [pc, #264]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d028      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002ac0:	4b3d      	ldr	r3, [pc, #244]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ace:	493a      	ldr	r1, [pc, #232]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ade:	d106      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002ae0:	4b35      	ldr	r3, [pc, #212]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a34      	ldr	r2, [pc, #208]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aea:	60d3      	str	r3, [r2, #12]
 8002aec:	e011      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002af6:	d10c      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3304      	adds	r3, #4
 8002afc:	2101      	movs	r1, #1
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f898 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 8002b04:	4603      	mov	r3, r0
 8002b06:	74fb      	strb	r3, [r7, #19]
 8002b08:	7cfb      	ldrb	r3, [r7, #19]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002b0e:	7cfb      	ldrb	r3, [r7, #19]
 8002b10:	74bb      	strb	r3, [r7, #18]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d028      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b1e:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2c:	4922      	ldr	r1, [pc, #136]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b3c:	d106      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002b3e:	4b1e      	ldr	r3, [pc, #120]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002b44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b48:	60d3      	str	r3, [r2, #12]
 8002b4a:	e011      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 f869 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	74fb      	strb	r3, [r7, #19]
 8002b66:	7cfb      	ldrb	r3, [r7, #19]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b6c:	7cfb      	ldrb	r3, [r7, #19]
 8002b6e:	74bb      	strb	r3, [r7, #18]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d031      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002b7c:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8a:	490b      	ldr	r1, [pc, #44]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b9a:	d10f      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f846 	bl	8002c34 <RCCEx_PLLSAI1_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	74fb      	strb	r3, [r7, #19]
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d016      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002bb2:	7cfb      	ldrb	r3, [r7, #19]
 8002bb4:	74bb      	strb	r3, [r7, #18]
 8002bb6:	e013      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3320      	adds	r3, #32
 8002bca:	2102      	movs	r1, #2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f921 	bl	8002e14 <RCCEx_PLLSAI2_Config>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	74fb      	strb	r3, [r7, #19]
 8002bd6:	7cfb      	ldrb	r3, [r7, #19]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	74bb      	strb	r3, [r7, #18]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x53a>
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bfa:	490d      	ldr	r1, [pc, #52]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x55c>
 8002c0e:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c1c:	4904      	ldr	r1, [pc, #16]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c24:	7cbb      	ldrb	r3, [r7, #18]
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000

08002c34 <RCCEx_PLLSAI1_Config>:
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]
 8002c42:	4b73      	ldr	r3, [pc, #460]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d018      	beq.n	8002c80 <RCCEx_PLLSAI1_Config+0x4c>
 8002c4e:	4b70      	ldr	r3, [pc, #448]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0203 	and.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d10d      	bne.n	8002c7a <RCCEx_PLLSAI1_Config+0x46>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <RCCEx_PLLSAI1_Config+0x46>
 8002c66:	4b6a      	ldr	r3, [pc, #424]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	091b      	lsrs	r3, r3, #4
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d044      	beq.n	8002d04 <RCCEx_PLLSAI1_Config+0xd0>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	e041      	b.n	8002d04 <RCCEx_PLLSAI1_Config+0xd0>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d00c      	beq.n	8002ca2 <RCCEx_PLLSAI1_Config+0x6e>
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d013      	beq.n	8002cb4 <RCCEx_PLLSAI1_Config+0x80>
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d120      	bne.n	8002cd2 <RCCEx_PLLSAI1_Config+0x9e>
 8002c90:	4b5f      	ldr	r3, [pc, #380]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d11d      	bne.n	8002cd8 <RCCEx_PLLSAI1_Config+0xa4>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	e01a      	b.n	8002cd8 <RCCEx_PLLSAI1_Config+0xa4>
 8002ca2:	4b5b      	ldr	r3, [pc, #364]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d116      	bne.n	8002cdc <RCCEx_PLLSAI1_Config+0xa8>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
 8002cb2:	e013      	b.n	8002cdc <RCCEx_PLLSAI1_Config+0xa8>
 8002cb4:	4b56      	ldr	r3, [pc, #344]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10f      	bne.n	8002ce0 <RCCEx_PLLSAI1_Config+0xac>
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <RCCEx_PLLSAI1_Config+0xac>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
 8002cd0:	e006      	b.n	8002ce0 <RCCEx_PLLSAI1_Config+0xac>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
 8002cd6:	e004      	b.n	8002ce2 <RCCEx_PLLSAI1_Config+0xae>
 8002cd8:	bf00      	nop
 8002cda:	e002      	b.n	8002ce2 <RCCEx_PLLSAI1_Config+0xae>
 8002cdc:	bf00      	nop
 8002cde:	e000      	b.n	8002ce2 <RCCEx_PLLSAI1_Config+0xae>
 8002ce0:	bf00      	nop
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10d      	bne.n	8002d04 <RCCEx_PLLSAI1_Config+0xd0>
 8002ce8:	4b49      	ldr	r3, [pc, #292]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6819      	ldr	r1, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	4944      	ldr	r1, [pc, #272]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60cb      	str	r3, [r1, #12]
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d17d      	bne.n	8002e06 <RCCEx_PLLSAI1_Config+0x1d2>
 8002d0a:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a40      	ldr	r2, [pc, #256]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	f7fd fc97 	bl	8000648 <HAL_GetTick>
 8002d1a:	60b8      	str	r0, [r7, #8]
 8002d1c:	e009      	b.n	8002d32 <RCCEx_PLLSAI1_Config+0xfe>
 8002d1e:	f7fd fc93 	bl	8000648 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d902      	bls.n	8002d32 <RCCEx_PLLSAI1_Config+0xfe>
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	73fb      	strb	r3, [r7, #15]
 8002d30:	e005      	b.n	8002d3e <RCCEx_PLLSAI1_Config+0x10a>
 8002d32:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1ef      	bne.n	8002d1e <RCCEx_PLLSAI1_Config+0xea>
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d160      	bne.n	8002e06 <RCCEx_PLLSAI1_Config+0x1d2>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d111      	bne.n	8002d6e <RCCEx_PLLSAI1_Config+0x13a>
 8002d4a:	4b31      	ldr	r3, [pc, #196]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6892      	ldr	r2, [r2, #8]
 8002d5a:	0211      	lsls	r1, r2, #8
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	68d2      	ldr	r2, [r2, #12]
 8002d60:	0912      	lsrs	r2, r2, #4
 8002d62:	0452      	lsls	r2, r2, #17
 8002d64:	430a      	orrs	r2, r1
 8002d66:	492a      	ldr	r1, [pc, #168]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	610b      	str	r3, [r1, #16]
 8002d6c:	e027      	b.n	8002dbe <RCCEx_PLLSAI1_Config+0x18a>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d112      	bne.n	8002d9a <RCCEx_PLLSAI1_Config+0x166>
 8002d74:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6892      	ldr	r2, [r2, #8]
 8002d84:	0211      	lsls	r1, r2, #8
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6912      	ldr	r2, [r2, #16]
 8002d8a:	0852      	lsrs	r2, r2, #1
 8002d8c:	3a01      	subs	r2, #1
 8002d8e:	0552      	lsls	r2, r2, #21
 8002d90:	430a      	orrs	r2, r1
 8002d92:	491f      	ldr	r1, [pc, #124]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	610b      	str	r3, [r1, #16]
 8002d98:	e011      	b.n	8002dbe <RCCEx_PLLSAI1_Config+0x18a>
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002da2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6892      	ldr	r2, [r2, #8]
 8002daa:	0211      	lsls	r1, r2, #8
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6952      	ldr	r2, [r2, #20]
 8002db0:	0852      	lsrs	r2, r2, #1
 8002db2:	3a01      	subs	r2, #1
 8002db4:	0652      	lsls	r2, r2, #25
 8002db6:	430a      	orrs	r2, r1
 8002db8:	4915      	ldr	r1, [pc, #84]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	610b      	str	r3, [r1, #16]
 8002dbe:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a13      	ldr	r2, [pc, #76]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	f7fd fc3d 	bl	8000648 <HAL_GetTick>
 8002dce:	60b8      	str	r0, [r7, #8]
 8002dd0:	e009      	b.n	8002de6 <RCCEx_PLLSAI1_Config+0x1b2>
 8002dd2:	f7fd fc39 	bl	8000648 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d902      	bls.n	8002de6 <RCCEx_PLLSAI1_Config+0x1b2>
 8002de0:	2303      	movs	r3, #3
 8002de2:	73fb      	strb	r3, [r7, #15]
 8002de4:	e005      	b.n	8002df2 <RCCEx_PLLSAI1_Config+0x1be>
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0ef      	beq.n	8002dd2 <RCCEx_PLLSAI1_Config+0x19e>
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d106      	bne.n	8002e06 <RCCEx_PLLSAI1_Config+0x1d2>
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	4903      	ldr	r1, [pc, #12]	; (8002e10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	610b      	str	r3, [r1, #16]
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40021000 	.word	0x40021000

08002e14 <RCCEx_PLLSAI2_Config>:
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
 8002e22:	4b68      	ldr	r3, [pc, #416]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d018      	beq.n	8002e60 <RCCEx_PLLSAI2_Config+0x4c>
 8002e2e:	4b65      	ldr	r3, [pc, #404]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f003 0203 	and.w	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d10d      	bne.n	8002e5a <RCCEx_PLLSAI2_Config+0x46>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <RCCEx_PLLSAI2_Config+0x46>
 8002e46:	4b5f      	ldr	r3, [pc, #380]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	091b      	lsrs	r3, r3, #4
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d044      	beq.n	8002ee4 <RCCEx_PLLSAI2_Config+0xd0>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	73fb      	strb	r3, [r7, #15]
 8002e5e:	e041      	b.n	8002ee4 <RCCEx_PLLSAI2_Config+0xd0>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d00c      	beq.n	8002e82 <RCCEx_PLLSAI2_Config+0x6e>
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d013      	beq.n	8002e94 <RCCEx_PLLSAI2_Config+0x80>
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d120      	bne.n	8002eb2 <RCCEx_PLLSAI2_Config+0x9e>
 8002e70:	4b54      	ldr	r3, [pc, #336]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d11d      	bne.n	8002eb8 <RCCEx_PLLSAI2_Config+0xa4>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
 8002e80:	e01a      	b.n	8002eb8 <RCCEx_PLLSAI2_Config+0xa4>
 8002e82:	4b50      	ldr	r3, [pc, #320]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d116      	bne.n	8002ebc <RCCEx_PLLSAI2_Config+0xa8>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
 8002e92:	e013      	b.n	8002ebc <RCCEx_PLLSAI2_Config+0xa8>
 8002e94:	4b4b      	ldr	r3, [pc, #300]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10f      	bne.n	8002ec0 <RCCEx_PLLSAI2_Config+0xac>
 8002ea0:	4b48      	ldr	r3, [pc, #288]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <RCCEx_PLLSAI2_Config+0xac>
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
 8002eb0:	e006      	b.n	8002ec0 <RCCEx_PLLSAI2_Config+0xac>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
 8002eb6:	e004      	b.n	8002ec2 <RCCEx_PLLSAI2_Config+0xae>
 8002eb8:	bf00      	nop
 8002eba:	e002      	b.n	8002ec2 <RCCEx_PLLSAI2_Config+0xae>
 8002ebc:	bf00      	nop
 8002ebe:	e000      	b.n	8002ec2 <RCCEx_PLLSAI2_Config+0xae>
 8002ec0:	bf00      	nop
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10d      	bne.n	8002ee4 <RCCEx_PLLSAI2_Config+0xd0>
 8002ec8:	4b3e      	ldr	r3, [pc, #248]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6819      	ldr	r1, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	430b      	orrs	r3, r1
 8002ede:	4939      	ldr	r1, [pc, #228]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60cb      	str	r3, [r1, #12]
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d167      	bne.n	8002fba <RCCEx_PLLSAI2_Config+0x1a6>
 8002eea:	4b36      	ldr	r3, [pc, #216]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a35      	ldr	r2, [pc, #212]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	f7fd fba7 	bl	8000648 <HAL_GetTick>
 8002efa:	60b8      	str	r0, [r7, #8]
 8002efc:	e009      	b.n	8002f12 <RCCEx_PLLSAI2_Config+0xfe>
 8002efe:	f7fd fba3 	bl	8000648 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d902      	bls.n	8002f12 <RCCEx_PLLSAI2_Config+0xfe>
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	73fb      	strb	r3, [r7, #15]
 8002f10:	e005      	b.n	8002f1e <RCCEx_PLLSAI2_Config+0x10a>
 8002f12:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1ef      	bne.n	8002efe <RCCEx_PLLSAI2_Config+0xea>
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d14a      	bne.n	8002fba <RCCEx_PLLSAI2_Config+0x1a6>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d111      	bne.n	8002f4e <RCCEx_PLLSAI2_Config+0x13a>
 8002f2a:	4b26      	ldr	r3, [pc, #152]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6892      	ldr	r2, [r2, #8]
 8002f3a:	0211      	lsls	r1, r2, #8
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	68d2      	ldr	r2, [r2, #12]
 8002f40:	0912      	lsrs	r2, r2, #4
 8002f42:	0452      	lsls	r2, r2, #17
 8002f44:	430a      	orrs	r2, r1
 8002f46:	491f      	ldr	r1, [pc, #124]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	614b      	str	r3, [r1, #20]
 8002f4c:	e011      	b.n	8002f72 <RCCEx_PLLSAI2_Config+0x15e>
 8002f4e:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6892      	ldr	r2, [r2, #8]
 8002f5e:	0211      	lsls	r1, r2, #8
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6912      	ldr	r2, [r2, #16]
 8002f64:	0852      	lsrs	r2, r2, #1
 8002f66:	3a01      	subs	r2, #1
 8002f68:	0652      	lsls	r2, r2, #25
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	4915      	ldr	r1, [pc, #84]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	614b      	str	r3, [r1, #20]
 8002f72:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a13      	ldr	r2, [pc, #76]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	f7fd fb63 	bl	8000648 <HAL_GetTick>
 8002f82:	60b8      	str	r0, [r7, #8]
 8002f84:	e009      	b.n	8002f9a <RCCEx_PLLSAI2_Config+0x186>
 8002f86:	f7fd fb5f 	bl	8000648 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d902      	bls.n	8002f9a <RCCEx_PLLSAI2_Config+0x186>
 8002f94:	2303      	movs	r3, #3
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	e005      	b.n	8002fa6 <RCCEx_PLLSAI2_Config+0x192>
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0ef      	beq.n	8002f86 <RCCEx_PLLSAI2_Config+0x172>
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d106      	bne.n	8002fba <RCCEx_PLLSAI2_Config+0x1a6>
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	4903      	ldr	r1, [pc, #12]	; (8002fc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	614b      	str	r3, [r1, #20]
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000

08002fc8 <HAL_RTC_Init>:
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d06f      	beq.n	80030ba <HAL_RTC_Init+0xf2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_RTC_Init+0x2c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2020 	strb.w	r2, [r3, #32]
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f004 fa22 	bl	8007438 <HAL_RTC_MspInit>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	22ca      	movs	r2, #202	; 0xca
 8003002:	625a      	str	r2, [r3, #36]	; 0x24
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2253      	movs	r2, #83	; 0x53
 800300a:	625a      	str	r2, [r3, #36]	; 0x24
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f87f 	bl	8003110 <RTC_EnterInitMode>
 8003012:	4603      	mov	r3, r0
 8003014:	73fb      	strb	r3, [r7, #15]
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d14e      	bne.n	80030ba <HAL_RTC_Init+0xf2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800302a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800302e:	6093      	str	r3, [r2, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6899      	ldr	r1, [r3, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	609a      	str	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68d2      	ldr	r2, [r2, #12]
 8003056:	611a      	str	r2, [r3, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6919      	ldr	r1, [r3, #16]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	041a      	lsls	r2, r3, #16
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	611a      	str	r2, [r3, #16]
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f883 	bl	8003178 <RTC_ExitInitMode>
 8003072:	4603      	mov	r3, r0
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d11e      	bne.n	80030ba <HAL_RTC_Init+0xf2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0203 	bic.w	r2, r2, #3
 800308a:	64da      	str	r2, [r3, #76]	; 0x4c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	22ff      	movs	r2, #255	; 0xff
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d103      	bne.n	80030ba <HAL_RTC_Init+0xf2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_RTC_WaitForSynchro>:
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030da:	60da      	str	r2, [r3, #12]
 80030dc:	f7fd fab4 	bl	8000648 <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	e009      	b.n	80030f8 <HAL_RTC_WaitForSynchro+0x34>
 80030e4:	f7fd fab0 	bl	8000648 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030f2:	d901      	bls.n	80030f8 <HAL_RTC_WaitForSynchro+0x34>
 80030f4:	2303      	movs	r3, #3
 80030f6:	e007      	b.n	8003108 <HAL_RTC_WaitForSynchro+0x44>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0ee      	beq.n	80030e4 <HAL_RTC_WaitForSynchro+0x20>
 8003106:	2300      	movs	r3, #0
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <RTC_EnterInitMode>:
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d120      	bne.n	800316c <RTC_EnterInitMode+0x5c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f04f 32ff 	mov.w	r2, #4294967295
 8003132:	60da      	str	r2, [r3, #12]
 8003134:	f7fd fa88 	bl	8000648 <HAL_GetTick>
 8003138:	60b8      	str	r0, [r7, #8]
 800313a:	e00d      	b.n	8003158 <RTC_EnterInitMode+0x48>
 800313c:	f7fd fa84 	bl	8000648 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800314a:	d905      	bls.n	8003158 <RTC_EnterInitMode+0x48>
 800314c:	2303      	movs	r3, #3
 800314e:	73fb      	strb	r3, [r7, #15]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2203      	movs	r2, #3
 8003154:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d102      	bne.n	800316c <RTC_EnterInitMode+0x5c>
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d1e7      	bne.n	800313c <RTC_EnterInitMode+0x2c>
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <RTC_ExitInitMode>:
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	2300      	movs	r3, #0
 8003182:	73fb      	strb	r3, [r7, #15]
 8003184:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <RTC_ExitInitMode+0x78>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4a19      	ldr	r2, [pc, #100]	; (80031f0 <RTC_ExitInitMode+0x78>)
 800318a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800318e:	60d3      	str	r3, [r2, #12]
 8003190:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <RTC_ExitInitMode+0x78>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10c      	bne.n	80031b6 <RTC_ExitInitMode+0x3e>
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ff91 	bl	80030c4 <HAL_RTC_WaitForSynchro>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01e      	beq.n	80031e6 <RTC_ExitInitMode+0x6e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2203      	movs	r2, #3
 80031ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80031b0:	2303      	movs	r3, #3
 80031b2:	73fb      	strb	r3, [r7, #15]
 80031b4:	e017      	b.n	80031e6 <RTC_ExitInitMode+0x6e>
 80031b6:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <RTC_ExitInitMode+0x78>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4a0d      	ldr	r2, [pc, #52]	; (80031f0 <RTC_ExitInitMode+0x78>)
 80031bc:	f023 0320 	bic.w	r3, r3, #32
 80031c0:	6093      	str	r3, [r2, #8]
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ff7e 	bl	80030c4 <HAL_RTC_WaitForSynchro>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <RTC_ExitInitMode+0x62>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2203      	movs	r2, #3
 80031d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80031d6:	2303      	movs	r3, #3
 80031d8:	73fb      	strb	r3, [r7, #15]
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <RTC_ExitInitMode+0x78>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	4a04      	ldr	r2, [pc, #16]	; (80031f0 <RTC_ExitInitMode+0x78>)
 80031e0:	f043 0320 	orr.w	r3, r3, #32
 80031e4:	6093      	str	r3, [r2, #8]
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40002800 	.word	0x40002800

080031f4 <HAL_RTCEx_SetWakeUpTimer_IT>:
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800320a:	2302      	movs	r3, #2
 800320c:	e07f      	b.n	800330e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2020 	strb.w	r2, [r3, #32]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2202      	movs	r2, #2
 800321a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	22ca      	movs	r2, #202	; 0xca
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2253      	movs	r2, #83	; 0x53
 800322c:	625a      	str	r2, [r3, #36]	; 0x24
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323c:	609a      	str	r2, [r3, #8]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800324e:	60da      	str	r2, [r3, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d120      	bne.n	80032a0 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
 800325e:	f7fd f9f3 	bl	8000648 <HAL_GetTick>
 8003262:	6178      	str	r0, [r7, #20]
 8003264:	e015      	b.n	8003292 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
 8003266:	f7fd f9ef 	bl	8000648 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003274:	d90d      	bls.n	8003292 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	22ff      	movs	r2, #255	; 0xff
 800327c:	625a      	str	r2, [r3, #36]	; 0x24
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2203      	movs	r2, #3
 8003282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2020 	strb.w	r2, [r3, #32]
 800328e:	2303      	movs	r3, #3
 8003290:	e03d      	b.n	800330e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0e2      	beq.n	8003266 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	615a      	str	r2, [r3, #20]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f023 0107 	bic.w	r1, r3, #7
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	4b16      	ldr	r3, [pc, #88]	; (8003318 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a15      	ldr	r2, [pc, #84]	; (8003318 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80032c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	4b13      	ldr	r3, [pc, #76]	; (8003318 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4a12      	ldr	r2, [pc, #72]	; (8003318 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80032ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032d2:	6093      	str	r3, [r2, #8]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	22ff      	movs	r2, #255	; 0xff
 80032fa:	625a      	str	r2, [r3, #36]	; 0x24
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2020 	strb.w	r2, [r3, #32]
 800330c:	2300      	movs	r3, #0
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40010400 	.word	0x40010400

0800331c <HAL_RTCEx_WakeUpTimerIRQHandler>:
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003326:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800332a:	615a      	str	r2, [r3, #20]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00b      	beq.n	8003352 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	b2da      	uxtb	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800334a:	60da      	str	r2, [r3, #12]
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f003 ff13 	bl	8007178 <HAL_RTCEx_WakeUpTimerEventCallback>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40010400 	.word	0x40010400

08003368 <HAL_UART_Init>:
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_UART_Init+0x12>
 8003376:	2301      	movs	r3, #1
 8003378:	e040      	b.n	80033fc <HAL_UART_Init+0x94>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_UART_Init+0x28>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f003 ff78 	bl	8007280 <HAL_UART_MspInit>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2224      	movs	r2, #36	; 0x24
 8003394:	675a      	str	r2, [r3, #116]	; 0x74
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0201 	bic.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fa12 	bl	80037d0 <UART_SetConfig>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_UART_Init+0x4e>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e022      	b.n	80033fc <HAL_UART_Init+0x94>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <HAL_UART_Init+0x5c>
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fd4e 	bl	8003e60 <UART_AdvFeatureConfig>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033d2:	605a      	str	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fdd5 	bl	8003fa4 <UART_CheckIdleState>
 80033fa:	4603      	mov	r3, r0
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_UART_Receive_IT>:
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003416:	2b20      	cmp	r3, #32
 8003418:	f040 808a 	bne.w	8003530 <HAL_UART_Receive_IT+0x12c>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <HAL_UART_Receive_IT+0x24>
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_UART_Receive_IT+0x28>
 8003428:	2301      	movs	r3, #1
 800342a:	e082      	b.n	8003532 <HAL_UART_Receive_IT+0x12e>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_UART_Receive_IT+0x36>
 8003436:	2302      	movs	r3, #2
 8003438:	e07b      	b.n	8003532 <HAL_UART_Receive_IT+0x12e>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	655a      	str	r2, [r3, #84]	; 0x54
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	88fa      	ldrh	r2, [r7, #6]
 800344c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	88fa      	ldrh	r2, [r7, #6]
 8003454:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	661a      	str	r2, [r3, #96]	; 0x60
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003466:	d10e      	bne.n	8003486 <HAL_UART_Receive_IT+0x82>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <HAL_UART_Receive_IT+0x78>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003476:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800347a:	e02d      	b.n	80034d8 <HAL_UART_Receive_IT+0xd4>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	22ff      	movs	r2, #255	; 0xff
 8003480:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003484:	e028      	b.n	80034d8 <HAL_UART_Receive_IT+0xd4>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10d      	bne.n	80034aa <HAL_UART_Receive_IT+0xa6>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d104      	bne.n	80034a0 <HAL_UART_Receive_IT+0x9c>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	22ff      	movs	r2, #255	; 0xff
 800349a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800349e:	e01b      	b.n	80034d8 <HAL_UART_Receive_IT+0xd4>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	227f      	movs	r2, #127	; 0x7f
 80034a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034a8:	e016      	b.n	80034d8 <HAL_UART_Receive_IT+0xd4>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034b2:	d10d      	bne.n	80034d0 <HAL_UART_Receive_IT+0xcc>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d104      	bne.n	80034c6 <HAL_UART_Receive_IT+0xc2>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	227f      	movs	r2, #127	; 0x7f
 80034c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034c4:	e008      	b.n	80034d8 <HAL_UART_Receive_IT+0xd4>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	223f      	movs	r2, #63	; 0x3f
 80034ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034ce:	e003      	b.n	80034d8 <HAL_UART_Receive_IT+0xd4>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	67da      	str	r2, [r3, #124]	; 0x7c
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2222      	movs	r2, #34	; 0x22
 80034e2:	679a      	str	r2, [r3, #120]	; 0x78
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fc:	d107      	bne.n	800350e <HAL_UART_Receive_IT+0x10a>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <HAL_UART_Receive_IT+0x10a>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a0d      	ldr	r2, [pc, #52]	; (8003540 <HAL_UART_Receive_IT+0x13c>)
 800350a:	661a      	str	r2, [r3, #96]	; 0x60
 800350c:	e002      	b.n	8003514 <HAL_UART_Receive_IT+0x110>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4a0c      	ldr	r2, [pc, #48]	; (8003544 <HAL_UART_Receive_IT+0x140>)
 8003512:	661a      	str	r2, [r3, #96]	; 0x60
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	2300      	movs	r3, #0
 800352e:	e000      	b.n	8003532 <HAL_UART_Receive_IT+0x12e>
 8003530:	2302      	movs	r3, #2
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	08004207 	.word	0x08004207
 8003544:	0800415d 	.word	0x0800415d

08003548 <HAL_UART_IRQHandler>:
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	61bb      	str	r3, [r7, #24]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d113      	bne.n	800359e <HAL_UART_IRQHandler+0x56>
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00e      	beq.n	800359e <HAL_UART_IRQHandler+0x56>
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d009      	beq.n	800359e <HAL_UART_IRQHandler+0x56>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 80ff 	beq.w	8003792 <HAL_UART_IRQHandler+0x24a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
 800359c:	e0f9      	b.n	8003792 <HAL_UART_IRQHandler+0x24a>
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80c1 	beq.w	8003728 <HAL_UART_IRQHandler+0x1e0>
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <HAL_UART_IRQHandler+0x74>
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80b6 	beq.w	8003728 <HAL_UART_IRQHandler+0x1e0>
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00e      	beq.n	80035e4 <HAL_UART_IRQHandler+0x9c>
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d009      	beq.n	80035e4 <HAL_UART_IRQHandler+0x9c>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2201      	movs	r2, #1
 80035d6:	621a      	str	r2, [r3, #32]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035dc:	f043 0201 	orr.w	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	67da      	str	r2, [r3, #124]	; 0x7c
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00e      	beq.n	800360c <HAL_UART_IRQHandler+0xc4>
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d009      	beq.n	800360c <HAL_UART_IRQHandler+0xc4>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2202      	movs	r2, #2
 80035fe:	621a      	str	r2, [r3, #32]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003604:	f043 0204 	orr.w	r2, r3, #4
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	67da      	str	r2, [r3, #124]	; 0x7c
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00e      	beq.n	8003634 <HAL_UART_IRQHandler+0xec>
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d009      	beq.n	8003634 <HAL_UART_IRQHandler+0xec>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2204      	movs	r2, #4
 8003626:	621a      	str	r2, [r3, #32]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800362c:	f043 0202 	orr.w	r2, r3, #2
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	67da      	str	r2, [r3, #124]	; 0x7c
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d013      	beq.n	8003666 <HAL_UART_IRQHandler+0x11e>
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d104      	bne.n	8003652 <HAL_UART_IRQHandler+0x10a>
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <HAL_UART_IRQHandler+0x11e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2208      	movs	r2, #8
 8003658:	621a      	str	r2, [r3, #32]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800365e:	f043 0208 	orr.w	r2, r3, #8
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	67da      	str	r2, [r3, #124]	; 0x7c
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 8093 	beq.w	8003796 <HAL_UART_IRQHandler+0x24e>
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00c      	beq.n	8003694 <HAL_UART_IRQHandler+0x14c>
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b00      	cmp	r3, #0
 8003682:	d007      	beq.n	8003694 <HAL_UART_IRQHandler+0x14c>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_UART_IRQHandler+0x14c>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d004      	beq.n	80036b2 <HAL_UART_IRQHandler+0x16a>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d031      	beq.n	8003716 <HAL_UART_IRQHandler+0x1ce>
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fd03 	bl	80040be <UART_EndRxTransfer>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c2:	2b40      	cmp	r3, #64	; 0x40
 80036c4:	d123      	bne.n	800370e <HAL_UART_IRQHandler+0x1c6>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036d4:	609a      	str	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d013      	beq.n	8003706 <HAL_UART_IRQHandler+0x1be>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e2:	4a30      	ldr	r2, [pc, #192]	; (80037a4 <HAL_UART_IRQHandler+0x25c>)
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fd ffd3 	bl	8001696 <HAL_DMA_Abort_IT>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d016      	beq.n	8003724 <HAL_UART_IRQHandler+0x1dc>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003700:	4610      	mov	r0, r2
 8003702:	4798      	blx	r3
 8003704:	e00e      	b.n	8003724 <HAL_UART_IRQHandler+0x1dc>
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f858 	bl	80037bc <HAL_UART_ErrorCallback>
 800370c:	e00a      	b.n	8003724 <HAL_UART_IRQHandler+0x1dc>
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f854 	bl	80037bc <HAL_UART_ErrorCallback>
 8003714:	e006      	b.n	8003724 <HAL_UART_IRQHandler+0x1dc>
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f850 	bl	80037bc <HAL_UART_ErrorCallback>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	67da      	str	r2, [r3, #124]	; 0x7c
 8003722:	e038      	b.n	8003796 <HAL_UART_IRQHandler+0x24e>
 8003724:	bf00      	nop
 8003726:	e036      	b.n	8003796 <HAL_UART_IRQHandler+0x24e>
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00d      	beq.n	800374e <HAL_UART_IRQHandler+0x206>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_UART_IRQHandler+0x206>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003744:	621a      	str	r2, [r3, #32]
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fdb2 	bl	80042b0 <HAL_UARTEx_WakeupCallback>
 800374c:	e026      	b.n	800379c <HAL_UART_IRQHandler+0x254>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00d      	beq.n	8003774 <HAL_UART_IRQHandler+0x22c>
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375e:	2b00      	cmp	r3, #0
 8003760:	d008      	beq.n	8003774 <HAL_UART_IRQHandler+0x22c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003766:	2b00      	cmp	r3, #0
 8003768:	d017      	beq.n	800379a <HAL_UART_IRQHandler+0x252>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
 8003772:	e012      	b.n	800379a <HAL_UART_IRQHandler+0x252>
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00e      	beq.n	800379c <HAL_UART_IRQHandler+0x254>
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003784:	2b00      	cmp	r3, #0
 8003786:	d009      	beq.n	800379c <HAL_UART_IRQHandler+0x254>
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fcce 	bl	800412a <UART_EndTransmit_IT>
 800378e:	bf00      	nop
 8003790:	e004      	b.n	800379c <HAL_UART_IRQHandler+0x254>
 8003792:	bf00      	nop
 8003794:	e002      	b.n	800379c <HAL_UART_IRQHandler+0x254>
 8003796:	bf00      	nop
 8003798:	e000      	b.n	800379c <HAL_UART_IRQHandler+0x254>
 800379a:	bf00      	nop
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	080040ff 	.word	0x080040ff

080037a8 <HAL_UART_TxCpltCallback>:
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_UART_ErrorCallback>:
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <UART_SetConfig>:
 80037d0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80037d4:	b088      	sub	sp, #32
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	2300      	movs	r3, #0
 80037e0:	74fb      	strb	r3, [r7, #19]
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4bac      	ldr	r3, [pc, #688]	; (8003ab8 <UART_SetConfig+0x2e8>)
 8003806:	4013      	ands	r3, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	69f9      	ldr	r1, [r7, #28]
 800380e:	430b      	orrs	r3, r1
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	605a      	str	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4aa2      	ldr	r2, [pc, #648]	; (8003abc <UART_SetConfig+0x2ec>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <UART_SetConfig+0x72>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	4313      	orrs	r3, r2
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69fa      	ldr	r2, [r7, #28]
 8003852:	430a      	orrs	r2, r1
 8003854:	609a      	str	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a99      	ldr	r2, [pc, #612]	; (8003ac0 <UART_SetConfig+0x2f0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d121      	bne.n	80038a4 <UART_SetConfig+0xd4>
 8003860:	4b98      	ldr	r3, [pc, #608]	; (8003ac4 <UART_SetConfig+0x2f4>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b03      	cmp	r3, #3
 800386c:	d816      	bhi.n	800389c <UART_SetConfig+0xcc>
 800386e:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <UART_SetConfig+0xa4>)
 8003870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003874:	08003885 	.word	0x08003885
 8003878:	08003891 	.word	0x08003891
 800387c:	0800388b 	.word	0x0800388b
 8003880:	08003897 	.word	0x08003897
 8003884:	2301      	movs	r3, #1
 8003886:	76fb      	strb	r3, [r7, #27]
 8003888:	e0e8      	b.n	8003a5c <UART_SetConfig+0x28c>
 800388a:	2302      	movs	r3, #2
 800388c:	76fb      	strb	r3, [r7, #27]
 800388e:	e0e5      	b.n	8003a5c <UART_SetConfig+0x28c>
 8003890:	2304      	movs	r3, #4
 8003892:	76fb      	strb	r3, [r7, #27]
 8003894:	e0e2      	b.n	8003a5c <UART_SetConfig+0x28c>
 8003896:	2308      	movs	r3, #8
 8003898:	76fb      	strb	r3, [r7, #27]
 800389a:	e0df      	b.n	8003a5c <UART_SetConfig+0x28c>
 800389c:	2310      	movs	r3, #16
 800389e:	76fb      	strb	r3, [r7, #27]
 80038a0:	bf00      	nop
 80038a2:	e0db      	b.n	8003a5c <UART_SetConfig+0x28c>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a87      	ldr	r2, [pc, #540]	; (8003ac8 <UART_SetConfig+0x2f8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d134      	bne.n	8003918 <UART_SetConfig+0x148>
 80038ae:	4b85      	ldr	r3, [pc, #532]	; (8003ac4 <UART_SetConfig+0x2f4>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	f003 030c 	and.w	r3, r3, #12
 80038b8:	2b0c      	cmp	r3, #12
 80038ba:	d829      	bhi.n	8003910 <UART_SetConfig+0x140>
 80038bc:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <UART_SetConfig+0xf4>)
 80038be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c2:	bf00      	nop
 80038c4:	080038f9 	.word	0x080038f9
 80038c8:	08003911 	.word	0x08003911
 80038cc:	08003911 	.word	0x08003911
 80038d0:	08003911 	.word	0x08003911
 80038d4:	08003905 	.word	0x08003905
 80038d8:	08003911 	.word	0x08003911
 80038dc:	08003911 	.word	0x08003911
 80038e0:	08003911 	.word	0x08003911
 80038e4:	080038ff 	.word	0x080038ff
 80038e8:	08003911 	.word	0x08003911
 80038ec:	08003911 	.word	0x08003911
 80038f0:	08003911 	.word	0x08003911
 80038f4:	0800390b 	.word	0x0800390b
 80038f8:	2300      	movs	r3, #0
 80038fa:	76fb      	strb	r3, [r7, #27]
 80038fc:	e0ae      	b.n	8003a5c <UART_SetConfig+0x28c>
 80038fe:	2302      	movs	r3, #2
 8003900:	76fb      	strb	r3, [r7, #27]
 8003902:	e0ab      	b.n	8003a5c <UART_SetConfig+0x28c>
 8003904:	2304      	movs	r3, #4
 8003906:	76fb      	strb	r3, [r7, #27]
 8003908:	e0a8      	b.n	8003a5c <UART_SetConfig+0x28c>
 800390a:	2308      	movs	r3, #8
 800390c:	76fb      	strb	r3, [r7, #27]
 800390e:	e0a5      	b.n	8003a5c <UART_SetConfig+0x28c>
 8003910:	2310      	movs	r3, #16
 8003912:	76fb      	strb	r3, [r7, #27]
 8003914:	bf00      	nop
 8003916:	e0a1      	b.n	8003a5c <UART_SetConfig+0x28c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a6b      	ldr	r2, [pc, #428]	; (8003acc <UART_SetConfig+0x2fc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d120      	bne.n	8003964 <UART_SetConfig+0x194>
 8003922:	4b68      	ldr	r3, [pc, #416]	; (8003ac4 <UART_SetConfig+0x2f4>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800392c:	2b10      	cmp	r3, #16
 800392e:	d00f      	beq.n	8003950 <UART_SetConfig+0x180>
 8003930:	2b10      	cmp	r3, #16
 8003932:	d802      	bhi.n	800393a <UART_SetConfig+0x16a>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <UART_SetConfig+0x174>
 8003938:	e010      	b.n	800395c <UART_SetConfig+0x18c>
 800393a:	2b20      	cmp	r3, #32
 800393c:	d005      	beq.n	800394a <UART_SetConfig+0x17a>
 800393e:	2b30      	cmp	r3, #48	; 0x30
 8003940:	d009      	beq.n	8003956 <UART_SetConfig+0x186>
 8003942:	e00b      	b.n	800395c <UART_SetConfig+0x18c>
 8003944:	2300      	movs	r3, #0
 8003946:	76fb      	strb	r3, [r7, #27]
 8003948:	e088      	b.n	8003a5c <UART_SetConfig+0x28c>
 800394a:	2302      	movs	r3, #2
 800394c:	76fb      	strb	r3, [r7, #27]
 800394e:	e085      	b.n	8003a5c <UART_SetConfig+0x28c>
 8003950:	2304      	movs	r3, #4
 8003952:	76fb      	strb	r3, [r7, #27]
 8003954:	e082      	b.n	8003a5c <UART_SetConfig+0x28c>
 8003956:	2308      	movs	r3, #8
 8003958:	76fb      	strb	r3, [r7, #27]
 800395a:	e07f      	b.n	8003a5c <UART_SetConfig+0x28c>
 800395c:	2310      	movs	r3, #16
 800395e:	76fb      	strb	r3, [r7, #27]
 8003960:	bf00      	nop
 8003962:	e07b      	b.n	8003a5c <UART_SetConfig+0x28c>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a59      	ldr	r2, [pc, #356]	; (8003ad0 <UART_SetConfig+0x300>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d120      	bne.n	80039b0 <UART_SetConfig+0x1e0>
 800396e:	4b55      	ldr	r3, [pc, #340]	; (8003ac4 <UART_SetConfig+0x2f4>)
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003974:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d00f      	beq.n	800399c <UART_SetConfig+0x1cc>
 800397c:	2b40      	cmp	r3, #64	; 0x40
 800397e:	d802      	bhi.n	8003986 <UART_SetConfig+0x1b6>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <UART_SetConfig+0x1c0>
 8003984:	e010      	b.n	80039a8 <UART_SetConfig+0x1d8>
 8003986:	2b80      	cmp	r3, #128	; 0x80
 8003988:	d005      	beq.n	8003996 <UART_SetConfig+0x1c6>
 800398a:	2bc0      	cmp	r3, #192	; 0xc0
 800398c:	d009      	beq.n	80039a2 <UART_SetConfig+0x1d2>
 800398e:	e00b      	b.n	80039a8 <UART_SetConfig+0x1d8>
 8003990:	2300      	movs	r3, #0
 8003992:	76fb      	strb	r3, [r7, #27]
 8003994:	e062      	b.n	8003a5c <UART_SetConfig+0x28c>
 8003996:	2302      	movs	r3, #2
 8003998:	76fb      	strb	r3, [r7, #27]
 800399a:	e05f      	b.n	8003a5c <UART_SetConfig+0x28c>
 800399c:	2304      	movs	r3, #4
 800399e:	76fb      	strb	r3, [r7, #27]
 80039a0:	e05c      	b.n	8003a5c <UART_SetConfig+0x28c>
 80039a2:	2308      	movs	r3, #8
 80039a4:	76fb      	strb	r3, [r7, #27]
 80039a6:	e059      	b.n	8003a5c <UART_SetConfig+0x28c>
 80039a8:	2310      	movs	r3, #16
 80039aa:	76fb      	strb	r3, [r7, #27]
 80039ac:	bf00      	nop
 80039ae:	e055      	b.n	8003a5c <UART_SetConfig+0x28c>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a47      	ldr	r2, [pc, #284]	; (8003ad4 <UART_SetConfig+0x304>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d124      	bne.n	8003a04 <UART_SetConfig+0x234>
 80039ba:	4b42      	ldr	r3, [pc, #264]	; (8003ac4 <UART_SetConfig+0x2f4>)
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c8:	d012      	beq.n	80039f0 <UART_SetConfig+0x220>
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ce:	d802      	bhi.n	80039d6 <UART_SetConfig+0x206>
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d007      	beq.n	80039e4 <UART_SetConfig+0x214>
 80039d4:	e012      	b.n	80039fc <UART_SetConfig+0x22c>
 80039d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039da:	d006      	beq.n	80039ea <UART_SetConfig+0x21a>
 80039dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039e0:	d009      	beq.n	80039f6 <UART_SetConfig+0x226>
 80039e2:	e00b      	b.n	80039fc <UART_SetConfig+0x22c>
 80039e4:	2300      	movs	r3, #0
 80039e6:	76fb      	strb	r3, [r7, #27]
 80039e8:	e038      	b.n	8003a5c <UART_SetConfig+0x28c>
 80039ea:	2302      	movs	r3, #2
 80039ec:	76fb      	strb	r3, [r7, #27]
 80039ee:	e035      	b.n	8003a5c <UART_SetConfig+0x28c>
 80039f0:	2304      	movs	r3, #4
 80039f2:	76fb      	strb	r3, [r7, #27]
 80039f4:	e032      	b.n	8003a5c <UART_SetConfig+0x28c>
 80039f6:	2308      	movs	r3, #8
 80039f8:	76fb      	strb	r3, [r7, #27]
 80039fa:	e02f      	b.n	8003a5c <UART_SetConfig+0x28c>
 80039fc:	2310      	movs	r3, #16
 80039fe:	76fb      	strb	r3, [r7, #27]
 8003a00:	bf00      	nop
 8003a02:	e02b      	b.n	8003a5c <UART_SetConfig+0x28c>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a2c      	ldr	r2, [pc, #176]	; (8003abc <UART_SetConfig+0x2ec>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d124      	bne.n	8003a58 <UART_SetConfig+0x288>
 8003a0e:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <UART_SetConfig+0x2f4>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1c:	d012      	beq.n	8003a44 <UART_SetConfig+0x274>
 8003a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a22:	d802      	bhi.n	8003a2a <UART_SetConfig+0x25a>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d007      	beq.n	8003a38 <UART_SetConfig+0x268>
 8003a28:	e012      	b.n	8003a50 <UART_SetConfig+0x280>
 8003a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a2e:	d006      	beq.n	8003a3e <UART_SetConfig+0x26e>
 8003a30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a34:	d009      	beq.n	8003a4a <UART_SetConfig+0x27a>
 8003a36:	e00b      	b.n	8003a50 <UART_SetConfig+0x280>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	76fb      	strb	r3, [r7, #27]
 8003a3c:	e00e      	b.n	8003a5c <UART_SetConfig+0x28c>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	76fb      	strb	r3, [r7, #27]
 8003a42:	e00b      	b.n	8003a5c <UART_SetConfig+0x28c>
 8003a44:	2304      	movs	r3, #4
 8003a46:	76fb      	strb	r3, [r7, #27]
 8003a48:	e008      	b.n	8003a5c <UART_SetConfig+0x28c>
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	76fb      	strb	r3, [r7, #27]
 8003a4e:	e005      	b.n	8003a5c <UART_SetConfig+0x28c>
 8003a50:	2310      	movs	r3, #16
 8003a52:	76fb      	strb	r3, [r7, #27]
 8003a54:	bf00      	nop
 8003a56:	e001      	b.n	8003a5c <UART_SetConfig+0x28c>
 8003a58:	2310      	movs	r3, #16
 8003a5a:	76fb      	strb	r3, [r7, #27]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a16      	ldr	r2, [pc, #88]	; (8003abc <UART_SetConfig+0x2ec>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	f040 80fa 	bne.w	8003c5c <UART_SetConfig+0x48c>
 8003a68:	7efb      	ldrb	r3, [r7, #27]
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d836      	bhi.n	8003adc <UART_SetConfig+0x30c>
 8003a6e:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <UART_SetConfig+0x2a4>)
 8003a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a74:	08003a99 	.word	0x08003a99
 8003a78:	08003add 	.word	0x08003add
 8003a7c:	08003aa1 	.word	0x08003aa1
 8003a80:	08003add 	.word	0x08003add
 8003a84:	08003aa7 	.word	0x08003aa7
 8003a88:	08003add 	.word	0x08003add
 8003a8c:	08003add 	.word	0x08003add
 8003a90:	08003add 	.word	0x08003add
 8003a94:	08003aaf 	.word	0x08003aaf
 8003a98:	f7fe fd8a 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	e020      	b.n	8003ae2 <UART_SetConfig+0x312>
 8003aa0:	4b0d      	ldr	r3, [pc, #52]	; (8003ad8 <UART_SetConfig+0x308>)
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	e01d      	b.n	8003ae2 <UART_SetConfig+0x312>
 8003aa6:	f7fe fced 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	e019      	b.n	8003ae2 <UART_SetConfig+0x312>
 8003aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e015      	b.n	8003ae2 <UART_SetConfig+0x312>
 8003ab6:	bf00      	nop
 8003ab8:	efff69f3 	.word	0xefff69f3
 8003abc:	40008000 	.word	0x40008000
 8003ac0:	40013800 	.word	0x40013800
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40004400 	.word	0x40004400
 8003acc:	40004800 	.word	0x40004800
 8003ad0:	40004c00 	.word	0x40004c00
 8003ad4:	40005000 	.word	0x40005000
 8003ad8:	00f42400 	.word	0x00f42400
 8003adc:	2301      	movs	r3, #1
 8003ade:	74fb      	strb	r3, [r7, #19]
 8003ae0:	bf00      	nop
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 81ac 	beq.w	8003e42 <UART_SetConfig+0x672>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d305      	bcc.n	8003b06 <UART_SetConfig+0x336>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	031b      	lsls	r3, r3, #12
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d902      	bls.n	8003b0c <UART_SetConfig+0x33c>
 8003b06:	2301      	movs	r3, #1
 8003b08:	74fb      	strb	r3, [r7, #19]
 8003b0a:	e19a      	b.n	8003e42 <UART_SetConfig+0x672>
 8003b0c:	7efb      	ldrb	r3, [r7, #27]
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	f200 8091 	bhi.w	8003c36 <UART_SetConfig+0x466>
 8003b14:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <UART_SetConfig+0x34c>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b41 	.word	0x08003b41
 8003b20:	08003c37 	.word	0x08003c37
 8003b24:	08003b8d 	.word	0x08003b8d
 8003b28:	08003c37 	.word	0x08003c37
 8003b2c:	08003bc1 	.word	0x08003bc1
 8003b30:	08003c37 	.word	0x08003c37
 8003b34:	08003c37 	.word	0x08003c37
 8003b38:	08003c37 	.word	0x08003c37
 8003b3c:	08003c0d 	.word	0x08003c0d
 8003b40:	f7fe fd36 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8003b44:	4603      	mov	r3, r0
 8003b46:	4619      	mov	r1, r3
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	f04f 0400 	mov.w	r4, #0
 8003b54:	0214      	lsls	r4, r2, #8
 8003b56:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003b5a:	020b      	lsls	r3, r1, #8
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6852      	ldr	r2, [r2, #4]
 8003b60:	0852      	lsrs	r2, r2, #1
 8003b62:	4611      	mov	r1, r2
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	eb13 0b01 	adds.w	fp, r3, r1
 8003b6c:	eb44 0c02 	adc.w	ip, r4, r2
 8003b70:	4658      	mov	r0, fp
 8003b72:	4661      	mov	r1, ip
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f04f 0400 	mov.w	r4, #0
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4623      	mov	r3, r4
 8003b80:	f7fc fb7e 	bl	8000280 <__aeabi_uldivmod>
 8003b84:	4603      	mov	r3, r0
 8003b86:	460c      	mov	r4, r1
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	e057      	b.n	8003c3c <UART_SetConfig+0x46c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	f04f 0400 	mov.w	r4, #0
 8003b96:	49b1      	ldr	r1, [pc, #708]	; (8003e5c <UART_SetConfig+0x68c>)
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	eb13 0b01 	adds.w	fp, r3, r1
 8003ba0:	eb44 0c02 	adc.w	ip, r4, r2
 8003ba4:	4658      	mov	r0, fp
 8003ba6:	4661      	mov	r1, ip
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f04f 0400 	mov.w	r4, #0
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4623      	mov	r3, r4
 8003bb4:	f7fc fb64 	bl	8000280 <__aeabi_uldivmod>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	460c      	mov	r4, r1
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	e03d      	b.n	8003c3c <UART_SetConfig+0x46c>
 8003bc0:	f7fe fc60 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	f04f 0400 	mov.w	r4, #0
 8003bd4:	0214      	lsls	r4, r2, #8
 8003bd6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003bda:	020b      	lsls	r3, r1, #8
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6852      	ldr	r2, [r2, #4]
 8003be0:	0852      	lsrs	r2, r2, #1
 8003be2:	4611      	mov	r1, r2
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	eb13 0b01 	adds.w	fp, r3, r1
 8003bec:	eb44 0c02 	adc.w	ip, r4, r2
 8003bf0:	4658      	mov	r0, fp
 8003bf2:	4661      	mov	r1, ip
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f04f 0400 	mov.w	r4, #0
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4623      	mov	r3, r4
 8003c00:	f7fc fb3e 	bl	8000280 <__aeabi_uldivmod>
 8003c04:	4603      	mov	r3, r0
 8003c06:	460c      	mov	r4, r1
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	e017      	b.n	8003c3c <UART_SetConfig+0x46c>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	085b      	lsrs	r3, r3, #1
 8003c12:	f04f 0400 	mov.w	r4, #0
 8003c16:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003c1a:	f144 0100 	adc.w	r1, r4, #0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f04f 0400 	mov.w	r4, #0
 8003c26:	461a      	mov	r2, r3
 8003c28:	4623      	mov	r3, r4
 8003c2a:	f7fc fb29 	bl	8000280 <__aeabi_uldivmod>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	460c      	mov	r4, r1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	e002      	b.n	8003c3c <UART_SetConfig+0x46c>
 8003c36:	2301      	movs	r3, #1
 8003c38:	74fb      	strb	r3, [r7, #19]
 8003c3a:	bf00      	nop
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c42:	d308      	bcc.n	8003c56 <UART_SetConfig+0x486>
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c4a:	d204      	bcs.n	8003c56 <UART_SetConfig+0x486>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	60da      	str	r2, [r3, #12]
 8003c54:	e0f5      	b.n	8003e42 <UART_SetConfig+0x672>
 8003c56:	2301      	movs	r3, #1
 8003c58:	74fb      	strb	r3, [r7, #19]
 8003c5a:	e0f2      	b.n	8003e42 <UART_SetConfig+0x672>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c64:	d17f      	bne.n	8003d66 <UART_SetConfig+0x596>
 8003c66:	7efb      	ldrb	r3, [r7, #27]
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d85c      	bhi.n	8003d26 <UART_SetConfig+0x556>
 8003c6c:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <UART_SetConfig+0x4a4>)
 8003c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c72:	bf00      	nop
 8003c74:	08003c99 	.word	0x08003c99
 8003c78:	08003cb7 	.word	0x08003cb7
 8003c7c:	08003cd5 	.word	0x08003cd5
 8003c80:	08003d27 	.word	0x08003d27
 8003c84:	08003cf1 	.word	0x08003cf1
 8003c88:	08003d27 	.word	0x08003d27
 8003c8c:	08003d27 	.word	0x08003d27
 8003c90:	08003d27 	.word	0x08003d27
 8003c94:	08003d0f 	.word	0x08003d0f
 8003c98:	f7fe fc8a 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	005a      	lsls	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	085b      	lsrs	r3, r3, #1
 8003ca6:	441a      	add	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	e03a      	b.n	8003d2c <UART_SetConfig+0x55c>
 8003cb6:	f7fe fc91 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	005a      	lsls	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	085b      	lsrs	r3, r3, #1
 8003cc4:	441a      	add	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	e02b      	b.n	8003d2c <UART_SetConfig+0x55c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003cde:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6852      	ldr	r2, [r2, #4]
 8003ce6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	e01d      	b.n	8003d2c <UART_SetConfig+0x55c>
 8003cf0:	f7fe fbc8 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	005a      	lsls	r2, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	441a      	add	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	e00e      	b.n	8003d2c <UART_SetConfig+0x55c>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	e002      	b.n	8003d2c <UART_SetConfig+0x55c>
 8003d26:	2301      	movs	r3, #1
 8003d28:	74fb      	strb	r3, [r7, #19]
 8003d2a:	bf00      	nop
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b0f      	cmp	r3, #15
 8003d30:	d916      	bls.n	8003d60 <UART_SetConfig+0x590>
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d38:	d212      	bcs.n	8003d60 <UART_SetConfig+0x590>
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	f023 030f 	bic.w	r3, r3, #15
 8003d42:	817b      	strh	r3, [r7, #10]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	085b      	lsrs	r3, r3, #1
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	897b      	ldrh	r3, [r7, #10]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	817b      	strh	r3, [r7, #10]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	897a      	ldrh	r2, [r7, #10]
 8003d5c:	60da      	str	r2, [r3, #12]
 8003d5e:	e070      	b.n	8003e42 <UART_SetConfig+0x672>
 8003d60:	2301      	movs	r3, #1
 8003d62:	74fb      	strb	r3, [r7, #19]
 8003d64:	e06d      	b.n	8003e42 <UART_SetConfig+0x672>
 8003d66:	7efb      	ldrb	r3, [r7, #27]
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d859      	bhi.n	8003e20 <UART_SetConfig+0x650>
 8003d6c:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <UART_SetConfig+0x5a4>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003d99 	.word	0x08003d99
 8003d78:	08003db5 	.word	0x08003db5
 8003d7c:	08003dd1 	.word	0x08003dd1
 8003d80:	08003e21 	.word	0x08003e21
 8003d84:	08003ded 	.word	0x08003ded
 8003d88:	08003e21 	.word	0x08003e21
 8003d8c:	08003e21 	.word	0x08003e21
 8003d90:	08003e21 	.word	0x08003e21
 8003d94:	08003e09 	.word	0x08003e09
 8003d98:	f7fe fc0a 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	085b      	lsrs	r3, r3, #1
 8003da4:	441a      	add	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	e038      	b.n	8003e26 <UART_SetConfig+0x656>
 8003db4:	f7fe fc12 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	085b      	lsrs	r3, r3, #1
 8003dc0:	441a      	add	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	e02a      	b.n	8003e26 <UART_SetConfig+0x656>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	085b      	lsrs	r3, r3, #1
 8003dd6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003dda:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6852      	ldr	r2, [r2, #4]
 8003de2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	e01c      	b.n	8003e26 <UART_SetConfig+0x656>
 8003dec:	f7fe fb4a 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	441a      	add	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	e00e      	b.n	8003e26 <UART_SetConfig+0x656>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	085b      	lsrs	r3, r3, #1
 8003e0e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	e002      	b.n	8003e26 <UART_SetConfig+0x656>
 8003e20:	2301      	movs	r3, #1
 8003e22:	74fb      	strb	r3, [r7, #19]
 8003e24:	bf00      	nop
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b0f      	cmp	r3, #15
 8003e2a:	d908      	bls.n	8003e3e <UART_SetConfig+0x66e>
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e32:	d204      	bcs.n	8003e3e <UART_SetConfig+0x66e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	60da      	str	r2, [r3, #12]
 8003e3c:	e001      	b.n	8003e42 <UART_SetConfig+0x672>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	74fb      	strb	r3, [r7, #19]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	661a      	str	r2, [r3, #96]	; 0x60
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	665a      	str	r2, [r3, #100]	; 0x64
 8003e4e:	7cfb      	ldrb	r3, [r7, #19]
 8003e50:	4618      	mov	r0, r3
 8003e52:	3720      	adds	r7, #32
 8003e54:	46bd      	mov	sp, r7
 8003e56:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003e5a:	bf00      	nop
 8003e5c:	f4240000 	.word	0xf4240000

08003e60 <UART_AdvFeatureConfig>:
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <UART_AdvFeatureConfig+0x2a>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <UART_AdvFeatureConfig+0x4c>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	605a      	str	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <UART_AdvFeatureConfig+0x6e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <UART_AdvFeatureConfig+0x90>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <UART_AdvFeatureConfig+0xb2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	609a      	str	r2, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <UART_AdvFeatureConfig+0xd4>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	609a      	str	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01a      	beq.n	8003f76 <UART_AdvFeatureConfig+0x116>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f5e:	d10a      	bne.n	8003f76 <UART_AdvFeatureConfig+0x116>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <UART_AdvFeatureConfig+0x138>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	605a      	str	r2, [r3, #4]
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <UART_CheckIdleState>:
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	67da      	str	r2, [r3, #124]	; 0x7c
 8003fb2:	f7fc fb49 	bl	8000648 <HAL_GetTick>
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d10e      	bne.n	8003fe4 <UART_CheckIdleState+0x40>
 8003fc6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f82a 	bl	800402e <UART_WaitOnFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <UART_CheckIdleState+0x40>
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e020      	b.n	8004026 <UART_CheckIdleState+0x82>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d10e      	bne.n	8004010 <UART_CheckIdleState+0x6c>
 8003ff2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f814 	bl	800402e <UART_WaitOnFlagUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <UART_CheckIdleState+0x6c>
 800400c:	2303      	movs	r3, #3
 800400e:	e00a      	b.n	8004026 <UART_CheckIdleState+0x82>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	675a      	str	r2, [r3, #116]	; 0x74
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	679a      	str	r2, [r3, #120]	; 0x78
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8004024:	2300      	movs	r3, #0
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <UART_WaitOnFlagUntilTimeout>:
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	603b      	str	r3, [r7, #0]
 800403a:	4613      	mov	r3, r2
 800403c:	71fb      	strb	r3, [r7, #7]
 800403e:	e02a      	b.n	8004096 <UART_WaitOnFlagUntilTimeout+0x68>
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004046:	d026      	beq.n	8004096 <UART_WaitOnFlagUntilTimeout+0x68>
 8004048:	f7fc fafe 	bl	8000648 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	429a      	cmp	r2, r3
 8004056:	d302      	bcc.n	800405e <UART_WaitOnFlagUntilTimeout+0x30>
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d11b      	bne.n	8004096 <UART_WaitOnFlagUntilTimeout+0x68>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0201 	bic.w	r2, r2, #1
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2220      	movs	r2, #32
 8004082:	675a      	str	r2, [r3, #116]	; 0x74
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	679a      	str	r2, [r3, #120]	; 0x78
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8004092:	2303      	movs	r3, #3
 8004094:	e00f      	b.n	80040b6 <UART_WaitOnFlagUntilTimeout+0x88>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4013      	ands	r3, r2
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	bf0c      	ite	eq
 80040a6:	2301      	moveq	r3, #1
 80040a8:	2300      	movne	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d0c5      	beq.n	8004040 <UART_WaitOnFlagUntilTimeout+0x12>
 80040b4:	2300      	movs	r3, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <UART_EndRxTransfer>:
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0201 	bic.w	r2, r2, #1
 80040e4:	609a      	str	r2, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	679a      	str	r2, [r3, #120]	; 0x78
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	661a      	str	r2, [r3, #96]	; 0x60
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <UART_DMAAbortOnError>:
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7ff fb4d 	bl	80037bc <HAL_UART_ErrorCallback>
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <UART_EndTransmit_IT>:
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	675a      	str	r2, [r3, #116]	; 0x74
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	665a      	str	r2, [r3, #100]	; 0x64
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff fb2a 	bl	80037a8 <HAL_UART_TxCpltCallback>
 8004154:	bf00      	nop
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <UART_RxISR_8BIT>:
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800416a:	81fb      	strh	r3, [r7, #14]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004170:	2b22      	cmp	r3, #34	; 0x22
 8004172:	d13a      	bne.n	80041ea <UART_RxISR_8BIT+0x8e>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800417a:	81bb      	strh	r3, [r7, #12]
 800417c:	89bb      	ldrh	r3, [r7, #12]
 800417e:	b2d9      	uxtb	r1, r3
 8004180:	89fb      	ldrh	r3, [r7, #14]
 8004182:	b2da      	uxtb	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004188:	400a      	ands	r2, r1
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d123      	bne.n	80041fe <UART_RxISR_8BIT+0xa2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	609a      	str	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2220      	movs	r2, #32
 80041da:	679a      	str	r2, [r3, #120]	; 0x78
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	661a      	str	r2, [r3, #96]	; 0x60
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f984 	bl	80044f0 <HAL_UART_RxCpltCallback>
 80041e8:	e009      	b.n	80041fe <UART_RxISR_8BIT+0xa2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	8b1b      	ldrh	r3, [r3, #24]
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0208 	orr.w	r2, r2, #8
 80041fa:	b292      	uxth	r2, r2
 80041fc:	831a      	strh	r2, [r3, #24]
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <UART_RxISR_16BIT>:
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004214:	81fb      	strh	r3, [r7, #14]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800421a:	2b22      	cmp	r3, #34	; 0x22
 800421c:	d13a      	bne.n	8004294 <UART_RxISR_16BIT+0x8e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004224:	81bb      	strh	r3, [r7, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	89ba      	ldrh	r2, [r7, #12]
 800422e:	89fb      	ldrh	r3, [r7, #14]
 8004230:	4013      	ands	r3, r2
 8004232:	b29a      	uxth	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	801a      	strh	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	1c9a      	adds	r2, r3, #2
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d123      	bne.n	80042a8 <UART_RxISR_16BIT+0xa2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	609a      	str	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	679a      	str	r2, [r3, #120]	; 0x78
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	661a      	str	r2, [r3, #96]	; 0x60
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f92f 	bl	80044f0 <HAL_UART_RxCpltCallback>
 8004292:	e009      	b.n	80042a8 <UART_RxISR_16BIT+0xa2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	8b1b      	ldrh	r3, [r3, #24]
 800429a:	b29a      	uxth	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0208 	orr.w	r2, r2, #8
 80042a4:	b292      	uxth	r2, r2
 80042a6:	831a      	strh	r2, [r3, #24]
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_UARTEx_WakeupCallback>:
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <RSTCtrl_Sigfox>:

UART_BufferData_t UART_RX;
UART_BufferData_t UART_RX3;


void RSTCtrl_Sigfox(uint8_t sValue){
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	71fb      	strb	r3, [r7, #7]
	if(sValue) HAL_GPIO_WritePin(GPIOB, Gpio2_Bus1_Wakeup_Pin, GPIO_PIN_SET);
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <RSTCtrl_Sigfox+0x1c>
 80042d4:	2201      	movs	r2, #1
 80042d6:	2140      	movs	r1, #64	; 0x40
 80042d8:	4806      	ldr	r0, [pc, #24]	; (80042f4 <RSTCtrl_Sigfox+0x30>)
 80042da:	f7fd fbc5 	bl	8001a68 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOB, Gpio2_Bus1_Wakeup_Pin, GPIO_PIN_RESET);
}
 80042de:	e004      	b.n	80042ea <RSTCtrl_Sigfox+0x26>
	else HAL_GPIO_WritePin(GPIOB, Gpio2_Bus1_Wakeup_Pin, GPIO_PIN_RESET);
 80042e0:	2200      	movs	r2, #0
 80042e2:	2140      	movs	r1, #64	; 0x40
 80042e4:	4803      	ldr	r0, [pc, #12]	; (80042f4 <RSTCtrl_Sigfox+0x30>)
 80042e6:	f7fd fbbf 	bl	8001a68 <HAL_GPIO_WritePin>
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	48000400 	.word	0x48000400

080042f8 <RST2Ctrl_Sigfox>:
void RST2Ctrl_Sigfox(uint8_t sValue){
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	71fb      	strb	r3, [r7, #7]
	if(sValue) HAL_GPIO_WritePin(GPIOB, Gpio3_Bus1_Rst_Pin, GPIO_PIN_SET);
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d006      	beq.n	8004316 <RST2Ctrl_Sigfox+0x1e>
 8004308:	2201      	movs	r2, #1
 800430a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800430e:	4807      	ldr	r0, [pc, #28]	; (800432c <RST2Ctrl_Sigfox+0x34>)
 8004310:	f7fd fbaa 	bl	8001a68 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOB, Gpio3_Bus1_Rst_Pin, GPIO_PIN_RESET);
}
 8004314:	e005      	b.n	8004322 <RST2Ctrl_Sigfox+0x2a>
	else HAL_GPIO_WritePin(GPIOB, Gpio3_Bus1_Rst_Pin, GPIO_PIN_RESET);
 8004316:	2200      	movs	r2, #0
 8004318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800431c:	4803      	ldr	r0, [pc, #12]	; (800432c <RST2Ctrl_Sigfox+0x34>)
 800431e:	f7fd fba3 	bl	8001a68 <HAL_GPIO_WritePin>
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	48000400 	.word	0x48000400

08004330 <PutCharWrapperUart_3>:
/*****Funci�n TX para envolver(Wrap) con Libreria sigfox********/
void UART_SIGFOX_TX_STM(void * Sp, char c){
	HAL_UART_Transmit(&huart2,(uint8_t*)&c,USART_TX_AMOUNT_BYTES,USART_TIMEOUT);
}
/* BUS2 UART3*/
void PutCharWrapperUart_3(void *sp, const char c){
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
	while((__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) ? SET : RESET) == RESET) {}
 800433c:	bf00      	nop
 800433e:	4b09      	ldr	r3, [pc, #36]	; (8004364 <PutCharWrapperUart_3+0x34>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b40      	cmp	r3, #64	; 0x40
 800434a:	d1f8      	bne.n	800433e <PutCharWrapperUart_3+0xe>
	huart3.Instance->TDR = (c & (uint8_t)0xFFU);
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <PutCharWrapperUart_3+0x34>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	78fa      	ldrb	r2, [r7, #3]
 8004352:	b292      	uxth	r2, r2
 8004354:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	200001e0 	.word	0x200001e0

08004368 <PutCharWrapperUart_1>:
}



/*Transmitir uart 1 no hal*/ /*Bus 1 */
void PutCharWrapperUart_1(void *sp, const char c){
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
	while((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TC) ? SET : RESET) == RESET) {}
 8004374:	bf00      	nop
 8004376:	4b09      	ldr	r3, [pc, #36]	; (800439c <PutCharWrapperUart_1+0x34>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004380:	2b40      	cmp	r3, #64	; 0x40
 8004382:	d1f8      	bne.n	8004376 <PutCharWrapperUart_1+0xe>
	huart2.Instance->TDR = (c & (uint8_t)0xFFU);
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <PutCharWrapperUart_1+0x34>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	78fa      	ldrb	r2, [r7, #3]
 800438a:	b292      	uxth	r2, r2
 800438c:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000428 	.word	0x20000428

080043a0 <PutCharWrapperUart_2>:

void PutCharWrapperUart_2(void *sp, const char c){
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	70fb      	strb	r3, [r7, #3]
	while((__HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_TC) ? SET : RESET) == RESET) {}
 80043ac:	bf00      	nop
 80043ae:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <PutCharWrapperUart_2+0x34>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b8:	2b40      	cmp	r3, #64	; 0x40
 80043ba:	d1f8      	bne.n	80043ae <PutCharWrapperUart_2+0xe>
	hlpuart1.Instance->TDR = (c & (uint8_t)0xFFU);
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <PutCharWrapperUart_2+0x34>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	78fa      	ldrb	r2, [r7, #3]
 80043c2:	b292      	uxth	r2, r2
 80043c4:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	200002e0 	.word	0x200002e0

080043d8 <PutStringWrapperUart_2>:


void PutStringWrapperUart_2(void *sp, const char *s){
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
	while(*s){
 80043e2:	e007      	b.n	80043f4 <PutStringWrapperUart_2+0x1c>
		PutCharWrapperUart_2(NULL,*s++);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	603a      	str	r2, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	4619      	mov	r1, r3
 80043ee:	2000      	movs	r0, #0
 80043f0:	f7ff ffd6 	bl	80043a0 <PutCharWrapperUart_2>
	while(*s){
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f3      	bne.n	80043e4 <PutStringWrapperUart_2+0xc>
	}
}
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <PrintStringVar>:

/*Tipo de datos*/
tipo_t xtypes;

/*Enviar por tx Debug var ************************************************/
void PrintStringVar(UART_HandleTypeDef *huart,uint8_t *Str, uint16_t  Variable){
 8004404:	b5b0      	push	{r4, r5, r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	4613      	mov	r3, r2
 8004410:	80fb      	strh	r3, [r7, #6]
 8004412:	466b      	mov	r3, sp
 8004414:	461d      	mov	r5, r3
	uint8_t length;
	length = strlen((const char *)(Str) );
 8004416:	68b8      	ldr	r0, [r7, #8]
 8004418:	f7fb feda 	bl	80001d0 <strlen>
 800441c:	4603      	mov	r3, r0
 800441e:	77fb      	strb	r3, [r7, #31]
	uint8_t Buf[length];
 8004420:	7ff8      	ldrb	r0, [r7, #31]
 8004422:	4603      	mov	r3, r0
 8004424:	3b01      	subs	r3, #1
 8004426:	61bb      	str	r3, [r7, #24]
 8004428:	b2c1      	uxtb	r1, r0
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	f04f 0400 	mov.w	r4, #0
 8004436:	00d4      	lsls	r4, r2, #3
 8004438:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800443c:	00cb      	lsls	r3, r1, #3
 800443e:	b2c1      	uxtb	r1, r0
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	f04f 0400 	mov.w	r4, #0
 800444c:	00d4      	lsls	r4, r2, #3
 800444e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004452:	00cb      	lsls	r3, r1, #3
 8004454:	4603      	mov	r3, r0
 8004456:	3307      	adds	r3, #7
 8004458:	08db      	lsrs	r3, r3, #3
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	ebad 0d03 	sub.w	sp, sp, r3
 8004460:	466b      	mov	r3, sp
 8004462:	3300      	adds	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
	memset((void *)Buf,0,sizeof(Buf));
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	4602      	mov	r2, r0
 800446a:	2100      	movs	r1, #0
 800446c:	4618      	mov	r0, r3
 800446e:	f003 f91c 	bl	80076aa <memset>
	sprintf((char *)Buf,(const char *)(Str),Variable);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	88fa      	ldrh	r2, [r7, #6]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	4618      	mov	r0, r3
 800447a:	f003 f91f 	bl	80076bc <siprintf>
	PutStringWrapperUart_2(NULL, Buf);
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	4619      	mov	r1, r3
 8004482:	2000      	movs	r0, #0
 8004484:	f7ff ffa8 	bl	80043d8 <PutStringWrapperUart_2>
 8004488:	46ad      	mov	sp, r5
	//HAL_UART_Transmit(huart,(uint8_t *)Buf,sizeof(Buf),USART_TIMEOUT);
}
 800448a:	bf00      	nop
 800448c:	3720      	adds	r7, #32
 800448e:	46bd      	mov	sp, r7
 8004490:	bdb0      	pop	{r4, r5, r7, pc}

08004492 <DiscrimateFrameType>:
	//HAL_UART_Transmit(huart,pData,length,USART_TIMEOUT);
}


/** Funcion que decodifica la trama entrante *******************************/
WSSFM1XRX_DL_Return_t DiscrimateFrameType(WSSFM1XRXConfig_t *obj){
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
	uint16_t tempReg;

	/* Discriminate the frame type */
	switch(obj->DL_NumericFrame[WSSFM1XRX_DL_CTRLREG] >> 4){ /* 4 most significant bits */
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044a0:	091b      	lsrs	r3, r3, #4
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b05      	cmp	r3, #5
 80044a6:	d000      	beq.n	80044aa <DiscrimateFrameType+0x18>
		}

		break;

	default:
		break;
 80044a8:	e01a      	b.n	80044e0 <DiscrimateFrameType+0x4e>
		tempReg = (obj->DL_NumericFrame[WSSFM1XRX_DL_TREP] << 8) | obj->DL_NumericFrame[WSSFM1XRX_DL_TREP + 1]; 	/* junto los 2 bytes en 1*/
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80044b0:	021b      	lsls	r3, r3, #8
 80044b2:	b21a      	sxth	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80044ba:	b21b      	sxth	r3, r3
 80044bc:	4313      	orrs	r3, r2
 80044be:	b21b      	sxth	r3, r3
 80044c0:	81fb      	strh	r3, [r7, #14]
		if(tempReg >= WSSFM1XRX_DL_MIN_REPORT_TIME){
 80044c2:	89fb      	ldrh	r3, [r7, #14]
 80044c4:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 80044c8:	d909      	bls.n	80044de <DiscrimateFrameType+0x4c>
			if(tempReg != obj->UL_ReportTimeS){ /*Si el dato es diferente*/
 80044ca:	89fa      	ldrh	r2, [r7, #14]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d002      	beq.n	80044da <DiscrimateFrameType+0x48>
				obj->UL_ReportTimeS = tempReg;
 80044d4:	89fa      	ldrh	r2, [r7, #14]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	621a      	str	r2, [r3, #32]
			return WSSFM1XRX_DL_TIME_OK;
 80044da:	2304      	movs	r3, #4
 80044dc:	e001      	b.n	80044e2 <DiscrimateFrameType+0x50>
		break;
 80044de:	bf00      	nop
	}/* End switch */

	return WSSFM1XRX_DL_SUCCESS;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
	...

080044f0 <HAL_UART_RxCpltCallback>:
/*
===================================================================================
		 	 ### Funcion recibe por interrupcion de recepcion
===================================================================================
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]

	//sigfoxISRRX(&SigfoxModule, UART_RX.Data);
	//qResponseISRHandler(&ResponseObject,rxbyte);

	if(huart->Instance == USART2){
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <HAL_UART_RxCpltCallback+0x84>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d10a      	bne.n	8004518 <HAL_UART_RxCpltCallback+0x28>
		WSSFM1XRX_ISRRX(&SigfoxModule,UART_RX.Data);  // queda almacenado en  UART_RX.Data;
 8004502:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <HAL_UART_RxCpltCallback+0x88>)
 8004504:	7e9b      	ldrb	r3, [r3, #26]
 8004506:	4619      	mov	r1, r3
 8004508:	481c      	ldr	r0, [pc, #112]	; (800457c <HAL_UART_RxCpltCallback+0x8c>)
 800450a:	f000 fa5f 	bl	80049cc <WSSFM1XRX_ISRRX>
		HAL_UART_Receive_IT( &huart2,(uint8_t *)&UART_RX.Data,USART_RX_AMOUNT_BYTES);
 800450e:	2201      	movs	r2, #1
 8004510:	491b      	ldr	r1, [pc, #108]	; (8004580 <HAL_UART_RxCpltCallback+0x90>)
 8004512:	481c      	ldr	r0, [pc, #112]	; (8004584 <HAL_UART_RxCpltCallback+0x94>)
 8004514:	f7fe ff76 	bl	8003404 <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART3){
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a1a      	ldr	r2, [pc, #104]	; (8004588 <HAL_UART_RxCpltCallback+0x98>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d123      	bne.n	800456a <HAL_UART_RxCpltCallback+0x7a>
		qResponseISRHandler(&ResponseObject,UART_RX3.Data);
 8004522:	4b1a      	ldr	r3, [pc, #104]	; (800458c <HAL_UART_RxCpltCallback+0x9c>)
 8004524:	7e9b      	ldrb	r3, [r3, #26]
 8004526:	4619      	mov	r1, r3
 8004528:	4819      	ldr	r0, [pc, #100]	; (8004590 <HAL_UART_RxCpltCallback+0xa0>)
 800452a:	f001 fbf0 	bl	8005d0e <qResponseISRHandler>
		if(UART_RX3.Index < sizeof(UART_RX3.Buffer)-1){
 800452e:	4b17      	ldr	r3, [pc, #92]	; (800458c <HAL_UART_RxCpltCallback+0x9c>)
 8004530:	7e5b      	ldrb	r3, [r3, #25]
 8004532:	2b17      	cmp	r3, #23
 8004534:	d811      	bhi.n	800455a <HAL_UART_RxCpltCallback+0x6a>
			UART_RX3.Buffer[UART_RX3.Index++] = UART_RX3.Data;
 8004536:	4b15      	ldr	r3, [pc, #84]	; (800458c <HAL_UART_RxCpltCallback+0x9c>)
 8004538:	7e5b      	ldrb	r3, [r3, #25]
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	b2d1      	uxtb	r1, r2
 800453e:	4a13      	ldr	r2, [pc, #76]	; (800458c <HAL_UART_RxCpltCallback+0x9c>)
 8004540:	7651      	strb	r1, [r2, #25]
 8004542:	461a      	mov	r2, r3
 8004544:	4b11      	ldr	r3, [pc, #68]	; (800458c <HAL_UART_RxCpltCallback+0x9c>)
 8004546:	7e99      	ldrb	r1, [r3, #26]
 8004548:	4b10      	ldr	r3, [pc, #64]	; (800458c <HAL_UART_RxCpltCallback+0x9c>)
 800454a:	5499      	strb	r1, [r3, r2]
			UART_RX3.Buffer[UART_RX3.Index] = '\0';
 800454c:	4b0f      	ldr	r3, [pc, #60]	; (800458c <HAL_UART_RxCpltCallback+0x9c>)
 800454e:	7e5b      	ldrb	r3, [r3, #25]
 8004550:	461a      	mov	r2, r3
 8004552:	4b0e      	ldr	r3, [pc, #56]	; (800458c <HAL_UART_RxCpltCallback+0x9c>)
 8004554:	2100      	movs	r1, #0
 8004556:	5499      	strb	r1, [r3, r2]
 8004558:	e002      	b.n	8004560 <HAL_UART_RxCpltCallback+0x70>
		}else UART_RX3.Index = 0;
 800455a:	4b0c      	ldr	r3, [pc, #48]	; (800458c <HAL_UART_RxCpltCallback+0x9c>)
 800455c:	2200      	movs	r2, #0
 800455e:	765a      	strb	r2, [r3, #25]
		HAL_UART_Receive_IT( &huart3,(uint8_t *)&UART_RX3.Data,USART_RX_AMOUNT_BYTES);
 8004560:	2201      	movs	r2, #1
 8004562:	490c      	ldr	r1, [pc, #48]	; (8004594 <HAL_UART_RxCpltCallback+0xa4>)
 8004564:	480c      	ldr	r0, [pc, #48]	; (8004598 <HAL_UART_RxCpltCallback+0xa8>)
 8004566:	f7fe ff4d 	bl	8003404 <HAL_UART_Receive_IT>
	}
}
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40004400 	.word	0x40004400
 8004578:	200004a8 	.word	0x200004a8
 800457c:	200004c8 	.word	0x200004c8
 8004580:	200004c2 	.word	0x200004c2
 8004584:	20000428 	.word	0x20000428
 8004588:	40004800 	.word	0x40004800
 800458c:	200001a8 	.word	0x200001a8
 8004590:	200001c8 	.word	0x200001c8
 8004594:	200001c2 	.word	0x200001c2
 8004598:	200001e0 	.word	0x200001e0

0800459c <ProjectInformation>:

void ProjectInformation(void) {
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0

	PutStringWrapperUart_2(NULL,"\r\n=========================================\r\n");
 80045a0:	490e      	ldr	r1, [pc, #56]	; (80045dc <ProjectInformation+0x40>)
 80045a2:	2000      	movs	r0, #0
 80045a4:	f7ff ff18 	bl	80043d8 <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, APP_STRING);
 80045a8:	490d      	ldr	r1, [pc, #52]	; (80045e0 <ProjectInformation+0x44>)
 80045aa:	2000      	movs	r0, #0
 80045ac:	f7ff ff14 	bl	80043d8 <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, INF_STRING);
 80045b0:	490c      	ldr	r1, [pc, #48]	; (80045e4 <ProjectInformation+0x48>)
 80045b2:	2000      	movs	r0, #0
 80045b4:	f7ff ff10 	bl	80043d8 <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, REV_STRING);
 80045b8:	490b      	ldr	r1, [pc, #44]	; (80045e8 <ProjectInformation+0x4c>)
 80045ba:	2000      	movs	r0, #0
 80045bc:	f7ff ff0c 	bl	80043d8 <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, AUT_STRING);
 80045c0:	490a      	ldr	r1, [pc, #40]	; (80045ec <ProjectInformation+0x50>)
 80045c2:	2000      	movs	r0, #0
 80045c4:	f7ff ff08 	bl	80043d8 <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, URL_STRING);
 80045c8:	4909      	ldr	r1, [pc, #36]	; (80045f0 <ProjectInformation+0x54>)
 80045ca:	2000      	movs	r0, #0
 80045cc:	f7ff ff04 	bl	80043d8 <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL,"=========================================\r\n\r\n");
 80045d0:	4908      	ldr	r1, [pc, #32]	; (80045f4 <ProjectInformation+0x58>)
 80045d2:	2000      	movs	r0, #0
 80045d4:	f7ff ff00 	bl	80043d8 <PutStringWrapperUart_2>
}
 80045d8:	bf00      	nop
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	08007f2c 	.word	0x08007f2c
 80045e0:	08007f5c 	.word	0x08007f5c
 80045e4:	08007f94 	.word	0x08007f94
 80045e8:	08007fb8 	.word	0x08007fb8
 80045ec:	08007fc8 	.word	0x08007fc8
 80045f0:	08007fec 	.word	0x08007fec
 80045f4:	08008010 	.word	0x08008010

080045f8 <WSSFM1XRX_Init>:
 * @note Example :
 * 		SigfoxModule.StatusFlag = WSSFM1XRX_Init(&SigfoxModule, RSTCtrl_Sigfox, RST2Ctrl_Sigfox, UART_SIGFOX_TX_STM, UART_SIGFOX_RX_STM ,WSSFM1XRX_UL_RCZ4,NULL,GetTick_ms);
 * @param obj Structure containing all data from the Sigfox module.
 * @return Operation result in the form WSSFM1XRX_Return_t.
 */
WSSFM1XRX_Return_t WSSFM1XRX_Init(WSSFM1XRXConfig_t *obj, DigitalFcn_t Reset, DigitalFcn_t Reset2, TxFnc_t Tx_Wssfm1xrx,WSSFM1XRX_FreqUL_t Frequency_Tx, WSSFM1XRX_Callback_t DownlinkCallback ,TickReadFcn_t TickRead,char* Input , uint8_t SizeInput, uint8_t MaxNumberRetries){
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	603b      	str	r3, [r7, #0]
	obj->RST=Reset;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	601a      	str	r2, [r3, #0]
	obj->RST2=Reset2;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	605a      	str	r2, [r3, #4]
	obj->TX_WSSFM1XRX=Tx_Wssfm1xrx;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	609a      	str	r2, [r3, #8]
	obj->CallbackDownlink = DownlinkCallback;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	611a      	str	r2, [r3, #16]
	obj->TICK_READ = TickRead;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a3a      	ldr	r2, [r7, #32]
 8004622:	60da      	str	r2, [r3, #12]
	obj->RxReady=SF_FALSE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	765a      	strb	r2, [r3, #25]
	obj->RxIndex=0;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	769a      	strb	r2, [r3, #26]
	obj->Frequency=Frequency_Tx;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	7e3a      	ldrb	r2, [r7, #24]
 8004634:	771a      	strb	r2, [r3, #28]
	obj->RxFrame = Input; 
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463a:	615a      	str	r2, [r3, #20]
	obj->SizeBuffRx = SizeInput;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004642:	761a      	strb	r2, [r3, #24]
	obj->State_Api = WSSFM1XRX_IDLE; /**/
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	obj->State_W = WSSFM1XRX_W_IDLE; /*State Idle function Wait non blocking*/
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	memset( (void *) obj->RxFrame,0,obj->SizeBuffRx);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6958      	ldr	r0, [r3, #20]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	7e1b      	ldrb	r3, [r3, #24]
 800465c:	461a      	mov	r2, r3
 800465e:	2100      	movs	r1, #0
 8004660:	f003 f823 	bl	80076aa <memset>
	obj->MaxNumberRetries = MaxNumberRetries;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800466a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	return WSSFM1XRX_INIT_OK;
 800466e:	2305      	movs	r3, #5
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <WSSFM1XRX_Wait_NonBlock>:
 * @param time in mili second.
 * @return Operation result in the form WSSFM1XRX_Return_t:
 * 			<< WSSFM1XRX_TIMEOUT >> if the time has expired
 * 			<< WSSFM1XRX_WAITING >> if the time has not expired
 */
WSSFM1XRX_Return_t WSSFM1XRX_Wait_NonBlock(WSSFM1XRXConfig_t *obj, uint32_t msec){
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
	static uint8_t RetValue;
	static uint32_t WSSFM1XRX_StartTick = 0;
	if(obj->State_W == WSSFM1XRX_W_IDLE ){
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004688:	2b02      	cmp	r3, #2
 800468a:	d10f      	bne.n	80046ac <WSSFM1XRX_Wait_NonBlock+0x34>
		RetValue = WSSFM1XRX_WAITING ;
 800468c:	4b17      	ldr	r3, [pc, #92]	; (80046ec <WSSFM1XRX_Wait_NonBlock+0x74>)
 800468e:	2201      	movs	r2, #1
 8004690:	701a      	strb	r2, [r3, #0]
		WSSFM1XRX_StartTick = 0;
 8004692:	4b17      	ldr	r3, [pc, #92]	; (80046f0 <WSSFM1XRX_Wait_NonBlock+0x78>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
		WSSFM1XRX_StartTick = obj->TICK_READ() ;/*tickRead_ms();*/
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4798      	blx	r3
 800469e:	4602      	mov	r2, r0
 80046a0:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <WSSFM1XRX_Wait_NonBlock+0x78>)
 80046a2:	601a      	str	r2, [r3, #0]
		obj->State_W = WSSFM1XRX_W_RUNNING ;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2203      	movs	r2, #3
 80046a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
	if( ( obj->TICK_READ() - WSSFM1XRX_StartTick) > msec ){ 
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	4798      	blx	r3
 80046b2:	4602      	mov	r2, r0
 80046b4:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <WSSFM1XRX_Wait_NonBlock+0x78>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d20b      	bcs.n	80046d8 <WSSFM1XRX_Wait_NonBlock+0x60>
		obj->State_W = WSSFM1XRX_W_IDLE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		obj->State_Api = WSSFM1XRX_IDLE; /*Cuando vence el tiempo mando el comando de nuevo*/
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		RetValue = WSSFM1XRX_TIMEOUT ;
 80046d0:	4b06      	ldr	r3, [pc, #24]	; (80046ec <WSSFM1XRX_Wait_NonBlock+0x74>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	e002      	b.n	80046de <WSSFM1XRX_Wait_NonBlock+0x66>
	}else RetValue = WSSFM1XRX_WAITING;
 80046d8:	4b04      	ldr	r3, [pc, #16]	; (80046ec <WSSFM1XRX_Wait_NonBlock+0x74>)
 80046da:	2201      	movs	r2, #1
 80046dc:	701a      	strb	r2, [r3, #0]
	return RetValue;
 80046de:	4b03      	ldr	r3, [pc, #12]	; (80046ec <WSSFM1XRX_Wait_NonBlock+0x74>)
 80046e0:	781b      	ldrb	r3, [r3, #0]

}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	200000d3 	.word	0x200000d3
 80046f0:	200000d4 	.word	0x200000d4

080046f4 <WSSFM1XRX_AskChannels>:
 * 		WSSFM1XRX_AskChannels(&SigfoxModule);
 * @param obj Structure containing all data from the Sigfox module.
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return Pointer to reception buffer
 */
WSSFM1XRX_Return_t WSSFM1XRX_AskChannels(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait,Channels_t *Channels ){
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
	WSSFM1XRX_Return_t RetVal ;
	char* rspPtr;
	RetVal = WSSFM1XRX_SendRawMessage(obj,"AT$GI?\r",NULL,NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP);
 8004700:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	2300      	movs	r3, #0
 800470c:	2200      	movs	r2, #0
 800470e:	4913      	ldr	r1, [pc, #76]	; (800475c <WSSFM1XRX_AskChannels+0x68>)
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f903 	bl	800491c <WSSFM1XRX_SendRawMessage>
 8004716:	4603      	mov	r3, r0
 8004718:	75fb      	strb	r3, [r7, #23]

	if(WSSFM1XRX_OK_RESPONSE == RetVal){
 800471a:	7dfb      	ldrb	r3, [r7, #23]
 800471c:	2b03      	cmp	r3, #3
 800471e:	d117      	bne.n	8004750 <WSSFM1XRX_AskChannels+0x5c>
		rspPtr=strchr( ((const char *)obj->RxFrame) , ',');
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	212c      	movs	r1, #44	; 0x2c
 8004726:	4618      	mov	r0, r3
 8004728:	f002 ffe8 	bl	80076fc <strchr>
 800472c:	6138      	str	r0, [r7, #16]
		if(rspPtr != NULL){
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00d      	beq.n	8004750 <WSSFM1XRX_AskChannels+0x5c>
			Channels->x = (*(rspPtr-1))-'0';
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	3b01      	subs	r3, #1
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	3b30      	subs	r3, #48	; 0x30
 800473c:	b2da      	uxtb	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	701a      	strb	r2, [r3, #0]
			Channels->y = (*(rspPtr+1))-'0';
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	3301      	adds	r3, #1
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	3b30      	subs	r3, #48	; 0x30
 800474a:	b2da      	uxtb	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	705a      	strb	r2, [r3, #1]
		}
	}
	return RetVal;
 8004750:	7dfb      	ldrb	r3, [r7, #23]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	080080e8 	.word	0x080080e8

08004760 <WSSFM1XRX_CheckChannels>:
 * @return Operation result in the form WSSFM1XRX_Return_t.
 * 			WSSFM1XRX_CHANN_NO_OK   : se debe resetear canales
 *			WSSFM1XRX_CHANN_OK      : No se resetea canales
 */
/*hacer getchannels */
WSSFM1XRX_Return_t WSSFM1XRX_CheckChannels(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait ){
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
	Channels_t Channels ={0,0};
 800476a:	2300      	movs	r3, #0
 800476c:	733b      	strb	r3, [r7, #12]
 800476e:	2300      	movs	r3, #0
 8004770:	737b      	strb	r3, [r7, #13]
	WSSFM1XRX_Return_t retval;
	retval = WSSFM1XRX_AskChannels(obj,Wait,&Channels);
 8004772:	f107 030c 	add.w	r3, r7, #12
 8004776:	461a      	mov	r2, r3
 8004778:	6839      	ldr	r1, [r7, #0]
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff ffba 	bl	80046f4 <WSSFM1XRX_AskChannels>
 8004780:	4603      	mov	r3, r0
 8004782:	73fb      	strb	r3, [r7, #15]

	if(WSSFM1XRX_OK_RESPONSE == retval){
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	2b03      	cmp	r3, #3
 8004788:	d109      	bne.n	800479e <WSSFM1XRX_CheckChannels+0x3e>
		retval = (Channels.x == 0 || Channels.y < 3) ? WSSFM1XRX_CHANN_NO_OK : WSSFM1XRX_CHANN_OK;
 800478a:	7b3b      	ldrb	r3, [r7, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <WSSFM1XRX_CheckChannels+0x36>
 8004790:	7b7b      	ldrb	r3, [r7, #13]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d801      	bhi.n	800479a <WSSFM1XRX_CheckChannels+0x3a>
 8004796:	2308      	movs	r3, #8
 8004798:	e000      	b.n	800479c <WSSFM1XRX_CheckChannels+0x3c>
 800479a:	2307      	movs	r3, #7
 800479c:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 800479e:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <WSSFM1XRX_ResetChannels>:
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return WSSFM1XRX_Return_t.
 * 			<< WSSFM1XRX_OK_RESPONSE >> If response expected is the correct
 * 			<< WSSFM1XRX_RSP_NOMATCH >> If response expected is not correct 
 **/
WSSFM1XRX_Return_t WSSFM1XRX_ResetChannels(WSSFM1XRXConfig_t *obj, WSSFM1XRX_WaitMode_t Wait ){
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
	return WSSFM1XRX_SendRawMessage(obj,"AT$RC\r","OK",NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP); 
 80047b2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80047b6:	9301      	str	r3, [sp, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	2300      	movs	r3, #0
 80047be:	4a05      	ldr	r2, [pc, #20]	; (80047d4 <WSSFM1XRX_ResetChannels+0x2c>)
 80047c0:	4905      	ldr	r1, [pc, #20]	; (80047d8 <WSSFM1XRX_ResetChannels+0x30>)
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f8aa 	bl	800491c <WSSFM1XRX_SendRawMessage>
 80047c8:	4603      	mov	r3, r0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	080080b8 	.word	0x080080b8
 80047d8:	080080f0 	.word	0x080080f0

080047dc <WSSFM1XRX_SendMessage>:
 * @return WSSFM1XRX_Return_t.
 * 			<< WSSFM1XRX_OK_RESPONSE >> If response expected is the correct
 * 			<< WSSFM1XRX_RSP_NOMATCH >> If response expected is not correct 
 *
 */
WSSFM1XRX_Return_t WSSFM1XRX_SendMessage(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait, void* data, void * CopyDataTx ,uint8_t size, uint8_t eDownlink){
 80047dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047de:	b093      	sub	sp, #76	; 0x4c
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
	WSSFM1XRX_Return_t RetValue;
	uint8_t slen = 2*size + 6;
 80047ea:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80047ee:	3303      	adds	r3, #3
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	char UplinkPayload[WSSFM1XRX_MAX_DATA_SIZE_WITH_DL] = "AT$SF="; /*max length frame with downlink*/
 80047f8:	4a46      	ldr	r2, [pc, #280]	; (8004914 <WSSFM1XRX_SendMessage+0x138>)
 80047fa:	f107 0310 	add.w	r3, r7, #16
 80047fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004802:	6018      	str	r0, [r3, #0]
 8004804:	3304      	adds	r3, #4
 8004806:	8019      	strh	r1, [r3, #0]
 8004808:	3302      	adds	r3, #2
 800480a:	0c0a      	lsrs	r2, r1, #16
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	f107 0317 	add.w	r3, r7, #23
 8004812:	221e      	movs	r2, #30
 8004814:	2100      	movs	r1, #0
 8004816:	4618      	mov	r0, r3
 8004818:	f002 ff47 	bl	80076aa <memset>
	uint32_t timeWait = WSSFM1XRX_SEND_MESSAGE_TIME_DELAY_RESP;
 800481c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004820:	63bb      	str	r3, [r7, #56]	; 0x38
	WSSFM1XRX_BuildFrame(UplinkPayload+6, data, size);
 8004822:	f107 0310 	add.w	r3, r7, #16
 8004826:	3306      	adds	r3, #6
 8004828:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f970 	bl	8004b14 <WSSFM1XRX_BuildFrame>
	if(( obj->State_Api == WSSFM1XRX_IDLE)){
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800483a:	2b00      	cmp	r3, #0
 800483c:	d103      	bne.n	8004846 <WSSFM1XRX_SendMessage+0x6a>

		obj->DownLink = eDownlink;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8004844:	775a      	strb	r2, [r3, #29]
	}
	//qTraceDecimal(obj->DownLink);
	if(obj->DownLink){
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	7f5b      	ldrb	r3, [r3, #29]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d021      	beq.n	8004892 <WSSFM1XRX_SendMessage+0xb6>
		UplinkPayload[slen++]=',';
 800484e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8004858:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800485c:	4413      	add	r3, r2
 800485e:	222c      	movs	r2, #44	; 0x2c
 8004860:	f803 2c30 	strb.w	r2, [r3, #-48]
		UplinkPayload[slen++]='1';
 8004864:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800486e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004872:	4413      	add	r3, r2
 8004874:	2231      	movs	r2, #49	; 0x31
 8004876:	f803 2c30 	strb.w	r2, [r3, #-48]
		UplinkPayload[slen++]='\r';
 800487a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8004884:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004888:	4413      	add	r3, r2
 800488a:	220d      	movs	r2, #13
 800488c:	f803 2c30 	strb.w	r2, [r3, #-48]
 8004890:	e007      	b.n	80048a2 <WSSFM1XRX_SendMessage+0xc6>
	}
	else{
		UplinkPayload[slen]='\r';
 8004892:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004896:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800489a:	4413      	add	r3, r2
 800489c:	220d      	movs	r2, #13
 800489e:	f803 2c30 	strb.w	r2, [r3, #-48]
	}
//	qTraceMessage(UplinkPayload);
	if(CopyDataTx != NULL ) memcpy(CopyDataTx,UplinkPayload,37);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d017      	beq.n	80048d8 <WSSFM1XRX_SendMessage+0xfc>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	f107 0410 	add.w	r4, r7, #16
 80048ae:	469c      	mov	ip, r3
 80048b0:	f104 0e20 	add.w	lr, r4, #32
 80048b4:	4665      	mov	r5, ip
 80048b6:	4626      	mov	r6, r4
 80048b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80048ba:	6028      	str	r0, [r5, #0]
 80048bc:	6069      	str	r1, [r5, #4]
 80048be:	60aa      	str	r2, [r5, #8]
 80048c0:	60eb      	str	r3, [r5, #12]
 80048c2:	3410      	adds	r4, #16
 80048c4:	f10c 0c10 	add.w	ip, ip, #16
 80048c8:	4574      	cmp	r4, lr
 80048ca:	d1f3      	bne.n	80048b4 <WSSFM1XRX_SendMessage+0xd8>
 80048cc:	4663      	mov	r3, ip
 80048ce:	4622      	mov	r2, r4
 80048d0:	6810      	ldr	r0, [r2, #0]
 80048d2:	6018      	str	r0, [r3, #0]
 80048d4:	7912      	ldrb	r2, [r2, #4]
 80048d6:	711a      	strb	r2, [r3, #4]
	timeWait = eDownlink ? WSSFM1XRX_DL_TIMEOUT : WSSFM1XRX_SEND_MESSAGE_TIME_DELAY_RESP; /*WSSFM1XRX_DL_TIMEOUT*/
 80048d8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <WSSFM1XRX_SendMessage+0x10a>
 80048e0:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 80048e4:	e001      	b.n	80048ea <WSSFM1XRX_SendMessage+0x10e>
 80048e6:	f241 7370 	movw	r3, #6000	; 0x1770
 80048ea:	63bb      	str	r3, [r7, #56]	; 0x38
	RetValue = WSSFM1XRX_SendRawMessage(obj, UplinkPayload, "OK", NULL, Wait, timeWait);
 80048ec:	f107 0110 	add.w	r1, r7, #16
 80048f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f2:	9301      	str	r3, [sp, #4]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	2300      	movs	r3, #0
 80048fa:	4a07      	ldr	r2, [pc, #28]	; (8004918 <WSSFM1XRX_SendMessage+0x13c>)
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f80d 	bl	800491c <WSSFM1XRX_SendRawMessage>
 8004902:	4603      	mov	r3, r0
 8004904:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	//qTraceDecimal(RetValue);
	return RetValue;
 8004908:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800490c:	4618      	mov	r0, r3
 800490e:	3744      	adds	r7, #68	; 0x44
 8004910:	46bd      	mov	sp, r7
 8004912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004914:	08008108 	.word	0x08008108
 8004918:	080080b8 	.word	0x080080b8

0800491c <WSSFM1XRX_SendRawMessage>:
 * @param ExpectedResponse expectedResponse expected Response from module Wisol .
 * @param Pointer to function delay blocking or non blocking, of type WSSFM1XRX_WaitMode_t
 * @return Pointer to reception buffer
 *  @Note : use only if  response expected
 */
WSSFM1XRX_Return_t WSSFM1XRX_SendRawMessage(WSSFM1XRXConfig_t *obj,char* Payload,char* ExpectedResponse,char * BuffStr,WSSFM1XRX_WaitMode_t Wait,uint32_t msec){
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]

	WSSFM1XRX_Return_t RetValue;
	if( ( obj->State_Api == WSSFM1XRX_IDLE) ) { /*Firstentry bloqueante o no bloqueante*/
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004930:	2b00      	cmp	r3, #0
 8004932:	d120      	bne.n	8004976 <WSSFM1XRX_SendRawMessage+0x5a>
		WSSFM1XRX_ResetObject(obj);
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f8d0 	bl	8004ada <WSSFM1XRX_ResetObject>
		if(Payload != NULL) {
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <WSSFM1XRX_SendRawMessage+0x2c>
			WSSFM1XRX_StringTX(obj,Payload);
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 f8b2 	bl	8004aac <WSSFM1XRX_StringTX>
			//qTraceMessage(Payload);
		}
		obj->State_Api = WSSFM1XRX_RUNNING;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

		if(obj->NumberRetries++ > obj->MaxNumberRetries) {
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	b2d1      	uxtb	r1, r2
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8004966:	4293      	cmp	r3, r2
 8004968:	d905      	bls.n	8004976 <WSSFM1XRX_SendRawMessage+0x5a>
			obj->NumberRetries = 0;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
//			qTraceMessage("retires");
//			qTraceDecimal(obj->RxReady);
//			qTraceDecimal(obj->State_Api);
//			qTraceMessage(obj->RxFrame);
			return WSSFM1XRX_MAX_RETRIES_REACHED;
 8004972:	230b      	movs	r3, #11
 8004974:	e026      	b.n	80049c4 <WSSFM1XRX_SendRawMessage+0xa8>
		}

	}
	/*expected is confirmed in to WSSFM1XRX_WaitForResponse*/
	RetValue = WSSFM1XRX_WaitForResponse(obj,ExpectedResponse,Wait,msec);
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	6a3a      	ldr	r2, [r7, #32]
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f918 	bl	8004bb2 <WSSFM1XRX_WaitForResponse>
 8004982:	4603      	mov	r3, r0
 8004984:	75fb      	strb	r3, [r7, #23]

	/*para que funcione block or non block*/
	if(WSSFM1XRX_TIMEOUT == RetValue || WSSFM1XRX_OK_RESPONSE == RetValue){
 8004986:	7dfb      	ldrb	r3, [r7, #23]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <WSSFM1XRX_SendRawMessage+0x76>
 800498c:	7dfb      	ldrb	r3, [r7, #23]
 800498e:	2b03      	cmp	r3, #3
 8004990:	d117      	bne.n	80049c2 <WSSFM1XRX_SendRawMessage+0xa6>
		//qTraceMessage(obj->RxFrame);
		if( obj->RxReady ){
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	7e5b      	ldrb	r3, [r3, #25]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00e      	beq.n	80049ba <WSSFM1XRX_SendRawMessage+0x9e>
			if(BuffStr != NULL) strcpy((char*)BuffStr, (char*)obj->RxFrame) ;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <WSSFM1XRX_SendRawMessage+0x92>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	4619      	mov	r1, r3
 80049a8:	6838      	ldr	r0, [r7, #0]
 80049aa:	f002 feb4 	bl	8007716 <strcpy>
			RetValue = WSSFM1XRX_OK_RESPONSE;
 80049ae:	2303      	movs	r3, #3
 80049b0:	75fb      	strb	r3, [r7, #23]
			obj->NumberRetries = 0;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		}  //14.6.19 else if(Payload != NULL)	RetValue = WSSFM1XRX_FAILURE;
		obj->State_Api = WSSFM1XRX_IDLE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	return RetValue;
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <WSSFM1XRX_ISRRX>:
 * the buffer is stored in the structure obj->RxFrame.
 * 
 * @param obj Structure containing all data from the Sigfox module.
 * @return void.
 */
void WSSFM1XRX_ISRRX(WSSFM1XRXConfig_t *obj, const char RxChar){
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	70fb      	strb	r3, [r7, #3]
	if(RxChar < CHAR_PRINT_BELOW  || RxChar > CHAR_PRINT_ABOVE) return ;  /*Char no print*/
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	2b09      	cmp	r3, #9
 80049dc:	d939      	bls.n	8004a52 <WSSFM1XRX_ISRRX+0x86>
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	2b7a      	cmp	r3, #122	; 0x7a
 80049e2:	d836      	bhi.n	8004a52 <WSSFM1XRX_ISRRX+0x86>
	if(obj->RxReady) return; /* B_uffer reveived*/
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	7e5b      	ldrb	r3, [r3, #25]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d133      	bne.n	8004a56 <WSSFM1XRX_ISRRX+0x8a>
	obj->RxFrame[obj->RxIndex++] = RxChar;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695a      	ldr	r2, [r3, #20]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	7e9b      	ldrb	r3, [r3, #26]
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	1c59      	adds	r1, r3, #1
 80049fa:	b2c8      	uxtb	r0, r1
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	7688      	strb	r0, [r1, #26]
 8004a00:	4413      	add	r3, r2
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	701a      	strb	r2, [r3, #0]
	if (obj->RxIndex>= obj->SizeBuffRx -1) obj->RxIndex=0;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	7e9b      	ldrb	r3, [r3, #26]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	7e1b      	ldrb	r3, [r3, #24]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	429a      	cmp	r2, r3
 8004a16:	db02      	blt.n	8004a1e <WSSFM1XRX_ISRRX+0x52>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	769a      	strb	r2, [r3, #26]
	obj->RxFrame[obj->RxIndex] = 0;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	7e92      	ldrb	r2, [r2, #26]
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	4413      	add	r3, r2
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
	if (RxChar =='\r'){
 8004a2e:	78fb      	ldrb	r3, [r7, #3]
 8004a30:	2b0d      	cmp	r3, #13
 8004a32:	d111      	bne.n	8004a58 <WSSFM1XRX_ISRRX+0x8c>
		/*  Check if there is a downlink request */
		if(!obj->DownLink){
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	7f5b      	ldrb	r3, [r3, #29]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d106      	bne.n	8004a4a <WSSFM1XRX_ISRRX+0x7e>
			obj->RxIndex = 0;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	769a      	strb	r2, [r3, #26]
			obj->RxReady = SF_TRUE; /* Framed completed*/
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	765a      	strb	r2, [r3, #25]
 8004a48:	e006      	b.n	8004a58 <WSSFM1XRX_ISRRX+0x8c>
		}else
			obj->DownLink = 0; /* Clear the downlink request */
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	775a      	strb	r2, [r3, #29]
 8004a50:	e002      	b.n	8004a58 <WSSFM1XRX_ISRRX+0x8c>
	if(RxChar < CHAR_PRINT_BELOW  || RxChar > CHAR_PRINT_ABOVE) return ;  /*Char no print*/
 8004a52:	bf00      	nop
 8004a54:	e000      	b.n	8004a58 <WSSFM1XRX_ISRRX+0x8c>
	if(obj->RxReady) return; /* B_uffer reveived*/
 8004a56:	bf00      	nop
	}
}
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <WSSFM1XRX_MatchResponse>:
 * @return Operation result in the form WSSFM1XRX_Return_t.
 * 			<< WSSFM1XRX_OK_RESPONSE >> If response expected is the correct
 * 			<< WSSFM1XRX_RSP_NOMATCH >> If response expected is not correct 
 */

WSSFM1XRX_Return_t WSSFM1XRX_MatchResponse(WSSFM1XRXConfig_t *obj, char *expectedResponse){
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	6039      	str	r1, [r7, #0]
	uint8_t Rprocess = WSSFM1XRX_RSP_NOMATCH;
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	73fb      	strb	r3, [r7, #15]
	if(obj->RxReady){
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	7e5b      	ldrb	r3, [r3, #25]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d013      	beq.n	8004aa2 <WSSFM1XRX_MatchResponse+0x40>
		if(expectedResponse != NULL){
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00e      	beq.n	8004a9e <WSSFM1XRX_MatchResponse+0x3c>
			if(strstr((const char *) obj->RxFrame,(char *)expectedResponse) != NULL) Rprocess = WSSFM1XRX_OK_RESPONSE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	6839      	ldr	r1, [r7, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f002 fe4d 	bl	8007726 <strstr>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <WSSFM1XRX_MatchResponse+0x36>
 8004a92:	2303      	movs	r3, #3
 8004a94:	73fb      	strb	r3, [r7, #15]
 8004a96:	e004      	b.n	8004aa2 <WSSFM1XRX_MatchResponse+0x40>
			else Rprocess = WSSFM1XRX_RSP_NOMATCH;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	73fb      	strb	r3, [r7, #15]
 8004a9c:	e001      	b.n	8004aa2 <WSSFM1XRX_MatchResponse+0x40>
		}else Rprocess = WSSFM1XRX_OK_RESPONSE;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	73fb      	strb	r3, [r7, #15]
	}
	return Rprocess;
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <WSSFM1XRX_StringTX>:

	return ( NULL != obj->CallbackDownlink )? obj->CallbackDownlink(obj) : WSSFM1XRX_DL_DISCRIMINATE_ERROR;
}

/*Private Functions ********************************************************************************************************************************/
static void WSSFM1XRX_StringTX(WSSFM1XRXConfig_t *obj, char* WSSFM1XRX_String){
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
	while(*WSSFM1XRX_String) obj->TX_WSSFM1XRX(NULL,*WSSFM1XRX_String++);
 8004ab6:	e008      	b.n	8004aca <WSSFM1XRX_StringTX+0x1e>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	1c59      	adds	r1, r3, #1
 8004ac0:	6039      	str	r1, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	4790      	blx	r2
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f2      	bne.n	8004ab8 <WSSFM1XRX_StringTX+0xc>
}
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <WSSFM1XRX_ResetObject>:

/*Private Functions ***********************************************************************************************************************************************/
static void WSSFM1XRX_ResetObject(WSSFM1XRXConfig_t *obj){
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
	memset( (void *) obj->RxFrame,0,obj->SizeBuffRx);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6958      	ldr	r0, [r3, #20]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	7e1b      	ldrb	r3, [r3, #24]
 8004aea:	461a      	mov	r2, r3
 8004aec:	2100      	movs	r1, #0
 8004aee:	f002 fddc 	bl	80076aa <memset>
	obj->StatusFlag=WSSFM1XRX_DEFAULT;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2209      	movs	r2, #9
 8004af6:	76da      	strb	r2, [r3, #27]
	obj->RxIndex=0;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	769a      	strb	r2, [r3, #26]
	obj->RxReady=SF_FALSE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	765a      	strb	r2, [r3, #25]
	obj->State_Api = WSSFM1XRX_IDLE; /*verificar*/
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <WSSFM1XRX_BuildFrame>:
/*Private Functions*/

/**
 * @brief Function order the frame.
 */
static void WSSFM1XRX_BuildFrame(char* str, void* data, uint8_t size){
 8004b14:	b590      	push	{r4, r7, lr}
 8004b16:	b089      	sub	sp, #36	; 0x24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	71fb      	strb	r3, [r7, #7]
	int8_t  i,j;   
	uint8_t xbyte, finalsize;
	uint8_t *bdata = (uint8_t*)data;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	61bb      	str	r3, [r7, #24]
	size = (size > WSSFM1XRX_MAX_BYTE_TX_FRAME )? WSSFM1XRX_MAX_BYTE_TX_FRAME : size;
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	2b0c      	cmp	r3, #12
 8004b2a:	bf28      	it	cs
 8004b2c:	230c      	movcs	r3, #12
 8004b2e:	71fb      	strb	r3, [r7, #7]
	finalsize = size*2;
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	75fb      	strb	r3, [r7, #23]
	str[finalsize]='\0';
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	701a      	strb	r2, [r3, #0]

	for(i = (size-1) , j = 0; i >= 0; i--){
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	77bb      	strb	r3, [r7, #30]
 8004b4c:	e029      	b.n	8004ba2 <WSSFM1XRX_BuildFrame+0x8e>
		xbyte = bdata[i];
 8004b4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4413      	add	r3, r2
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	75bb      	strb	r3, [r7, #22]
		str[j++]=NibbletoX(xbyte>>4);
 8004b5a:	7dbb      	ldrb	r3, [r7, #22]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	b2d9      	uxtb	r1, r3
 8004b60:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8004b64:	b2d3      	uxtb	r3, r2
 8004b66:	3301      	adds	r3, #1
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	77bb      	strb	r3, [r7, #30]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	189c      	adds	r4, r3, r2
 8004b70:	4608      	mov	r0, r1
 8004b72:	f000 f83f 	bl	8004bf4 <NibbletoX>
 8004b76:	4603      	mov	r3, r0
 8004b78:	7023      	strb	r3, [r4, #0]
		str[j++]=NibbletoX(xbyte);
 8004b7a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8004b7e:	b2d3      	uxtb	r3, r2
 8004b80:	3301      	adds	r3, #1
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	77bb      	strb	r3, [r7, #30]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	189c      	adds	r4, r3, r2
 8004b8a:	7dbb      	ldrb	r3, [r7, #22]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 f831 	bl	8004bf4 <NibbletoX>
 8004b92:	4603      	mov	r3, r0
 8004b94:	7023      	strb	r3, [r4, #0]
	for(i = (size-1) , j = 0; i >= 0; i--){
 8004b96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	77fb      	strb	r3, [r7, #31]
 8004ba2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	dad1      	bge.n	8004b4e <WSSFM1XRX_BuildFrame+0x3a>
	}
}
 8004baa:	bf00      	nop
 8004bac:	3724      	adds	r7, #36	; 0x24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd90      	pop	{r4, r7, pc}

08004bb2 <WSSFM1XRX_WaitForResponse>:

/**
 * @brief Function wait for response expected.
 */
static WSSFM1XRX_Return_t WSSFM1XRX_WaitForResponse(WSSFM1XRXConfig_t *obj , char *ExpectedResponse, WSSFM1XRX_WaitMode_t Wait ,uint32_t msec){
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b086      	sub	sp, #24
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	603b      	str	r3, [r7, #0]
	uint8_t retvalue = WSSFM1XRX_NONE, retvalueM = WSSFM1XRX_NONE;
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	75fb      	strb	r3, [r7, #23]
 8004bc4:	2304      	movs	r3, #4
 8004bc6:	75bb      	strb	r3, [r7, #22]
	retvalue =  Wait(obj,msec); /*Return WAITING or TIMEOUT*/
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6839      	ldr	r1, [r7, #0]
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	4798      	blx	r3
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	75fb      	strb	r3, [r7, #23]
	retvalueM = WSSFM1XRX_MatchResponse(obj,ExpectedResponse); /*Return Response ok or No match*/
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f7ff ff43 	bl	8004a62 <WSSFM1XRX_MatchResponse>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	75bb      	strb	r3, [r7, #22]
	return (retvalueM == WSSFM1XRX_OK_RESPONSE)? retvalueM  : retvalue  ;/*Delay NonBlocking or Non-blocking*/
 8004be0:	7dbb      	ldrb	r3, [r7, #22]
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d101      	bne.n	8004bea <WSSFM1XRX_WaitForResponse+0x38>
 8004be6:	7dbb      	ldrb	r3, [r7, #22]
 8004be8:	e000      	b.n	8004bec <WSSFM1XRX_WaitForResponse+0x3a>
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <NibbletoX>:


/*Nible(4bits) decimal to hex string***/

char NibbletoX(uint8_t value){
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	71fb      	strb	r3, [r7, #7]
	char ch;
	ch = (char)(value & 0x0F) + '0';
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	3330      	adds	r3, #48	; 0x30
 8004c08:	73fb      	strb	r3, [r7, #15]
	return (ch > '9')? ch+7u : ch;
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	2b39      	cmp	r3, #57	; 0x39
 8004c0e:	d903      	bls.n	8004c18 <NibbletoX+0x24>
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	3307      	adds	r3, #7
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	e000      	b.n	8004c1a <NibbletoX+0x26>
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <_qScheduler_TimeDeadlineCheck>:

#define qSchedulerStartPoint                    QUARKTS.Flag.Init=qTrue; do
#define qSchedulerEndPoint                      while(!QUARKTS.Flag.ReleaseSched); _qTriggerReleaseSchedEvent()

/*============================================================================*/
qBool_t _qScheduler_TimeDeadlineCheck(qClock_t ti, qClock_t td){
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]
    return (qBool_t)((qSchedulerGetTick() - ti)>=td); 
 8004c30:	f000 fb60 	bl	80052f4 <qSchedulerGetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	bf94      	ite	ls
 8004c40:	2301      	movls	r3, #1
 8004c42:	2300      	movhi	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <qEnterCritical>:

Enter a critical section. This function invokes the <Disabler> if available.
Please see <qSchedulerSetInterruptsED>

*/  
void qEnterCritical(void){
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
    if(QUARKTS.I_Disable != NULL) QUARKTS.Flag.IntFlags = QUARKTS.I_Disable();
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <qEnterCritical+0x1c>)
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <qEnterCritical+0x18>
 8004c5c:	4b03      	ldr	r3, [pc, #12]	; (8004c6c <qEnterCritical+0x1c>)
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	4798      	blx	r3
 8004c62:	4602      	mov	r2, r0
 8004c64:	4b01      	ldr	r3, [pc, #4]	; (8004c6c <qEnterCritical+0x1c>)
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004c68:	bf00      	nop
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	200000d8 	.word	0x200000d8

08004c70 <qExitCritical>:

Enter a critical section. This function invokes the <Enabler> if available.
Please see <qSchedulerSetInterruptsED>

*/ 
void qExitCritical(void){
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
    if(QUARKTS.I_Restorer != NULL) QUARKTS.I_Restorer(QUARKTS.Flag.IntFlags);
 8004c74:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <qExitCritical+0x1c>)
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <qExitCritical+0x18>
 8004c7c:	4b03      	ldr	r3, [pc, #12]	; (8004c8c <qExitCritical+0x1c>)
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	4a02      	ldr	r2, [pc, #8]	; (8004c8c <qExitCritical+0x1c>)
 8004c82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c84:	4610      	mov	r0, r2
 8004c86:	4798      	blx	r3
}
 8004c88:	bf00      	nop
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	200000d8 	.word	0x200000d8

08004c90 <qTime2Clock>:

Return value:

    time (t) in epochs
*/
qClock_t qTime2Clock(const qTime_t t){
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	ed87 0a01 	vstr	s0, [r7, #4]
        return (qClock_t)t;
    #else 
        #ifdef Q_SETUP_TICK_IN_HERTZ
            return (qClock_t)(t*QUARKTS.TimmingBase);
        #else
            return (qClock_t)(t/QUARKTS.TimmingBase);
 8004c9a:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <qTime2Clock+0x2c>)
 8004c9c:	ed93 7a05 	vldr	s14, [r3, #20]
 8004ca0:	edd7 6a01 	vldr	s13, [r7, #4]
 8004ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cac:	ee17 3a90 	vmov	r3, s15
        #endif    
    #endif
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	200000d8 	.word	0x200000d8

08004cc0 <qTaskSetState>:
Parameters:

    - Task : A pointer to the task node.
    - State : qEnabled or qDisabled 
*/
void qTaskSetState(qTask_t *Task, const qState_t State){
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	70fb      	strb	r3, [r7, #3]
    if(NULL==Task) return;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d012      	beq.n	8004cf8 <qTaskSetState+0x38>
    if(State && Task->Flag[_qIndex_Enabled]) return;
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <qTaskSetState+0x24>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10b      	bne.n	8004cfc <qTaskSetState+0x3c>
    Task->Flag[_qIndex_Enabled] = State;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    Task->ClockStart = qSchedulerGetTick();
 8004cec:	f000 fb02 	bl	80052f4 <qSchedulerGetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	61da      	str	r2, [r3, #28]
 8004cf6:	e002      	b.n	8004cfe <qTaskSetState+0x3e>
    if(NULL==Task) return;
 8004cf8:	bf00      	nop
 8004cfa:	e000      	b.n	8004cfe <qTaskSetState+0x3e>
    if(State && Task->Flag[_qIndex_Enabled]) return;
 8004cfc:	bf00      	nop
}
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <_qScheduler_PriorityQueueGet>:
    QUARKTS.I_Restorer = Restorer;
    QUARKTS.I_Disable = Disabler;
}
#ifdef Q_PRIORITY_QUEUE
/*============================================================================*/
static qTask_t* _qScheduler_PriorityQueueGet(void){
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
    qTask_t *Task = NULL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	603b      	str	r3, [r7, #0]
    uint8_t i;
    uint8_t IndexTaskToExtract = 0;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	71bb      	strb	r3, [r7, #6]
    qPriority_t MaxPriorityValue;
    if(QUARKTS.QueueIndex < 0) return NULL; /*Return if no elements available*/
 8004d12:	4b41      	ldr	r3, [pc, #260]	; (8004e18 <_qScheduler_PriorityQueueGet+0x114>)
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b21b      	sxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	da01      	bge.n	8004d20 <_qScheduler_PriorityQueueGet+0x1c>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	e076      	b.n	8004e0e <_qScheduler_PriorityQueueGet+0x10a>
    qEnterCritical(); 
 8004d20:	f7ff ff96 	bl	8004c50 <qEnterCritical>
    MaxPriorityValue = QUARKTS.QueueStack[0].Task->Priority;
 8004d24:	4b3c      	ldr	r3, [pc, #240]	; (8004e18 <_qScheduler_PriorityQueueGet+0x114>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d2e:	717b      	strb	r3, [r7, #5]
    for( i=1; i<QUARKTS.QueueSize; i++){ /*Find the task with the highest priority*/
 8004d30:	2301      	movs	r3, #1
 8004d32:	71fb      	strb	r3, [r7, #7]
 8004d34:	e021      	b.n	8004d7a <_qScheduler_PriorityQueueGet+0x76>
        if(NULL == QUARKTS.QueueStack[i].Task ) break; /*break if the tail is reached*/
 8004d36:	4b38      	ldr	r3, [pc, #224]	; (8004e18 <_qScheduler_PriorityQueueGet+0x114>)
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	4413      	add	r3, r2
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d020      	beq.n	8004d88 <_qScheduler_PriorityQueueGet+0x84>
        if(QUARKTS.QueueStack[i].Task->Priority > MaxPriorityValue){ /*check if the queued task has the max priority value*/
 8004d46:	4b34      	ldr	r3, [pc, #208]	; (8004e18 <_qScheduler_PriorityQueueGet+0x114>)
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	4413      	add	r3, r2
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	797a      	ldrb	r2, [r7, #5]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d20a      	bcs.n	8004d74 <_qScheduler_PriorityQueueGet+0x70>
            MaxPriorityValue = QUARKTS.QueueStack[i].Task->Priority; /*Reassign the max value*/
 8004d5e:	4b2e      	ldr	r3, [pc, #184]	; (8004e18 <_qScheduler_PriorityQueueGet+0x114>)
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	4413      	add	r3, r2
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d6e:	717b      	strb	r3, [r7, #5]
            IndexTaskToExtract = i;  /*save the index*/
 8004d70:	79fb      	ldrb	r3, [r7, #7]
 8004d72:	71bb      	strb	r3, [r7, #6]
    for( i=1; i<QUARKTS.QueueSize; i++){ /*Find the task with the highest priority*/
 8004d74:	79fb      	ldrb	r3, [r7, #7]
 8004d76:	3301      	adds	r3, #1
 8004d78:	71fb      	strb	r3, [r7, #7]
 8004d7a:	4b27      	ldr	r3, [pc, #156]	; (8004e18 <_qScheduler_PriorityQueueGet+0x114>)
 8004d7c:	789b      	ldrb	r3, [r3, #2]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	79fa      	ldrb	r2, [r7, #7]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d3d7      	bcc.n	8004d36 <_qScheduler_PriorityQueueGet+0x32>
 8004d86:	e000      	b.n	8004d8a <_qScheduler_PriorityQueueGet+0x86>
        if(NULL == QUARKTS.QueueStack[i].Task ) break; /*break if the tail is reached*/
 8004d88:	bf00      	nop
        }
    }   
    QUARKTS.QueueData = QUARKTS.QueueStack[IndexTaskToExtract].QueueData; /*get the data from the queue*/
 8004d8a:	4b23      	ldr	r3, [pc, #140]	; (8004e18 <_qScheduler_PriorityQueueGet+0x114>)
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	79bb      	ldrb	r3, [r7, #6]
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	4413      	add	r3, r2
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4a20      	ldr	r2, [pc, #128]	; (8004e18 <_qScheduler_PriorityQueueGet+0x114>)
 8004d98:	6093      	str	r3, [r2, #8]
    Task = QUARKTS.QueueStack[IndexTaskToExtract].Task; /*assign the task to the output*/
 8004d9a:	4b1f      	ldr	r3, [pc, #124]	; (8004e18 <_qScheduler_PriorityQueueGet+0x114>)
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	79bb      	ldrb	r3, [r7, #6]
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	4413      	add	r3, r2
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	603b      	str	r3, [r7, #0]
    Task->State = qReady; /*set the task as ready*/
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    QUARKTS.QueueStack[IndexTaskToExtract].Task = NULL; /*set the position in the queue as empty*/  
 8004db0:	4b19      	ldr	r3, [pc, #100]	; (8004e18 <_qScheduler_PriorityQueueGet+0x114>)
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	79bb      	ldrb	r3, [r7, #6]
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	4413      	add	r3, r2
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
    for(i=IndexTaskToExtract; i<QUARKTS.QueueIndex; i++) QUARKTS.QueueStack[i] = QUARKTS.QueueStack[i+1]; /*shift the queue*/
 8004dbe:	79bb      	ldrb	r3, [r7, #6]
 8004dc0:	71fb      	strb	r3, [r7, #7]
 8004dc2:	e012      	b.n	8004dea <_qScheduler_PriorityQueueGet+0xe6>
 8004dc4:	4b14      	ldr	r3, [pc, #80]	; (8004e18 <_qScheduler_PriorityQueueGet+0x114>)
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	18d1      	adds	r1, r2, r3
 8004dd0:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <_qScheduler_PriorityQueueGet+0x114>)
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4413      	add	r3, r2
 8004dda:	460a      	mov	r2, r1
 8004ddc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004de0:	e883 0003 	stmia.w	r3, {r0, r1}
 8004de4:	79fb      	ldrb	r3, [r7, #7]
 8004de6:	3301      	adds	r3, #1
 8004de8:	71fb      	strb	r3, [r7, #7]
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	4a0a      	ldr	r2, [pc, #40]	; (8004e18 <_qScheduler_PriorityQueueGet+0x114>)
 8004dee:	8812      	ldrh	r2, [r2, #0]
 8004df0:	b212      	sxth	r2, r2
 8004df2:	4293      	cmp	r3, r2
 8004df4:	dbe6      	blt.n	8004dc4 <_qScheduler_PriorityQueueGet+0xc0>
    QUARKTS.QueueIndex--;    /*decrease the index*/
 8004df6:	4b08      	ldr	r3, [pc, #32]	; (8004e18 <_qScheduler_PriorityQueueGet+0x114>)
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b21b      	sxth	r3, r3
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	b21a      	sxth	r2, r3
 8004e04:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <_qScheduler_PriorityQueueGet+0x114>)
 8004e06:	801a      	strh	r2, [r3, #0]
    qExitCritical();
 8004e08:	f7ff ff32 	bl	8004c70 <qExitCritical>
    return Task;
 8004e0c:	683b      	ldr	r3, [r7, #0]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	200000d8 	.word	0x200000d8

08004e1c <_qInitScheduler>:
#endif
/*============================================================================*/
#ifdef Q_SETUP_TIME_CANONICAL
    void _qInitScheduler(qGetTickFcn_t TickProvider, qTaskFcn_t IdleCallback, volatile qQueueStack_t *Q_Stack, const uint8_t Size_Q_Stack){
#else
    void _qInitScheduler(qGetTickFcn_t TickProvider, const qTimingBase_type BaseTimming, qTaskFcn_t IdleCallback, volatile qQueueStack_t *Q_Stack, const uint8_t Size_Q_Stack){
 8004e1c:	b480      	push	{r7}
 8004e1e:	b089      	sub	sp, #36	; 0x24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6178      	str	r0, [r7, #20]
 8004e24:	ed87 0a04 	vstr	s0, [r7, #16]
 8004e28:	60f9      	str	r1, [r7, #12]
 8004e2a:	60ba      	str	r2, [r7, #8]
 8004e2c:	71fb      	strb	r3, [r7, #7]
#endif
    #ifdef Q_PRIORITY_QUEUE  
        uint8_t i;
    #endif
    QUARKTS.Head = NULL;
 8004e2e:	4b26      	ldr	r3, [pc, #152]	; (8004ec8 <_qInitScheduler+0xac>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	619a      	str	r2, [r3, #24]
    #ifndef Q_SETUP_TIME_CANONICAL
        QUARKTS.TimmingBase = BaseTimming;
 8004e34:	4a24      	ldr	r2, [pc, #144]	; (8004ec8 <_qInitScheduler+0xac>)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	6153      	str	r3, [r2, #20]
    #endif
    QUARKTS.IDLECallback = IdleCallback;
 8004e3a:	4a23      	ldr	r2, [pc, #140]	; (8004ec8 <_qInitScheduler+0xac>)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	60d3      	str	r3, [r2, #12]
    QUARKTS.ReleaseSchedCallback = NULL;
 8004e40:	4b21      	ldr	r3, [pc, #132]	; (8004ec8 <_qInitScheduler+0xac>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	611a      	str	r2, [r3, #16]
    #ifdef Q_PRIORITY_QUEUE    
        QUARKTS.QueueStack = (qQueueStack_t*)Q_Stack;
 8004e46:	4a20      	ldr	r2, [pc, #128]	; (8004ec8 <_qInitScheduler+0xac>)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	6053      	str	r3, [r2, #4]
        QUARKTS.QueueSize = Size_Q_Stack;
 8004e4c:	4a1e      	ldr	r2, [pc, #120]	; (8004ec8 <_qInitScheduler+0xac>)
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	7093      	strb	r3, [r2, #2]
        for(i=0;i<QUARKTS.QueueSize;i++) QUARKTS.QueueStack[i].Task = NULL;  /*set the priority queue as empty*/  
 8004e52:	2300      	movs	r3, #0
 8004e54:	77fb      	strb	r3, [r7, #31]
 8004e56:	e009      	b.n	8004e6c <_qInitScheduler+0x50>
 8004e58:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <_qInitScheduler+0xac>)
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	7ffb      	ldrb	r3, [r7, #31]
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	4413      	add	r3, r2
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	7ffb      	ldrb	r3, [r7, #31]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	77fb      	strb	r3, [r7, #31]
 8004e6c:	4b16      	ldr	r3, [pc, #88]	; (8004ec8 <_qInitScheduler+0xac>)
 8004e6e:	789b      	ldrb	r3, [r3, #2]
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	7ffa      	ldrb	r2, [r7, #31]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d3ef      	bcc.n	8004e58 <_qInitScheduler+0x3c>
        QUARKTS.QueueIndex = -1;     
 8004e78:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <_qInitScheduler+0xac>)
 8004e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e7e:	801a      	strh	r2, [r3, #0]
        QUARKTS.QueueData = NULL;
 8004e80:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <_qInitScheduler+0xac>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	609a      	str	r2, [r3, #8]
    #endif
    QUARKTS.Flag.Init = qFalse;
 8004e86:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <_qInitScheduler+0xac>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    QUARKTS.Flag.ReleaseSched = qFalse;
 8004e8e:	4b0e      	ldr	r3, [pc, #56]	; (8004ec8 <_qInitScheduler+0xac>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    QUARKTS.Flag.FCallReleased = qFalse;
 8004e96:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <_qInitScheduler+0xac>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    QUARKTS.I_Restorer =  NULL;
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <_qInitScheduler+0xac>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	621a      	str	r2, [r3, #32]
    QUARKTS.I_Disable = NULL;
 8004ea4:	4b08      	ldr	r3, [pc, #32]	; (8004ec8 <_qInitScheduler+0xac>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	61da      	str	r2, [r3, #28]
    QUARKTS.CurrentRunningTask = NULL;
 8004eaa:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <_qInitScheduler+0xac>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	62da      	str	r2, [r3, #44]	; 0x2c
    QUARKTS.GetSysTick = TickProvider;
 8004eb0:	4a05      	ldr	r2, [pc, #20]	; (8004ec8 <_qInitScheduler+0xac>)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	6313      	str	r3, [r2, #48]	; 0x30
    _qSysTick_Epochs_ = 0ul;
 8004eb6:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <_qInitScheduler+0xb0>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
}
 8004ebc:	bf00      	nop
 8004ebe:	3724      	adds	r7, #36	; 0x24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	200000d8 	.word	0x200000d8
 8004ecc:	20000118 	.word	0x20000118

08004ed0 <qSchedulerAdd_Task>:

Return value:

    Returns qTrue on success, otherwise returns qFalse;
    */
qBool_t qSchedulerAdd_Task(qTask_t *Task, qTaskFcn_t CallbackFcn, qPriority_t Priority, qTime_t Time, qIteration_t nExecutions, qState_t InitialState, void* arg){
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	4611      	mov	r1, r2
 8004edc:	ed87 0a00 	vstr	s0, [r7]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	71fb      	strb	r3, [r7, #7]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	80bb      	strh	r3, [r7, #4]
    if(NULL==Task || NULL == CallbackFcn) return qFalse;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <qSchedulerAdd_Task+0x26>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <qSchedulerAdd_Task+0x2a>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e061      	b.n	8004fbe <qSchedulerAdd_Task+0xee>
    qSchedulerRemoveTask(Task); /*Remove the task if was previously added to the chain*/
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 f884 	bl	8005008 <qSchedulerRemoveTask>
    Task->Callback = CallbackFcn;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	60da      	str	r2, [r3, #12]
    Task->Interval = qTime2Clock(Time);
 8004f06:	ed97 0a00 	vldr	s0, [r7]
 8004f0a:	f7ff fec1 	bl	8004c90 <qTime2Clock>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	619a      	str	r2, [r3, #24]
    Task->TaskData = arg;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	605a      	str	r2, [r3, #4]
    Task->Priority = Priority;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	79fa      	ldrb	r2, [r7, #7]
 8004f1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    Task->Iterations = (qPeriodic==nExecutions)? qPeriodic : -nExecutions;    
 8004f22:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f26:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8004f2a:	d004      	beq.n	8004f36 <qSchedulerAdd_Task+0x66>
 8004f2c:	88bb      	ldrh	r3, [r7, #4]
 8004f2e:	425b      	negs	r3, r3
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	b21a      	sxth	r2, r3
 8004f34:	e000      	b.n	8004f38 <qSchedulerAdd_Task+0x68>
 8004f36:	4a24      	ldr	r2, [pc, #144]	; (8004fc8 <qSchedulerAdd_Task+0xf8>)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	84da      	strh	r2, [r3, #38]	; 0x26
    Task->Flag[_qIndex_AsyncRun] = qFalse;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    Task->Flag[_qIndex_InitFlag] = qFalse;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    Task->Flag[_qIndex_QueueReceiver] = qFalse; 
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    Task->Flag[_qIndex_QueueFull] = qFalse;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    Task->Flag[_qIndex_QueueCount] = qFalse;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    Task->Flag[_qIndex_QueueEmpty] = qFalse;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    Task->Flag[_qIndex_Enabled] = (qBool_t)(InitialState != qFalse);
 8004f6c:	7e3b      	ldrb	r3, [r7, #24]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bf14      	ite	ne
 8004f72:	2301      	movne	r3, #1
 8004f74:	2300      	moveq	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    Task->Next = NULL;  
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
    Task->Cycles = 0;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	621a      	str	r2, [r3, #32]
    Task->ClockStart = qSchedulerGetTick();
 8004f8c:	f000 f9b2 	bl	80052f4 <qSchedulerGetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	61da      	str	r2, [r3, #28]
    #ifdef Q_QUEUES
        Task->Queue = NULL;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	615a      	str	r2, [r3, #20]
    #endif
    Task->StateMachine = NULL;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	611a      	str	r2, [r3, #16]
    Task->State = qSuspended;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2203      	movs	r2, #3
 8004fa6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    QUARKTS.Head =  _qScheduler_PriorizedInsert( QUARKTS.Head, Task ); /*put the task on the list according to its priority*/
 8004faa:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <qSchedulerAdd_Task+0xfc>)
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	68f9      	ldr	r1, [r7, #12]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 f863 	bl	800507c <_qScheduler_PriorizedInsert>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <qSchedulerAdd_Task+0xfc>)
 8004fba:	619a      	str	r2, [r3, #24]
    return qTrue;
 8004fbc:	2301      	movs	r3, #1
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	ffff8000 	.word	0xffff8000
 8004fcc:	200000d8 	.word	0x200000d8

08004fd0 <qSchedulerAdd_EventTask>:
     
Return value:

    Returns qTrue on success, otherwise returns qFalse;
     */
qBool_t qSchedulerAdd_EventTask(qTask_t *Task, qTaskFcn_t CallbackFcn, qPriority_t Priority, void* arg){
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	71fb      	strb	r3, [r7, #7]
    return qSchedulerAdd_Task(Task, CallbackFcn, Priority, qTimeImmediate, qSingleShot, qDisabled, arg);
 8004fe0:	79fa      	ldrb	r2, [r7, #7]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	2301      	movs	r3, #1
 8004fec:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8005004 <qSchedulerAdd_EventTask+0x34>
 8004ff0:	68b9      	ldr	r1, [r7, #8]
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff ff6c 	bl	8004ed0 <qSchedulerAdd_Task>
 8004ff8:	4603      	mov	r3, r0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	00000000 	.word	0x00000000

08005008 <qSchedulerRemoveTask>:
     
Return value:

    Returns qTrue if success, otherwise returns qFalse.;     
    */
qBool_t qSchedulerRemoveTask(qTask_t *Task){
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
    qTask_t *tmp = QUARKTS.Head;
 8005010:	4b19      	ldr	r3, [pc, #100]	; (8005078 <qSchedulerRemoveTask+0x70>)
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	60fb      	str	r3, [r7, #12]
    qTask_t *prev = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	60bb      	str	r3, [r7, #8]
    if(NULL == tmp) return qFalse;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d106      	bne.n	800502e <qSchedulerRemoveTask+0x26>
 8005020:	2300      	movs	r3, #0
 8005022:	e022      	b.n	800506a <qSchedulerRemoveTask+0x62>
    while(tmp != Task && tmp->Next != NULL){ /*find the task to remove*/
        prev = tmp; /*keep on track the previous node*/
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	60bb      	str	r3, [r7, #8]
        tmp = tmp->Next;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60fb      	str	r3, [r7, #12]
    while(tmp != Task && tmp->Next != NULL){ /*find the task to remove*/
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	429a      	cmp	r2, r3
 8005034:	d003      	beq.n	800503e <qSchedulerRemoveTask+0x36>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f2      	bne.n	8005024 <qSchedulerRemoveTask+0x1c>
    }
    if(tmp == Task){ /*remove the task if was found on the chain*/
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	429a      	cmp	r2, r3
 8005044:	d110      	bne.n	8005068 <qSchedulerRemoveTask+0x60>
        if(prev) prev->Next = tmp->Next; /*make link between adjacent nodes, this cause that the task being removed from the chain*/
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d004      	beq.n	8005056 <qSchedulerRemoveTask+0x4e>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	e003      	b.n	800505e <qSchedulerRemoveTask+0x56>
        else QUARKTS.Head = tmp->Next; /*if the task is the head of the chain, move the head to the next node*/
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a07      	ldr	r2, [pc, #28]	; (8005078 <qSchedulerRemoveTask+0x70>)
 800505c:	6193      	str	r3, [r2, #24]
        Task->Next = NULL; /*Just in case the deleted task needs to be added later to the scheduling scheme, otherwise, this would fuck the whole chain*/
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]
        return qTrue;
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <qSchedulerRemoveTask+0x62>
    }
    return qFalse;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	200000d8 	.word	0x200000d8

0800507c <_qScheduler_PriorizedInsert>:
/*============================================================================*/
static qTask_t* _qScheduler_PriorizedInsert(qTask_t *head, qTask_t *Task){ /*return the new head if modified*/
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
    if( (NULL == head ) || (Task->Priority > head->Priority) ){ /*Is the first task in the scheme or the task has the highest priority over all */
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d009      	beq.n	80050a0 <_qScheduler_PriorizedInsert+0x24>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005092:	b2da      	uxtb	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800509a:	b2db      	uxtb	r3, r3
 800509c:	429a      	cmp	r2, r3
 800509e:	d904      	bls.n	80050aa <_qScheduler_PriorizedInsert+0x2e>
        Task->Next = head; /*move the head and just add the task node on top*/
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	601a      	str	r2, [r3, #0]
        return Task; /*this task will be the new head*/
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	e004      	b.n	80050b4 <_qScheduler_PriorizedInsert+0x38>
    }
    _qScheduler_FindPlace( head, Task);
 80050aa:	6839      	ldr	r1, [r7, #0]
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f805 	bl	80050bc <_qScheduler_FindPlace>
    return head; /*no change in the head, keep it*/
 80050b2:	687b      	ldr	r3, [r7, #4]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <_qScheduler_FindPlace>:
/*============================================================================*/
static void _qScheduler_FindPlace(qTask_t *head, qTask_t *Task){ /*find a new position for the task in the chain, when finded, put the task there*/
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
    qTask_t *tmp_node = NULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
    qPriority_t PrioTask = Task->Priority;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050d0:	72fb      	strb	r3, [r7, #11]
    tmp_node = head; /*start the head with the highest priority task*/
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	60fb      	str	r3, [r7, #12]
    while(tmp_node->Next && (PrioTask <= tmp_node->Next->Priority) ) { 
 80050d6:	e002      	b.n	80050de <_qScheduler_FindPlace+0x22>
        tmp_node = tmp_node->Next; /*find the right place for this task according its priority*/
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	60fb      	str	r3, [r7, #12]
    while(tmp_node->Next && (PrioTask <= tmp_node->Next->Priority) ) { 
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d007      	beq.n	80050f6 <_qScheduler_FindPlace+0x3a>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	7afa      	ldrb	r2, [r7, #11]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d9f0      	bls.n	80050d8 <_qScheduler_FindPlace+0x1c>
    }
    Task->Next = tmp_node->Next; /*the the new task  will be placed just after tmp*/
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	601a      	str	r2, [r3, #0]
    tmp_node->Next = Task; /*assign the task*/    
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	601a      	str	r2, [r3, #0]
}
 8005104:	bf00      	nop
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <_qScheduler_RearrangeChain>:
#ifdef Q_AUTO_CHAINREARRANGE
/*============================================================================*/
static qTask_t* _qScheduler_RearrangeChain(qTask_t *head){ /*this method rearrange the chain according the priority of all its nodes*/
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
    qTask_t *new_head = NULL, *tmp = head, *tmp1 = NULL;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
    qEnterCritical();
 8005124:	f7ff fd94 	bl	8004c50 <qEnterCritical>
    while(tmp){ /*start with a new head and re-insert the entire chain*/
 8005128:	e009      	b.n	800513e <_qScheduler_RearrangeChain+0x2e>
        tmp1 = tmp;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	60fb      	str	r3, [r7, #12]
        tmp = tmp->Next;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	613b      	str	r3, [r7, #16]
        new_head = _qScheduler_PriorizedInsert( new_head, tmp1);  
 8005134:	68f9      	ldr	r1, [r7, #12]
 8005136:	6978      	ldr	r0, [r7, #20]
 8005138:	f7ff ffa0 	bl	800507c <_qScheduler_PriorizedInsert>
 800513c:	6178      	str	r0, [r7, #20]
    while(tmp){ /*start with a new head and re-insert the entire chain*/
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f2      	bne.n	800512a <_qScheduler_RearrangeChain+0x1a>
    }
    QUARKTS.Flag.Init= qTrue; /*set the initialization flag*/
 8005144:	4b05      	ldr	r3, [pc, #20]	; (800515c <_qScheduler_RearrangeChain+0x4c>)
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    qExitCritical();
 800514c:	f7ff fd90 	bl	8004c70 <qExitCritical>
    return new_head; /*return the new head*/
 8005150:	697b      	ldr	r3, [r7, #20]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	200000d8 	.word	0x200000d8

08005160 <qTaskAttachQueue>:
Return value:

    Returns qTrue on success, otherwise returns qFalse;
*/
#ifdef Q_QUEUES
qBool_t qTaskAttachQueue(qTask_t *Task, qQueue_t *Queue, const qRBLinkMode_t Mode, uint8_t arg){
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	4611      	mov	r1, r2
 800516c:	461a      	mov	r2, r3
 800516e:	460b      	mov	r3, r1
 8005170:	71fb      	strb	r3, [r7, #7]
 8005172:	4613      	mov	r3, r2
 8005174:	71bb      	strb	r3, [r7, #6]
    if(NULL==Queue || NULL==Task || Mode<qQUEUE_RECEIVER || Mode>qQUEUE_EMPTY) return qFalse;   /*Validate*/
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d008      	beq.n	800518e <qTaskAttachQueue+0x2e>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <qTaskAttachQueue+0x2e>
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	2b02      	cmp	r3, #2
 8005186:	d902      	bls.n	800518e <qTaskAttachQueue+0x2e>
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	2b06      	cmp	r3, #6
 800518c:	d901      	bls.n	8005192 <qTaskAttachQueue+0x32>
 800518e:	2300      	movs	r3, #0
 8005190:	e020      	b.n	80051d4 <qTaskAttachQueue+0x74>
    if(NULL==Queue->pHead) return qFalse;    
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <qTaskAttachQueue+0x3e>
 800519a:	2300      	movs	r3, #0
 800519c:	e01a      	b.n	80051d4 <qTaskAttachQueue+0x74>
    Task->Flag[Mode] = (qBool_t)((Mode==qQUEUE_COUNT)? arg : (arg!=qFalse)); /*if mode is qQUEUE_COUNT, use their arg value as count*/
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	2b05      	cmp	r3, #5
 80051a2:	d007      	beq.n	80051b4 <qTaskAttachQueue+0x54>
 80051a4:	79bb      	ldrb	r3, [r7, #6]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	bf14      	ite	ne
 80051aa:	2301      	movne	r3, #1
 80051ac:	2300      	moveq	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	4619      	mov	r1, r3
 80051b2:	e000      	b.n	80051b6 <qTaskAttachQueue+0x56>
 80051b4:	79b9      	ldrb	r1, [r7, #6]
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4413      	add	r3, r2
 80051bc:	460a      	mov	r2, r1
 80051be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    Task->Queue = (arg>0)? Queue : NULL; /*reject, no valid arg input*/
 80051c2:	79bb      	ldrb	r3, [r7, #6]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <qTaskAttachQueue+0x6c>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	e000      	b.n	80051ce <qTaskAttachQueue+0x6e>
 80051cc:	2300      	movs	r3, #0
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	6153      	str	r3, [r2, #20]
    return qTrue;
 80051d2:	2301      	movs	r3, #1
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <_qCheckQueueEvents>:
/*============================================================================*/
static qTrigger_t _qCheckQueueEvents(qTask_t *Task){
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
    if(NULL==Task) return qTriggerNULL;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <_qCheckQueueEvents+0x12>
 80051ee:	2300      	movs	r3, #0
 80051f0:	e04c      	b.n	800528c <_qCheckQueueEvents+0xac>
    if(NULL==Task->Queue) return qTriggerNULL;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <_qCheckQueueEvents+0x1e>
 80051fa:	2300      	movs	r3, #0
 80051fc:	e046      	b.n	800528c <_qCheckQueueEvents+0xac>
    if(Task->Flag[_qIndex_QueueFull])       if(qQueueIsFull(Task->Queue))                                       return byQueueFull;           
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d009      	beq.n	800521e <_qCheckQueueEvents+0x3e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fc04 	bl	8005a1c <qQueueIsFull>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <_qCheckQueueEvents+0x3e>
 800521a:	2305      	movs	r3, #5
 800521c:	e036      	b.n	800528c <_qCheckQueueEvents+0xac>
    if(Task->Flag[_qIndex_QueueCount]>0)    if(qQueueCount(Task->Queue) >= Task->Flag[_qIndex_QueueCount] )     return byQueueCount;            
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00f      	beq.n	800524a <_qCheckQueueEvents+0x6a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fbe0 	bl	80059f4 <qQueueCount>
 8005234:	4603      	mov	r3, r0
 8005236:	461a      	mov	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800523e:	b2db      	uxtb	r3, r3
 8005240:	b29b      	uxth	r3, r3
 8005242:	429a      	cmp	r2, r3
 8005244:	d301      	bcc.n	800524a <_qCheckQueueEvents+0x6a>
 8005246:	2306      	movs	r3, #6
 8005248:	e020      	b.n	800528c <_qCheckQueueEvents+0xac>
    if(Task->Flag[_qIndex_QueueReceiver])   if(qQueueCount(Task->Queue) >0)                                     return byQueueReceiver;   
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d009      	beq.n	800526a <_qCheckQueueEvents+0x8a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	4618      	mov	r0, r3
 800525c:	f000 fbca 	bl	80059f4 <qQueueCount>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <_qCheckQueueEvents+0x8a>
 8005266:	2304      	movs	r3, #4
 8005268:	e010      	b.n	800528c <_qCheckQueueEvents+0xac>
    if(Task->Flag[_qIndex_QueueEmpty])      if(qQueueIsEmpty(Task->Queue))                                      return byQueueEmpty;       
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d009      	beq.n	800528a <_qCheckQueueEvents+0xaa>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fba2 	bl	80059c4 <qQueueIsEmpty>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <_qCheckQueueEvents+0xaa>
 8005286:	2307      	movs	r3, #7
 8005288:	e000      	b.n	800528c <_qCheckQueueEvents+0xac>
    return qTriggerNULL;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <_qTriggerReleaseSchedEvent>:
#endif
/*============================================================================*/
static void _qTriggerReleaseSchedEvent(void){
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
    QUARKTS.Flag.Init = qFalse;
 8005298:	4b14      	ldr	r3, [pc, #80]	; (80052ec <_qTriggerReleaseSchedEvent+0x58>)
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    QUARKTS.Flag.ReleaseSched = qFalse;   
 80052a0:	4b12      	ldr	r3, [pc, #72]	; (80052ec <_qTriggerReleaseSchedEvent+0x58>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    QUARKTS.EventInfo.FirstCall = (qBool_t)(!QUARKTS.Flag.FCallReleased);    
 80052a8:	4b10      	ldr	r3, [pc, #64]	; (80052ec <_qTriggerReleaseSchedEvent+0x58>)
 80052aa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bf0c      	ite	eq
 80052b4:	2301      	moveq	r3, #1
 80052b6:	2300      	movne	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	461a      	mov	r2, r3
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <_qTriggerReleaseSchedEvent+0x58>)
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    QUARKTS.EventInfo.Trigger = bySchedulingRelease;
 80052c2:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <_qTriggerReleaseSchedEvent+0x58>)
 80052c4:	2208      	movs	r2, #8
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    QUARKTS.EventInfo.TaskData = NULL;
 80052ca:	4b08      	ldr	r3, [pc, #32]	; (80052ec <_qTriggerReleaseSchedEvent+0x58>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	635a      	str	r2, [r3, #52]	; 0x34
    if(QUARKTS.ReleaseSchedCallback!=NULL) QUARKTS.ReleaseSchedCallback((qEvent_t)&QUARKTS.EventInfo);
 80052d0:	4b06      	ldr	r3, [pc, #24]	; (80052ec <_qTriggerReleaseSchedEvent+0x58>)
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <_qTriggerReleaseSchedEvent+0x4c>
 80052d8:	4b04      	ldr	r3, [pc, #16]	; (80052ec <_qTriggerReleaseSchedEvent+0x58>)
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	4804      	ldr	r0, [pc, #16]	; (80052f0 <_qTriggerReleaseSchedEvent+0x5c>)
 80052de:	4798      	blx	r3
    QUARKTS.Flag.FCallIdle = qTrue;      
 80052e0:	4b02      	ldr	r3, [pc, #8]	; (80052ec <_qTriggerReleaseSchedEvent+0x58>)
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 80052e8:	bf00      	nop
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	200000d8 	.word	0x200000d8
 80052f0:	2000010c 	.word	0x2000010c

080052f4 <qSchedulerGetTick>:
Feed the scheduler system tick. If TickProviderFcn is not provided in qSchedulerSetup, this 
call is mandatory and must be called once inside the dedicated timer interrupt service routine (ISR). 
*/    
void qSchedulerSysTick(void){_qSysTick_Epochs_++;}
/*============================================================================*/
qClock_t qSchedulerGetTick(void){   
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
	return ( NULL != QUARKTS.GetSysTick )? QUARKTS.GetSysTick() : _qSysTick_Epochs_;
 80052f8:	4b06      	ldr	r3, [pc, #24]	; (8005314 <qSchedulerGetTick+0x20>)
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <qSchedulerGetTick+0x16>
 8005300:	4b04      	ldr	r3, [pc, #16]	; (8005314 <qSchedulerGetTick+0x20>)
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	4798      	blx	r3
 8005306:	4603      	mov	r3, r0
 8005308:	e001      	b.n	800530e <qSchedulerGetTick+0x1a>
 800530a:	4b03      	ldr	r3, [pc, #12]	; (8005318 <qSchedulerGetTick+0x24>)
 800530c:	681b      	ldr	r3, [r3, #0]
}
 800530e:	4618      	mov	r0, r3
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	200000d8 	.word	0x200000d8
 8005318:	20000118 	.word	0x20000118

0800531c <qSchedulerRun>:
Executes the task-scheduler scheme. It must be called once after the task
pool has been defined.

  Note : qScheduleRun keeps the application in an endless loop
*/
void qSchedulerRun(void){
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
    qTask_t *Task = NULL; /*this pointer will hold the current node from the chain and/or the top enqueue node if available*/
 8005322:	2300      	movs	r3, #0
 8005324:	607b      	str	r3, [r7, #4]
    qSchedulerStartPoint{
 8005326:	4b2d      	ldr	r3, [pc, #180]	; (80053dc <qSchedulerRun+0xc0>)
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        #ifdef Q_AUTO_CHAINREARRANGE
        if(!QUARKTS.Flag.Init) QUARKTS.Head = _qScheduler_RearrangeChain(QUARKTS.Head); /*if initial scheduling conditions changed, sort the chain by priority (init flag internally set)*/
 800532e:	4b2b      	ldr	r3, [pc, #172]	; (80053dc <qSchedulerRun+0xc0>)
 8005330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d107      	bne.n	800534a <qSchedulerRun+0x2e>
 800533a:	4b28      	ldr	r3, [pc, #160]	; (80053dc <qSchedulerRun+0xc0>)
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff fee6 	bl	8005110 <_qScheduler_RearrangeChain>
 8005344:	4602      	mov	r2, r0
 8005346:	4b25      	ldr	r3, [pc, #148]	; (80053dc <qSchedulerRun+0xc0>)
 8005348:	619a      	str	r2, [r3, #24]
        #endif
        #ifdef Q_PRIORITY_QUEUE
        if((Task = _qScheduler_PriorityQueueGet())) Task->State = _qScheduler_Dispatch(Task, byQueueExtraction);  /*Available queueded task will be dispatched in every scheduling cycle : the queue has the higher precedence*/    
 800534a:	f7ff fcdb 	bl	8004d04 <_qScheduler_PriorityQueueGet>
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <qSchedulerRun+0x4c>
 8005356:	2102      	movs	r1, #2
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f869 	bl	8005430 <_qScheduler_Dispatch>
 800535e:	4603      	mov	r3, r0
 8005360:	461a      	mov	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        #endif
        if(_qScheduler_ReadyTasksAvailable()){  /*Check if all the tasks from the chain fulfill the conditions to get the qReady state, if at least one gained it,  enter here*/
 8005368:	f000 f962 	bl	8005630 <_qScheduler_ReadyTasksAvailable>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01c      	beq.n	80053ac <qSchedulerRun+0x90>
            while((Task = _qScheduler_GetNodeFromChain())) /*Get node by node from the chain until no more available*/
 8005372:	e014      	b.n	800539e <qSchedulerRun+0x82>
                Task->State = (qTaskState_t) ((qReady == Task->State) ? _qScheduler_Dispatch(Task, Task->Trigger) : qWaiting);  /*Dispatch the qReady tasks, otherwise put it in qWaiting State*/
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	d10a      	bne.n	8005396 <qSchedulerRun+0x7a>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005386:	b2db      	uxtb	r3, r3
 8005388:	4619      	mov	r1, r3
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f850 	bl	8005430 <_qScheduler_Dispatch>
 8005390:	4603      	mov	r3, r0
 8005392:	461a      	mov	r2, r3
 8005394:	e000      	b.n	8005398 <qSchedulerRun+0x7c>
 8005396:	2200      	movs	r2, #0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            while((Task = _qScheduler_GetNodeFromChain())) /*Get node by node from the chain until no more available*/
 800539e:	f000 f81f 	bl	80053e0 <_qScheduler_GetNodeFromChain>
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e4      	bne.n	8005374 <qSchedulerRun+0x58>
 80053aa:	e00a      	b.n	80053c2 <qSchedulerRun+0xa6>
        }
        else if( NULL==Task && QUARKTS.IDLECallback) _qScheduler_Dispatch(NULL, byNoReadyTasks); /*no tasks are available for execution, run the idle task*/
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d107      	bne.n	80053c2 <qSchedulerRun+0xa6>
 80053b2:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <qSchedulerRun+0xc0>)
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <qSchedulerRun+0xa6>
 80053ba:	2109      	movs	r1, #9
 80053bc:	2000      	movs	r0, #0
 80053be:	f000 f837 	bl	8005430 <_qScheduler_Dispatch>
    }qSchedulerEndPoint; /*scheduling end-point (also check for scheduling-release request)*/
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <qSchedulerRun+0xc0>)
 80053c4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0af      	beq.n	800532e <qSchedulerRun+0x12>
 80053ce:	f7ff ff61 	bl	8005294 <_qTriggerReleaseSchedEvent>
}
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	200000d8 	.word	0x200000d8

080053e0 <_qScheduler_GetNodeFromChain>:
/*============================================================================*/
static qTask_t* _qScheduler_GetNodeFromChain(void){ 
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
    static qTask_t *ChainIterator = __qChainInitializer; /*used to keep on track the current chain position*/
    qTask_t *Node;  /*used the hold the node*/
    if(__qChainInitializer == ChainIterator) ChainIterator = QUARKTS.Head; /*First call, start from the head*/
 80053e6:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <_qScheduler_GetNodeFromChain+0x44>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a0f      	ldr	r2, [pc, #60]	; (8005428 <_qScheduler_GetNodeFromChain+0x48>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d103      	bne.n	80053f8 <_qScheduler_GetNodeFromChain+0x18>
 80053f0:	4b0e      	ldr	r3, [pc, #56]	; (800542c <_qScheduler_GetNodeFromChain+0x4c>)
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	4a0b      	ldr	r2, [pc, #44]	; (8005424 <_qScheduler_GetNodeFromChain+0x44>)
 80053f6:	6013      	str	r3, [r2, #0]
    Node = ChainIterator; /*obtain the current node from the chain*/
 80053f8:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <_qScheduler_GetNodeFromChain+0x44>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	607b      	str	r3, [r7, #4]
    ChainIterator = (ChainIterator)? ChainIterator->Next : QUARKTS.Head; /*Tail reached, reset the iterator to the head*/
 80053fe:	4b09      	ldr	r3, [pc, #36]	; (8005424 <_qScheduler_GetNodeFromChain+0x44>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <_qScheduler_GetNodeFromChain+0x2e>
 8005406:	4b07      	ldr	r3, [pc, #28]	; (8005424 <_qScheduler_GetNodeFromChain+0x44>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	e001      	b.n	8005412 <_qScheduler_GetNodeFromChain+0x32>
 800540e:	4b07      	ldr	r3, [pc, #28]	; (800542c <_qScheduler_GetNodeFromChain+0x4c>)
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	4a04      	ldr	r2, [pc, #16]	; (8005424 <_qScheduler_GetNodeFromChain+0x44>)
 8005414:	6013      	str	r3, [r2, #0]
    return Node; /*return the task node at current chain position*/
 8005416:	687b      	ldr	r3, [r7, #4]
}
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	20000008 	.word	0x20000008
 8005428:	20000118 	.word	0x20000118
 800542c:	200000d8 	.word	0x200000d8

08005430 <_qScheduler_Dispatch>:
/*============================================================================*/
static qTaskState_t _qScheduler_Dispatch(qTask_t *Task, const qTrigger_t Event){
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	70fb      	strb	r3, [r7, #3]
    switch(Event){ /*take the necessary actions before dispatching, depending on the event that triggered the task*/
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	3b01      	subs	r3, #1
 8005440:	2b08      	cmp	r3, #8
 8005442:	f200 8097 	bhi.w	8005574 <_qScheduler_Dispatch+0x144>
 8005446:	a201      	add	r2, pc, #4	; (adr r2, 800544c <_qScheduler_Dispatch+0x1c>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	08005471 	.word	0x08005471
 8005450:	08005529 	.word	0x08005529
 8005454:	080054fb 	.word	0x080054fb
 8005458:	0800550d 	.word	0x0800550d
 800545c:	0800551f 	.word	0x0800551f
 8005460:	0800551f 	.word	0x0800551f
 8005464:	0800551f 	.word	0x0800551f
 8005468:	08005575 	.word	0x08005575
 800546c:	08005539 	.word	0x08005539
        case byTimeElapsed:
            /*handle the iteration value and the FirstIteration flag*/
            Task->Iterations = (QUARKTS.EventInfo.FirstIteration = (qBool_t)((Task->Iterations!=qPeriodic) && (Task->Iterations<0)))? -Task->Iterations : Task->Iterations;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005474:	b21b      	sxth	r3, r3
 8005476:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800547a:	d006      	beq.n	800548a <_qScheduler_Dispatch+0x5a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005480:	b21b      	sxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	da01      	bge.n	800548a <_qScheduler_Dispatch+0x5a>
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <_qScheduler_Dispatch+0x5c>
 800548a:	2300      	movs	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	4a66      	ldr	r2, [pc, #408]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 8005490:	4619      	mov	r1, r3
 8005492:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
 8005496:	2b00      	cmp	r3, #0
 8005498:	d007      	beq.n	80054aa <_qScheduler_Dispatch+0x7a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800549e:	b21b      	sxth	r3, r3
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	425b      	negs	r3, r3
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	b21b      	sxth	r3, r3
 80054a8:	e002      	b.n	80054b0 <_qScheduler_Dispatch+0x80>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054ae:	b21b      	sxth	r3, r3
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	84d3      	strh	r3, [r2, #38]	; 0x26
            if( qPeriodic!= Task->Iterations) Task->Iterations--; /*Decrease the iteration value*/
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054b8:	b21b      	sxth	r3, r3
 80054ba:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80054be:	d008      	beq.n	80054d2 <_qScheduler_Dispatch+0xa2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054c4:	b21b      	sxth	r3, r3
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	b21a      	sxth	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	84da      	strh	r2, [r3, #38]	; 0x26
            if( (QUARKTS.EventInfo.LastIteration = (qBool_t)(0 == Task->Iterations)) ) Task->Flag[_qIndex_Enabled] = qFalse; /*When the iteration value is reached, the task will be disabled*/            
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054d6:	b21b      	sxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	bf0c      	ite	eq
 80054dc:	2301      	moveq	r3, #1
 80054de:	2300      	movne	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	461a      	mov	r2, r3
 80054e4:	4b50      	ldr	r3, [pc, #320]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 80054e6:	4611      	mov	r1, r2
 80054e8:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
 80054ec:	2a00      	cmp	r2, #0
 80054ee:	d043      	beq.n	8005578 <_qScheduler_Dispatch+0x148>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            break;
 80054f8:	e03e      	b.n	8005578 <_qScheduler_Dispatch+0x148>
        case byAsyncEvent:
            QUARKTS.EventInfo.EventData = Task->AsyncData; /*Transfer async-data to the eventinfo structure*/
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	4a4a      	ldr	r2, [pc, #296]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 8005500:	6393      	str	r3, [r2, #56]	; 0x38
            Task->Flag[_qIndex_AsyncRun] = qFalse; /*Clear the async flag*/            
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
            break;
 800550a:	e036      	b.n	800557a <_qScheduler_Dispatch+0x14a>
        #ifdef Q_QUEUES    
        case byQueueReceiver:
            QUARKTS.EventInfo.EventData = qQueuePeek(Task->Queue); /*the EventData will point to the RBuffer front-data*/
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	4618      	mov	r0, r3
 8005512:	f000 fa9d 	bl	8005a50 <qQueuePeek>
 8005516:	4602      	mov	r2, r0
 8005518:	4b43      	ldr	r3, [pc, #268]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 800551a:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 800551c:	e02d      	b.n	800557a <_qScheduler_Dispatch+0x14a>
        case byQueueFull: case byQueueCount: case byQueueEmpty: 
            QUARKTS.EventInfo.EventData = (void*)Task->Queue;  /*the EventData will point to the the linked RingBuffer*/
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	4a41      	ldr	r2, [pc, #260]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 8005524:	6393      	str	r3, [r2, #56]	; 0x38
            break;
 8005526:	e028      	b.n	800557a <_qScheduler_Dispatch+0x14a>
        #endif
        #ifdef Q_PRIORITY_QUEUE
        case byQueueExtraction:
            QUARKTS.EventInfo.EventData = QUARKTS.QueueData; /*get the extracted data from queue*/
 8005528:	4b3f      	ldr	r3, [pc, #252]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	4a3e      	ldr	r2, [pc, #248]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 800552e:	6393      	str	r3, [r2, #56]	; 0x38
            QUARKTS.QueueData = NULL;
 8005530:	4b3d      	ldr	r3, [pc, #244]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 8005532:	2200      	movs	r2, #0
 8005534:	609a      	str	r2, [r3, #8]
            break;
 8005536:	e020      	b.n	800557a <_qScheduler_Dispatch+0x14a>
        #endif
        case byNoReadyTasks: /*only used for the idle task*/
            QUARKTS.EventInfo.FirstCall = (qBool_t)(!QUARKTS.Flag.FCallIdle);
 8005538:	4b3b      	ldr	r3, [pc, #236]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 800553a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	bf0c      	ite	eq
 8005544:	2301      	moveq	r3, #1
 8005546:	2300      	movne	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	461a      	mov	r2, r3
 800554c:	4b36      	ldr	r3, [pc, #216]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            QUARKTS.EventInfo.Trigger = Event;
 8005552:	4a35      	ldr	r2, [pc, #212]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
            QUARKTS.EventInfo.TaskData = NULL;
 800555a:	4b33      	ldr	r3, [pc, #204]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 800555c:	2200      	movs	r2, #0
 800555e:	635a      	str	r2, [r3, #52]	; 0x34
            QUARKTS.IDLECallback((qEvent_t)&QUARKTS.EventInfo); /*run the idle callback*/
 8005560:	4b31      	ldr	r3, [pc, #196]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	4831      	ldr	r0, [pc, #196]	; (800562c <_qScheduler_Dispatch+0x1fc>)
 8005566:	4798      	blx	r3
            QUARKTS.Flag.FCallIdle = qTrue;      
 8005568:	4b2f      	ldr	r3, [pc, #188]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            return qSuspended; /*No more things to do*/
 8005570:	2303      	movs	r3, #3
 8005572:	e055      	b.n	8005620 <_qScheduler_Dispatch+0x1f0>
        default: break;
 8005574:	bf00      	nop
 8005576:	e000      	b.n	800557a <_qScheduler_Dispatch+0x14a>
            break;
 8005578:	bf00      	nop
    }
    Task->State = qRunning; /*put the task in running state*/
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2202      	movs	r2, #2
 800557e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    /*Fill the event info structure*/
    _qEvent_FillCommonFields(QUARKTS.EventInfo, Event, (qBool_t)(!Task->Flag[_qIndex_InitFlag]), Task->TaskData); /*Fill common fields of EventInfo: Trigger, FirstCall and TaskData*/ 
 8005582:	4a29      	ldr	r2, [pc, #164]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	bf0c      	ite	eq
 8005596:	2301      	moveq	r3, #1
 8005598:	2300      	movne	r3, #0
 800559a:	b2db      	uxtb	r3, r3
 800559c:	461a      	mov	r2, r3
 800559e:	4b22      	ldr	r3, [pc, #136]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	4a1f      	ldr	r2, [pc, #124]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 80055aa:	6353      	str	r3, [r2, #52]	; 0x34
    QUARKTS.CurrentRunningTask = Task; /*needed for qTaskSelf()*/
 80055ac:	4a1e      	ldr	r2, [pc, #120]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if ( NULL != Task->StateMachine  && __qFSMCallbackMode==Task->Callback) qStateMachine_Run(Task->StateMachine, (void*)&QUARKTS.EventInfo);  /*If the task has a FSM attached, just run it*/  
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <_qScheduler_Dispatch+0x1a0>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d106      	bne.n	80055d0 <_qScheduler_Dispatch+0x1a0>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	4919      	ldr	r1, [pc, #100]	; (800562c <_qScheduler_Dispatch+0x1fc>)
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 f8cd 	bl	8005768 <qStateMachine_Run>
 80055ce:	e007      	b.n	80055e0 <_qScheduler_Dispatch+0x1b0>
    else if ( NULL != Task->Callback ) Task->Callback((qEvent_t)&QUARKTS.EventInfo); /*else, just launch the callback function*/        
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <_qScheduler_Dispatch+0x1b0>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4813      	ldr	r0, [pc, #76]	; (800562c <_qScheduler_Dispatch+0x1fc>)
 80055de:	4798      	blx	r3
    QUARKTS.CurrentRunningTask = NULL;
 80055e0:	4b11      	ldr	r3, [pc, #68]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	62da      	str	r2, [r3, #44]	; 0x2c
    #ifdef Q_QUEUES 
        if( byQueueReceiver == Event) qQueueRemoveFront(Task->Queue);  /*remove the data from the Queue, if the event was byQueueDequeue*/
 80055e6:	78fb      	ldrb	r3, [r7, #3]
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d104      	bne.n	80055f6 <_qScheduler_Dispatch+0x1c6>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fa54 	bl	8005a9e <qQueueRemoveFront>
    #endif
    Task->Flag[_qIndex_InitFlag] = qTrue; /*clear the init flag*/
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    QUARKTS.EventInfo.FirstIteration = qFalse;
 80055fe:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    QUARKTS.EventInfo.LastIteration =  qFalse; 
 8005606:	4b08      	ldr	r3, [pc, #32]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    QUARKTS.EventInfo.EventData = NULL; /*clear the eventdata*/
 800560e:	4b06      	ldr	r3, [pc, #24]	; (8005628 <_qScheduler_Dispatch+0x1f8>)
 8005610:	2200      	movs	r2, #0
 8005612:	639a      	str	r2, [r3, #56]	; 0x38
    Task->Cycles++; /*increase the task cycles value*/
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	621a      	str	r2, [r3, #32]
    return qSuspended;
 800561e:	2303      	movs	r3, #3
}
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	200000d8 	.word	0x200000d8
 800562c:	2000010c 	.word	0x2000010c

08005630 <_qScheduler_ReadyTasksAvailable>:
/*============================================================================*/
static qBool_t _qScheduler_ReadyTasksAvailable(void){ /*this method checks for tasks that fulfill the conditions to get the qReady state*/
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
    qTask_t *Task = NULL;
 8005636:	2300      	movs	r3, #0
 8005638:	607b      	str	r3, [r7, #4]
    #ifdef Q_QUEUES 
    qTrigger_t trg = qTriggerNULL;
 800563a:	2300      	movs	r3, #0
 800563c:	70bb      	strb	r3, [r7, #2]
    #endif
    qBool_t nTaskReady = qFalse; /*the return is to notify that at least one task gained the qReady state*/
 800563e:	2300      	movs	r3, #0
 8005640:	70fb      	strb	r3, [r7, #3]
    for(Task = QUARKTS.Head; Task; Task = Task->Next){ /*loop every task in the chain : only one event will be verified by node*/
 8005642:	4b40      	ldr	r3, [pc, #256]	; (8005744 <_qScheduler_ReadyTasksAvailable+0x114>)
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	607b      	str	r3, [r7, #4]
 8005648:	e073      	b.n	8005732 <_qScheduler_ReadyTasksAvailable+0x102>
        if(Task->Flag[_qIndex_Enabled]){ /*nested check for timed task, check the first requirement(the task must be enabled)*/
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d042      	beq.n	80056dc <_qScheduler_ReadyTasksAvailable+0xac>
            if(_qTaskHasPendingIterations(Task)){ /*then task should be periodic or must have available iters*/
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800565a:	b21b      	sxth	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	da0c      	bge.n	800567a <_qScheduler_ReadyTasksAvailable+0x4a>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005664:	b21b      	sxth	r3, r3
 8005666:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800566a:	d006      	beq.n	800567a <_qScheduler_ReadyTasksAvailable+0x4a>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005670:	b21b      	sxth	r3, r3
 8005672:	425b      	negs	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	dc0b      	bgt.n	8005690 <_qScheduler_ReadyTasksAvailable+0x60>
 8005678:	e004      	b.n	8005684 <_qScheduler_ReadyTasksAvailable+0x54>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800567e:	b21b      	sxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	dc05      	bgt.n	8005690 <_qScheduler_ReadyTasksAvailable+0x60>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005688:	b21b      	sxth	r3, r3
 800568a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800568e:	d125      	bne.n	80056dc <_qScheduler_ReadyTasksAvailable+0xac>
                if(_qTaskDeadlineReached(Task)){ /*finally, check the time deadline*/
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80056a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a4:	d00a      	beq.n	80056bc <_qScheduler_ReadyTasksAvailable+0x8c>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69da      	ldr	r2, [r3, #28]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f7ff fab8 	bl	8004c26 <_qScheduler_TimeDeadlineCheck>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00f      	beq.n	80056dc <_qScheduler_ReadyTasksAvailable+0xac>
                    Task->ClockStart = qSchedulerGetTick(); /*Restart the task time*/
 80056bc:	f7ff fe1a 	bl	80052f4 <qSchedulerGetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	61da      	str	r2, [r3, #28]
                    Task->State = qReady; /*Put the task in ready state*/
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                    Task->Trigger = byTimeElapsed; /*Set the corresponding trigger*/
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                    nTaskReady = qTrue; /*at least one task in the chain is ready to run*/
 80056d6:	2301      	movs	r3, #1
 80056d8:	70fb      	strb	r3, [r7, #3]
                    continue; /*check the next task*/                   
 80056da:	e027      	b.n	800572c <_qScheduler_ReadyTasksAvailable+0xfc>
                }
            }
        }
        #ifdef Q_QUEUES  
        if((trg=_qCheckQueueEvents(Task)) != qTriggerNULL){ /*If the deadline has not met, check if there is a RBuffer event available*/
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff fd7f 	bl	80051e0 <_qCheckQueueEvents>
 80056e2:	4603      	mov	r3, r0
 80056e4:	70bb      	strb	r3, [r7, #2]
 80056e6:	78bb      	ldrb	r3, [r7, #2]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <_qScheduler_ReadyTasksAvailable+0xd2>
            Task->State = qReady; /*Put the task in ready state*/
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            Task->Trigger = trg; /*If a RBuffer event exist, the flag will be available in the <trg> variable*/
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	78ba      	ldrb	r2, [r7, #2]
 80056f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            nTaskReady = qTrue;  /*at least one task in the chain is ready to run*/
 80056fc:	2301      	movs	r3, #1
 80056fe:	70fb      	strb	r3, [r7, #3]
            continue; /*check the next task*/
 8005700:	e014      	b.n	800572c <_qScheduler_ReadyTasksAvailable+0xfc>
        }
        #endif
        if( Task->Flag[_qIndex_AsyncRun]){   /*The last check will be if the task has an async event*/
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <_qScheduler_ReadyTasksAvailable+0xf4>
            Task->State = qReady; /*Put the task in ready state*/
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            Task->Trigger = byAsyncEvent; /*Set the corresponding trigger*/
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2203      	movs	r2, #3
 800571a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            nTaskReady = qTrue;  /*at least one task in the chain is ready to run*/
 800571e:	2301      	movs	r3, #1
 8005720:	70fb      	strb	r3, [r7, #3]
            continue; /*check the next task*/
 8005722:	e003      	b.n	800572c <_qScheduler_ReadyTasksAvailable+0xfc>
        }
        Task->State = qSuspended; /*If the task has no available events, put it in a suspended state*/
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2203      	movs	r2, #3
 8005728:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    for(Task = QUARKTS.Head; Task; Task = Task->Next){ /*loop every task in the chain : only one event will be verified by node*/
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	607b      	str	r3, [r7, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d188      	bne.n	800564a <_qScheduler_ReadyTasksAvailable+0x1a>
    }
    return nTaskReady;
 8005738:	78fb      	ldrb	r3, [r7, #3]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	200000d8 	.word	0x200000d8

08005748 <qStatemachine_ExecSubStateIfAvailable>:
    qConstField_Set(qSM_SubState_t, obj->qPrivate.__BeforeAnyState)/*obj->qPrivate.__BeforeAnyState*/ = BeforeAnyState;
    qConstField_Set(qSM_State_t, obj->LastState)/*obj->LastState*/ = NULL;
    return qTrue;
}
/*============================================================================*/
static void qStatemachine_ExecSubStateIfAvailable(qSM_SubState_t substate, qSM_t* obj){
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
    if (NULL != substate) substate(obj);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <qStatemachine_ExecSubStateIfAvailable+0x16>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6838      	ldr	r0, [r7, #0]
 800575c:	4798      	blx	r3
}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <qStateMachine_Run>:
    - Data : Represents the FSM arguments. All arguments must be passed by 
             reference and cast to (void *). Only one argument is allowed, so,
             for multiple arguments, create a structure that contains all of 
             the arguments and pass a pointer to that structure.
*/    
void qStateMachine_Run(qSM_t *obj, void *Data){
 8005768:	b590      	push	{r4, r7, lr}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
    qSM_State_t prev  = NULL; /*used to hold the previous state*/
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
    if( NULL == obj ) return;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d057      	beq.n	800582c <qStateMachine_Run+0xc4>
    qConstField_Set(void* ,obj->Data)/*obj->Data*/ = Data;   /*pass the data through the fsm*/
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3310      	adds	r3, #16
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	601a      	str	r2, [r3, #0]
    qStatemachine_ExecSubStateIfAvailable( obj->qPrivate.__BeforeAnyState , obj); /*eval the BeforeAnyState if available*/
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff ffdc 	bl	8005748 <qStatemachine_ExecSubStateIfAvailable>
    if( NULL != obj->NextState ){ /*eval nextState if available*/
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d025      	beq.n	80057e4 <qStateMachine_Run+0x7c>
        qConstField_Set(qBool_t, obj->StateFirstEntry)/*obj->StateFirstEntry*/ = (qBool_t)(obj->LastState != obj->NextState);  /*Get the StateFirstEntry flag*/
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	bf14      	ite	ne
 80057a4:	2301      	movne	r3, #1
 80057a6:	2300      	moveq	r3, #0
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	330e      	adds	r3, #14
 80057ae:	701a      	strb	r2, [r3, #0]
        if(obj->StateFirstEntry) qConstField_Set(qSM_State_t, obj->PreviousState)/*obj->PreviousState*/ = obj->LastState ; /*if StateFistEntry is set, update the PreviousState*/
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	7b9b      	ldrb	r3, [r3, #14]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <qStateMachine_Run+0x5a>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3304      	adds	r3, #4
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6892      	ldr	r2, [r2, #8]
 80057c0:	601a      	str	r2, [r3, #0]
        prev = obj->NextState; /*keep the next state in prev for LastState update*/
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60fb      	str	r3, [r7, #12]
        qConstField_Set(qSM_Status_t, obj->PreviousReturnStatus)/*obj->PreviousReturnStatus*/ = obj->NextState(obj); /*Eval the current state, and get their return status*/
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	f102 040c 	add.w	r4, r2, #12
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	4798      	blx	r3
 80057d6:	4603      	mov	r3, r0
 80057d8:	8023      	strh	r3, [r4, #0]
        qConstField_Set(qSM_State_t, obj->LastState)/*obj->LastState*/ = prev; /*update the LastState*/
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3308      	adds	r3, #8
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	e004      	b.n	80057ee <qStateMachine_Run+0x86>
    }
    else    qConstField_Set(qSM_Status_t, obj->PreviousReturnStatus)/*obj->PreviousReturnStatus*/ = qSM_EXIT_FAILURE; /*otherwise jump to the failure state*/
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	330c      	adds	r3, #12
 80057e8:	f248 0201 	movw	r2, #32769	; 0x8001
 80057ec:	801a      	strh	r2, [r3, #0]
    
    switch(obj->PreviousReturnStatus){ /*Check return status to eval extra states*/
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80057f4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80057f8:	d009      	beq.n	800580e <qStateMachine_Run+0xa6>
 80057fa:	4a0e      	ldr	r2, [pc, #56]	; (8005834 <qStateMachine_Run+0xcc>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d10d      	bne.n	800581c <qStateMachine_Run+0xb4>
        case qSM_EXIT_FAILURE:  qStatemachine_ExecSubStateIfAvailable( obj->qPrivate.__Failure, obj); /*Run failure state if available*/
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff ff9e 	bl	8005748 <qStatemachine_ExecSubStateIfAvailable>
            break;
 800580c:	e00f      	b.n	800582e <qStateMachine_Run+0xc6>
        case qSM_EXIT_SUCCESS:  qStatemachine_ExecSubStateIfAvailable( obj->qPrivate.__Success, obj); /*Run success state if available*/
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff ff97 	bl	8005748 <qStatemachine_ExecSubStateIfAvailable>
            break;
 800581a:	e008      	b.n	800582e <qStateMachine_Run+0xc6>
        default:                qStatemachine_ExecSubStateIfAvailable( obj->qPrivate.__Unexpected, obj ); /*Run unexpected state if available*/
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff ff90 	bl	8005748 <qStatemachine_ExecSubStateIfAvailable>
            break;
 8005828:	bf00      	nop
 800582a:	e000      	b.n	800582e <qStateMachine_Run+0xc6>
    if( NULL == obj ) return;
 800582c:	bf00      	nop
    }
 }
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	bd90      	pop	{r4, r7, pc}
 8005834:	ffff8001 	.word	0xffff8001

08005838 <qSTimerSet>:

Return value:

    Returns qTrue on success, otherwise, returns qFalse.
*/
qBool_t qSTimerSet(qSTimer_t *obj, const qTime_t Time){
 8005838:	b590      	push	{r4, r7, lr}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	ed87 0a00 	vstr	s0, [r7]
    if(NULL==obj) return qFalse;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <qSTimerSet+0x16>
 800584a:	2300      	movs	r3, #0
 800584c:	e011      	b.n	8005872 <qSTimerSet+0x3a>
    qConstField_Set(qClock_t, obj->TV)/*obj->TV*/ = qTime2Clock(Time); /*set the STimer time in epochs*/
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	1d1c      	adds	r4, r3, #4
 8005852:	ed97 0a00 	vldr	s0, [r7]
 8005856:	f7ff fa1b 	bl	8004c90 <qTime2Clock>
 800585a:	4603      	mov	r3, r0
 800585c:	6023      	str	r3, [r4, #0]
    qConstField_Set(qClock_t, obj->Start)/*obj->Start*/ = qSchedulerGetTick(); /*set the init time of the STimer with the current system epoch value*/
 800585e:	687c      	ldr	r4, [r7, #4]
 8005860:	f7ff fd48 	bl	80052f4 <qSchedulerGetTick>
 8005864:	4603      	mov	r3, r0
 8005866:	6023      	str	r3, [r4, #0]
    qConstField_Set(qBool_t, obj->SR)/*obj->SR*/ = qTrue; /*enable the STimer*/
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3308      	adds	r3, #8
 800586c:	2201      	movs	r2, #1
 800586e:	701a      	strb	r2, [r3, #0]
    return qTrue;
 8005870:	2301      	movs	r3, #1
}
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	bd90      	pop	{r4, r7, pc}

0800587a <qSTimerExpired>:

    Returns qTrue when STimer expires, otherwise, returns qFalse.
    > Note 1: A disarmed STimer also returns false.

*/
qBool_t qSTimerExpired(const qSTimer_t *obj){
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
    if(NULL==obj) return qFalse;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <qSTimerExpired+0x12>
 8005888:	2300      	movs	r3, #0
 800588a:	e010      	b.n	80058ae <qSTimerExpired+0x34>
    if(!obj->SR) return qFalse; 
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	7a1b      	ldrb	r3, [r3, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <qSTimerExpired+0x1e>
 8005894:	2300      	movs	r3, #0
 8005896:	e00a      	b.n	80058ae <qSTimerExpired+0x34>
    return (qBool_t)(qSTimerElapsed(obj)>=obj->TV); 
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f80c 	bl	80058b6 <qSTimerElapsed>
 800589e:	4602      	mov	r2, r0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	bf2c      	ite	cs
 80058a8:	2301      	movcs	r3, #1
 80058aa:	2300      	movcc	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <qSTimerElapsed>:

Return value:

    The Elapsed time specified in epochs
*/
qClock_t qSTimerElapsed(const qSTimer_t *obj){
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
    if(NULL==obj) return 0ul;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <qSTimerElapsed+0x12>
 80058c4:	2300      	movs	r3, #0
 80058c6:	e00b      	b.n	80058e0 <qSTimerElapsed+0x2a>
    if(!obj->SR) return 0;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	7a1b      	ldrb	r3, [r3, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <qSTimerElapsed+0x1e>
 80058d0:	2300      	movs	r3, #0
 80058d2:	e005      	b.n	80058e0 <qSTimerElapsed+0x2a>
    return (qSchedulerGetTick()- obj->Start);
 80058d4:	f7ff fd0e 	bl	80052f4 <qSchedulerGetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	1ad3      	subs	r3, r2, r3
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <qSTimerDisarm>:

Parameters:

    - obj : A pointer to the STimer object.  
*/
void qSTimerDisarm(qSTimer_t *obj){
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
    if(NULL==obj) return;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <qSTimerDisarm+0x1e>
    qConstField_Set(qBool_t, obj->SR) /*obj->SR*/ = qFalse;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3308      	adds	r3, #8
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]
    qConstField_Set(qClock_t, obj->Start) /*obj->Start*/ = 0ul;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	e000      	b.n	8005908 <qSTimerDisarm+0x20>
    if(NULL==obj) return;
 8005906:	bf00      	nop
}
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <qQueueCreate>:
    Return value:

    qTrue on success, otherwise returns qFalse.

 */
qBool_t qQueueCreate(qQueue_t *obj, void* DataArea, qSize_t ItemSize, qSize_t ItemsCount ){
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	4611      	mov	r1, r2
 800591e:	461a      	mov	r2, r3
 8005920:	460b      	mov	r3, r1
 8005922:	80fb      	strh	r3, [r7, #6]
 8005924:	4613      	mov	r3, r2
 8005926:	80bb      	strh	r3, [r7, #4]
    if( NULL == obj || NULL == DataArea || ItemsCount <= 0 || ItemsCount <= 0)  return qFalse;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <qQueueCreate+0x2e>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <qQueueCreate+0x2e>
 8005934:	88bb      	ldrh	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <qQueueCreate+0x2e>
 800593a:	88bb      	ldrh	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <qQueueCreate+0x32>
 8005940:	2300      	movs	r3, #0
 8005942:	e018      	b.n	8005976 <qQueueCreate+0x64>
    obj->ItemsCount = ItemsCount;   /* Initialise the queue members*/
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	88ba      	ldrh	r2, [r7, #4]
 8005948:	825a      	strh	r2, [r3, #18]
    obj->ItemSize = ItemSize;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	88fa      	ldrh	r2, [r7, #6]
 800594e:	829a      	strh	r2, [r3, #20]
    obj->pHead = DataArea;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	601a      	str	r2, [r3, #0]
    obj->pTail = obj->pHead + (obj->ItemsCount * obj->ItemSize); 
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	8a52      	ldrh	r2, [r2, #18]
 800595e:	4611      	mov	r1, r2
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	8a92      	ldrh	r2, [r2, #20]
 8005964:	fb02 f201 	mul.w	r2, r2, r1
 8005968:	441a      	add	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	605a      	str	r2, [r3, #4]
    qQueueReset(obj);
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f805 	bl	800597e <qQueueReset>
    return qTrue;
 8005974:	2301      	movs	r3, #1
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <qQueueReset>:
 
Parameters:

    - obj : a pointer to the Queue object
*/
void qQueueReset(qQueue_t *obj){
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
    if(NULL == obj) return;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d017      	beq.n	80059bc <qQueueReset+0x3e>
    qEnterCritical();
 800598c:	f7ff f960 	bl	8004c50 <qEnterCritical>
    obj->ItemsWaiting = 0u;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	821a      	strh	r2, [r3, #16]
    obj->pcWriteTo = obj->pHead;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	609a      	str	r2, [r3, #8]
    obj->pcReadFrom = obj->pHead + ( ( obj->ItemsCount - 1u ) * obj->ItemSize );
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	8a5b      	ldrh	r3, [r3, #18]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	8a89      	ldrh	r1, [r1, #20]
 80059ac:	fb01 f303 	mul.w	r3, r1, r3
 80059b0:	441a      	add	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	60da      	str	r2, [r3, #12]
    qExitCritical();
 80059b6:	f7ff f95b 	bl	8004c70 <qExitCritical>
 80059ba:	e000      	b.n	80059be <qQueueReset+0x40>
    if(NULL == obj) return;
 80059bc:	bf00      	nop
}
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <qQueueIsEmpty>:
  
Return value:

    qTrue if the Queue is empty, qFalse if it is not.
 */
qBool_t qQueueIsEmpty(qQueue_t *obj){
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
    return (qBool_t)(obj ?  obj->ItemsWaiting == 0u : qTrue);    
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d009      	beq.n	80059e6 <qQueueIsEmpty+0x22>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	8a1b      	ldrh	r3, [r3, #16]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bf0c      	ite	eq
 80059dc:	2301      	moveq	r3, #1
 80059de:	2300      	movne	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	e000      	b.n	80059e8 <qQueueIsEmpty+0x24>
 80059e6:	2301      	movs	r3, #1
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <qQueueCount>:
  
Return value:

    The number of elements in the queue
 */
qSize_t qQueueCount(qQueue_t *obj){
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
    return (qBool_t)(obj ?  obj->ItemsWaiting : 0u);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <qQueueCount+0x1a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	8a1b      	ldrh	r3, [r3, #16]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	e000      	b.n	8005a10 <qQueueCount+0x1c>
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <qQueueIsFull>:
Return value:

    qTrue if the Queue is full, qFalse if it is not.
 */
/*============================================================================*/
qBool_t qQueueIsFull(qQueue_t *obj){
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
    return (qBool_t)(obj ?  obj->ItemsWaiting == obj->ItemsCount : qFalse);  
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <qQueueIsFull+0x26>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	8a1b      	ldrh	r3, [r3, #16]
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8a5b      	ldrh	r3, [r3, #18]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	bf0c      	ite	eq
 8005a38:	2301      	moveq	r3, #1
 8005a3a:	2300      	movne	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	e000      	b.n	8005a44 <qQueueIsFull+0x28>
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <qQueuePeek>:
  
Return value:

    Pointer to the data, or NULL if there is nothing in the queue
 */
void* qQueuePeek(qQueue_t *obj){
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
    uint8_t *RetValue = NULL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]
    if(NULL == obj) return RetValue;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <qQueuePeek+0x16>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	e017      	b.n	8005a96 <qQueuePeek+0x46>
    if( obj->ItemsWaiting > 0u ){
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	8a1b      	ldrh	r3, [r3, #16]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d011      	beq.n	8005a94 <qQueuePeek+0x44>
        qEnterCritical();
 8005a70:	f7ff f8ee 	bl	8004c50 <qEnterCritical>
        RetValue = (void*)(obj->pcReadFrom + obj->ItemSize);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	8a92      	ldrh	r2, [r2, #20]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
        if( RetValue >= obj->pTail ) RetValue = obj->pHead;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d302      	bcc.n	8005a90 <qQueuePeek+0x40>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]
        qExitCritical();
 8005a90:	f7ff f8ee 	bl	8004c70 <qExitCritical>
    }
    return (void*)RetValue;
 8005a94:	68fb      	ldr	r3, [r7, #12]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <qQueueRemoveFront>:
  
Return value:

    qTrue if data was removed from the Queue, otherwise returns qFalse
 */
qBool_t qQueueRemoveFront(qQueue_t *obj){
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b082      	sub	sp, #8
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
    if (NULL==obj) return qFalse;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <qQueueRemoveFront+0x12>
 8005aac:	2300      	movs	r3, #0
 8005aae:	e015      	b.n	8005adc <qQueueRemoveFront+0x3e>
    if( obj->ItemsWaiting > 0u ){
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8a1b      	ldrh	r3, [r3, #16]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00f      	beq.n	8005ada <qQueueRemoveFront+0x3c>
        qEnterCritical();
 8005aba:	f7ff f8c9 	bl	8004c50 <qEnterCritical>
        qQueueMoveReader(obj);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f810 	bl	8005ae4 <qQueueMoveReader>
        --( obj->ItemsWaiting ); /* remove the data. */
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	8a1b      	ldrh	r3, [r3, #16]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	821a      	strh	r2, [r3, #16]
        qExitCritical();
 8005ad2:	f7ff f8cd 	bl	8004c70 <qExitCritical>
        return qTrue;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e000      	b.n	8005adc <qQueueRemoveFront+0x3e>
    }
    return qFalse;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <qQueueMoveReader>:
        if( obj->pcReadFrom < obj->pHead ) obj->pcReadFrom = ( obj->pTail - obj->ItemSize );    
    }
    ++( obj->ItemsWaiting );
}
/*==================================================================================*/
static void qQueueMoveReader(qQueue_t *obj){
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
    obj->pcReadFrom += obj->ItemSize;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	8a92      	ldrh	r2, [r2, #20]
 8005af4:	441a      	add	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	60da      	str	r2, [r3, #12]
    if( obj->pcReadFrom >= obj->pTail ) obj->pcReadFrom = obj->pHead;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d303      	bcc.n	8005b0e <qQueueMoveReader+0x2a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	60da      	str	r2, [r3, #12]
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <qOutputString>:
    - fcn : The basic output byte function
    - pStorage : The storage pointer passed to fcn
    - s: The string to be written
    - AIP : Auto-Increment the storage-pointer
*/
void qOutputString(qPutChar_t fcn, void* pStorage, const char *s, qBool_t AIP){
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b086      	sub	sp, #24
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	70fb      	strb	r3, [r7, #3]
    size_t i = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	617b      	str	r3, [r7, #20]
    while(*s)  fcn(((AIP)? (char*)pStorage+(i++): pStorage), *s++);
 8005b2c:	e010      	b.n	8005b50 <qOutputString+0x36>
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <qOutputString+0x26>
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	617a      	str	r2, [r7, #20]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	441a      	add	r2, r3
 8005b3e:	e000      	b.n	8005b42 <qOutputString+0x28>
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	1c59      	adds	r1, r3, #1
 8005b46:	6079      	str	r1, [r7, #4]
 8005b48:	7819      	ldrb	r1, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4798      	blx	r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1ea      	bne.n	8005b2e <qOutputString+0x14>
}
 8005b58:	bf00      	nop
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <qNibbleToX>:
/*============================================================================*/
static char qNibbleToX(uint8_t value){
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	4603      	mov	r3, r0
 8005b68:	71fb      	strb	r3, [r7, #7]
    char ch;
    ch = (char)(value & 0x0F) + '0';
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	3330      	adds	r3, #48	; 0x30
 8005b74:	73fb      	strb	r3, [r7, #15]
    return (char) ((ch > '9') ? ch + 7u : ch);
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	2b39      	cmp	r3, #57	; 0x39
 8005b7a:	d903      	bls.n	8005b84 <qNibbleToX+0x24>
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	3307      	adds	r3, #7
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	e000      	b.n	8005b86 <qNibbleToX+0x26>
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <qPrintXData>:
/*============================================================================*/
void qPrintXData(qPutChar_t fcn, void* pStorage, void *data, qSize_t n){
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b086      	sub	sp, #24
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
 8005b9e:	807b      	strh	r3, [r7, #2]
    uint8_t *pdat =(uint8_t*)data; 
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	613b      	str	r3, [r7, #16]
    int i;
    for(i=0;i<n;i++, fcn(pStorage, ' ')){
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	e025      	b.n	8005bf6 <qPrintXData+0x64>
        fcn(pStorage, qNibbleToX( qByteHighNibble(pdat[i]) ) );
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4413      	add	r3, r2
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff ffd2 	bl	8005b60 <qNibbleToX>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	68b8      	ldr	r0, [r7, #8]
 8005bc6:	4798      	blx	r3
        fcn(pStorage, qNibbleToX( qByteLowNibble(pdat[i]) ) );
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4413      	add	r3, r2
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	f003 030f 	and.w	r3, r3, #15
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff ffc2 	bl	8005b60 <qNibbleToX>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	461a      	mov	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4611      	mov	r1, r2
 8005be4:	68b8      	ldr	r0, [r7, #8]
 8005be6:	4798      	blx	r3
    for(i=0;i<n;i++, fcn(pStorage, ' ')){
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	3301      	adds	r3, #1
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2120      	movs	r1, #32
 8005bf2:	68b8      	ldr	r0, [r7, #8]
 8005bf4:	4798      	blx	r3
 8005bf6:	887b      	ldrh	r3, [r7, #2]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	dbd5      	blt.n	8005baa <qPrintXData+0x18>
    }
    fcn(pStorage, '\r' );
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	210d      	movs	r1, #13
 8005c02:	68b8      	ldr	r0, [r7, #8]
 8005c04:	4798      	blx	r3
    fcn(pStorage, '\n' );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	210a      	movs	r1, #10
 8005c0a:	68b8      	ldr	r0, [r7, #8]
 8005c0c:	4798      	blx	r3
}
 8005c0e:	bf00      	nop
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <qResponseInitialize>:
Parameters:

    - obj : A pointer to the Response Handler object
  
*/
void qResponseInitialize(qResponseHandler_t *obj){
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
    obj->Pattern2Match = NULL;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
    obj->PatternLength = 0;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	809a      	strh	r2, [r3, #4]
    obj->MatchedCount = 0;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	80da      	strh	r2, [r3, #6]
    obj->ResponseReceived = qFalse;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	721a      	strb	r2, [r3, #8]
}   
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
	...

08005c44 <qResponseReceived>:
  
Return value:

    qTrue if there is a response acknowledge, otherwise returns qFalse
*/
qBool_t qResponseReceived(qResponseHandler_t *obj, const char *Pattern, qSize_t n){
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	80fb      	strh	r3, [r7, #6]
    return qResponseReceivedWithTimeout(obj, Pattern, n, NULL, 0);
 8005c52:	88fa      	ldrh	r2, [r7, #6]
 8005c54:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8005c6c <qResponseReceived+0x28>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 f807 	bl	8005c70 <qResponseReceivedWithTimeout>
 8005c62:	4603      	mov	r3, r0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	00000000 	.word	0x00000000

08005c70 <qResponseReceivedWithTimeout>:

    qTrue if there is a response acknowledge,
    qTimeoutReached if timeout t expires
    otherwise returns qFalse
*/
qBool_t qResponseReceivedWithTimeout(qResponseHandler_t *obj, const char *Pattern, qSize_t n, qSTimer_t *timeout, qTime_t t){
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6178      	str	r0, [r7, #20]
 8005c78:	6139      	str	r1, [r7, #16]
 8005c7a:	60bb      	str	r3, [r7, #8]
 8005c7c:	ed87 0a01 	vstr	s0, [r7, #4]
 8005c80:	4613      	mov	r3, r2
 8005c82:	81fb      	strh	r3, [r7, #14]
    if(qFalse == obj->ResponseReceived && NULL == obj->Pattern2Match){ /*handler no configured yet*/
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	7a1b      	ldrb	r3, [r3, #8]
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d11f      	bne.n	8005cce <qResponseReceivedWithTimeout+0x5e>
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d11b      	bne.n	8005cce <qResponseReceivedWithTimeout+0x5e>
        obj->PatternLength = (0 == n)? strlen(Pattern) : n; /*set the number of chars to match*/
 8005c96:	89fb      	ldrh	r3, [r7, #14]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d105      	bne.n	8005ca8 <qResponseReceivedWithTimeout+0x38>
 8005c9c:	6938      	ldr	r0, [r7, #16]
 8005c9e:	f7fa fa97 	bl	80001d0 <strlen>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	e000      	b.n	8005caa <qResponseReceivedWithTimeout+0x3a>
 8005ca8:	89fb      	ldrh	r3, [r7, #14]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	8093      	strh	r3, [r2, #4]
        obj->MatchedCount = 0; /*reinitialize the chars match count*/
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	80da      	strh	r2, [r3, #6]
        obj->ResponseReceived = qFalse; /*clear the ready flag*/
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	721a      	strb	r2, [r3, #8]
        obj->Pattern2Match = (char*)Pattern; /*set the expected response pattern*/
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	601a      	str	r2, [r3, #0]
        qSTimerSet(timeout, t);
 8005cc0:	ed97 0a01 	vldr	s0, [r7, #4]
 8005cc4:	68b8      	ldr	r0, [r7, #8]
 8005cc6:	f7ff fdb7 	bl	8005838 <qSTimerSet>
        return qFalse; 
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e01b      	b.n	8005d06 <qResponseReceivedWithTimeout+0x96>
    }
    if(qSTimerExpired(timeout)){
 8005cce:	68b8      	ldr	r0, [r7, #8]
 8005cd0:	f7ff fdd3 	bl	800587a <qSTimerExpired>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <qResponseReceivedWithTimeout+0x7a>
        qResponseInitialize(obj); /*re-initialize the response handler*/
 8005cda:	6978      	ldr	r0, [r7, #20]
 8005cdc:	f7ff ff9b 	bl	8005c16 <qResponseInitialize>
        qSTimerDisarm(timeout);
 8005ce0:	68b8      	ldr	r0, [r7, #8]
 8005ce2:	f7ff fe01 	bl	80058e8 <qSTimerDisarm>
        return qResponseTimeout;
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e00d      	b.n	8005d06 <qResponseReceivedWithTimeout+0x96>
    }        
    if(obj->ResponseReceived){ /*if response received from ISR match the expected*/
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	7a1b      	ldrb	r3, [r3, #8]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d007      	beq.n	8005d04 <qResponseReceivedWithTimeout+0x94>
        qResponseInitialize(obj); /*re-initialize the response handler*/
 8005cf4:	6978      	ldr	r0, [r7, #20]
 8005cf6:	f7ff ff8e 	bl	8005c16 <qResponseInitialize>
        qSTimerDisarm(timeout);
 8005cfa:	68b8      	ldr	r0, [r7, #8]
 8005cfc:	f7ff fdf4 	bl	80058e8 <qSTimerDisarm>
        return qTrue; /*let it know to the caller that expected response was received*/
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <qResponseReceivedWithTimeout+0x96>
    } 
    else return qFalse;    
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <qResponseISRHandler>:

Return value:

    qTrue when the Response handler match the request from "qResponseReceived"
*/
qBool_t qResponseISRHandler(qResponseHandler_t *obj, const char rxchar){
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	460b      	mov	r3, r1
 8005d18:	70fb      	strb	r3, [r7, #3]
    if(qTrue == obj->ResponseReceived || NULL == obj->Pattern2Match) return qFalse; /*wait until the qResponseReceived release the flag*/
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	7a1b      	ldrb	r3, [r3, #8]
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d003      	beq.n	8005d2c <qResponseISRHandler+0x1e>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <qResponseISRHandler+0x22>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e01d      	b.n	8005d6c <qResponseISRHandler+0x5e>
    
    if(obj->Pattern2Match[obj->MatchedCount] == rxchar){ /*if the received char match with the expected*/
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	88d2      	ldrh	r2, [r2, #6]
 8005d38:	b292      	uxth	r2, r2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	78fa      	ldrb	r2, [r7, #3]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d110      	bne.n	8005d66 <qResponseISRHandler+0x58>
        obj->MatchedCount++; /*move to the next char in the expected buffer*/
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	88db      	ldrh	r3, [r3, #6]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	80da      	strh	r2, [r3, #6]
        if(obj->MatchedCount == obj->PatternLength)  obj->ResponseReceived = qTrue; /*if all the requested chars match, set the ready flag */
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	88db      	ldrh	r3, [r3, #6]
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	889b      	ldrh	r3, [r3, #4]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d102      	bne.n	8005d66 <qResponseISRHandler+0x58>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	721a      	strb	r2, [r3, #8]
    }
    return obj->ResponseReceived; /*return the ready flag*/
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	7a1b      	ldrb	r3, [r3, #8]
 8005d6a:	b2db      	uxtb	r3, r3
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <__qtrace_func>:
    }    
    return 0;
}
/*============================================================================*/
#ifdef Q_TRACE_VARIABLES
void __qtrace_func(const char *loc, const char* fcn, const char *varname, const char* varvalue, void* Pointer, qSize_t BlockSize){
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
    if(NULL != __qDebugOutputFcn){ /*trace only if the output-function is defined*/
 8005d86:	4b23      	ldr	r3, [pc, #140]	; (8005e14 <__qtrace_func+0x9c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d03d      	beq.n	8005e0a <__qtrace_func+0x92>
        qPrintString(__qDebugOutputFcn, NULL, loc); /*print out the line location*/
 8005d8e:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <__qtrace_func+0x9c>)
 8005d90:	6818      	ldr	r0, [r3, #0]
 8005d92:	2300      	movs	r3, #0
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	2100      	movs	r1, #0
 8005d98:	f7ff febf 	bl	8005b1a <qOutputString>
        if(fcn){ /*print out the function if available*/
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d010      	beq.n	8005dc4 <__qtrace_func+0x4c>
            __qDebugOutputFcn(NULL, '@');
 8005da2:	4b1c      	ldr	r3, [pc, #112]	; (8005e14 <__qtrace_func+0x9c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2140      	movs	r1, #64	; 0x40
 8005da8:	2000      	movs	r0, #0
 8005daa:	4798      	blx	r3
            qPrintString(__qDebugOutputFcn, NULL, fcn); 
 8005dac:	4b19      	ldr	r3, [pc, #100]	; (8005e14 <__qtrace_func+0x9c>)
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	2300      	movs	r3, #0
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	2100      	movs	r1, #0
 8005db6:	f7ff feb0 	bl	8005b1a <qOutputString>
            __qDebugOutputFcn(NULL, ' ');
 8005dba:	4b16      	ldr	r3, [pc, #88]	; (8005e14 <__qtrace_func+0x9c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2120      	movs	r1, #32
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	4798      	blx	r3
        }
        qPrintString(__qDebugOutputFcn, NULL, varname);
 8005dc4:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <__qtrace_func+0x9c>)
 8005dc6:	6818      	ldr	r0, [r3, #0]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	2100      	movs	r1, #0
 8005dce:	f7ff fea4 	bl	8005b1a <qOutputString>
        if(NULL == varvalue){ /*if varvalue is not defined, the call must correspond to memory tracing*/
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d107      	bne.n	8005de8 <__qtrace_func+0x70>
            qPrintXData(__qDebugOutputFcn, NULL, Pointer, BlockSize); /*print out the memory in hex format*/
 8005dd8:	4b0e      	ldr	r3, [pc, #56]	; (8005e14 <__qtrace_func+0x9c>)
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	8bbb      	ldrh	r3, [r7, #28]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	2100      	movs	r1, #0
 8005de2:	f7ff fed6 	bl	8005b92 <qPrintXData>
            qPrintString(__qDebugOutputFcn, NULL, varvalue);
            __qDebugOutputFcn(NULL, '\r');
            __qDebugOutputFcn(NULL, '\n');
        }
    }
}
 8005de6:	e010      	b.n	8005e0a <__qtrace_func+0x92>
            qPrintString(__qDebugOutputFcn, NULL, varvalue);
 8005de8:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <__qtrace_func+0x9c>)
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	2300      	movs	r3, #0
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	2100      	movs	r1, #0
 8005df2:	f7ff fe92 	bl	8005b1a <qOutputString>
            __qDebugOutputFcn(NULL, '\r');
 8005df6:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <__qtrace_func+0x9c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	210d      	movs	r1, #13
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	4798      	blx	r3
            __qDebugOutputFcn(NULL, '\n');
 8005e00:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <__qtrace_func+0x9c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	210a      	movs	r1, #10
 8005e06:	2000      	movs	r0, #0
 8005e08:	4798      	blx	r3
}
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	2000011c 	.word	0x2000011c

08005e18 <__qReg_32Bits>:
#endif

/*============================================================================*/
qBool_t __qReg_32Bits(void *Address, qBool_t PinNumber){
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	70fb      	strb	r3, [r7, #3]
    uint32_t Register = 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]
    Register = *((uint32_t*)Address);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	60fb      	str	r3, [r7, #12]
    return qBitRead(Register, PinNumber);
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	2201      	movs	r2, #1
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	461a      	mov	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	bf14      	ite	ne
 8005e40:	2301      	movne	r3, #1
 8005e42:	2300      	moveq	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
	...

08005e54 <qEdgeCheck_Initialize>:
  
Return value:

    qTrue on success, otherwise returns qFalse
*/
qBool_t qEdgeCheck_Initialize(qIOEdgeCheck_t *Instance, qCoreRegSize_t RegisterSize, qClock_t DebounceTime){
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
    if(NULL == Instance) return qFalse;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <qEdgeCheck_Initialize+0x16>
 8005e66:	2300      	movs	r3, #0
 8005e68:	e016      	b.n	8005e98 <qEdgeCheck_Initialize+0x44>
    Instance->Head = NULL;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]
    Instance->DebounceTime = DebounceTime;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	609a      	str	r2, [r3, #8]
    Instance->Reader = (NULL==RegisterSize)? QREG_32BIT  : RegisterSize;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <qEdgeCheck_Initialize+0x2c>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	e000      	b.n	8005e82 <qEdgeCheck_Initialize+0x2e>
 8005e80:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <qEdgeCheck_Initialize+0x4c>)
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	60d3      	str	r3, [r2, #12]
    Instance->State = QEDGECHECK_CHECK;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	741a      	strb	r2, [r3, #16]
    Instance->Start = qSchedulerGetTick();
 8005e8c:	f7ff fa32 	bl	80052f4 <qSchedulerGetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	605a      	str	r2, [r3, #4]
    return qTrue;
 8005e96:	2301      	movs	r3, #1
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	08005e19 	.word	0x08005e19

08005ea4 <qEdgeCheck_InsertNode>:
  
Return value:

    qTrue on success, otherwise returns qFalse
*/
qBool_t qEdgeCheck_InsertNode(qIOEdgeCheck_t *Instance, qIONode_t *Node, void *PortAddress, qBool_t PinNumber){
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	70fb      	strb	r3, [r7, #3]
    if(NULL == Node || NULL == Instance) return qFalse;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <qEdgeCheck_InsertNode+0x1a>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <qEdgeCheck_InsertNode+0x1e>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e019      	b.n	8005ef6 <qEdgeCheck_InsertNode+0x52>
    Node->Port = PortAddress;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	609a      	str	r2, [r3, #8]
    Node->Pin = PinNumber;
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	78fa      	ldrb	r2, [r7, #3]
 8005ecc:	701a      	strb	r2, [r3, #0]
    Node->Next = Instance->Head;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	605a      	str	r2, [r3, #4]
    Node->PreviousPinValue = Instance->Reader( Node->Port, Node->Pin );
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	6890      	ldr	r0, [r2, #8]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	7812      	ldrb	r2, [r2, #0]
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	4798      	blx	r3
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	461a      	mov	r2, r3
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	705a      	strb	r2, [r3, #1]
    Instance->Head = Node;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	601a      	str	r2, [r3, #0]
    return qTrue;
 8005ef4:	2301      	movs	r3, #1
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <IdleTask_Callback>:
void Leds_Callback(qEvent_t e){
	IndicatorBlink(Color.TimeBlink,Color.OneColor);  // 300 mS
}


void IdleTask_Callback(qEvent_t e){
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]


	//	PrintStringVar(&huart2,(uint8_t*) "status = %d ", SigFoxData.WilsolService_Status);
}
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
	...

08005f14 <UplinkDispatcher_Callback>:

void UplinkDispatcher_Callback(qEvent_t e){
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	6078      	str	r0, [r7, #4]
	static WSSFM1XRX_Return_t ret;
	qCoroutineBegin{
 8005f1c:	4b4a      	ldr	r3, [pc, #296]	; (8006048 <UplinkDispatcher_Callback+0x134>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b1e      	cmp	r3, #30
 8005f22:	d023      	beq.n	8005f6c <UplinkDispatcher_Callback+0x58>
 8005f24:	2b1e      	cmp	r3, #30
 8005f26:	dc03      	bgt.n	8005f30 <UplinkDispatcher_Callback+0x1c>
 8005f28:	4a48      	ldr	r2, [pc, #288]	; (800604c <UplinkDispatcher_Callback+0x138>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d005      	beq.n	8005f3a <UplinkDispatcher_Callback+0x26>
			SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_SENT_MESSAGE;
			qRBufferRemoveFront(e->EventData);
			PrintStringVar(&hlpuart1,(uint8_t*) "%d\r\n", SigFoxData.WilsolService_Status);
		}
	}qCoroutineEnd;
}
 8005f2e:	e086      	b.n	800603e <UplinkDispatcher_Callback+0x12a>
	qCoroutineBegin{
 8005f30:	2b22      	cmp	r3, #34	; 0x22
 8005f32:	d032      	beq.n	8005f9a <UplinkDispatcher_Callback+0x86>
 8005f34:	2b2c      	cmp	r3, #44	; 0x2c
 8005f36:	d054      	beq.n	8005fe2 <UplinkDispatcher_Callback+0xce>
}
 8005f38:	e081      	b.n	800603e <UplinkDispatcher_Callback+0x12a>
		if(e->Trigger == byRBufferCount && SigFoxData.ReadyToUplink){
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	7a1b      	ldrb	r3, [r3, #8]
 8005f3e:	2b06      	cmp	r3, #6
 8005f40:	d174      	bne.n	800602c <UplinkDispatcher_Callback+0x118>
 8005f42:	4b43      	ldr	r3, [pc, #268]	; (8006050 <UplinkDispatcher_Callback+0x13c>)
 8005f44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d06f      	beq.n	800602c <UplinkDispatcher_Callback+0x118>
			SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_CHK_CHANNELS;
 8005f4c:	4b40      	ldr	r3, [pc, #256]	; (8006050 <UplinkDispatcher_Callback+0x13c>)
 8005f4e:	2209      	movs	r2, #9
 8005f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PrintStringVar(&hlpuart1,(uint8_t*) "%d " , SigFoxData.WilsolService_Status);
 8005f54:	4b3e      	ldr	r3, [pc, #248]	; (8006050 <UplinkDispatcher_Callback+0x13c>)
 8005f56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	493d      	ldr	r1, [pc, #244]	; (8006054 <UplinkDispatcher_Callback+0x140>)
 8005f60:	483d      	ldr	r0, [pc, #244]	; (8006058 <UplinkDispatcher_Callback+0x144>)
 8005f62:	f7fe fa4f 	bl	8004404 <PrintStringVar>
			qCoroutineWaitUntil( (ret = WSSFM1XRX_CheckChannels(&SigfoxModule, WAIT ))  == WSSFM1XRX_CHANN_OK || ret == WSSFM1XRX_CHANN_NO_OK );
 8005f66:	4b38      	ldr	r3, [pc, #224]	; (8006048 <UplinkDispatcher_Callback+0x134>)
 8005f68:	221e      	movs	r2, #30
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	493b      	ldr	r1, [pc, #236]	; (800605c <UplinkDispatcher_Callback+0x148>)
 8005f6e:	483c      	ldr	r0, [pc, #240]	; (8006060 <UplinkDispatcher_Callback+0x14c>)
 8005f70:	f7fe fbf6 	bl	8004760 <WSSFM1XRX_CheckChannels>
 8005f74:	4603      	mov	r3, r0
 8005f76:	461a      	mov	r2, r3
 8005f78:	4b3a      	ldr	r3, [pc, #232]	; (8006064 <UplinkDispatcher_Callback+0x150>)
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	4b39      	ldr	r3, [pc, #228]	; (8006064 <UplinkDispatcher_Callback+0x150>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b07      	cmp	r3, #7
 8005f82:	d003      	beq.n	8005f8c <UplinkDispatcher_Callback+0x78>
 8005f84:	4b37      	ldr	r3, [pc, #220]	; (8006064 <UplinkDispatcher_Callback+0x150>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d153      	bne.n	8006034 <UplinkDispatcher_Callback+0x120>
			if(  ret == WSSFM1XRX_CHANN_NO_OK   ){
 8005f8c:	4b35      	ldr	r3, [pc, #212]	; (8006064 <UplinkDispatcher_Callback+0x150>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d116      	bne.n	8005fc2 <UplinkDispatcher_Callback+0xae>
				qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE ==  WSSFM1XRX_ResetChannels(&SigfoxModule,WAIT) );  /*Se daña con 0.01 en task pero solo con el at$rc*/ //WSSFM1XRX_Wait_Block
 8005f94:	4b2c      	ldr	r3, [pc, #176]	; (8006048 <UplinkDispatcher_Callback+0x134>)
 8005f96:	2222      	movs	r2, #34	; 0x22
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	4930      	ldr	r1, [pc, #192]	; (800605c <UplinkDispatcher_Callback+0x148>)
 8005f9c:	4830      	ldr	r0, [pc, #192]	; (8006060 <UplinkDispatcher_Callback+0x14c>)
 8005f9e:	f7fe fc03 	bl	80047a8 <WSSFM1XRX_ResetChannels>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d147      	bne.n	8006038 <UplinkDispatcher_Callback+0x124>
				SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_RST_CHANNELS;
 8005fa8:	4b29      	ldr	r3, [pc, #164]	; (8006050 <UplinkDispatcher_Callback+0x13c>)
 8005faa:	220a      	movs	r2, #10
 8005fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 8005fb0:	4b27      	ldr	r3, [pc, #156]	; (8006050 <UplinkDispatcher_Callback+0x13c>)
 8005fb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4926      	ldr	r1, [pc, #152]	; (8006054 <UplinkDispatcher_Callback+0x140>)
 8005fbc:	4826      	ldr	r0, [pc, #152]	; (8006058 <UplinkDispatcher_Callback+0x144>)
 8005fbe:	f7fe fa21 	bl	8004404 <PrintStringVar>
			SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_SEND_MESSAGE;
 8005fc2:	4b23      	ldr	r3, [pc, #140]	; (8006050 <UplinkDispatcher_Callback+0x13c>)
 8005fc4:	220b      	movs	r2, #11
 8005fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PrintStringVar(&hlpuart1,(uint8_t*) "%d ", SigFoxData.WilsolService_Status);
 8005fca:	4b21      	ldr	r3, [pc, #132]	; (8006050 <UplinkDispatcher_Callback+0x13c>)
 8005fcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	491f      	ldr	r1, [pc, #124]	; (8006054 <UplinkDispatcher_Callback+0x140>)
 8005fd6:	4820      	ldr	r0, [pc, #128]	; (8006058 <UplinkDispatcher_Callback+0x144>)
 8005fd8:	f7fe fa14 	bl	8004404 <PrintStringVar>
			qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_SendMessage(&SigfoxModule,WAIT,qRBufferGetFront(e->EventData) ,BufferTxFrame,MAX_SIZE_IBUTTON_DATA,SigfoxModule.DownLink) );
 8005fdc:	4b1a      	ldr	r3, [pc, #104]	; (8006048 <UplinkDispatcher_Callback+0x134>)
 8005fde:	222c      	movs	r2, #44	; 0x2c
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff fd32 	bl	8005a50 <qQueuePeek>
 8005fec:	4602      	mov	r2, r0
 8005fee:	4b1c      	ldr	r3, [pc, #112]	; (8006060 <UplinkDispatcher_Callback+0x14c>)
 8005ff0:	7f5b      	ldrb	r3, [r3, #29]
 8005ff2:	9301      	str	r3, [sp, #4]
 8005ff4:	230c      	movs	r3, #12
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	4b1b      	ldr	r3, [pc, #108]	; (8006068 <UplinkDispatcher_Callback+0x154>)
 8005ffa:	4918      	ldr	r1, [pc, #96]	; (800605c <UplinkDispatcher_Callback+0x148>)
 8005ffc:	4818      	ldr	r0, [pc, #96]	; (8006060 <UplinkDispatcher_Callback+0x14c>)
 8005ffe:	f7fe fbed 	bl	80047dc <WSSFM1XRX_SendMessage>
 8006002:	4603      	mov	r3, r0
 8006004:	2b03      	cmp	r3, #3
 8006006:	d119      	bne.n	800603c <UplinkDispatcher_Callback+0x128>
			SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_SENT_MESSAGE;
 8006008:	4b11      	ldr	r3, [pc, #68]	; (8006050 <UplinkDispatcher_Callback+0x13c>)
 800600a:	220c      	movs	r2, #12
 800600c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			qRBufferRemoveFront(e->EventData);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff fd42 	bl	8005a9e <qQueueRemoveFront>
			PrintStringVar(&hlpuart1,(uint8_t*) "%d\r\n", SigFoxData.WilsolService_Status);
 800601a:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <UplinkDispatcher_Callback+0x13c>)
 800601c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006020:	b29b      	uxth	r3, r3
 8006022:	461a      	mov	r2, r3
 8006024:	4911      	ldr	r1, [pc, #68]	; (800606c <UplinkDispatcher_Callback+0x158>)
 8006026:	480c      	ldr	r0, [pc, #48]	; (8006058 <UplinkDispatcher_Callback+0x144>)
 8006028:	f7fe f9ec 	bl	8004404 <PrintStringVar>
	}qCoroutineEnd;
 800602c:	4b06      	ldr	r3, [pc, #24]	; (8006048 <UplinkDispatcher_Callback+0x134>)
 800602e:	4a07      	ldr	r2, [pc, #28]	; (800604c <UplinkDispatcher_Callback+0x138>)
 8006030:	601a      	str	r2, [r3, #0]
}
 8006032:	e004      	b.n	800603e <UplinkDispatcher_Callback+0x12a>
			qCoroutineWaitUntil( (ret = WSSFM1XRX_CheckChannels(&SigfoxModule, WAIT ))  == WSSFM1XRX_CHANN_OK || ret == WSSFM1XRX_CHANN_NO_OK );
 8006034:	bf00      	nop
 8006036:	e002      	b.n	800603e <UplinkDispatcher_Callback+0x12a>
				qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE ==  WSSFM1XRX_ResetChannels(&SigfoxModule,WAIT) );  /*Se daña con 0.01 en task pero solo con el at$rc*/ //WSSFM1XRX_Wait_Block
 8006038:	bf00      	nop
 800603a:	e000      	b.n	800603e <UplinkDispatcher_Callback+0x12a>
			qCoroutineWaitUntil( WSSFM1XRX_OK_RESPONSE == WSSFM1XRX_SendMessage(&SigfoxModule,WAIT,qRBufferGetFront(e->EventData) ,BufferTxFrame,MAX_SIZE_IBUTTON_DATA,SigfoxModule.DownLink) );
 800603c:	bf00      	nop
}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	2000000c 	.word	0x2000000c
 800604c:	ffff8002 	.word	0xffff8002
 8006050:	20000260 	.word	0x20000260
 8006054:	08008134 	.word	0x08008134
 8006058:	200002e0 	.word	0x200002e0
 800605c:	08004679 	.word	0x08004679
 8006060:	200004c8 	.word	0x200004c8
 8006064:	20000120 	.word	0x20000120
 8006068:	20000570 	.word	0x20000570
 800606c:	08008138 	.word	0x08008138

08006070 <LoRaWANService_Callback>:
		qCoroutineWaitUntil( SigFoxData.WilsolService_Status == WSSFM1XRX_STATUS_IDLE  );

	}qCoroutineEnd;
}

void LoRaWANService_Callback(qEvent_t e){
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af02      	add	r7, sp, #8
 8006076:	6078      	str	r0, [r7, #4]
	static char BufferAux[100];
	static uint8_t contRetry,i=0;

	qCRPosition_t state;
	qCoroutineBegin{
 8006078:	4baf      	ldr	r3, [pc, #700]	; (8006338 <LoRaWANService_Callback+0x2c8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2be5      	cmp	r3, #229	; 0xe5
 800607e:	f000 82e0 	beq.w	8006642 <LoRaWANService_Callback+0x5d2>
 8006082:	2be5      	cmp	r3, #229	; 0xe5
 8006084:	dc42      	bgt.n	800610c <LoRaWANService_Callback+0x9c>
 8006086:	2ba8      	cmp	r3, #168	; 0xa8
 8006088:	f000 818c 	beq.w	80063a4 <LoRaWANService_Callback+0x334>
 800608c:	2ba8      	cmp	r3, #168	; 0xa8
 800608e:	dc1b      	bgt.n	80060c8 <LoRaWANService_Callback+0x58>
 8006090:	2b8e      	cmp	r3, #142	; 0x8e
 8006092:	f000 80e1 	beq.w	8006258 <LoRaWANService_Callback+0x1e8>
 8006096:	2b8e      	cmp	r3, #142	; 0x8e
 8006098:	dc0b      	bgt.n	80060b2 <LoRaWANService_Callback+0x42>
 800609a:	2b86      	cmp	r3, #134	; 0x86
 800609c:	f000 80b3 	beq.w	8006206 <LoRaWANService_Callback+0x196>
 80060a0:	2b89      	cmp	r3, #137	; 0x89
 80060a2:	f000 80bc 	beq.w	800621e <LoRaWANService_Callback+0x1ae>
 80060a6:	4aa5      	ldr	r2, [pc, #660]	; (800633c <LoRaWANService_Callback+0x2cc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	f000 8088 	beq.w	80061be <LoRaWANService_Callback+0x14e>
		//qPrintString(UART_BG96,NULL,BG96_Data.Frame);
	}qCoroutineEnd;



}
 80060ae:	f000 bd5f 	b.w	8006b70 <LoRaWANService_Callback+0xb00>
	qCoroutineBegin{
 80060b2:	2b9b      	cmp	r3, #155	; 0x9b
 80060b4:	f000 8113 	beq.w	80062de <LoRaWANService_Callback+0x26e>
 80060b8:	2ba4      	cmp	r3, #164	; 0xa4
 80060ba:	f000 8160 	beq.w	800637e <LoRaWANService_Callback+0x30e>
 80060be:	2b97      	cmp	r3, #151	; 0x97
 80060c0:	f000 80fa 	beq.w	80062b8 <LoRaWANService_Callback+0x248>
}
 80060c4:	f000 bd54 	b.w	8006b70 <LoRaWANService_Callback+0xb00>
	qCoroutineBegin{
 80060c8:	2bc2      	cmp	r3, #194	; 0xc2
 80060ca:	f000 81ed 	beq.w	80064a8 <LoRaWANService_Callback+0x438>
 80060ce:	2bc2      	cmp	r3, #194	; 0xc2
 80060d0:	dc0a      	bgt.n	80060e8 <LoRaWANService_Callback+0x78>
 80060d2:	2bb5      	cmp	r3, #181	; 0xb5
 80060d4:	f000 81a7 	beq.w	8006426 <LoRaWANService_Callback+0x3b6>
 80060d8:	2bbe      	cmp	r3, #190	; 0xbe
 80060da:	f000 81d2 	beq.w	8006482 <LoRaWANService_Callback+0x412>
 80060de:	2bb1      	cmp	r3, #177	; 0xb1
 80060e0:	f000 818e 	beq.w	8006400 <LoRaWANService_Callback+0x390>
}
 80060e4:	f000 bd44 	b.w	8006b70 <LoRaWANService_Callback+0xb00>
	qCoroutineBegin{
 80060e8:	2bcf      	cmp	r3, #207	; 0xcf
 80060ea:	f000 821e 	beq.w	800652a <LoRaWANService_Callback+0x4ba>
 80060ee:	2bcf      	cmp	r3, #207	; 0xcf
 80060f0:	dc04      	bgt.n	80060fc <LoRaWANService_Callback+0x8c>
 80060f2:	2bcb      	cmp	r3, #203	; 0xcb
 80060f4:	f000 8206 	beq.w	8006504 <LoRaWANService_Callback+0x494>
}
 80060f8:	f000 bd3a 	b.w	8006b70 <LoRaWANService_Callback+0xb00>
	qCoroutineBegin{
 80060fc:	2bd8      	cmp	r3, #216	; 0xd8
 80060fe:	f000 8242 	beq.w	8006586 <LoRaWANService_Callback+0x516>
 8006102:	2bdc      	cmp	r3, #220	; 0xdc
 8006104:	f000 8252 	beq.w	80065ac <LoRaWANService_Callback+0x53c>
}
 8006108:	f000 bd32 	b.w	8006b70 <LoRaWANService_Callback+0xb00>
	qCoroutineBegin{
 800610c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006110:	f000 83f4 	beq.w	80068fc <LoRaWANService_Callback+0x88c>
 8006114:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006118:	dc21      	bgt.n	800615e <LoRaWANService_Callback+0xee>
 800611a:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 800611e:	f000 8330 	beq.w	8006782 <LoRaWANService_Callback+0x712>
 8006122:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8006126:	dc0a      	bgt.n	800613e <LoRaWANService_Callback+0xce>
 8006128:	2bf4      	cmp	r3, #244	; 0xf4
 800612a:	f000 82ce 	beq.w	80066ca <LoRaWANService_Callback+0x65a>
 800612e:	2bfa      	cmp	r3, #250	; 0xfa
 8006130:	f000 82e6 	beq.w	8006700 <LoRaWANService_Callback+0x690>
 8006134:	2be9      	cmp	r3, #233	; 0xe9
 8006136:	f000 8297 	beq.w	8006668 <LoRaWANService_Callback+0x5f8>
}
 800613a:	f000 bd19 	b.w	8006b70 <LoRaWANService_Callback+0xb00>
	qCoroutineBegin{
 800613e:	f240 121f 	movw	r2, #287	; 0x11f
 8006142:	4293      	cmp	r3, r2
 8006144:	f000 8377 	beq.w	8006836 <LoRaWANService_Callback+0x7c6>
 8006148:	f240 1223 	movw	r2, #291	; 0x123
 800614c:	4293      	cmp	r3, r2
 800614e:	f000 8386 	beq.w	800685e <LoRaWANService_Callback+0x7ee>
 8006152:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8006156:	f000 8330 	beq.w	80067ba <LoRaWANService_Callback+0x74a>
}
 800615a:	f000 bd09 	b.w	8006b70 <LoRaWANService_Callback+0xb00>
	qCoroutineBegin{
 800615e:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 8006162:	f000 8451 	beq.w	8006a08 <LoRaWANService_Callback+0x998>
 8006166:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 800616a:	dc0f      	bgt.n	800618c <LoRaWANService_Callback+0x11c>
 800616c:	f240 1239 	movw	r2, #313	; 0x139
 8006170:	4293      	cmp	r3, r2
 8006172:	f000 8406 	beq.w	8006982 <LoRaWANService_Callback+0x912>
 8006176:	f240 123d 	movw	r2, #317	; 0x13d
 800617a:	4293      	cmp	r3, r2
 800617c:	f000 8415 	beq.w	80069aa <LoRaWANService_Callback+0x93a>
 8006180:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006184:	f000 83ce 	beq.w	8006924 <LoRaWANService_Callback+0x8b4>
}
 8006188:	f000 bcf2 	b.w	8006b70 <LoRaWANService_Callback+0xb00>
	qCoroutineBegin{
 800618c:	f240 1253 	movw	r2, #339	; 0x153
 8006190:	4293      	cmp	r3, r2
 8006192:	f000 847c 	beq.w	8006a8e <LoRaWANService_Callback+0xa1e>
 8006196:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800619a:	da05      	bge.n	80061a8 <LoRaWANService_Callback+0x138>
 800619c:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80061a0:	f000 8446 	beq.w	8006a30 <LoRaWANService_Callback+0x9c0>
}
 80061a4:	f000 bce4 	b.w	8006b70 <LoRaWANService_Callback+0xb00>
	qCoroutineBegin{
 80061a8:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 80061ac:	f000 8488 	beq.w	8006ac0 <LoRaWANService_Callback+0xa50>
 80061b0:	f240 1261 	movw	r2, #353	; 0x161
 80061b4:	4293      	cmp	r3, r2
 80061b6:	f000 84b1 	beq.w	8006b1c <LoRaWANService_Callback+0xaac>
}
 80061ba:	f000 bcd9 	b.w	8006b70 <LoRaWANService_Callback+0xb00>
		HAL_GPIO_WritePin(Sigfox_Rst_GPIO_Port, Sigfox_Rst_Pin, GPIO_PIN_SET);
 80061be:	2201      	movs	r2, #1
 80061c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061c4:	485e      	ldr	r0, [pc, #376]	; (8006340 <LoRaWANService_Callback+0x2d0>)
 80061c6:	f7fb fc4f 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Sigfox_shutdown_GPIO_Port, Sigfox_shutdown_Pin, GPIO_PIN_SET);
 80061ca:	2201      	movs	r2, #1
 80061cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80061d0:	485b      	ldr	r0, [pc, #364]	; (8006340 <LoRaWANService_Callback+0x2d0>)
 80061d2:	f7fb fc49 	bl	8001a68 <HAL_GPIO_WritePin>
		qDebugMessage("Coroutine from Beginning Lora");
 80061d6:	2300      	movs	r3, #0
 80061d8:	9301      	str	r3, [sp, #4]
 80061da:	2300      	movs	r3, #0
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	4b59      	ldr	r3, [pc, #356]	; (8006344 <LoRaWANService_Callback+0x2d4>)
 80061e0:	4a59      	ldr	r2, [pc, #356]	; (8006348 <LoRaWANService_Callback+0x2d8>)
 80061e2:	2100      	movs	r1, #0
 80061e4:	4858      	ldr	r0, [pc, #352]	; (8006348 <LoRaWANService_Callback+0x2d8>)
 80061e6:	f7ff fdc7 	bl	8005d78 <__qtrace_func>
		memset(UART_RX3.Buffer,0,sizeof(UART_RX3.Buffer));
 80061ea:	2219      	movs	r2, #25
 80061ec:	2100      	movs	r1, #0
 80061ee:	4857      	ldr	r0, [pc, #348]	; (800634c <LoRaWANService_Callback+0x2dc>)
 80061f0:	f001 fa5b 	bl	80076aa <memset>
		qPrintString(UART_LORA,NULL,"sys reset\r\n");
 80061f4:	2300      	movs	r3, #0
 80061f6:	4a56      	ldr	r2, [pc, #344]	; (8006350 <LoRaWANService_Callback+0x2e0>)
 80061f8:	2100      	movs	r1, #0
 80061fa:	4856      	ldr	r0, [pc, #344]	; (8006354 <LoRaWANService_Callback+0x2e4>)
 80061fc:	f7ff fc8d 	bl	8005b1a <qOutputString>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"RN2903\r\n",0)) );
 8006200:	4b4d      	ldr	r3, [pc, #308]	; (8006338 <LoRaWANService_Callback+0x2c8>)
 8006202:	2286      	movs	r2, #134	; 0x86
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	2200      	movs	r2, #0
 8006208:	4953      	ldr	r1, [pc, #332]	; (8006358 <LoRaWANService_Callback+0x2e8>)
 800620a:	4854      	ldr	r0, [pc, #336]	; (800635c <LoRaWANService_Callback+0x2ec>)
 800620c:	f7ff fd1a 	bl	8005c44 <qResponseReceived>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 848b 	beq.w	8006b2e <LoRaWANService_Callback+0xabe>
		qCoroutinePositionGet(state);
 8006218:	4b51      	ldr	r3, [pc, #324]	; (8006360 <LoRaWANService_Callback+0x2f0>)
 800621a:	2289      	movs	r2, #137	; 0x89
 800621c:	601a      	str	r2, [r3, #0]
		qSTimerSet(&Timeout,2.0);
 800621e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006222:	4850      	ldr	r0, [pc, #320]	; (8006364 <LoRaWANService_Callback+0x2f4>)
 8006224:	f7ff fb08 	bl	8005838 <qSTimerSet>
		memset(UART_RX3.Buffer,0,sizeof(UART_RX3.Buffer));
 8006228:	2219      	movs	r2, #25
 800622a:	2100      	movs	r1, #0
 800622c:	4847      	ldr	r0, [pc, #284]	; (800634c <LoRaWANService_Callback+0x2dc>)
 800622e:	f001 fa3c 	bl	80076aa <memset>
		qPrintString(UART_LORA,NULL,"mac set devaddr 26021CF3\r\n");
 8006232:	2300      	movs	r3, #0
 8006234:	4a4c      	ldr	r2, [pc, #304]	; (8006368 <LoRaWANService_Callback+0x2f8>)
 8006236:	2100      	movs	r1, #0
 8006238:	4846      	ldr	r0, [pc, #280]	; (8006354 <LoRaWANService_Callback+0x2e4>)
 800623a:	f7ff fc6e 	bl	8005b1a <qOutputString>
		qDebugMessage("mac set devaddr 26021CF3\r\n");
 800623e:	2300      	movs	r3, #0
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	2300      	movs	r3, #0
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	4b48      	ldr	r3, [pc, #288]	; (8006368 <LoRaWANService_Callback+0x2f8>)
 8006248:	4a3f      	ldr	r2, [pc, #252]	; (8006348 <LoRaWANService_Callback+0x2d8>)
 800624a:	2100      	movs	r1, #0
 800624c:	483e      	ldr	r0, [pc, #248]	; (8006348 <LoRaWANService_Callback+0x2d8>)
 800624e:	f7ff fd93 	bl	8005d78 <__qtrace_func>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006252:	4b39      	ldr	r3, [pc, #228]	; (8006338 <LoRaWANService_Callback+0x2c8>)
 8006254:	228e      	movs	r2, #142	; 0x8e
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	2204      	movs	r2, #4
 800625a:	4944      	ldr	r1, [pc, #272]	; (800636c <LoRaWANService_Callback+0x2fc>)
 800625c:	483f      	ldr	r0, [pc, #252]	; (800635c <LoRaWANService_Callback+0x2ec>)
 800625e:	f7ff fcf1 	bl	8005c44 <qResponseReceived>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d106      	bne.n	8006276 <LoRaWANService_Callback+0x206>
 8006268:	483e      	ldr	r0, [pc, #248]	; (8006364 <LoRaWANService_Callback+0x2f4>)
 800626a:	f7ff fb06 	bl	800587a <qSTimerExpired>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 845e 	beq.w	8006b32 <LoRaWANService_Callback+0xac2>
		if(qSTimerExpired(&Timeout)){
 8006276:	483b      	ldr	r0, [pc, #236]	; (8006364 <LoRaWANService_Callback+0x2f4>)
 8006278:	f7ff faff 	bl	800587a <qSTimerExpired>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d017      	beq.n	80062b2 <LoRaWANService_Callback+0x242>
			contRetry++;
 8006282:	4b3b      	ldr	r3, [pc, #236]	; (8006370 <LoRaWANService_Callback+0x300>)
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	3301      	adds	r3, #1
 8006288:	b2da      	uxtb	r2, r3
 800628a:	4b39      	ldr	r3, [pc, #228]	; (8006370 <LoRaWANService_Callback+0x300>)
 800628c:	701a      	strb	r2, [r3, #0]
			if(contRetry >=5 ){
 800628e:	4b38      	ldr	r3, [pc, #224]	; (8006370 <LoRaWANService_Callback+0x300>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2b04      	cmp	r3, #4
 8006294:	d907      	bls.n	80062a6 <LoRaWANService_Callback+0x236>
				contRetry = 0;
 8006296:	4b36      	ldr	r3, [pc, #216]	; (8006370 <LoRaWANService_Callback+0x300>)
 8006298:	2200      	movs	r2, #0
 800629a:	701a      	strb	r2, [r3, #0]
				qCoroutineRestart;
 800629c:	4b26      	ldr	r3, [pc, #152]	; (8006338 <LoRaWANService_Callback+0x2c8>)
 800629e:	4a27      	ldr	r2, [pc, #156]	; (800633c <LoRaWANService_Callback+0x2cc>)
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	f000 bc65 	b.w	8006b70 <LoRaWANService_Callback+0xb00>
			}else qCoroutinePositionRestore(state);
 80062a6:	4b2e      	ldr	r3, [pc, #184]	; (8006360 <LoRaWANService_Callback+0x2f0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a23      	ldr	r2, [pc, #140]	; (8006338 <LoRaWANService_Callback+0x2c8>)
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	f000 bc5f 	b.w	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutinePositionGet(state);
 80062b2:	4b2b      	ldr	r3, [pc, #172]	; (8006360 <LoRaWANService_Callback+0x2f0>)
 80062b4:	2297      	movs	r2, #151	; 0x97
 80062b6:	601a      	str	r2, [r3, #0]
		qSTimerSet(&Timeout,2.0);
 80062b8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80062bc:	4829      	ldr	r0, [pc, #164]	; (8006364 <LoRaWANService_Callback+0x2f4>)
 80062be:	f7ff fabb 	bl	8005838 <qSTimerSet>
		memset(UART_RX3.Buffer,0,sizeof(UART_RX3.Buffer));
 80062c2:	2219      	movs	r2, #25
 80062c4:	2100      	movs	r1, #0
 80062c6:	4821      	ldr	r0, [pc, #132]	; (800634c <LoRaWANService_Callback+0x2dc>)
 80062c8:	f001 f9ef 	bl	80076aa <memset>
		qPrintString(UART_LORA,NULL,"mac set appeui 70B3D57ED001E6F9\r\n");
 80062cc:	2300      	movs	r3, #0
 80062ce:	4a29      	ldr	r2, [pc, #164]	; (8006374 <LoRaWANService_Callback+0x304>)
 80062d0:	2100      	movs	r1, #0
 80062d2:	4820      	ldr	r0, [pc, #128]	; (8006354 <LoRaWANService_Callback+0x2e4>)
 80062d4:	f7ff fc21 	bl	8005b1a <qOutputString>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 80062d8:	4b17      	ldr	r3, [pc, #92]	; (8006338 <LoRaWANService_Callback+0x2c8>)
 80062da:	229b      	movs	r2, #155	; 0x9b
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	2204      	movs	r2, #4
 80062e0:	4922      	ldr	r1, [pc, #136]	; (800636c <LoRaWANService_Callback+0x2fc>)
 80062e2:	481e      	ldr	r0, [pc, #120]	; (800635c <LoRaWANService_Callback+0x2ec>)
 80062e4:	f7ff fcae 	bl	8005c44 <qResponseReceived>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d106      	bne.n	80062fc <LoRaWANService_Callback+0x28c>
 80062ee:	481d      	ldr	r0, [pc, #116]	; (8006364 <LoRaWANService_Callback+0x2f4>)
 80062f0:	f7ff fac3 	bl	800587a <qSTimerExpired>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 841d 	beq.w	8006b36 <LoRaWANService_Callback+0xac6>
		if(qSTimerExpired(&Timeout)){
 80062fc:	4819      	ldr	r0, [pc, #100]	; (8006364 <LoRaWANService_Callback+0x2f4>)
 80062fe:	f7ff fabc 	bl	800587a <qSTimerExpired>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d037      	beq.n	8006378 <LoRaWANService_Callback+0x308>
			contRetry++;
 8006308:	4b19      	ldr	r3, [pc, #100]	; (8006370 <LoRaWANService_Callback+0x300>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	3301      	adds	r3, #1
 800630e:	b2da      	uxtb	r2, r3
 8006310:	4b17      	ldr	r3, [pc, #92]	; (8006370 <LoRaWANService_Callback+0x300>)
 8006312:	701a      	strb	r2, [r3, #0]
			if(contRetry >=5 ){
 8006314:	4b16      	ldr	r3, [pc, #88]	; (8006370 <LoRaWANService_Callback+0x300>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b04      	cmp	r3, #4
 800631a:	d907      	bls.n	800632c <LoRaWANService_Callback+0x2bc>
				contRetry = 0;
 800631c:	4b14      	ldr	r3, [pc, #80]	; (8006370 <LoRaWANService_Callback+0x300>)
 800631e:	2200      	movs	r2, #0
 8006320:	701a      	strb	r2, [r3, #0]
				qCoroutineRestart;
 8006322:	4b05      	ldr	r3, [pc, #20]	; (8006338 <LoRaWANService_Callback+0x2c8>)
 8006324:	4a05      	ldr	r2, [pc, #20]	; (800633c <LoRaWANService_Callback+0x2cc>)
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	f000 bc22 	b.w	8006b70 <LoRaWANService_Callback+0xb00>
			}else qCoroutinePositionRestore(state);
 800632c:	4b0c      	ldr	r3, [pc, #48]	; (8006360 <LoRaWANService_Callback+0x2f0>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a01      	ldr	r2, [pc, #4]	; (8006338 <LoRaWANService_Callback+0x2c8>)
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	f000 bc1c 	b.w	8006b70 <LoRaWANService_Callback+0xb00>
 8006338:	20000014 	.word	0x20000014
 800633c:	ffff8002 	.word	0xffff8002
 8006340:	48000800 	.word	0x48000800
 8006344:	08008164 	.word	0x08008164
 8006348:	08008160 	.word	0x08008160
 800634c:	200001a8 	.word	0x200001a8
 8006350:	08008194 	.word	0x08008194
 8006354:	08004331 	.word	0x08004331
 8006358:	080081a0 	.word	0x080081a0
 800635c:	200001c8 	.word	0x200001c8
 8006360:	20000124 	.word	0x20000124
 8006364:	200000a0 	.word	0x200000a0
 8006368:	080081ac 	.word	0x080081ac
 800636c:	080081c8 	.word	0x080081c8
 8006370:	20000128 	.word	0x20000128
 8006374:	080081d0 	.word	0x080081d0
		qCoroutinePositionGet(state);
 8006378:	4ba2      	ldr	r3, [pc, #648]	; (8006604 <LoRaWANService_Callback+0x594>)
 800637a:	22a4      	movs	r2, #164	; 0xa4
 800637c:	601a      	str	r2, [r3, #0]
		qSTimerSet(&Timeout,2.0);
 800637e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006382:	48a1      	ldr	r0, [pc, #644]	; (8006608 <LoRaWANService_Callback+0x598>)
 8006384:	f7ff fa58 	bl	8005838 <qSTimerSet>
		memset(UART_RX3.Buffer,0,sizeof(UART_RX3.Buffer));
 8006388:	2219      	movs	r2, #25
 800638a:	2100      	movs	r1, #0
 800638c:	489f      	ldr	r0, [pc, #636]	; (800660c <LoRaWANService_Callback+0x59c>)
 800638e:	f001 f98c 	bl	80076aa <memset>
		qPrintString(UART_LORA,NULL,"mac set deveui 0004A30B00264D28\r\n");
 8006392:	2300      	movs	r3, #0
 8006394:	4a9e      	ldr	r2, [pc, #632]	; (8006610 <LoRaWANService_Callback+0x5a0>)
 8006396:	2100      	movs	r1, #0
 8006398:	489e      	ldr	r0, [pc, #632]	; (8006614 <LoRaWANService_Callback+0x5a4>)
 800639a:	f7ff fbbe 	bl	8005b1a <qOutputString>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 800639e:	4b9e      	ldr	r3, [pc, #632]	; (8006618 <LoRaWANService_Callback+0x5a8>)
 80063a0:	22a8      	movs	r2, #168	; 0xa8
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	2204      	movs	r2, #4
 80063a6:	499d      	ldr	r1, [pc, #628]	; (800661c <LoRaWANService_Callback+0x5ac>)
 80063a8:	489d      	ldr	r0, [pc, #628]	; (8006620 <LoRaWANService_Callback+0x5b0>)
 80063aa:	f7ff fc4b 	bl	8005c44 <qResponseReceived>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d106      	bne.n	80063c2 <LoRaWANService_Callback+0x352>
 80063b4:	4894      	ldr	r0, [pc, #592]	; (8006608 <LoRaWANService_Callback+0x598>)
 80063b6:	f7ff fa60 	bl	800587a <qSTimerExpired>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 83bc 	beq.w	8006b3a <LoRaWANService_Callback+0xaca>
		if(qSTimerExpired(&Timeout)){
 80063c2:	4891      	ldr	r0, [pc, #580]	; (8006608 <LoRaWANService_Callback+0x598>)
 80063c4:	f7ff fa59 	bl	800587a <qSTimerExpired>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d015      	beq.n	80063fa <LoRaWANService_Callback+0x38a>
			contRetry++;
 80063ce:	4b95      	ldr	r3, [pc, #596]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	3301      	adds	r3, #1
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	4b93      	ldr	r3, [pc, #588]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 80063d8:	701a      	strb	r2, [r3, #0]
			if(contRetry >=5 ){
 80063da:	4b92      	ldr	r3, [pc, #584]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d906      	bls.n	80063f0 <LoRaWANService_Callback+0x380>
				contRetry = 0;
 80063e2:	4b90      	ldr	r3, [pc, #576]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	701a      	strb	r2, [r3, #0]
				qCoroutineRestart;
 80063e8:	4b8b      	ldr	r3, [pc, #556]	; (8006618 <LoRaWANService_Callback+0x5a8>)
 80063ea:	4a8f      	ldr	r2, [pc, #572]	; (8006628 <LoRaWANService_Callback+0x5b8>)
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	e3bf      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
			}else qCoroutinePositionRestore(state);
 80063f0:	4b84      	ldr	r3, [pc, #528]	; (8006604 <LoRaWANService_Callback+0x594>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a88      	ldr	r2, [pc, #544]	; (8006618 <LoRaWANService_Callback+0x5a8>)
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	e3ba      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutinePositionGet(state);
 80063fa:	4b82      	ldr	r3, [pc, #520]	; (8006604 <LoRaWANService_Callback+0x594>)
 80063fc:	22b1      	movs	r2, #177	; 0xb1
 80063fe:	601a      	str	r2, [r3, #0]
		qSTimerSet(&Timeout,2.0);
 8006400:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006404:	4880      	ldr	r0, [pc, #512]	; (8006608 <LoRaWANService_Callback+0x598>)
 8006406:	f7ff fa17 	bl	8005838 <qSTimerSet>
		memset(UART_RX3.Buffer,0,sizeof(UART_RX3.Buffer));
 800640a:	2219      	movs	r2, #25
 800640c:	2100      	movs	r1, #0
 800640e:	487f      	ldr	r0, [pc, #508]	; (800660c <LoRaWANService_Callback+0x59c>)
 8006410:	f001 f94b 	bl	80076aa <memset>
		qPrintString(UART_LORA,NULL,"mac set nwkskey C42DD69087BFA056D282134269E49422\r\n");
 8006414:	2300      	movs	r3, #0
 8006416:	4a85      	ldr	r2, [pc, #532]	; (800662c <LoRaWANService_Callback+0x5bc>)
 8006418:	2100      	movs	r1, #0
 800641a:	487e      	ldr	r0, [pc, #504]	; (8006614 <LoRaWANService_Callback+0x5a4>)
 800641c:	f7ff fb7d 	bl	8005b1a <qOutputString>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006420:	4b7d      	ldr	r3, [pc, #500]	; (8006618 <LoRaWANService_Callback+0x5a8>)
 8006422:	22b5      	movs	r2, #181	; 0xb5
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	2204      	movs	r2, #4
 8006428:	497c      	ldr	r1, [pc, #496]	; (800661c <LoRaWANService_Callback+0x5ac>)
 800642a:	487d      	ldr	r0, [pc, #500]	; (8006620 <LoRaWANService_Callback+0x5b0>)
 800642c:	f7ff fc0a 	bl	8005c44 <qResponseReceived>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <LoRaWANService_Callback+0x3d4>
 8006436:	4874      	ldr	r0, [pc, #464]	; (8006608 <LoRaWANService_Callback+0x598>)
 8006438:	f7ff fa1f 	bl	800587a <qSTimerExpired>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 837d 	beq.w	8006b3e <LoRaWANService_Callback+0xace>
		if(qSTimerExpired(&Timeout)){
 8006444:	4870      	ldr	r0, [pc, #448]	; (8006608 <LoRaWANService_Callback+0x598>)
 8006446:	f7ff fa18 	bl	800587a <qSTimerExpired>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d015      	beq.n	800647c <LoRaWANService_Callback+0x40c>
			contRetry++;
 8006450:	4b74      	ldr	r3, [pc, #464]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	b2da      	uxtb	r2, r3
 8006458:	4b72      	ldr	r3, [pc, #456]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 800645a:	701a      	strb	r2, [r3, #0]
			if(contRetry >=5 ){
 800645c:	4b71      	ldr	r3, [pc, #452]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b04      	cmp	r3, #4
 8006462:	d906      	bls.n	8006472 <LoRaWANService_Callback+0x402>
				contRetry = 0;
 8006464:	4b6f      	ldr	r3, [pc, #444]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 8006466:	2200      	movs	r2, #0
 8006468:	701a      	strb	r2, [r3, #0]
				qCoroutineRestart;
 800646a:	4b6b      	ldr	r3, [pc, #428]	; (8006618 <LoRaWANService_Callback+0x5a8>)
 800646c:	4a6e      	ldr	r2, [pc, #440]	; (8006628 <LoRaWANService_Callback+0x5b8>)
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	e37e      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
			}else qCoroutinePositionRestore(state);
 8006472:	4b64      	ldr	r3, [pc, #400]	; (8006604 <LoRaWANService_Callback+0x594>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a68      	ldr	r2, [pc, #416]	; (8006618 <LoRaWANService_Callback+0x5a8>)
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	e379      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutinePositionGet(state);
 800647c:	4b61      	ldr	r3, [pc, #388]	; (8006604 <LoRaWANService_Callback+0x594>)
 800647e:	22be      	movs	r2, #190	; 0xbe
 8006480:	601a      	str	r2, [r3, #0]
		qSTimerSet(&Timeout,2.0);
 8006482:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006486:	4860      	ldr	r0, [pc, #384]	; (8006608 <LoRaWANService_Callback+0x598>)
 8006488:	f7ff f9d6 	bl	8005838 <qSTimerSet>
		memset(UART_RX3.Buffer,0,sizeof(UART_RX3.Buffer));
 800648c:	2219      	movs	r2, #25
 800648e:	2100      	movs	r1, #0
 8006490:	485e      	ldr	r0, [pc, #376]	; (800660c <LoRaWANService_Callback+0x59c>)
 8006492:	f001 f90a 	bl	80076aa <memset>
		qPrintString(UART_LORA,NULL,"mac set appskey EFF299DC7EF67B8EF02509FA0BFF6005\r\n");
 8006496:	2300      	movs	r3, #0
 8006498:	4a65      	ldr	r2, [pc, #404]	; (8006630 <LoRaWANService_Callback+0x5c0>)
 800649a:	2100      	movs	r1, #0
 800649c:	485d      	ldr	r0, [pc, #372]	; (8006614 <LoRaWANService_Callback+0x5a4>)
 800649e:	f7ff fb3c 	bl	8005b1a <qOutputString>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 80064a2:	4b5d      	ldr	r3, [pc, #372]	; (8006618 <LoRaWANService_Callback+0x5a8>)
 80064a4:	22c2      	movs	r2, #194	; 0xc2
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	2204      	movs	r2, #4
 80064aa:	495c      	ldr	r1, [pc, #368]	; (800661c <LoRaWANService_Callback+0x5ac>)
 80064ac:	485c      	ldr	r0, [pc, #368]	; (8006620 <LoRaWANService_Callback+0x5b0>)
 80064ae:	f7ff fbc9 	bl	8005c44 <qResponseReceived>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <LoRaWANService_Callback+0x456>
 80064b8:	4853      	ldr	r0, [pc, #332]	; (8006608 <LoRaWANService_Callback+0x598>)
 80064ba:	f7ff f9de 	bl	800587a <qSTimerExpired>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 833e 	beq.w	8006b42 <LoRaWANService_Callback+0xad2>
		if(qSTimerExpired(&Timeout)){
 80064c6:	4850      	ldr	r0, [pc, #320]	; (8006608 <LoRaWANService_Callback+0x598>)
 80064c8:	f7ff f9d7 	bl	800587a <qSTimerExpired>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d015      	beq.n	80064fe <LoRaWANService_Callback+0x48e>
			contRetry++;
 80064d2:	4b54      	ldr	r3, [pc, #336]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	3301      	adds	r3, #1
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	4b52      	ldr	r3, [pc, #328]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 80064dc:	701a      	strb	r2, [r3, #0]
			if(contRetry >=5 ){
 80064de:	4b51      	ldr	r3, [pc, #324]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d906      	bls.n	80064f4 <LoRaWANService_Callback+0x484>
				contRetry = 0;
 80064e6:	4b4f      	ldr	r3, [pc, #316]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	701a      	strb	r2, [r3, #0]
				qCoroutineRestart;
 80064ec:	4b4a      	ldr	r3, [pc, #296]	; (8006618 <LoRaWANService_Callback+0x5a8>)
 80064ee:	4a4e      	ldr	r2, [pc, #312]	; (8006628 <LoRaWANService_Callback+0x5b8>)
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	e33d      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
			}else qCoroutinePositionRestore(state);
 80064f4:	4b43      	ldr	r3, [pc, #268]	; (8006604 <LoRaWANService_Callback+0x594>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a47      	ldr	r2, [pc, #284]	; (8006618 <LoRaWANService_Callback+0x5a8>)
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	e338      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutinePositionGet(state);
 80064fe:	4b41      	ldr	r3, [pc, #260]	; (8006604 <LoRaWANService_Callback+0x594>)
 8006500:	22cb      	movs	r2, #203	; 0xcb
 8006502:	601a      	str	r2, [r3, #0]
		qSTimerSet(&Timeout,2.0);
 8006504:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006508:	483f      	ldr	r0, [pc, #252]	; (8006608 <LoRaWANService_Callback+0x598>)
 800650a:	f7ff f995 	bl	8005838 <qSTimerSet>
		memset(UART_RX3.Buffer,0,sizeof(UART_RX3.Buffer));
 800650e:	2219      	movs	r2, #25
 8006510:	2100      	movs	r1, #0
 8006512:	483e      	ldr	r0, [pc, #248]	; (800660c <LoRaWANService_Callback+0x59c>)
 8006514:	f001 f8c9 	bl	80076aa <memset>
		qPrintString(UART_LORA,NULL,"mac set ar off\r\n");
 8006518:	2300      	movs	r3, #0
 800651a:	4a46      	ldr	r2, [pc, #280]	; (8006634 <LoRaWANService_Callback+0x5c4>)
 800651c:	2100      	movs	r1, #0
 800651e:	483d      	ldr	r0, [pc, #244]	; (8006614 <LoRaWANService_Callback+0x5a4>)
 8006520:	f7ff fafb 	bl	8005b1a <qOutputString>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006524:	4b3c      	ldr	r3, [pc, #240]	; (8006618 <LoRaWANService_Callback+0x5a8>)
 8006526:	22cf      	movs	r2, #207	; 0xcf
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	2204      	movs	r2, #4
 800652c:	493b      	ldr	r1, [pc, #236]	; (800661c <LoRaWANService_Callback+0x5ac>)
 800652e:	483c      	ldr	r0, [pc, #240]	; (8006620 <LoRaWANService_Callback+0x5b0>)
 8006530:	f7ff fb88 	bl	8005c44 <qResponseReceived>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <LoRaWANService_Callback+0x4d8>
 800653a:	4833      	ldr	r0, [pc, #204]	; (8006608 <LoRaWANService_Callback+0x598>)
 800653c:	f7ff f99d 	bl	800587a <qSTimerExpired>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 82ff 	beq.w	8006b46 <LoRaWANService_Callback+0xad6>
		if(qSTimerExpired(&Timeout)){
 8006548:	482f      	ldr	r0, [pc, #188]	; (8006608 <LoRaWANService_Callback+0x598>)
 800654a:	f7ff f996 	bl	800587a <qSTimerExpired>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d015      	beq.n	8006580 <LoRaWANService_Callback+0x510>
			contRetry++;
 8006554:	4b33      	ldr	r3, [pc, #204]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	3301      	adds	r3, #1
 800655a:	b2da      	uxtb	r2, r3
 800655c:	4b31      	ldr	r3, [pc, #196]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 800655e:	701a      	strb	r2, [r3, #0]
			if(contRetry >=5 ){
 8006560:	4b30      	ldr	r3, [pc, #192]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	2b04      	cmp	r3, #4
 8006566:	d906      	bls.n	8006576 <LoRaWANService_Callback+0x506>
				contRetry = 0;
 8006568:	4b2e      	ldr	r3, [pc, #184]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 800656a:	2200      	movs	r2, #0
 800656c:	701a      	strb	r2, [r3, #0]
				qCoroutineRestart;
 800656e:	4b2a      	ldr	r3, [pc, #168]	; (8006618 <LoRaWANService_Callback+0x5a8>)
 8006570:	4a2d      	ldr	r2, [pc, #180]	; (8006628 <LoRaWANService_Callback+0x5b8>)
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e2fc      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
			}else qCoroutinePositionRestore(state);
 8006576:	4b23      	ldr	r3, [pc, #140]	; (8006604 <LoRaWANService_Callback+0x594>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a27      	ldr	r2, [pc, #156]	; (8006618 <LoRaWANService_Callback+0x5a8>)
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	e2f7      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutinePositionGet(state);
 8006580:	4b20      	ldr	r3, [pc, #128]	; (8006604 <LoRaWANService_Callback+0x594>)
 8006582:	22d8      	movs	r2, #216	; 0xd8
 8006584:	601a      	str	r2, [r3, #0]
		qSTimerSet(&Timeout,2.0);
 8006586:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800658a:	481f      	ldr	r0, [pc, #124]	; (8006608 <LoRaWANService_Callback+0x598>)
 800658c:	f7ff f954 	bl	8005838 <qSTimerSet>
		memset(UART_RX3.Buffer,0,sizeof(UART_RX3.Buffer));
 8006590:	2219      	movs	r2, #25
 8006592:	2100      	movs	r1, #0
 8006594:	481d      	ldr	r0, [pc, #116]	; (800660c <LoRaWANService_Callback+0x59c>)
 8006596:	f001 f888 	bl	80076aa <memset>
		qPrintString(UART_LORA,NULL,"mac set sync 34\r\n");
 800659a:	2300      	movs	r3, #0
 800659c:	4a26      	ldr	r2, [pc, #152]	; (8006638 <LoRaWANService_Callback+0x5c8>)
 800659e:	2100      	movs	r1, #0
 80065a0:	481c      	ldr	r0, [pc, #112]	; (8006614 <LoRaWANService_Callback+0x5a4>)
 80065a2:	f7ff faba 	bl	8005b1a <qOutputString>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 80065a6:	4b1c      	ldr	r3, [pc, #112]	; (8006618 <LoRaWANService_Callback+0x5a8>)
 80065a8:	22dc      	movs	r2, #220	; 0xdc
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	2204      	movs	r2, #4
 80065ae:	491b      	ldr	r1, [pc, #108]	; (800661c <LoRaWANService_Callback+0x5ac>)
 80065b0:	481b      	ldr	r0, [pc, #108]	; (8006620 <LoRaWANService_Callback+0x5b0>)
 80065b2:	f7ff fb47 	bl	8005c44 <qResponseReceived>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d106      	bne.n	80065ca <LoRaWANService_Callback+0x55a>
 80065bc:	4812      	ldr	r0, [pc, #72]	; (8006608 <LoRaWANService_Callback+0x598>)
 80065be:	f7ff f95c 	bl	800587a <qSTimerExpired>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 82c0 	beq.w	8006b4a <LoRaWANService_Callback+0xada>
		if(qSTimerExpired(&Timeout)){
 80065ca:	480f      	ldr	r0, [pc, #60]	; (8006608 <LoRaWANService_Callback+0x598>)
 80065cc:	f7ff f955 	bl	800587a <qSTimerExpired>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d032      	beq.n	800663c <LoRaWANService_Callback+0x5cc>
			contRetry++;
 80065d6:	4b13      	ldr	r3, [pc, #76]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	3301      	adds	r3, #1
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	4b11      	ldr	r3, [pc, #68]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 80065e0:	701a      	strb	r2, [r3, #0]
			if(contRetry >=5 ){
 80065e2:	4b10      	ldr	r3, [pc, #64]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d906      	bls.n	80065f8 <LoRaWANService_Callback+0x588>
				contRetry = 0;
 80065ea:	4b0e      	ldr	r3, [pc, #56]	; (8006624 <LoRaWANService_Callback+0x5b4>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	701a      	strb	r2, [r3, #0]
				qCoroutineRestart;
 80065f0:	4b09      	ldr	r3, [pc, #36]	; (8006618 <LoRaWANService_Callback+0x5a8>)
 80065f2:	4a0d      	ldr	r2, [pc, #52]	; (8006628 <LoRaWANService_Callback+0x5b8>)
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	e2bb      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
			}else qCoroutinePositionRestore(state);
 80065f8:	4b02      	ldr	r3, [pc, #8]	; (8006604 <LoRaWANService_Callback+0x594>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a06      	ldr	r2, [pc, #24]	; (8006618 <LoRaWANService_Callback+0x5a8>)
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	e2b6      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
 8006602:	bf00      	nop
 8006604:	20000124 	.word	0x20000124
 8006608:	200000a0 	.word	0x200000a0
 800660c:	200001a8 	.word	0x200001a8
 8006610:	080081f4 	.word	0x080081f4
 8006614:	08004331 	.word	0x08004331
 8006618:	20000014 	.word	0x20000014
 800661c:	080081c8 	.word	0x080081c8
 8006620:	200001c8 	.word	0x200001c8
 8006624:	20000128 	.word	0x20000128
 8006628:	ffff8002 	.word	0xffff8002
 800662c:	08008218 	.word	0x08008218
 8006630:	0800824c 	.word	0x0800824c
 8006634:	08008280 	.word	0x08008280
 8006638:	08008294 	.word	0x08008294
		qCoroutinePositionGet(state);
 800663c:	4b9d      	ldr	r3, [pc, #628]	; (80068b4 <LoRaWANService_Callback+0x844>)
 800663e:	22e5      	movs	r2, #229	; 0xe5
 8006640:	601a      	str	r2, [r3, #0]
		qSTimerSet(&Timeout,2.0);
 8006642:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006646:	489c      	ldr	r0, [pc, #624]	; (80068b8 <LoRaWANService_Callback+0x848>)
 8006648:	f7ff f8f6 	bl	8005838 <qSTimerSet>
		memset(UART_RX3.Buffer,0,sizeof(UART_RX3.Buffer));
 800664c:	2219      	movs	r2, #25
 800664e:	2100      	movs	r1, #0
 8006650:	489a      	ldr	r0, [pc, #616]	; (80068bc <LoRaWANService_Callback+0x84c>)
 8006652:	f001 f82a 	bl	80076aa <memset>
		qPrintString(UART_LORA,NULL,"mac set retx 3\r\n");
 8006656:	2300      	movs	r3, #0
 8006658:	4a99      	ldr	r2, [pc, #612]	; (80068c0 <LoRaWANService_Callback+0x850>)
 800665a:	2100      	movs	r1, #0
 800665c:	4899      	ldr	r0, [pc, #612]	; (80068c4 <LoRaWANService_Callback+0x854>)
 800665e:	f7ff fa5c 	bl	8005b1a <qOutputString>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006662:	4b99      	ldr	r3, [pc, #612]	; (80068c8 <LoRaWANService_Callback+0x858>)
 8006664:	22e9      	movs	r2, #233	; 0xe9
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	2204      	movs	r2, #4
 800666a:	4998      	ldr	r1, [pc, #608]	; (80068cc <LoRaWANService_Callback+0x85c>)
 800666c:	4898      	ldr	r0, [pc, #608]	; (80068d0 <LoRaWANService_Callback+0x860>)
 800666e:	f7ff fae9 	bl	8005c44 <qResponseReceived>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d106      	bne.n	8006686 <LoRaWANService_Callback+0x616>
 8006678:	488f      	ldr	r0, [pc, #572]	; (80068b8 <LoRaWANService_Callback+0x848>)
 800667a:	f7ff f8fe 	bl	800587a <qSTimerExpired>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 8264 	beq.w	8006b4e <LoRaWANService_Callback+0xade>
		if(qSTimerExpired(&Timeout)){
 8006686:	488c      	ldr	r0, [pc, #560]	; (80068b8 <LoRaWANService_Callback+0x848>)
 8006688:	f7ff f8f7 	bl	800587a <qSTimerExpired>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d015      	beq.n	80066be <LoRaWANService_Callback+0x64e>
			contRetry++;
 8006692:	4b90      	ldr	r3, [pc, #576]	; (80068d4 <LoRaWANService_Callback+0x864>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	3301      	adds	r3, #1
 8006698:	b2da      	uxtb	r2, r3
 800669a:	4b8e      	ldr	r3, [pc, #568]	; (80068d4 <LoRaWANService_Callback+0x864>)
 800669c:	701a      	strb	r2, [r3, #0]
			if(contRetry >=5 ){
 800669e:	4b8d      	ldr	r3, [pc, #564]	; (80068d4 <LoRaWANService_Callback+0x864>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d906      	bls.n	80066b4 <LoRaWANService_Callback+0x644>
				contRetry = 0;
 80066a6:	4b8b      	ldr	r3, [pc, #556]	; (80068d4 <LoRaWANService_Callback+0x864>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	701a      	strb	r2, [r3, #0]
				qCoroutineRestart;
 80066ac:	4b86      	ldr	r3, [pc, #536]	; (80068c8 <LoRaWANService_Callback+0x858>)
 80066ae:	4a8a      	ldr	r2, [pc, #552]	; (80068d8 <LoRaWANService_Callback+0x868>)
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	e25d      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
			}else qCoroutinePositionRestore(state);
 80066b4:	4b7f      	ldr	r3, [pc, #508]	; (80068b4 <LoRaWANService_Callback+0x844>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a83      	ldr	r2, [pc, #524]	; (80068c8 <LoRaWANService_Callback+0x858>)
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	e258      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		 	 i=0;
 80066be:	4b87      	ldr	r3, [pc, #540]	; (80068dc <LoRaWANService_Callback+0x86c>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	701a      	strb	r2, [r3, #0]
			qCoroutinePositionGet(state);
 80066c4:	4b7b      	ldr	r3, [pc, #492]	; (80068b4 <LoRaWANService_Callback+0x844>)
 80066c6:	22f4      	movs	r2, #244	; 0xf4
 80066c8:	601a      	str	r2, [r3, #0]
			qSTimerSet(&Timeout,2.0);
 80066ca:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80066ce:	487a      	ldr	r0, [pc, #488]	; (80068b8 <LoRaWANService_Callback+0x848>)
 80066d0:	f7ff f8b2 	bl	8005838 <qSTimerSet>
			sprintf((void*)BufferAux,"mac set ch status %d ",i);
 80066d4:	4b81      	ldr	r3, [pc, #516]	; (80068dc <LoRaWANService_Callback+0x86c>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	461a      	mov	r2, r3
 80066da:	4981      	ldr	r1, [pc, #516]	; (80068e0 <LoRaWANService_Callback+0x870>)
 80066dc:	4881      	ldr	r0, [pc, #516]	; (80068e4 <LoRaWANService_Callback+0x874>)
 80066de:	f000 ffed 	bl	80076bc <siprintf>
			qPrintString(UART_LORA,NULL,BufferAux);
 80066e2:	2300      	movs	r3, #0
 80066e4:	4a7f      	ldr	r2, [pc, #508]	; (80068e4 <LoRaWANService_Callback+0x874>)
 80066e6:	2100      	movs	r1, #0
 80066e8:	4876      	ldr	r0, [pc, #472]	; (80068c4 <LoRaWANService_Callback+0x854>)
 80066ea:	f7ff fa16 	bl	8005b1a <qOutputString>
			qPrintString(UART_LORA,NULL,"off\r\n");
 80066ee:	2300      	movs	r3, #0
 80066f0:	4a7d      	ldr	r2, [pc, #500]	; (80068e8 <LoRaWANService_Callback+0x878>)
 80066f2:	2100      	movs	r1, #0
 80066f4:	4873      	ldr	r0, [pc, #460]	; (80068c4 <LoRaWANService_Callback+0x854>)
 80066f6:	f7ff fa10 	bl	8005b1a <qOutputString>
			qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 80066fa:	4b73      	ldr	r3, [pc, #460]	; (80068c8 <LoRaWANService_Callback+0x858>)
 80066fc:	22fa      	movs	r2, #250	; 0xfa
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	2204      	movs	r2, #4
 8006702:	4972      	ldr	r1, [pc, #456]	; (80068cc <LoRaWANService_Callback+0x85c>)
 8006704:	4872      	ldr	r0, [pc, #456]	; (80068d0 <LoRaWANService_Callback+0x860>)
 8006706:	f7ff fa9d 	bl	8005c44 <qResponseReceived>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d106      	bne.n	800671e <LoRaWANService_Callback+0x6ae>
 8006710:	4869      	ldr	r0, [pc, #420]	; (80068b8 <LoRaWANService_Callback+0x848>)
 8006712:	f7ff f8b2 	bl	800587a <qSTimerExpired>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 821a 	beq.w	8006b52 <LoRaWANService_Callback+0xae2>
			if( i<72 ){
 800671e:	4b6f      	ldr	r3, [pc, #444]	; (80068dc <LoRaWANService_Callback+0x86c>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b47      	cmp	r3, #71	; 0x47
 8006724:	d826      	bhi.n	8006774 <LoRaWANService_Callback+0x704>
				if(!qSTimerExpired(&Timeout)){
 8006726:	4864      	ldr	r0, [pc, #400]	; (80068b8 <LoRaWANService_Callback+0x848>)
 8006728:	f7ff f8a7 	bl	800587a <qSTimerExpired>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10a      	bne.n	8006748 <LoRaWANService_Callback+0x6d8>
					i++;
 8006732:	4b6a      	ldr	r3, [pc, #424]	; (80068dc <LoRaWANService_Callback+0x86c>)
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	3301      	adds	r3, #1
 8006738:	b2da      	uxtb	r2, r3
 800673a:	4b68      	ldr	r3, [pc, #416]	; (80068dc <LoRaWANService_Callback+0x86c>)
 800673c:	701a      	strb	r2, [r3, #0]
					qCoroutinePositionRestore(state);
 800673e:	4b5d      	ldr	r3, [pc, #372]	; (80068b4 <LoRaWANService_Callback+0x844>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a61      	ldr	r2, [pc, #388]	; (80068c8 <LoRaWANService_Callback+0x858>)
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	e213      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
					contRetry++;
 8006748:	4b62      	ldr	r3, [pc, #392]	; (80068d4 <LoRaWANService_Callback+0x864>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	3301      	adds	r3, #1
 800674e:	b2da      	uxtb	r2, r3
 8006750:	4b60      	ldr	r3, [pc, #384]	; (80068d4 <LoRaWANService_Callback+0x864>)
 8006752:	701a      	strb	r2, [r3, #0]
						if(contRetry >=5 ){
 8006754:	4b5f      	ldr	r3, [pc, #380]	; (80068d4 <LoRaWANService_Callback+0x864>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b04      	cmp	r3, #4
 800675a:	d906      	bls.n	800676a <LoRaWANService_Callback+0x6fa>
							contRetry = 0;
 800675c:	4b5d      	ldr	r3, [pc, #372]	; (80068d4 <LoRaWANService_Callback+0x864>)
 800675e:	2200      	movs	r2, #0
 8006760:	701a      	strb	r2, [r3, #0]
							qCoroutineRestart;
 8006762:	4b59      	ldr	r3, [pc, #356]	; (80068c8 <LoRaWANService_Callback+0x858>)
 8006764:	4a5c      	ldr	r2, [pc, #368]	; (80068d8 <LoRaWANService_Callback+0x868>)
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	e202      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
						}else qCoroutinePositionRestore(state);
 800676a:	4b52      	ldr	r3, [pc, #328]	; (80068b4 <LoRaWANService_Callback+0x844>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a56      	ldr	r2, [pc, #344]	; (80068c8 <LoRaWANService_Callback+0x858>)
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	e1fd      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		 	 i=8;
 8006774:	4b59      	ldr	r3, [pc, #356]	; (80068dc <LoRaWANService_Callback+0x86c>)
 8006776:	2208      	movs	r2, #8
 8006778:	701a      	strb	r2, [r3, #0]
			qCoroutinePositionGet(state);
 800677a:	4b4e      	ldr	r3, [pc, #312]	; (80068b4 <LoRaWANService_Callback+0x844>)
 800677c:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8006780:	601a      	str	r2, [r3, #0]
			qSTimerSet(&Timeout,2.0);
 8006782:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006786:	484c      	ldr	r0, [pc, #304]	; (80068b8 <LoRaWANService_Callback+0x848>)
 8006788:	f7ff f856 	bl	8005838 <qSTimerSet>
			sprintf((void*)BufferAux,"mac set ch status %d ",i);
 800678c:	4b53      	ldr	r3, [pc, #332]	; (80068dc <LoRaWANService_Callback+0x86c>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	4953      	ldr	r1, [pc, #332]	; (80068e0 <LoRaWANService_Callback+0x870>)
 8006794:	4853      	ldr	r0, [pc, #332]	; (80068e4 <LoRaWANService_Callback+0x874>)
 8006796:	f000 ff91 	bl	80076bc <siprintf>
			qPrintString(UART_LORA,NULL,BufferAux);
 800679a:	2300      	movs	r3, #0
 800679c:	4a51      	ldr	r2, [pc, #324]	; (80068e4 <LoRaWANService_Callback+0x874>)
 800679e:	2100      	movs	r1, #0
 80067a0:	4848      	ldr	r0, [pc, #288]	; (80068c4 <LoRaWANService_Callback+0x854>)
 80067a2:	f7ff f9ba 	bl	8005b1a <qOutputString>
			qPrintString(UART_LORA,NULL,"on\r\n");
 80067a6:	2300      	movs	r3, #0
 80067a8:	4a50      	ldr	r2, [pc, #320]	; (80068ec <LoRaWANService_Callback+0x87c>)
 80067aa:	2100      	movs	r1, #0
 80067ac:	4845      	ldr	r0, [pc, #276]	; (80068c4 <LoRaWANService_Callback+0x854>)
 80067ae:	f7ff f9b4 	bl	8005b1a <qOutputString>
			qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 80067b2:	4b45      	ldr	r3, [pc, #276]	; (80068c8 <LoRaWANService_Callback+0x858>)
 80067b4:	f44f 7288 	mov.w	r2, #272	; 0x110
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	2204      	movs	r2, #4
 80067bc:	4943      	ldr	r1, [pc, #268]	; (80068cc <LoRaWANService_Callback+0x85c>)
 80067be:	4844      	ldr	r0, [pc, #272]	; (80068d0 <LoRaWANService_Callback+0x860>)
 80067c0:	f7ff fa40 	bl	8005c44 <qResponseReceived>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d106      	bne.n	80067d8 <LoRaWANService_Callback+0x768>
 80067ca:	483b      	ldr	r0, [pc, #236]	; (80068b8 <LoRaWANService_Callback+0x848>)
 80067cc:	f7ff f855 	bl	800587a <qSTimerExpired>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 81bf 	beq.w	8006b56 <LoRaWANService_Callback+0xae6>
			if( i<16 ){
 80067d8:	4b40      	ldr	r3, [pc, #256]	; (80068dc <LoRaWANService_Callback+0x86c>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2b0f      	cmp	r3, #15
 80067de:	d826      	bhi.n	800682e <LoRaWANService_Callback+0x7be>
				if(!qSTimerExpired(&Timeout)){
 80067e0:	4835      	ldr	r0, [pc, #212]	; (80068b8 <LoRaWANService_Callback+0x848>)
 80067e2:	f7ff f84a 	bl	800587a <qSTimerExpired>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <LoRaWANService_Callback+0x792>
					i++;
 80067ec:	4b3b      	ldr	r3, [pc, #236]	; (80068dc <LoRaWANService_Callback+0x86c>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	3301      	adds	r3, #1
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	4b39      	ldr	r3, [pc, #228]	; (80068dc <LoRaWANService_Callback+0x86c>)
 80067f6:	701a      	strb	r2, [r3, #0]
					qCoroutinePositionRestore(state);
 80067f8:	4b2e      	ldr	r3, [pc, #184]	; (80068b4 <LoRaWANService_Callback+0x844>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a32      	ldr	r2, [pc, #200]	; (80068c8 <LoRaWANService_Callback+0x858>)
 80067fe:	6013      	str	r3, [r2, #0]
 8006800:	e1b6      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
					contRetry++;
 8006802:	4b34      	ldr	r3, [pc, #208]	; (80068d4 <LoRaWANService_Callback+0x864>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	3301      	adds	r3, #1
 8006808:	b2da      	uxtb	r2, r3
 800680a:	4b32      	ldr	r3, [pc, #200]	; (80068d4 <LoRaWANService_Callback+0x864>)
 800680c:	701a      	strb	r2, [r3, #0]
						if(contRetry >=5 ){
 800680e:	4b31      	ldr	r3, [pc, #196]	; (80068d4 <LoRaWANService_Callback+0x864>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b04      	cmp	r3, #4
 8006814:	d906      	bls.n	8006824 <LoRaWANService_Callback+0x7b4>
							contRetry = 0;
 8006816:	4b2f      	ldr	r3, [pc, #188]	; (80068d4 <LoRaWANService_Callback+0x864>)
 8006818:	2200      	movs	r2, #0
 800681a:	701a      	strb	r2, [r3, #0]
							qCoroutineRestart;
 800681c:	4b2a      	ldr	r3, [pc, #168]	; (80068c8 <LoRaWANService_Callback+0x858>)
 800681e:	4a2e      	ldr	r2, [pc, #184]	; (80068d8 <LoRaWANService_Callback+0x868>)
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	e1a5      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
						}else qCoroutinePositionRestore(state);
 8006824:	4b23      	ldr	r3, [pc, #140]	; (80068b4 <LoRaWANService_Callback+0x844>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a27      	ldr	r2, [pc, #156]	; (80068c8 <LoRaWANService_Callback+0x858>)
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	e1a0      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutinePositionGet(state);
 800682e:	4b21      	ldr	r3, [pc, #132]	; (80068b4 <LoRaWANService_Callback+0x844>)
 8006830:	f240 121f 	movw	r2, #287	; 0x11f
 8006834:	601a      	str	r2, [r3, #0]
		qSTimerSet(&Timeout,2.0);
 8006836:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800683a:	481f      	ldr	r0, [pc, #124]	; (80068b8 <LoRaWANService_Callback+0x848>)
 800683c:	f7fe fffc 	bl	8005838 <qSTimerSet>
		memset(UART_RX3.Buffer,0,sizeof(UART_RX3.Buffer));
 8006840:	2219      	movs	r2, #25
 8006842:	2100      	movs	r1, #0
 8006844:	481d      	ldr	r0, [pc, #116]	; (80068bc <LoRaWANService_Callback+0x84c>)
 8006846:	f000 ff30 	bl	80076aa <memset>
		qPrintString(UART_LORA,NULL,"mac set ch status 65 on\r\n");
 800684a:	2300      	movs	r3, #0
 800684c:	4a28      	ldr	r2, [pc, #160]	; (80068f0 <LoRaWANService_Callback+0x880>)
 800684e:	2100      	movs	r1, #0
 8006850:	481c      	ldr	r0, [pc, #112]	; (80068c4 <LoRaWANService_Callback+0x854>)
 8006852:	f7ff f962 	bl	8005b1a <qOutputString>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006856:	4b1c      	ldr	r3, [pc, #112]	; (80068c8 <LoRaWANService_Callback+0x858>)
 8006858:	f240 1223 	movw	r2, #291	; 0x123
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	2204      	movs	r2, #4
 8006860:	491a      	ldr	r1, [pc, #104]	; (80068cc <LoRaWANService_Callback+0x85c>)
 8006862:	481b      	ldr	r0, [pc, #108]	; (80068d0 <LoRaWANService_Callback+0x860>)
 8006864:	f7ff f9ee 	bl	8005c44 <qResponseReceived>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d106      	bne.n	800687c <LoRaWANService_Callback+0x80c>
 800686e:	4812      	ldr	r0, [pc, #72]	; (80068b8 <LoRaWANService_Callback+0x848>)
 8006870:	f7ff f803 	bl	800587a <qSTimerExpired>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 816f 	beq.w	8006b5a <LoRaWANService_Callback+0xaea>
		if(qSTimerExpired(&Timeout)){
 800687c:	480e      	ldr	r0, [pc, #56]	; (80068b8 <LoRaWANService_Callback+0x848>)
 800687e:	f7fe fffc 	bl	800587a <qSTimerExpired>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d035      	beq.n	80068f4 <LoRaWANService_Callback+0x884>
			contRetry++;
 8006888:	4b12      	ldr	r3, [pc, #72]	; (80068d4 <LoRaWANService_Callback+0x864>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	3301      	adds	r3, #1
 800688e:	b2da      	uxtb	r2, r3
 8006890:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <LoRaWANService_Callback+0x864>)
 8006892:	701a      	strb	r2, [r3, #0]
			if(contRetry >=5 ){
 8006894:	4b0f      	ldr	r3, [pc, #60]	; (80068d4 <LoRaWANService_Callback+0x864>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b04      	cmp	r3, #4
 800689a:	d906      	bls.n	80068aa <LoRaWANService_Callback+0x83a>
				contRetry = 0;
 800689c:	4b0d      	ldr	r3, [pc, #52]	; (80068d4 <LoRaWANService_Callback+0x864>)
 800689e:	2200      	movs	r2, #0
 80068a0:	701a      	strb	r2, [r3, #0]
				qCoroutineRestart;
 80068a2:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <LoRaWANService_Callback+0x858>)
 80068a4:	4a0c      	ldr	r2, [pc, #48]	; (80068d8 <LoRaWANService_Callback+0x868>)
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	e162      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
			}else qCoroutinePositionRestore(state);
 80068aa:	4b02      	ldr	r3, [pc, #8]	; (80068b4 <LoRaWANService_Callback+0x844>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a06      	ldr	r2, [pc, #24]	; (80068c8 <LoRaWANService_Callback+0x858>)
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	e15d      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
 80068b4:	20000124 	.word	0x20000124
 80068b8:	200000a0 	.word	0x200000a0
 80068bc:	200001a8 	.word	0x200001a8
 80068c0:	080082a8 	.word	0x080082a8
 80068c4:	08004331 	.word	0x08004331
 80068c8:	20000014 	.word	0x20000014
 80068cc:	080081c8 	.word	0x080081c8
 80068d0:	200001c8 	.word	0x200001c8
 80068d4:	20000128 	.word	0x20000128
 80068d8:	ffff8002 	.word	0xffff8002
 80068dc:	20000129 	.word	0x20000129
 80068e0:	080082bc 	.word	0x080082bc
 80068e4:	2000012c 	.word	0x2000012c
 80068e8:	080082d4 	.word	0x080082d4
 80068ec:	080082dc 	.word	0x080082dc
 80068f0:	080082e4 	.word	0x080082e4
		qCoroutinePositionGet(state);
 80068f4:	4ba0      	ldr	r3, [pc, #640]	; (8006b78 <LoRaWANService_Callback+0xb08>)
 80068f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80068fa:	601a      	str	r2, [r3, #0]
		qSTimerSet(&Timeout,2.0);
 80068fc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006900:	489e      	ldr	r0, [pc, #632]	; (8006b7c <LoRaWANService_Callback+0xb0c>)
 8006902:	f7fe ff99 	bl	8005838 <qSTimerSet>
		memset(UART_RX3.Buffer,0,sizeof(UART_RX3.Buffer));
 8006906:	2219      	movs	r2, #25
 8006908:	2100      	movs	r1, #0
 800690a:	489d      	ldr	r0, [pc, #628]	; (8006b80 <LoRaWANService_Callback+0xb10>)
 800690c:	f000 fecd 	bl	80076aa <memset>
		qPrintString(UART_LORA,NULL,"mac save\r\n");
 8006910:	2300      	movs	r3, #0
 8006912:	4a9c      	ldr	r2, [pc, #624]	; (8006b84 <LoRaWANService_Callback+0xb14>)
 8006914:	2100      	movs	r1, #0
 8006916:	489c      	ldr	r0, [pc, #624]	; (8006b88 <LoRaWANService_Callback+0xb18>)
 8006918:	f7ff f8ff 	bl	8005b1a <qOutputString>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 800691c:	4b9b      	ldr	r3, [pc, #620]	; (8006b8c <LoRaWANService_Callback+0xb1c>)
 800691e:	f44f 7298 	mov.w	r2, #304	; 0x130
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	2204      	movs	r2, #4
 8006926:	499a      	ldr	r1, [pc, #616]	; (8006b90 <LoRaWANService_Callback+0xb20>)
 8006928:	489a      	ldr	r0, [pc, #616]	; (8006b94 <LoRaWANService_Callback+0xb24>)
 800692a:	f7ff f98b 	bl	8005c44 <qResponseReceived>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d106      	bne.n	8006942 <LoRaWANService_Callback+0x8d2>
 8006934:	4891      	ldr	r0, [pc, #580]	; (8006b7c <LoRaWANService_Callback+0xb0c>)
 8006936:	f7fe ffa0 	bl	800587a <qSTimerExpired>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 810e 	beq.w	8006b5e <LoRaWANService_Callback+0xaee>
		if(qSTimerExpired(&Timeout)){
 8006942:	488e      	ldr	r0, [pc, #568]	; (8006b7c <LoRaWANService_Callback+0xb0c>)
 8006944:	f7fe ff99 	bl	800587a <qSTimerExpired>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d015      	beq.n	800697a <LoRaWANService_Callback+0x90a>
			contRetry++;
 800694e:	4b92      	ldr	r3, [pc, #584]	; (8006b98 <LoRaWANService_Callback+0xb28>)
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	3301      	adds	r3, #1
 8006954:	b2da      	uxtb	r2, r3
 8006956:	4b90      	ldr	r3, [pc, #576]	; (8006b98 <LoRaWANService_Callback+0xb28>)
 8006958:	701a      	strb	r2, [r3, #0]
			if(contRetry >=5 ){
 800695a:	4b8f      	ldr	r3, [pc, #572]	; (8006b98 <LoRaWANService_Callback+0xb28>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b04      	cmp	r3, #4
 8006960:	d906      	bls.n	8006970 <LoRaWANService_Callback+0x900>
				contRetry = 0;
 8006962:	4b8d      	ldr	r3, [pc, #564]	; (8006b98 <LoRaWANService_Callback+0xb28>)
 8006964:	2200      	movs	r2, #0
 8006966:	701a      	strb	r2, [r3, #0]
				qCoroutineRestart;
 8006968:	4b88      	ldr	r3, [pc, #544]	; (8006b8c <LoRaWANService_Callback+0xb1c>)
 800696a:	4a8c      	ldr	r2, [pc, #560]	; (8006b9c <LoRaWANService_Callback+0xb2c>)
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	e0ff      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
			}else qCoroutinePositionRestore(state);
 8006970:	4b81      	ldr	r3, [pc, #516]	; (8006b78 <LoRaWANService_Callback+0xb08>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a85      	ldr	r2, [pc, #532]	; (8006b8c <LoRaWANService_Callback+0xb1c>)
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	e0fa      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutinePositionGet(state);
 800697a:	4b7f      	ldr	r3, [pc, #508]	; (8006b78 <LoRaWANService_Callback+0xb08>)
 800697c:	f240 1239 	movw	r2, #313	; 0x139
 8006980:	601a      	str	r2, [r3, #0]
		qSTimerSet(&Timeout,2.0);
 8006982:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006986:	487d      	ldr	r0, [pc, #500]	; (8006b7c <LoRaWANService_Callback+0xb0c>)
 8006988:	f7fe ff56 	bl	8005838 <qSTimerSet>
		memset(UART_RX3.Buffer,0,sizeof(UART_RX3.Buffer));
 800698c:	2219      	movs	r2, #25
 800698e:	2100      	movs	r1, #0
 8006990:	487b      	ldr	r0, [pc, #492]	; (8006b80 <LoRaWANService_Callback+0xb10>)
 8006992:	f000 fe8a 	bl	80076aa <memset>
		qPrintString(UART_LORA,NULL,"mac save\r\n");
 8006996:	2300      	movs	r3, #0
 8006998:	4a7a      	ldr	r2, [pc, #488]	; (8006b84 <LoRaWANService_Callback+0xb14>)
 800699a:	2100      	movs	r1, #0
 800699c:	487a      	ldr	r0, [pc, #488]	; (8006b88 <LoRaWANService_Callback+0xb18>)
 800699e:	f7ff f8bc 	bl	8005b1a <qOutputString>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 80069a2:	4b7a      	ldr	r3, [pc, #488]	; (8006b8c <LoRaWANService_Callback+0xb1c>)
 80069a4:	f240 123d 	movw	r2, #317	; 0x13d
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	2204      	movs	r2, #4
 80069ac:	4978      	ldr	r1, [pc, #480]	; (8006b90 <LoRaWANService_Callback+0xb20>)
 80069ae:	4879      	ldr	r0, [pc, #484]	; (8006b94 <LoRaWANService_Callback+0xb24>)
 80069b0:	f7ff f948 	bl	8005c44 <qResponseReceived>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d106      	bne.n	80069c8 <LoRaWANService_Callback+0x958>
 80069ba:	4870      	ldr	r0, [pc, #448]	; (8006b7c <LoRaWANService_Callback+0xb0c>)
 80069bc:	f7fe ff5d 	bl	800587a <qSTimerExpired>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 80cd 	beq.w	8006b62 <LoRaWANService_Callback+0xaf2>
		if(qSTimerExpired(&Timeout)){
 80069c8:	486c      	ldr	r0, [pc, #432]	; (8006b7c <LoRaWANService_Callback+0xb0c>)
 80069ca:	f7fe ff56 	bl	800587a <qSTimerExpired>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d015      	beq.n	8006a00 <LoRaWANService_Callback+0x990>
			contRetry++;
 80069d4:	4b70      	ldr	r3, [pc, #448]	; (8006b98 <LoRaWANService_Callback+0xb28>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	3301      	adds	r3, #1
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	4b6e      	ldr	r3, [pc, #440]	; (8006b98 <LoRaWANService_Callback+0xb28>)
 80069de:	701a      	strb	r2, [r3, #0]
			if(contRetry >=5 ){
 80069e0:	4b6d      	ldr	r3, [pc, #436]	; (8006b98 <LoRaWANService_Callback+0xb28>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	d906      	bls.n	80069f6 <LoRaWANService_Callback+0x986>
				contRetry = 0;
 80069e8:	4b6b      	ldr	r3, [pc, #428]	; (8006b98 <LoRaWANService_Callback+0xb28>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	701a      	strb	r2, [r3, #0]
				qCoroutineRestart;
 80069ee:	4b67      	ldr	r3, [pc, #412]	; (8006b8c <LoRaWANService_Callback+0xb1c>)
 80069f0:	4a6a      	ldr	r2, [pc, #424]	; (8006b9c <LoRaWANService_Callback+0xb2c>)
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	e0bc      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
			}else qCoroutinePositionRestore(state);
 80069f6:	4b60      	ldr	r3, [pc, #384]	; (8006b78 <LoRaWANService_Callback+0xb08>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a64      	ldr	r2, [pc, #400]	; (8006b8c <LoRaWANService_Callback+0xb1c>)
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	e0b7      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutinePositionGet(state);
 8006a00:	4b5d      	ldr	r3, [pc, #372]	; (8006b78 <LoRaWANService_Callback+0xb08>)
 8006a02:	f44f 72a3 	mov.w	r2, #326	; 0x146
 8006a06:	601a      	str	r2, [r3, #0]
		qSTimerSet(&Timeout,2.0);
 8006a08:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006a0c:	485b      	ldr	r0, [pc, #364]	; (8006b7c <LoRaWANService_Callback+0xb0c>)
 8006a0e:	f7fe ff13 	bl	8005838 <qSTimerSet>
		memset(UART_RX3.Buffer,0,sizeof(UART_RX3.Buffer));
 8006a12:	2219      	movs	r2, #25
 8006a14:	2100      	movs	r1, #0
 8006a16:	485a      	ldr	r0, [pc, #360]	; (8006b80 <LoRaWANService_Callback+0xb10>)
 8006a18:	f000 fe47 	bl	80076aa <memset>
		qPrintString(UART_LORA,NULL,"mac join abp\r\n");
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	4a60      	ldr	r2, [pc, #384]	; (8006ba0 <LoRaWANService_Callback+0xb30>)
 8006a20:	2100      	movs	r1, #0
 8006a22:	4859      	ldr	r0, [pc, #356]	; (8006b88 <LoRaWANService_Callback+0xb18>)
 8006a24:	f7ff f879 	bl	8005b1a <qOutputString>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"accepted\r\n",4))||(qSTimerExpired(&Timeout)));
 8006a28:	4b58      	ldr	r3, [pc, #352]	; (8006b8c <LoRaWANService_Callback+0xb1c>)
 8006a2a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	2204      	movs	r2, #4
 8006a32:	495c      	ldr	r1, [pc, #368]	; (8006ba4 <LoRaWANService_Callback+0xb34>)
 8006a34:	4857      	ldr	r0, [pc, #348]	; (8006b94 <LoRaWANService_Callback+0xb24>)
 8006a36:	f7ff f905 	bl	8005c44 <qResponseReceived>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d106      	bne.n	8006a4e <LoRaWANService_Callback+0x9de>
 8006a40:	484e      	ldr	r0, [pc, #312]	; (8006b7c <LoRaWANService_Callback+0xb0c>)
 8006a42:	f7fe ff1a 	bl	800587a <qSTimerExpired>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 808c 	beq.w	8006b66 <LoRaWANService_Callback+0xaf6>
		if(qSTimerExpired(&Timeout)){
 8006a4e:	484b      	ldr	r0, [pc, #300]	; (8006b7c <LoRaWANService_Callback+0xb0c>)
 8006a50:	f7fe ff13 	bl	800587a <qSTimerExpired>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d015      	beq.n	8006a86 <LoRaWANService_Callback+0xa16>
			contRetry++;
 8006a5a:	4b4f      	ldr	r3, [pc, #316]	; (8006b98 <LoRaWANService_Callback+0xb28>)
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	4b4d      	ldr	r3, [pc, #308]	; (8006b98 <LoRaWANService_Callback+0xb28>)
 8006a64:	701a      	strb	r2, [r3, #0]
			if(contRetry >=5 ){
 8006a66:	4b4c      	ldr	r3, [pc, #304]	; (8006b98 <LoRaWANService_Callback+0xb28>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b04      	cmp	r3, #4
 8006a6c:	d906      	bls.n	8006a7c <LoRaWANService_Callback+0xa0c>
				contRetry = 0;
 8006a6e:	4b4a      	ldr	r3, [pc, #296]	; (8006b98 <LoRaWANService_Callback+0xb28>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	701a      	strb	r2, [r3, #0]
				qCoroutineRestart;
 8006a74:	4b45      	ldr	r3, [pc, #276]	; (8006b8c <LoRaWANService_Callback+0xb1c>)
 8006a76:	4a49      	ldr	r2, [pc, #292]	; (8006b9c <LoRaWANService_Callback+0xb2c>)
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	e079      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
			}else qCoroutinePositionRestore(state);
 8006a7c:	4b3e      	ldr	r3, [pc, #248]	; (8006b78 <LoRaWANService_Callback+0xb08>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a42      	ldr	r2, [pc, #264]	; (8006b8c <LoRaWANService_Callback+0xb1c>)
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	e074      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutinePositionGet(state);
 8006a86:	4b3c      	ldr	r3, [pc, #240]	; (8006b78 <LoRaWANService_Callback+0xb08>)
 8006a88:	f240 1253 	movw	r2, #339	; 0x153
 8006a8c:	601a      	str	r2, [r3, #0]
		qSTimerSet(&Timeout,5.0);
 8006a8e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8006a92:	483a      	ldr	r0, [pc, #232]	; (8006b7c <LoRaWANService_Callback+0xb0c>)
 8006a94:	f7fe fed0 	bl	8005838 <qSTimerSet>
		qPrintString(UART_LORA,NULL,"mac tx cnf 1 0000000009c7\r\n");
 8006a98:	2300      	movs	r3, #0
 8006a9a:	4a43      	ldr	r2, [pc, #268]	; (8006ba8 <LoRaWANService_Callback+0xb38>)
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	483a      	ldr	r0, [pc, #232]	; (8006b88 <LoRaWANService_Callback+0xb18>)
 8006aa0:	f7ff f83b 	bl	8005b1a <qOutputString>
		qDebugMessage("mac tx cnf 1 0000000009c7\r\n");
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	9301      	str	r3, [sp, #4]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	4b3e      	ldr	r3, [pc, #248]	; (8006ba8 <LoRaWANService_Callback+0xb38>)
 8006aae:	4a3f      	ldr	r2, [pc, #252]	; (8006bac <LoRaWANService_Callback+0xb3c>)
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	483e      	ldr	r0, [pc, #248]	; (8006bac <LoRaWANService_Callback+0xb3c>)
 8006ab4:	f7ff f960 	bl	8005d78 <__qtrace_func>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"accepted\r\n",4))||(qSTimerExpired(&Timeout)));
 8006ab8:	4b34      	ldr	r3, [pc, #208]	; (8006b8c <LoRaWANService_Callback+0xb1c>)
 8006aba:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	2204      	movs	r2, #4
 8006ac2:	4938      	ldr	r1, [pc, #224]	; (8006ba4 <LoRaWANService_Callback+0xb34>)
 8006ac4:	4833      	ldr	r0, [pc, #204]	; (8006b94 <LoRaWANService_Callback+0xb24>)
 8006ac6:	f7ff f8bd 	bl	8005c44 <qResponseReceived>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d105      	bne.n	8006adc <LoRaWANService_Callback+0xa6c>
 8006ad0:	482a      	ldr	r0, [pc, #168]	; (8006b7c <LoRaWANService_Callback+0xb0c>)
 8006ad2:	f7fe fed2 	bl	800587a <qSTimerExpired>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d046      	beq.n	8006b6a <LoRaWANService_Callback+0xafa>
		if(qSTimerExpired(&Timeout)){
 8006adc:	4827      	ldr	r0, [pc, #156]	; (8006b7c <LoRaWANService_Callback+0xb0c>)
 8006ade:	f7fe fecc 	bl	800587a <qSTimerExpired>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d015      	beq.n	8006b14 <LoRaWANService_Callback+0xaa4>
			contRetry++;
 8006ae8:	4b2b      	ldr	r3, [pc, #172]	; (8006b98 <LoRaWANService_Callback+0xb28>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	3301      	adds	r3, #1
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	4b29      	ldr	r3, [pc, #164]	; (8006b98 <LoRaWANService_Callback+0xb28>)
 8006af2:	701a      	strb	r2, [r3, #0]
			if(contRetry >=5 ){
 8006af4:	4b28      	ldr	r3, [pc, #160]	; (8006b98 <LoRaWANService_Callback+0xb28>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d906      	bls.n	8006b0a <LoRaWANService_Callback+0xa9a>
				contRetry = 0;
 8006afc:	4b26      	ldr	r3, [pc, #152]	; (8006b98 <LoRaWANService_Callback+0xb28>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	701a      	strb	r2, [r3, #0]
				qCoroutineRestart;
 8006b02:	4b22      	ldr	r3, [pc, #136]	; (8006b8c <LoRaWANService_Callback+0xb1c>)
 8006b04:	4a25      	ldr	r2, [pc, #148]	; (8006b9c <LoRaWANService_Callback+0xb2c>)
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	e032      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
			}else qCoroutinePositionRestore(state);
 8006b0a:	4b1b      	ldr	r3, [pc, #108]	; (8006b78 <LoRaWANService_Callback+0xb08>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a1f      	ldr	r2, [pc, #124]	; (8006b8c <LoRaWANService_Callback+0xb1c>)
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	e02d      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutineWaitUntil( SigFoxData.WilsolService_Status == WSSFM1XRX_STATUS_IDLE  );
 8006b14:	4b1d      	ldr	r3, [pc, #116]	; (8006b8c <LoRaWANService_Callback+0xb1c>)
 8006b16:	f240 1261 	movw	r2, #353	; 0x161
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	4b24      	ldr	r3, [pc, #144]	; (8006bb0 <LoRaWANService_Callback+0xb40>)
 8006b1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b22:	2b0d      	cmp	r3, #13
 8006b24:	d123      	bne.n	8006b6e <LoRaWANService_Callback+0xafe>
	}qCoroutineEnd;
 8006b26:	4b19      	ldr	r3, [pc, #100]	; (8006b8c <LoRaWANService_Callback+0xb1c>)
 8006b28:	4a1c      	ldr	r2, [pc, #112]	; (8006b9c <LoRaWANService_Callback+0xb2c>)
 8006b2a:	601a      	str	r2, [r3, #0]
}
 8006b2c:	e020      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"RN2903\r\n",0)) );
 8006b2e:	bf00      	nop
 8006b30:	e01e      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006b32:	bf00      	nop
 8006b34:	e01c      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006b36:	bf00      	nop
 8006b38:	e01a      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006b3a:	bf00      	nop
 8006b3c:	e018      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006b3e:	bf00      	nop
 8006b40:	e016      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006b42:	bf00      	nop
 8006b44:	e014      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006b46:	bf00      	nop
 8006b48:	e012      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006b4a:	bf00      	nop
 8006b4c:	e010      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006b4e:	bf00      	nop
 8006b50:	e00e      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
			qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006b52:	bf00      	nop
 8006b54:	e00c      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
			qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006b56:	bf00      	nop
 8006b58:	e00a      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006b5a:	bf00      	nop
 8006b5c:	e008      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006b5e:	bf00      	nop
 8006b60:	e006      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"OK\r\n",4))||(qSTimerExpired(&Timeout)));
 8006b62:	bf00      	nop
 8006b64:	e004      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"accepted\r\n",4))||(qSTimerExpired(&Timeout)));
 8006b66:	bf00      	nop
 8006b68:	e002      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutineWaitUntil((qResponseReceived(&ResponseObject,"accepted\r\n",4))||(qSTimerExpired(&Timeout)));
 8006b6a:	bf00      	nop
 8006b6c:	e000      	b.n	8006b70 <LoRaWANService_Callback+0xb00>
		qCoroutineWaitUntil( SigFoxData.WilsolService_Status == WSSFM1XRX_STATUS_IDLE  );
 8006b6e:	bf00      	nop
}
 8006b70:	bf00      	nop
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	20000124 	.word	0x20000124
 8006b7c:	200000a0 	.word	0x200000a0
 8006b80:	200001a8 	.word	0x200001a8
 8006b84:	08008300 	.word	0x08008300
 8006b88:	08004331 	.word	0x08004331
 8006b8c:	20000014 	.word	0x20000014
 8006b90:	080081c8 	.word	0x080081c8
 8006b94:	200001c8 	.word	0x200001c8
 8006b98:	20000128 	.word	0x20000128
 8006b9c:	ffff8002 	.word	0xffff8002
 8006ba0:	0800830c 	.word	0x0800830c
 8006ba4:	0800831c 	.word	0x0800831c
 8006ba8:	08008328 	.word	0x08008328
 8006bac:	08008160 	.word	0x08008160
 8006bb0:	20000260 	.word	0x20000260

08006bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af06      	add	r7, sp, #24
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006bba:	f7f9 fce1 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006bbe:	f000 f8b5 	bl	8006d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006bc2:	f000 fa75 	bl	80070b0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8006bc6:	f000 f9b3 	bl	8006f30 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8006bca:	f000 fa0d 	bl	8006fe8 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8006bce:	f000 f9db 	bl	8006f88 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8006bd2:	f000 f937 	bl	8006e44 <MX_ADC1_Init>
  MX_RTC_Init();
 8006bd6:	f000 fa37 	bl	8007048 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart2,(uint8_t *)&UART_RX.Data,USART_RX_AMOUNT_BYTES);
 8006bda:	2201      	movs	r2, #1
 8006bdc:	4935      	ldr	r1, [pc, #212]	; (8006cb4 <main+0x100>)
 8006bde:	4836      	ldr	r0, [pc, #216]	; (8006cb8 <main+0x104>)
 8006be0:	f7fc fc10 	bl	8003404 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3,(uint8_t *)&UART_RX3.Data,USART_RX_AMOUNT_BYTES);
 8006be4:	2201      	movs	r2, #1
 8006be6:	4935      	ldr	r1, [pc, #212]	; (8006cbc <main+0x108>)
 8006be8:	4835      	ldr	r0, [pc, #212]	; (8006cc0 <main+0x10c>)
 8006bea:	f7fc fc0b 	bl	8003404 <HAL_UART_Receive_IT>
	SigfoxModule.StatusFlag = WSSFM1XRX_Init(&SigfoxModule, RSTCtrl_Sigfox,
 8006bee:	2304      	movs	r3, #4
 8006bf0:	9305      	str	r3, [sp, #20]
 8006bf2:	2325      	movs	r3, #37	; 0x25
 8006bf4:	9304      	str	r3, [sp, #16]
 8006bf6:	4b33      	ldr	r3, [pc, #204]	; (8006cc4 <main+0x110>)
 8006bf8:	9303      	str	r3, [sp, #12]
 8006bfa:	4b33      	ldr	r3, [pc, #204]	; (8006cc8 <main+0x114>)
 8006bfc:	9302      	str	r3, [sp, #8]
 8006bfe:	4b33      	ldr	r3, [pc, #204]	; (8006ccc <main+0x118>)
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	2303      	movs	r3, #3
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	4b32      	ldr	r3, [pc, #200]	; (8006cd0 <main+0x11c>)
 8006c08:	4a32      	ldr	r2, [pc, #200]	; (8006cd4 <main+0x120>)
 8006c0a:	4933      	ldr	r1, [pc, #204]	; (8006cd8 <main+0x124>)
 8006c0c:	4833      	ldr	r0, [pc, #204]	; (8006cdc <main+0x128>)
 8006c0e:	f7fd fcf3 	bl	80045f8 <WSSFM1XRX_Init>
 8006c12:	4603      	mov	r3, r0
 8006c14:	461a      	mov	r2, r3
 8006c16:	4b31      	ldr	r3, [pc, #196]	; (8006cdc <main+0x128>)
 8006c18:	76da      	strb	r2, [r3, #27]
			RST2Ctrl_Sigfox, PutCharWrapperUart_1,
			WSSFM1XRX_RCZ4, DiscrimateFrameType, HAL_GetTick,BufferRxFrame,
			sizeof(BufferRxFrame), 4);
	SigFoxData.ReadyToUplink = 0;
 8006c1a:	4b31      	ldr	r3, [pc, #196]	; (8006ce0 <main+0x12c>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	SigFoxData.ReadyToUplink = 0;
 8006c22:	4b2f      	ldr	r3, [pc, #188]	; (8006ce0 <main+0x12c>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_MODULE_NOT_INITIALIZED;
 8006c2a:	4b2d      	ldr	r3, [pc, #180]	; (8006ce0 <main+0x12c>)
 8006c2c:	220e      	movs	r2, #14
 8006c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	qSetDebugFcn(UART_DEBUG);
 8006c32:	4b2c      	ldr	r3, [pc, #176]	; (8006ce4 <main+0x130>)
 8006c34:	4a2c      	ldr	r2, [pc, #176]	; (8006ce8 <main+0x134>)
 8006c36:	601a      	str	r2, [r3, #0]
	//HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1); // quitar
	qResponseInitialize(&ResponseObject);
 8006c38:	482c      	ldr	r0, [pc, #176]	; (8006cec <main+0x138>)
 8006c3a:	f7fe ffec 	bl	8005c16 <qResponseInitialize>
	//qResponseInitialize(&ResponseObjectLora);

	ProjectInformation();
 8006c3e:	f7fd fcad 	bl	800459c <ProjectInformation>
	qSchedulerSetup(HAL_GetTick, 0.001, IdleTask_Callback, 0);
 8006c42:	2300      	movs	r3, #0
 8006c44:	463a      	mov	r2, r7
 8006c46:	492a      	ldr	r1, [pc, #168]	; (8006cf0 <main+0x13c>)
 8006c48:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8006cf4 <main+0x140>
 8006c4c:	481e      	ldr	r0, [pc, #120]	; (8006cc8 <main+0x114>)
 8006c4e:	f7fe f8e5 	bl	8004e1c <_qInitScheduler>

	qEdgeCheck_Initialize(&InputCheck, QREG_32BIT, 100);
 8006c52:	2264      	movs	r2, #100	; 0x64
 8006c54:	4928      	ldr	r1, [pc, #160]	; (8006cf8 <main+0x144>)
 8006c56:	4829      	ldr	r0, [pc, #164]	; (8006cfc <main+0x148>)
 8006c58:	f7ff f8fc 	bl	8005e54 <qEdgeCheck_Initialize>
	qEdgeCheck_InsertNode(&InputCheck, &InputButton, GPIOB_BASE, 0);
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	4a28      	ldr	r2, [pc, #160]	; (8006d00 <main+0x14c>)
 8006c60:	4928      	ldr	r1, [pc, #160]	; (8006d04 <main+0x150>)
 8006c62:	4826      	ldr	r0, [pc, #152]	; (8006cfc <main+0x148>)
 8006c64:	f7ff f91e 	bl	8005ea4 <qEdgeCheck_InsertNode>

	qQueueCreate(&SigFox_UplinkQueue, mQueue_Stack, sizeof(SigfoxServiceRequest_t), 2);
 8006c68:	2302      	movs	r3, #2
 8006c6a:	220d      	movs	r2, #13
 8006c6c:	4926      	ldr	r1, [pc, #152]	; (8006d08 <main+0x154>)
 8006c6e:	4827      	ldr	r0, [pc, #156]	; (8006d0c <main+0x158>)
 8006c70:	f7fe fe4f 	bl	8005912 <qQueueCreate>
	qTaskSetState(&Task_Wisol_Service,qEnabled);
 8006c74:	2101      	movs	r1, #1
 8006c76:	4826      	ldr	r0, [pc, #152]	; (8006d10 <main+0x15c>)
 8006c78:	f7fe f822 	bl	8004cc0 <qTaskSetState>

	//qSchedulerAddSMTask(&Task_ApplicationFSM, MEDIUM_Priority, 0.01, &StateMachine_ApplicationFSM, State_Init,NULL, NULL, State_Failure, NULL, qEnabled, NULL);
	//qSchedulerAddxTask(&Task_Wisol_Service, WisolService_Callback, MEDIUM_Priority, 0.1, qPeriodic, qEnabled, NULL); /*en el mismo tiempo de la maquina de estados se pega en ATRC?? corutina??*/
	qSchedulerAddxTask(&Task_LoRaWANService, LoRaWANService_Callback, MEDIUM_Priority, 0.1, qPeriodic, qEnabled, NULL); /*en el mismo tiempo de la maquina de estados se pega en ATRC?? corutina??*/
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	2301      	movs	r3, #1
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	4b23      	ldr	r3, [pc, #140]	; (8006d14 <main+0x160>)
 8006c86:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8006d18 <main+0x164>
 8006c8a:	227f      	movs	r2, #127	; 0x7f
 8006c8c:	4923      	ldr	r1, [pc, #140]	; (8006d1c <main+0x168>)
 8006c8e:	4824      	ldr	r0, [pc, #144]	; (8006d20 <main+0x16c>)
 8006c90:	f7fe f91e 	bl	8004ed0 <qSchedulerAdd_Task>

	qSchedulerAdd_EventTask(&Task_UplinkDispatcher, UplinkDispatcher_Callback, qHigh_Priority, NULL);
 8006c94:	2300      	movs	r3, #0
 8006c96:	22fe      	movs	r2, #254	; 0xfe
 8006c98:	4922      	ldr	r1, [pc, #136]	; (8006d24 <main+0x170>)
 8006c9a:	4823      	ldr	r0, [pc, #140]	; (8006d28 <main+0x174>)
 8006c9c:	f7fe f998 	bl	8004fd0 <qSchedulerAdd_EventTask>
	qTaskAttachQueue(&Task_UplinkDispatcher, &SigFox_UplinkQueue, qQUEUE_COUNT, 1);
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	2205      	movs	r2, #5
 8006ca4:	4919      	ldr	r1, [pc, #100]	; (8006d0c <main+0x158>)
 8006ca6:	4820      	ldr	r0, [pc, #128]	; (8006d28 <main+0x174>)
 8006ca8:	f7fe fa5a 	bl	8005160 <qTaskAttachQueue>

	qSchedulerRun();
 8006cac:	f7fe fb36 	bl	800531c <qSchedulerRun>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006cb0:	e7fe      	b.n	8006cb0 <main+0xfc>
 8006cb2:	bf00      	nop
 8006cb4:	200004c2 	.word	0x200004c2
 8006cb8:	20000428 	.word	0x20000428
 8006cbc:	200001c2 	.word	0x200001c2
 8006cc0:	200001e0 	.word	0x200001e0
 8006cc4:	200003bc 	.word	0x200003bc
 8006cc8:	08000649 	.word	0x08000649
 8006ccc:	08004493 	.word	0x08004493
 8006cd0:	08004369 	.word	0x08004369
 8006cd4:	080042f9 	.word	0x080042f9
 8006cd8:	080042c5 	.word	0x080042c5
 8006cdc:	200004c8 	.word	0x200004c8
 8006ce0:	20000260 	.word	0x20000260
 8006ce4:	2000011c 	.word	0x2000011c
 8006ce8:	080043a1 	.word	0x080043a1
 8006cec:	200001c8 	.word	0x200001c8
 8006cf0:	08005eff 	.word	0x08005eff
 8006cf4:	3a83126f 	.word	0x3a83126f
 8006cf8:	08005e19 	.word	0x08005e19
 8006cfc:	20000364 	.word	0x20000364
 8006d00:	48000400 	.word	0x48000400
 8006d04:	200001d4 	.word	0x200001d4
 8006d08:	200000ac 	.word	0x200000ac
 8006d0c:	200002c8 	.word	0x200002c8
 8006d10:	20000378 	.word	0x20000378
 8006d14:	ffff8000 	.word	0xffff8000
 8006d18:	3dcccccd 	.word	0x3dcccccd
 8006d1c:	08006071 	.word	0x08006071
 8006d20:	20000288 	.word	0x20000288
 8006d24:	08005f15 	.word	0x08005f15
 8006d28:	2000053c 	.word	0x2000053c

08006d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b0b8      	sub	sp, #224	; 0xe0
 8006d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006d36:	2244      	movs	r2, #68	; 0x44
 8006d38:	2100      	movs	r1, #0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fcb5 	bl	80076aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006d40:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	605a      	str	r2, [r3, #4]
 8006d4a:	609a      	str	r2, [r3, #8]
 8006d4c:	60da      	str	r2, [r3, #12]
 8006d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006d50:	1d3b      	adds	r3, r7, #4
 8006d52:	2284      	movs	r2, #132	; 0x84
 8006d54:	2100      	movs	r1, #0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fca7 	bl	80076aa <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8006d5c:	231a      	movs	r3, #26
 8006d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006d6a:	2310      	movs	r3, #16
 8006d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006d70:	2301      	movs	r3, #1
 8006d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006d76:	2301      	movs	r3, #1
 8006d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006d82:	2360      	movs	r3, #96	; 0x60
 8006d84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d8e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7fa fee4 	bl	8001b60 <HAL_RCC_OscConfig>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8006d9e:	f000 fa03 	bl	80071a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006da2:	230f      	movs	r3, #15
 8006da4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006da8:	2301      	movs	r3, #1
 8006daa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006dae:	2300      	movs	r3, #0
 8006db0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006db4:	2300      	movs	r3, #0
 8006db6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006dc0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fb fa7a 	bl	80022c0 <HAL_RCC_ClockConfig>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8006dd2:	f000 f9e9 	bl	80071a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8006dd6:	4b1a      	ldr	r3, [pc, #104]	; (8006e40 <SystemClock_Config+0x114>)
 8006dd8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006dde:	2300      	movs	r3, #0
 8006de0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006de2:	2300      	movs	r3, #0
 8006de4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8006de6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006dea:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8006df4:	2301      	movs	r3, #1
 8006df6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8006dfc:	2310      	movs	r3, #16
 8006dfe:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8006e00:	2307      	movs	r3, #7
 8006e02:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8006e04:	2302      	movs	r3, #2
 8006e06:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8006e08:	2302      	movs	r3, #2
 8006e0a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8006e0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e10:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e12:	1d3b      	adds	r3, r7, #4
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fb fc57 	bl	80026c8 <HAL_RCCEx_PeriphCLKConfig>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8006e20:	f000 f9c2 	bl	80071a8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006e24:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006e28:	f7fa fe44 	bl	8001ab4 <HAL_PWREx_ControlVoltageScaling>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8006e32:	f000 f9b9 	bl	80071a8 <Error_Handler>
  }
}
 8006e36:	bf00      	nop
 8006e38:	37e0      	adds	r7, #224	; 0xe0
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	00024026 	.word	0x00024026

08006e44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08a      	sub	sp, #40	; 0x28
 8006e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8006e4a:	f107 031c 	add.w	r3, r7, #28
 8006e4e:	2200      	movs	r2, #0
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	605a      	str	r2, [r3, #4]
 8006e54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006e56:	1d3b      	adds	r3, r7, #4
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	605a      	str	r2, [r3, #4]
 8006e5e:	609a      	str	r2, [r3, #8]
 8006e60:	60da      	str	r2, [r3, #12]
 8006e62:	611a      	str	r2, [r3, #16]
 8006e64:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006e66:	4b2f      	ldr	r3, [pc, #188]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006e68:	4a2f      	ldr	r2, [pc, #188]	; (8006f28 <MX_ADC1_Init+0xe4>)
 8006e6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006e6c:	4b2d      	ldr	r3, [pc, #180]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006e6e:	2200      	movs	r2, #0
 8006e70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006e72:	4b2c      	ldr	r3, [pc, #176]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006e78:	4b2a      	ldr	r3, [pc, #168]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006e7e:	4b29      	ldr	r3, [pc, #164]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006e84:	4b27      	ldr	r3, [pc, #156]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006e86:	2204      	movs	r2, #4
 8006e88:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006e8a:	4b26      	ldr	r3, [pc, #152]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006e90:	4b24      	ldr	r3, [pc, #144]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8006e96:	4b23      	ldr	r3, [pc, #140]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006e98:	2201      	movs	r2, #1
 8006e9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006e9c:	4b21      	ldr	r3, [pc, #132]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006ea4:	4b1f      	ldr	r3, [pc, #124]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006eaa:	4b1e      	ldr	r3, [pc, #120]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006eb0:	4b1c      	ldr	r3, [pc, #112]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006eb8:	4b1a      	ldr	r3, [pc, #104]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8006ebe:	4b19      	ldr	r3, [pc, #100]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006ec6:	4817      	ldr	r0, [pc, #92]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006ec8:	f7f9 fd4a 	bl	8000960 <HAL_ADC_Init>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8006ed2:	f000 f969 	bl	80071a8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006eda:	f107 031c 	add.w	r3, r7, #28
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4810      	ldr	r0, [pc, #64]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006ee2:	f7fa fa1b 	bl	800131c <HAL_ADCEx_MultiModeConfigChannel>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8006eec:	f000 f95c 	bl	80071a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006ef0:	4b0e      	ldr	r3, [pc, #56]	; (8006f2c <MX_ADC1_Init+0xe8>)
 8006ef2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006ef4:	2306      	movs	r3, #6
 8006ef6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006efc:	237f      	movs	r3, #127	; 0x7f
 8006efe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006f00:	2304      	movs	r3, #4
 8006f02:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006f08:	1d3b      	adds	r3, r7, #4
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	4805      	ldr	r0, [pc, #20]	; (8006f24 <MX_ADC1_Init+0xe0>)
 8006f0e:	f7f9 fe7b 	bl	8000c08 <HAL_ADC_ConfigChannel>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8006f18:	f000 f946 	bl	80071a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006f1c:	bf00      	nop
 8006f1e:	3728      	adds	r7, #40	; 0x28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	20000590 	.word	0x20000590
 8006f28:	50040000 	.word	0x50040000
 8006f2c:	10c00010 	.word	0x10c00010

08006f30 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006f34:	4b12      	ldr	r3, [pc, #72]	; (8006f80 <MX_LPUART1_UART_Init+0x50>)
 8006f36:	4a13      	ldr	r2, [pc, #76]	; (8006f84 <MX_LPUART1_UART_Init+0x54>)
 8006f38:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8006f3a:	4b11      	ldr	r3, [pc, #68]	; (8006f80 <MX_LPUART1_UART_Init+0x50>)
 8006f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006f40:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006f42:	4b0f      	ldr	r3, [pc, #60]	; (8006f80 <MX_LPUART1_UART_Init+0x50>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006f48:	4b0d      	ldr	r3, [pc, #52]	; (8006f80 <MX_LPUART1_UART_Init+0x50>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006f4e:	4b0c      	ldr	r3, [pc, #48]	; (8006f80 <MX_LPUART1_UART_Init+0x50>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006f54:	4b0a      	ldr	r3, [pc, #40]	; (8006f80 <MX_LPUART1_UART_Init+0x50>)
 8006f56:	220c      	movs	r2, #12
 8006f58:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f5a:	4b09      	ldr	r3, [pc, #36]	; (8006f80 <MX_LPUART1_UART_Init+0x50>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f60:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <MX_LPUART1_UART_Init+0x50>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f66:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <MX_LPUART1_UART_Init+0x50>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006f6c:	4804      	ldr	r0, [pc, #16]	; (8006f80 <MX_LPUART1_UART_Init+0x50>)
 8006f6e:	f7fc f9fb 	bl	8003368 <HAL_UART_Init>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8006f78:	f000 f916 	bl	80071a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006f7c:	bf00      	nop
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	200002e0 	.word	0x200002e0
 8006f84:	40008000 	.word	0x40008000

08006f88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006f8c:	4b14      	ldr	r3, [pc, #80]	; (8006fe0 <MX_USART2_UART_Init+0x58>)
 8006f8e:	4a15      	ldr	r2, [pc, #84]	; (8006fe4 <MX_USART2_UART_Init+0x5c>)
 8006f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8006f92:	4b13      	ldr	r3, [pc, #76]	; (8006fe0 <MX_USART2_UART_Init+0x58>)
 8006f94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006f9a:	4b11      	ldr	r3, [pc, #68]	; (8006fe0 <MX_USART2_UART_Init+0x58>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006fa0:	4b0f      	ldr	r3, [pc, #60]	; (8006fe0 <MX_USART2_UART_Init+0x58>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006fa6:	4b0e      	ldr	r3, [pc, #56]	; (8006fe0 <MX_USART2_UART_Init+0x58>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006fac:	4b0c      	ldr	r3, [pc, #48]	; (8006fe0 <MX_USART2_UART_Init+0x58>)
 8006fae:	220c      	movs	r2, #12
 8006fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fb2:	4b0b      	ldr	r3, [pc, #44]	; (8006fe0 <MX_USART2_UART_Init+0x58>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fb8:	4b09      	ldr	r3, [pc, #36]	; (8006fe0 <MX_USART2_UART_Init+0x58>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006fbe:	4b08      	ldr	r3, [pc, #32]	; (8006fe0 <MX_USART2_UART_Init+0x58>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006fc4:	4b06      	ldr	r3, [pc, #24]	; (8006fe0 <MX_USART2_UART_Init+0x58>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006fca:	4805      	ldr	r0, [pc, #20]	; (8006fe0 <MX_USART2_UART_Init+0x58>)
 8006fcc:	f7fc f9cc 	bl	8003368 <HAL_UART_Init>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8006fd6:	f000 f8e7 	bl	80071a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006fda:	bf00      	nop
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	20000428 	.word	0x20000428
 8006fe4:	40004400 	.word	0x40004400

08006fe8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006fec:	4b14      	ldr	r3, [pc, #80]	; (8007040 <MX_USART3_UART_Init+0x58>)
 8006fee:	4a15      	ldr	r2, [pc, #84]	; (8007044 <MX_USART3_UART_Init+0x5c>)
 8006ff0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8006ff2:	4b13      	ldr	r3, [pc, #76]	; (8007040 <MX_USART3_UART_Init+0x58>)
 8006ff4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8006ff8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006ffa:	4b11      	ldr	r3, [pc, #68]	; (8007040 <MX_USART3_UART_Init+0x58>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007000:	4b0f      	ldr	r3, [pc, #60]	; (8007040 <MX_USART3_UART_Init+0x58>)
 8007002:	2200      	movs	r2, #0
 8007004:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007006:	4b0e      	ldr	r3, [pc, #56]	; (8007040 <MX_USART3_UART_Init+0x58>)
 8007008:	2200      	movs	r2, #0
 800700a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800700c:	4b0c      	ldr	r3, [pc, #48]	; (8007040 <MX_USART3_UART_Init+0x58>)
 800700e:	220c      	movs	r2, #12
 8007010:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007012:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <MX_USART3_UART_Init+0x58>)
 8007014:	2200      	movs	r2, #0
 8007016:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007018:	4b09      	ldr	r3, [pc, #36]	; (8007040 <MX_USART3_UART_Init+0x58>)
 800701a:	2200      	movs	r2, #0
 800701c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800701e:	4b08      	ldr	r3, [pc, #32]	; (8007040 <MX_USART3_UART_Init+0x58>)
 8007020:	2200      	movs	r2, #0
 8007022:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007024:	4b06      	ldr	r3, [pc, #24]	; (8007040 <MX_USART3_UART_Init+0x58>)
 8007026:	2200      	movs	r2, #0
 8007028:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800702a:	4805      	ldr	r0, [pc, #20]	; (8007040 <MX_USART3_UART_Init+0x58>)
 800702c:	f7fc f99c 	bl	8003368 <HAL_UART_Init>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8007036:	f000 f8b7 	bl	80071a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800703a:	bf00      	nop
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	200001e0 	.word	0x200001e0
 8007044:	40004800 	.word	0x40004800

08007048 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800704c:	4b16      	ldr	r3, [pc, #88]	; (80070a8 <MX_RTC_Init+0x60>)
 800704e:	4a17      	ldr	r2, [pc, #92]	; (80070ac <MX_RTC_Init+0x64>)
 8007050:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007052:	4b15      	ldr	r3, [pc, #84]	; (80070a8 <MX_RTC_Init+0x60>)
 8007054:	2200      	movs	r2, #0
 8007056:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007058:	4b13      	ldr	r3, [pc, #76]	; (80070a8 <MX_RTC_Init+0x60>)
 800705a:	227f      	movs	r2, #127	; 0x7f
 800705c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800705e:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <MX_RTC_Init+0x60>)
 8007060:	22ff      	movs	r2, #255	; 0xff
 8007062:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007064:	4b10      	ldr	r3, [pc, #64]	; (80070a8 <MX_RTC_Init+0x60>)
 8007066:	2200      	movs	r2, #0
 8007068:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800706a:	4b0f      	ldr	r3, [pc, #60]	; (80070a8 <MX_RTC_Init+0x60>)
 800706c:	2200      	movs	r2, #0
 800706e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007070:	4b0d      	ldr	r3, [pc, #52]	; (80070a8 <MX_RTC_Init+0x60>)
 8007072:	2200      	movs	r2, #0
 8007074:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007076:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <MX_RTC_Init+0x60>)
 8007078:	2200      	movs	r2, #0
 800707a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800707c:	480a      	ldr	r0, [pc, #40]	; (80070a8 <MX_RTC_Init+0x60>)
 800707e:	f7fb ffa3 	bl	8002fc8 <HAL_RTC_Init>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8007088:	f000 f88e 	bl	80071a8 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,300, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800708c:	2204      	movs	r2, #4
 800708e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007092:	4805      	ldr	r0, [pc, #20]	; (80070a8 <MX_RTC_Init+0x60>)
 8007094:	f7fc f8ae 	bl	80031f4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800709e:	f000 f883 	bl	80071a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80070a2:	bf00      	nop
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	200005f4 	.word	0x200005f4
 80070ac:	40002800 	.word	0x40002800

080070b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b088      	sub	sp, #32
 80070b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070b6:	f107 030c 	add.w	r3, r7, #12
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	605a      	str	r2, [r3, #4]
 80070c0:	609a      	str	r2, [r3, #8]
 80070c2:	60da      	str	r2, [r3, #12]
 80070c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80070c6:	4b29      	ldr	r3, [pc, #164]	; (800716c <MX_GPIO_Init+0xbc>)
 80070c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ca:	4a28      	ldr	r2, [pc, #160]	; (800716c <MX_GPIO_Init+0xbc>)
 80070cc:	f043 0304 	orr.w	r3, r3, #4
 80070d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070d2:	4b26      	ldr	r3, [pc, #152]	; (800716c <MX_GPIO_Init+0xbc>)
 80070d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d6:	f003 0304 	and.w	r3, r3, #4
 80070da:	60bb      	str	r3, [r7, #8]
 80070dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80070de:	4b23      	ldr	r3, [pc, #140]	; (800716c <MX_GPIO_Init+0xbc>)
 80070e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e2:	4a22      	ldr	r2, [pc, #136]	; (800716c <MX_GPIO_Init+0xbc>)
 80070e4:	f043 0301 	orr.w	r3, r3, #1
 80070e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070ea:	4b20      	ldr	r3, [pc, #128]	; (800716c <MX_GPIO_Init+0xbc>)
 80070ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	607b      	str	r3, [r7, #4]
 80070f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80070f6:	4b1d      	ldr	r3, [pc, #116]	; (800716c <MX_GPIO_Init+0xbc>)
 80070f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070fa:	4a1c      	ldr	r2, [pc, #112]	; (800716c <MX_GPIO_Init+0xbc>)
 80070fc:	f043 0302 	orr.w	r3, r3, #2
 8007100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007102:	4b1a      	ldr	r3, [pc, #104]	; (800716c <MX_GPIO_Init+0xbc>)
 8007104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|Gpio2_Bus1_Wakeup_Pin|Gpio3_Bus1_Rst_Pin, GPIO_PIN_RESET);
 800710e:	2200      	movs	r2, #0
 8007110:	f44f 7111 	mov.w	r1, #580	; 0x244
 8007114:	4816      	ldr	r0, [pc, #88]	; (8007170 <MX_GPIO_Init+0xc0>)
 8007116:	f7fa fca7 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Gpio4_Bus1_Shutdown_Pin|GPIO_PIN_8|Sigfox_Rst_Pin|Sigfox_shutdown_Pin, GPIO_PIN_RESET);
 800711a:	2200      	movs	r2, #0
 800711c:	f44f 61e8 	mov.w	r1, #1856	; 0x740
 8007120:	4814      	ldr	r0, [pc, #80]	; (8007174 <MX_GPIO_Init+0xc4>)
 8007122:	f7fa fca1 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 Gpio2_Bus1_Wakeup_Pin Gpio3_Bus1_Rst_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|Gpio2_Bus1_Wakeup_Pin|Gpio3_Bus1_Rst_Pin;
 8007126:	f44f 7311 	mov.w	r3, #580	; 0x244
 800712a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800712c:	2301      	movs	r3, #1
 800712e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007130:	2300      	movs	r3, #0
 8007132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007134:	2300      	movs	r3, #0
 8007136:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007138:	f107 030c 	add.w	r3, r7, #12
 800713c:	4619      	mov	r1, r3
 800713e:	480c      	ldr	r0, [pc, #48]	; (8007170 <MX_GPIO_Init+0xc0>)
 8007140:	f7fa faea 	bl	8001718 <HAL_GPIO_Init>

  /*Configure GPIO pins : Gpio4_Bus1_Shutdown_Pin PC8 Sigfox_Rst_Pin Sigfox_shutdown_Pin */
  GPIO_InitStruct.Pin = Gpio4_Bus1_Shutdown_Pin|GPIO_PIN_8|Sigfox_Rst_Pin|Sigfox_shutdown_Pin;
 8007144:	f44f 63e8 	mov.w	r3, #1856	; 0x740
 8007148:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800714a:	2301      	movs	r3, #1
 800714c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800714e:	2300      	movs	r3, #0
 8007150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007152:	2300      	movs	r3, #0
 8007154:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007156:	f107 030c 	add.w	r3, r7, #12
 800715a:	4619      	mov	r1, r3
 800715c:	4805      	ldr	r0, [pc, #20]	; (8007174 <MX_GPIO_Init+0xc4>)
 800715e:	f7fa fadb 	bl	8001718 <HAL_GPIO_Init>

}
 8007162:	bf00      	nop
 8007164:	3720      	adds	r7, #32
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	40021000 	.word	0x40021000
 8007170:	48000400 	.word	0x48000400
 8007174:	48000800 	.word	0x48000800

08007178 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
	PutStringWrapperUart_2(NULL,"=========================================\r\n");
 8007180:	4907      	ldr	r1, [pc, #28]	; (80071a0 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 8007182:	2000      	movs	r0, #0
 8007184:	f7fd f928 	bl	80043d8 <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL, "Wakeup Time\r\n");
 8007188:	4906      	ldr	r1, [pc, #24]	; (80071a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 800718a:	2000      	movs	r0, #0
 800718c:	f7fd f924 	bl	80043d8 <PutStringWrapperUart_2>
	PutStringWrapperUart_2(NULL,"=========================================\r\n");
 8007190:	4903      	ldr	r1, [pc, #12]	; (80071a0 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 8007192:	2000      	movs	r0, #0
 8007194:	f7fd f920 	bl	80043d8 <PutStringWrapperUart_2>
}
 8007198:	bf00      	nop
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	08008344 	.word	0x08008344
 80071a4:	08008370 	.word	0x08008370

080071a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80071ac:	bf00      	nop
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
	...

080071b8 <HAL_MspInit>:
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <HAL_MspInit+0x44>)
 80071c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c2:	4a0e      	ldr	r2, [pc, #56]	; (80071fc <HAL_MspInit+0x44>)
 80071c4:	f043 0301 	orr.w	r3, r3, #1
 80071c8:	6613      	str	r3, [r2, #96]	; 0x60
 80071ca:	4b0c      	ldr	r3, [pc, #48]	; (80071fc <HAL_MspInit+0x44>)
 80071cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	607b      	str	r3, [r7, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4b09      	ldr	r3, [pc, #36]	; (80071fc <HAL_MspInit+0x44>)
 80071d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071da:	4a08      	ldr	r2, [pc, #32]	; (80071fc <HAL_MspInit+0x44>)
 80071dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e0:	6593      	str	r3, [r2, #88]	; 0x58
 80071e2:	4b06      	ldr	r3, [pc, #24]	; (80071fc <HAL_MspInit+0x44>)
 80071e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	40021000 	.word	0x40021000

08007200 <HAL_ADC_MspInit>:
 8007200:	b580      	push	{r7, lr}
 8007202:	b08a      	sub	sp, #40	; 0x28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	f107 0314 	add.w	r3, r7, #20
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	605a      	str	r2, [r3, #4]
 8007212:	609a      	str	r2, [r3, #8]
 8007214:	60da      	str	r2, [r3, #12]
 8007216:	611a      	str	r2, [r3, #16]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a15      	ldr	r2, [pc, #84]	; (8007274 <HAL_ADC_MspInit+0x74>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d123      	bne.n	800726a <HAL_ADC_MspInit+0x6a>
 8007222:	4b15      	ldr	r3, [pc, #84]	; (8007278 <HAL_ADC_MspInit+0x78>)
 8007224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007226:	4a14      	ldr	r2, [pc, #80]	; (8007278 <HAL_ADC_MspInit+0x78>)
 8007228:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800722c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800722e:	4b12      	ldr	r3, [pc, #72]	; (8007278 <HAL_ADC_MspInit+0x78>)
 8007230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007236:	613b      	str	r3, [r7, #16]
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <HAL_ADC_MspInit+0x78>)
 800723c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800723e:	4a0e      	ldr	r2, [pc, #56]	; (8007278 <HAL_ADC_MspInit+0x78>)
 8007240:	f043 0304 	orr.w	r3, r3, #4
 8007244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007246:	4b0c      	ldr	r3, [pc, #48]	; (8007278 <HAL_ADC_MspInit+0x78>)
 8007248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724a:	f003 0304 	and.w	r3, r3, #4
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2308      	movs	r3, #8
 8007254:	617b      	str	r3, [r7, #20]
 8007256:	230b      	movs	r3, #11
 8007258:	61bb      	str	r3, [r7, #24]
 800725a:	2300      	movs	r3, #0
 800725c:	61fb      	str	r3, [r7, #28]
 800725e:	f107 0314 	add.w	r3, r7, #20
 8007262:	4619      	mov	r1, r3
 8007264:	4805      	ldr	r0, [pc, #20]	; (800727c <HAL_ADC_MspInit+0x7c>)
 8007266:	f7fa fa57 	bl	8001718 <HAL_GPIO_Init>
 800726a:	bf00      	nop
 800726c:	3728      	adds	r7, #40	; 0x28
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	50040000 	.word	0x50040000
 8007278:	40021000 	.word	0x40021000
 800727c:	48000800 	.word	0x48000800

08007280 <HAL_UART_MspInit>:
 8007280:	b580      	push	{r7, lr}
 8007282:	b08e      	sub	sp, #56	; 0x38
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	605a      	str	r2, [r3, #4]
 8007292:	609a      	str	r2, [r3, #8]
 8007294:	60da      	str	r2, [r3, #12]
 8007296:	611a      	str	r2, [r3, #16]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a60      	ldr	r2, [pc, #384]	; (8007420 <HAL_UART_MspInit+0x1a0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d14d      	bne.n	800733e <HAL_UART_MspInit+0xbe>
 80072a2:	4b60      	ldr	r3, [pc, #384]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 80072a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a6:	4a5f      	ldr	r2, [pc, #380]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 80072a8:	f043 0301 	orr.w	r3, r3, #1
 80072ac:	65d3      	str	r3, [r2, #92]	; 0x5c
 80072ae:	4b5d      	ldr	r3, [pc, #372]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 80072b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	623b      	str	r3, [r7, #32]
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	4b5a      	ldr	r3, [pc, #360]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 80072bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072be:	4a59      	ldr	r2, [pc, #356]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 80072c0:	f043 0304 	orr.w	r3, r3, #4
 80072c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80072c6:	4b57      	ldr	r3, [pc, #348]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 80072c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ca:	f003 0304 	and.w	r3, r3, #4
 80072ce:	61fb      	str	r3, [r7, #28]
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	4b54      	ldr	r3, [pc, #336]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 80072d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072d6:	4a53      	ldr	r2, [pc, #332]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 80072d8:	f043 0302 	orr.w	r3, r3, #2
 80072dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80072de:	4b51      	ldr	r3, [pc, #324]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 80072e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	61bb      	str	r3, [r7, #24]
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	2302      	movs	r3, #2
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
 80072ee:	2302      	movs	r3, #2
 80072f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80072f2:	2300      	movs	r3, #0
 80072f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072f6:	2303      	movs	r3, #3
 80072f8:	633b      	str	r3, [r7, #48]	; 0x30
 80072fa:	2308      	movs	r3, #8
 80072fc:	637b      	str	r3, [r7, #52]	; 0x34
 80072fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007302:	4619      	mov	r1, r3
 8007304:	4848      	ldr	r0, [pc, #288]	; (8007428 <HAL_UART_MspInit+0x1a8>)
 8007306:	f7fa fa07 	bl	8001718 <HAL_GPIO_Init>
 800730a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
 8007310:	2302      	movs	r3, #2
 8007312:	62bb      	str	r3, [r7, #40]	; 0x28
 8007314:	2300      	movs	r3, #0
 8007316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007318:	2303      	movs	r3, #3
 800731a:	633b      	str	r3, [r7, #48]	; 0x30
 800731c:	2308      	movs	r3, #8
 800731e:	637b      	str	r3, [r7, #52]	; 0x34
 8007320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007324:	4619      	mov	r1, r3
 8007326:	4841      	ldr	r0, [pc, #260]	; (800742c <HAL_UART_MspInit+0x1ac>)
 8007328:	f7fa f9f6 	bl	8001718 <HAL_GPIO_Init>
 800732c:	2200      	movs	r2, #0
 800732e:	2100      	movs	r1, #0
 8007330:	2046      	movs	r0, #70	; 0x46
 8007332:	f7fa f97a 	bl	800162a <HAL_NVIC_SetPriority>
 8007336:	2046      	movs	r0, #70	; 0x46
 8007338:	f7fa f993 	bl	8001662 <HAL_NVIC_EnableIRQ>
 800733c:	e06b      	b.n	8007416 <HAL_UART_MspInit+0x196>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a3b      	ldr	r2, [pc, #236]	; (8007430 <HAL_UART_MspInit+0x1b0>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d131      	bne.n	80073ac <HAL_UART_MspInit+0x12c>
 8007348:	4b36      	ldr	r3, [pc, #216]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 800734a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800734c:	4a35      	ldr	r2, [pc, #212]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 800734e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007352:	6593      	str	r3, [r2, #88]	; 0x58
 8007354:	4b33      	ldr	r3, [pc, #204]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 8007356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800735c:	617b      	str	r3, [r7, #20]
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	4b30      	ldr	r3, [pc, #192]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 8007362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007364:	4a2f      	ldr	r2, [pc, #188]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 8007366:	f043 0301 	orr.w	r3, r3, #1
 800736a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800736c:	4b2d      	ldr	r3, [pc, #180]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 800736e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	613b      	str	r3, [r7, #16]
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	230c      	movs	r3, #12
 800737a:	627b      	str	r3, [r7, #36]	; 0x24
 800737c:	2302      	movs	r3, #2
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007380:	2300      	movs	r3, #0
 8007382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007384:	2303      	movs	r3, #3
 8007386:	633b      	str	r3, [r7, #48]	; 0x30
 8007388:	2307      	movs	r3, #7
 800738a:	637b      	str	r3, [r7, #52]	; 0x34
 800738c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007390:	4619      	mov	r1, r3
 8007392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007396:	f7fa f9bf 	bl	8001718 <HAL_GPIO_Init>
 800739a:	2200      	movs	r2, #0
 800739c:	2100      	movs	r1, #0
 800739e:	2026      	movs	r0, #38	; 0x26
 80073a0:	f7fa f943 	bl	800162a <HAL_NVIC_SetPriority>
 80073a4:	2026      	movs	r0, #38	; 0x26
 80073a6:	f7fa f95c 	bl	8001662 <HAL_NVIC_EnableIRQ>
 80073aa:	e034      	b.n	8007416 <HAL_UART_MspInit+0x196>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a20      	ldr	r2, [pc, #128]	; (8007434 <HAL_UART_MspInit+0x1b4>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d12f      	bne.n	8007416 <HAL_UART_MspInit+0x196>
 80073b6:	4b1b      	ldr	r3, [pc, #108]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 80073b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ba:	4a1a      	ldr	r2, [pc, #104]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 80073bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073c0:	6593      	str	r3, [r2, #88]	; 0x58
 80073c2:	4b18      	ldr	r3, [pc, #96]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 80073c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4b15      	ldr	r3, [pc, #84]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 80073d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d2:	4a14      	ldr	r2, [pc, #80]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 80073d4:	f043 0304 	orr.w	r3, r3, #4
 80073d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80073da:	4b12      	ldr	r3, [pc, #72]	; (8007424 <HAL_UART_MspInit+0x1a4>)
 80073dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	60bb      	str	r3, [r7, #8]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2330      	movs	r3, #48	; 0x30
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
 80073ea:	2302      	movs	r3, #2
 80073ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ee:	2300      	movs	r3, #0
 80073f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073f2:	2303      	movs	r3, #3
 80073f4:	633b      	str	r3, [r7, #48]	; 0x30
 80073f6:	2307      	movs	r3, #7
 80073f8:	637b      	str	r3, [r7, #52]	; 0x34
 80073fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073fe:	4619      	mov	r1, r3
 8007400:	4809      	ldr	r0, [pc, #36]	; (8007428 <HAL_UART_MspInit+0x1a8>)
 8007402:	f7fa f989 	bl	8001718 <HAL_GPIO_Init>
 8007406:	2200      	movs	r2, #0
 8007408:	2100      	movs	r1, #0
 800740a:	2027      	movs	r0, #39	; 0x27
 800740c:	f7fa f90d 	bl	800162a <HAL_NVIC_SetPriority>
 8007410:	2027      	movs	r0, #39	; 0x27
 8007412:	f7fa f926 	bl	8001662 <HAL_NVIC_EnableIRQ>
 8007416:	bf00      	nop
 8007418:	3738      	adds	r7, #56	; 0x38
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	40008000 	.word	0x40008000
 8007424:	40021000 	.word	0x40021000
 8007428:	48000800 	.word	0x48000800
 800742c:	48000400 	.word	0x48000400
 8007430:	40004400 	.word	0x40004400
 8007434:	40004800 	.word	0x40004800

08007438 <HAL_RTC_MspInit>:
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a0b      	ldr	r2, [pc, #44]	; (8007474 <HAL_RTC_MspInit+0x3c>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d10f      	bne.n	800746a <HAL_RTC_MspInit+0x32>
 800744a:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <HAL_RTC_MspInit+0x40>)
 800744c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007450:	4a09      	ldr	r2, [pc, #36]	; (8007478 <HAL_RTC_MspInit+0x40>)
 8007452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800745a:	2200      	movs	r2, #0
 800745c:	2100      	movs	r1, #0
 800745e:	2003      	movs	r0, #3
 8007460:	f7fa f8e3 	bl	800162a <HAL_NVIC_SetPriority>
 8007464:	2003      	movs	r0, #3
 8007466:	f7fa f8fc 	bl	8001662 <HAL_NVIC_EnableIRQ>
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	40002800 	.word	0x40002800
 8007478:	40021000 	.word	0x40021000

0800747c <NMI_Handler>:
 800747c:	b480      	push	{r7}
 800747e:	af00      	add	r7, sp, #0
 8007480:	bf00      	nop
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <HardFault_Handler>:
 800748a:	b480      	push	{r7}
 800748c:	af00      	add	r7, sp, #0
 800748e:	e7fe      	b.n	800748e <HardFault_Handler+0x4>

08007490 <MemManage_Handler>:
 8007490:	b480      	push	{r7}
 8007492:	af00      	add	r7, sp, #0
 8007494:	e7fe      	b.n	8007494 <MemManage_Handler+0x4>

08007496 <BusFault_Handler>:
 8007496:	b480      	push	{r7}
 8007498:	af00      	add	r7, sp, #0
 800749a:	e7fe      	b.n	800749a <BusFault_Handler+0x4>

0800749c <UsageFault_Handler>:
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
 80074a0:	e7fe      	b.n	80074a0 <UsageFault_Handler+0x4>

080074a2 <SVC_Handler>:
 80074a2:	b480      	push	{r7}
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	bf00      	nop
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <DebugMon_Handler>:
 80074b0:	b480      	push	{r7}
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	bf00      	nop
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <PendSV_Handler>:
 80074be:	b480      	push	{r7}
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	bf00      	nop
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <SysTick_Handler>:
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	f7f9 f8a8 	bl	8000624 <HAL_IncTick>
 80074d4:	bf00      	nop
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <RTC_WKUP_IRQHandler>:
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
 80074dc:	4802      	ldr	r0, [pc, #8]	; (80074e8 <RTC_WKUP_IRQHandler+0x10>)
 80074de:	f7fb ff1d 	bl	800331c <HAL_RTCEx_WakeUpTimerIRQHandler>
 80074e2:	bf00      	nop
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	200005f4 	.word	0x200005f4

080074ec <USART2_IRQHandler>:
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	4802      	ldr	r0, [pc, #8]	; (80074fc <USART2_IRQHandler+0x10>)
 80074f2:	f7fc f829 	bl	8003548 <HAL_UART_IRQHandler>
 80074f6:	bf00      	nop
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	20000428 	.word	0x20000428

08007500 <USART3_IRQHandler>:
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
 8007504:	4802      	ldr	r0, [pc, #8]	; (8007510 <USART3_IRQHandler+0x10>)
 8007506:	f7fc f81f 	bl	8003548 <HAL_UART_IRQHandler>
 800750a:	bf00      	nop
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	200001e0 	.word	0x200001e0

08007514 <LPUART1_IRQHandler>:
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
 8007518:	4802      	ldr	r0, [pc, #8]	; (8007524 <LPUART1_IRQHandler+0x10>)
 800751a:	f7fc f815 	bl	8003548 <HAL_UART_IRQHandler>
 800751e:	bf00      	nop
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	200002e0 	.word	0x200002e0

08007528 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007530:	4b11      	ldr	r3, [pc, #68]	; (8007578 <_sbrk+0x50>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d102      	bne.n	800753e <_sbrk+0x16>
		heap_end = &end;
 8007538:	4b0f      	ldr	r3, [pc, #60]	; (8007578 <_sbrk+0x50>)
 800753a:	4a10      	ldr	r2, [pc, #64]	; (800757c <_sbrk+0x54>)
 800753c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800753e:	4b0e      	ldr	r3, [pc, #56]	; (8007578 <_sbrk+0x50>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007544:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <_sbrk+0x50>)
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4413      	add	r3, r2
 800754c:	466a      	mov	r2, sp
 800754e:	4293      	cmp	r3, r2
 8007550:	d907      	bls.n	8007562 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007552:	f000 f875 	bl	8007640 <__errno>
 8007556:	4602      	mov	r2, r0
 8007558:	230c      	movs	r3, #12
 800755a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800755c:	f04f 33ff 	mov.w	r3, #4294967295
 8007560:	e006      	b.n	8007570 <_sbrk+0x48>
	}

	heap_end += incr;
 8007562:	4b05      	ldr	r3, [pc, #20]	; (8007578 <_sbrk+0x50>)
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4413      	add	r3, r2
 800756a:	4a03      	ldr	r2, [pc, #12]	; (8007578 <_sbrk+0x50>)
 800756c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800756e:	68fb      	ldr	r3, [r7, #12]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	20000190 	.word	0x20000190
 800757c:	20000620 	.word	0x20000620

08007580 <SystemInit>:
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
 8007584:	4b17      	ldr	r3, [pc, #92]	; (80075e4 <SystemInit+0x64>)
 8007586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800758a:	4a16      	ldr	r2, [pc, #88]	; (80075e4 <SystemInit+0x64>)
 800758c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8007594:	4b14      	ldr	r3, [pc, #80]	; (80075e8 <SystemInit+0x68>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a13      	ldr	r2, [pc, #76]	; (80075e8 <SystemInit+0x68>)
 800759a:	f043 0301 	orr.w	r3, r3, #1
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	4b11      	ldr	r3, [pc, #68]	; (80075e8 <SystemInit+0x68>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	609a      	str	r2, [r3, #8]
 80075a6:	4b10      	ldr	r3, [pc, #64]	; (80075e8 <SystemInit+0x68>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a0f      	ldr	r2, [pc, #60]	; (80075e8 <SystemInit+0x68>)
 80075ac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80075b0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	4b0c      	ldr	r3, [pc, #48]	; (80075e8 <SystemInit+0x68>)
 80075b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80075bc:	60da      	str	r2, [r3, #12]
 80075be:	4b0a      	ldr	r3, [pc, #40]	; (80075e8 <SystemInit+0x68>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a09      	ldr	r2, [pc, #36]	; (80075e8 <SystemInit+0x68>)
 80075c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	4b07      	ldr	r3, [pc, #28]	; (80075e8 <SystemInit+0x68>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	619a      	str	r2, [r3, #24]
 80075d0:	4b04      	ldr	r3, [pc, #16]	; (80075e4 <SystemInit+0x64>)
 80075d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80075d6:	609a      	str	r2, [r3, #8]
 80075d8:	bf00      	nop
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	e000ed00 	.word	0xe000ed00
 80075e8:	40021000 	.word	0x40021000

080075ec <Reset_Handler>:
 80075ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007624 <LoopForever+0x2>
 80075f0:	2100      	movs	r1, #0
 80075f2:	e003      	b.n	80075fc <LoopCopyDataInit>

080075f4 <CopyDataInit>:
 80075f4:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <LoopForever+0x6>)
 80075f6:	585b      	ldr	r3, [r3, r1]
 80075f8:	5043      	str	r3, [r0, r1]
 80075fa:	3104      	adds	r1, #4

080075fc <LoopCopyDataInit>:
 80075fc:	480b      	ldr	r0, [pc, #44]	; (800762c <LoopForever+0xa>)
 80075fe:	4b0c      	ldr	r3, [pc, #48]	; (8007630 <LoopForever+0xe>)
 8007600:	1842      	adds	r2, r0, r1
 8007602:	429a      	cmp	r2, r3
 8007604:	d3f6      	bcc.n	80075f4 <CopyDataInit>
 8007606:	4a0b      	ldr	r2, [pc, #44]	; (8007634 <LoopForever+0x12>)
 8007608:	e002      	b.n	8007610 <LoopFillZerobss>

0800760a <FillZerobss>:
 800760a:	2300      	movs	r3, #0
 800760c:	f842 3b04 	str.w	r3, [r2], #4

08007610 <LoopFillZerobss>:
 8007610:	4b09      	ldr	r3, [pc, #36]	; (8007638 <LoopForever+0x16>)
 8007612:	429a      	cmp	r2, r3
 8007614:	d3f9      	bcc.n	800760a <FillZerobss>
 8007616:	f7ff ffb3 	bl	8007580 <SystemInit>
 800761a:	f000 f817 	bl	800764c <__libc_init_array>
 800761e:	f7ff fac9 	bl	8006bb4 <main>

08007622 <LoopForever>:
 8007622:	e7fe      	b.n	8007622 <LoopForever>
 8007624:	20018000 	.word	0x20018000
 8007628:	0800840c 	.word	0x0800840c
 800762c:	20000000 	.word	0x20000000
 8007630:	20000084 	.word	0x20000084
 8007634:	20000084 	.word	0x20000084
 8007638:	2000061c 	.word	0x2000061c

0800763c <ADC1_2_IRQHandler>:
 800763c:	e7fe      	b.n	800763c <ADC1_2_IRQHandler>
	...

08007640 <__errno>:
 8007640:	4b01      	ldr	r3, [pc, #4]	; (8007648 <__errno+0x8>)
 8007642:	6818      	ldr	r0, [r3, #0]
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	20000020 	.word	0x20000020

0800764c <__libc_init_array>:
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	4e0d      	ldr	r6, [pc, #52]	; (8007684 <__libc_init_array+0x38>)
 8007650:	4c0d      	ldr	r4, [pc, #52]	; (8007688 <__libc_init_array+0x3c>)
 8007652:	1ba4      	subs	r4, r4, r6
 8007654:	10a4      	asrs	r4, r4, #2
 8007656:	2500      	movs	r5, #0
 8007658:	42a5      	cmp	r5, r4
 800765a:	d109      	bne.n	8007670 <__libc_init_array+0x24>
 800765c:	4e0b      	ldr	r6, [pc, #44]	; (800768c <__libc_init_array+0x40>)
 800765e:	4c0c      	ldr	r4, [pc, #48]	; (8007690 <__libc_init_array+0x44>)
 8007660:	f000 fc58 	bl	8007f14 <_init>
 8007664:	1ba4      	subs	r4, r4, r6
 8007666:	10a4      	asrs	r4, r4, #2
 8007668:	2500      	movs	r5, #0
 800766a:	42a5      	cmp	r5, r4
 800766c:	d105      	bne.n	800767a <__libc_init_array+0x2e>
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007674:	4798      	blx	r3
 8007676:	3501      	adds	r5, #1
 8007678:	e7ee      	b.n	8007658 <__libc_init_array+0xc>
 800767a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800767e:	4798      	blx	r3
 8007680:	3501      	adds	r5, #1
 8007682:	e7f2      	b.n	800766a <__libc_init_array+0x1e>
 8007684:	08008404 	.word	0x08008404
 8007688:	08008404 	.word	0x08008404
 800768c:	08008404 	.word	0x08008404
 8007690:	08008408 	.word	0x08008408

08007694 <memcpy>:
 8007694:	b510      	push	{r4, lr}
 8007696:	1e43      	subs	r3, r0, #1
 8007698:	440a      	add	r2, r1
 800769a:	4291      	cmp	r1, r2
 800769c:	d100      	bne.n	80076a0 <memcpy+0xc>
 800769e:	bd10      	pop	{r4, pc}
 80076a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076a8:	e7f7      	b.n	800769a <memcpy+0x6>

080076aa <memset>:
 80076aa:	4402      	add	r2, r0
 80076ac:	4603      	mov	r3, r0
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d100      	bne.n	80076b4 <memset+0xa>
 80076b2:	4770      	bx	lr
 80076b4:	f803 1b01 	strb.w	r1, [r3], #1
 80076b8:	e7f9      	b.n	80076ae <memset+0x4>
	...

080076bc <siprintf>:
 80076bc:	b40e      	push	{r1, r2, r3}
 80076be:	b500      	push	{lr}
 80076c0:	b09c      	sub	sp, #112	; 0x70
 80076c2:	ab1d      	add	r3, sp, #116	; 0x74
 80076c4:	9002      	str	r0, [sp, #8]
 80076c6:	9006      	str	r0, [sp, #24]
 80076c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076cc:	4809      	ldr	r0, [pc, #36]	; (80076f4 <siprintf+0x38>)
 80076ce:	9107      	str	r1, [sp, #28]
 80076d0:	9104      	str	r1, [sp, #16]
 80076d2:	4909      	ldr	r1, [pc, #36]	; (80076f8 <siprintf+0x3c>)
 80076d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80076d8:	9105      	str	r1, [sp, #20]
 80076da:	6800      	ldr	r0, [r0, #0]
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	a902      	add	r1, sp, #8
 80076e0:	f000 f896 	bl	8007810 <_svfiprintf_r>
 80076e4:	9b02      	ldr	r3, [sp, #8]
 80076e6:	2200      	movs	r2, #0
 80076e8:	701a      	strb	r2, [r3, #0]
 80076ea:	b01c      	add	sp, #112	; 0x70
 80076ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80076f0:	b003      	add	sp, #12
 80076f2:	4770      	bx	lr
 80076f4:	20000020 	.word	0x20000020
 80076f8:	ffff0208 	.word	0xffff0208

080076fc <strchr>:
 80076fc:	b2c9      	uxtb	r1, r1
 80076fe:	4603      	mov	r3, r0
 8007700:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007704:	b11a      	cbz	r2, 800770e <strchr+0x12>
 8007706:	428a      	cmp	r2, r1
 8007708:	d1f9      	bne.n	80076fe <strchr+0x2>
 800770a:	4618      	mov	r0, r3
 800770c:	4770      	bx	lr
 800770e:	2900      	cmp	r1, #0
 8007710:	bf18      	it	ne
 8007712:	2300      	movne	r3, #0
 8007714:	e7f9      	b.n	800770a <strchr+0xe>

08007716 <strcpy>:
 8007716:	4603      	mov	r3, r0
 8007718:	f811 2b01 	ldrb.w	r2, [r1], #1
 800771c:	f803 2b01 	strb.w	r2, [r3], #1
 8007720:	2a00      	cmp	r2, #0
 8007722:	d1f9      	bne.n	8007718 <strcpy+0x2>
 8007724:	4770      	bx	lr

08007726 <strstr>:
 8007726:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007728:	7803      	ldrb	r3, [r0, #0]
 800772a:	b17b      	cbz	r3, 800774c <strstr+0x26>
 800772c:	4604      	mov	r4, r0
 800772e:	7823      	ldrb	r3, [r4, #0]
 8007730:	4620      	mov	r0, r4
 8007732:	1c66      	adds	r6, r4, #1
 8007734:	b17b      	cbz	r3, 8007756 <strstr+0x30>
 8007736:	1e4a      	subs	r2, r1, #1
 8007738:	1e63      	subs	r3, r4, #1
 800773a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800773e:	b14d      	cbz	r5, 8007754 <strstr+0x2e>
 8007740:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8007744:	42af      	cmp	r7, r5
 8007746:	4634      	mov	r4, r6
 8007748:	d0f7      	beq.n	800773a <strstr+0x14>
 800774a:	e7f0      	b.n	800772e <strstr+0x8>
 800774c:	780b      	ldrb	r3, [r1, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	bf18      	it	ne
 8007752:	2000      	movne	r0, #0
 8007754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007756:	4618      	mov	r0, r3
 8007758:	e7fc      	b.n	8007754 <strstr+0x2e>

0800775a <__ssputs_r>:
 800775a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800775e:	688e      	ldr	r6, [r1, #8]
 8007760:	429e      	cmp	r6, r3
 8007762:	4682      	mov	sl, r0
 8007764:	460c      	mov	r4, r1
 8007766:	4690      	mov	r8, r2
 8007768:	4699      	mov	r9, r3
 800776a:	d837      	bhi.n	80077dc <__ssputs_r+0x82>
 800776c:	898a      	ldrh	r2, [r1, #12]
 800776e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007772:	d031      	beq.n	80077d8 <__ssputs_r+0x7e>
 8007774:	6825      	ldr	r5, [r4, #0]
 8007776:	6909      	ldr	r1, [r1, #16]
 8007778:	1a6f      	subs	r7, r5, r1
 800777a:	6965      	ldr	r5, [r4, #20]
 800777c:	2302      	movs	r3, #2
 800777e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007782:	fb95 f5f3 	sdiv	r5, r5, r3
 8007786:	f109 0301 	add.w	r3, r9, #1
 800778a:	443b      	add	r3, r7
 800778c:	429d      	cmp	r5, r3
 800778e:	bf38      	it	cc
 8007790:	461d      	movcc	r5, r3
 8007792:	0553      	lsls	r3, r2, #21
 8007794:	d530      	bpl.n	80077f8 <__ssputs_r+0x9e>
 8007796:	4629      	mov	r1, r5
 8007798:	f000 fb22 	bl	8007de0 <_malloc_r>
 800779c:	4606      	mov	r6, r0
 800779e:	b950      	cbnz	r0, 80077b6 <__ssputs_r+0x5c>
 80077a0:	230c      	movs	r3, #12
 80077a2:	f8ca 3000 	str.w	r3, [sl]
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ac:	81a3      	strh	r3, [r4, #12]
 80077ae:	f04f 30ff 	mov.w	r0, #4294967295
 80077b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b6:	463a      	mov	r2, r7
 80077b8:	6921      	ldr	r1, [r4, #16]
 80077ba:	f7ff ff6b 	bl	8007694 <memcpy>
 80077be:	89a3      	ldrh	r3, [r4, #12]
 80077c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c8:	81a3      	strh	r3, [r4, #12]
 80077ca:	6126      	str	r6, [r4, #16]
 80077cc:	6165      	str	r5, [r4, #20]
 80077ce:	443e      	add	r6, r7
 80077d0:	1bed      	subs	r5, r5, r7
 80077d2:	6026      	str	r6, [r4, #0]
 80077d4:	60a5      	str	r5, [r4, #8]
 80077d6:	464e      	mov	r6, r9
 80077d8:	454e      	cmp	r6, r9
 80077da:	d900      	bls.n	80077de <__ssputs_r+0x84>
 80077dc:	464e      	mov	r6, r9
 80077de:	4632      	mov	r2, r6
 80077e0:	4641      	mov	r1, r8
 80077e2:	6820      	ldr	r0, [r4, #0]
 80077e4:	f000 fa94 	bl	8007d10 <memmove>
 80077e8:	68a3      	ldr	r3, [r4, #8]
 80077ea:	1b9b      	subs	r3, r3, r6
 80077ec:	60a3      	str	r3, [r4, #8]
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	441e      	add	r6, r3
 80077f2:	6026      	str	r6, [r4, #0]
 80077f4:	2000      	movs	r0, #0
 80077f6:	e7dc      	b.n	80077b2 <__ssputs_r+0x58>
 80077f8:	462a      	mov	r2, r5
 80077fa:	f000 fb4b 	bl	8007e94 <_realloc_r>
 80077fe:	4606      	mov	r6, r0
 8007800:	2800      	cmp	r0, #0
 8007802:	d1e2      	bne.n	80077ca <__ssputs_r+0x70>
 8007804:	6921      	ldr	r1, [r4, #16]
 8007806:	4650      	mov	r0, sl
 8007808:	f000 fa9c 	bl	8007d44 <_free_r>
 800780c:	e7c8      	b.n	80077a0 <__ssputs_r+0x46>
	...

08007810 <_svfiprintf_r>:
 8007810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007814:	461d      	mov	r5, r3
 8007816:	898b      	ldrh	r3, [r1, #12]
 8007818:	061f      	lsls	r7, r3, #24
 800781a:	b09d      	sub	sp, #116	; 0x74
 800781c:	4680      	mov	r8, r0
 800781e:	460c      	mov	r4, r1
 8007820:	4616      	mov	r6, r2
 8007822:	d50f      	bpl.n	8007844 <_svfiprintf_r+0x34>
 8007824:	690b      	ldr	r3, [r1, #16]
 8007826:	b96b      	cbnz	r3, 8007844 <_svfiprintf_r+0x34>
 8007828:	2140      	movs	r1, #64	; 0x40
 800782a:	f000 fad9 	bl	8007de0 <_malloc_r>
 800782e:	6020      	str	r0, [r4, #0]
 8007830:	6120      	str	r0, [r4, #16]
 8007832:	b928      	cbnz	r0, 8007840 <_svfiprintf_r+0x30>
 8007834:	230c      	movs	r3, #12
 8007836:	f8c8 3000 	str.w	r3, [r8]
 800783a:	f04f 30ff 	mov.w	r0, #4294967295
 800783e:	e0c8      	b.n	80079d2 <_svfiprintf_r+0x1c2>
 8007840:	2340      	movs	r3, #64	; 0x40
 8007842:	6163      	str	r3, [r4, #20]
 8007844:	2300      	movs	r3, #0
 8007846:	9309      	str	r3, [sp, #36]	; 0x24
 8007848:	2320      	movs	r3, #32
 800784a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800784e:	2330      	movs	r3, #48	; 0x30
 8007850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007854:	9503      	str	r5, [sp, #12]
 8007856:	f04f 0b01 	mov.w	fp, #1
 800785a:	4637      	mov	r7, r6
 800785c:	463d      	mov	r5, r7
 800785e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007862:	b10b      	cbz	r3, 8007868 <_svfiprintf_r+0x58>
 8007864:	2b25      	cmp	r3, #37	; 0x25
 8007866:	d13e      	bne.n	80078e6 <_svfiprintf_r+0xd6>
 8007868:	ebb7 0a06 	subs.w	sl, r7, r6
 800786c:	d00b      	beq.n	8007886 <_svfiprintf_r+0x76>
 800786e:	4653      	mov	r3, sl
 8007870:	4632      	mov	r2, r6
 8007872:	4621      	mov	r1, r4
 8007874:	4640      	mov	r0, r8
 8007876:	f7ff ff70 	bl	800775a <__ssputs_r>
 800787a:	3001      	adds	r0, #1
 800787c:	f000 80a4 	beq.w	80079c8 <_svfiprintf_r+0x1b8>
 8007880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007882:	4453      	add	r3, sl
 8007884:	9309      	str	r3, [sp, #36]	; 0x24
 8007886:	783b      	ldrb	r3, [r7, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 809d 	beq.w	80079c8 <_svfiprintf_r+0x1b8>
 800788e:	2300      	movs	r3, #0
 8007890:	f04f 32ff 	mov.w	r2, #4294967295
 8007894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007898:	9304      	str	r3, [sp, #16]
 800789a:	9307      	str	r3, [sp, #28]
 800789c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078a0:	931a      	str	r3, [sp, #104]	; 0x68
 80078a2:	462f      	mov	r7, r5
 80078a4:	2205      	movs	r2, #5
 80078a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80078aa:	4850      	ldr	r0, [pc, #320]	; (80079ec <_svfiprintf_r+0x1dc>)
 80078ac:	f7f8 fc98 	bl	80001e0 <memchr>
 80078b0:	9b04      	ldr	r3, [sp, #16]
 80078b2:	b9d0      	cbnz	r0, 80078ea <_svfiprintf_r+0xda>
 80078b4:	06d9      	lsls	r1, r3, #27
 80078b6:	bf44      	itt	mi
 80078b8:	2220      	movmi	r2, #32
 80078ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80078be:	071a      	lsls	r2, r3, #28
 80078c0:	bf44      	itt	mi
 80078c2:	222b      	movmi	r2, #43	; 0x2b
 80078c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80078c8:	782a      	ldrb	r2, [r5, #0]
 80078ca:	2a2a      	cmp	r2, #42	; 0x2a
 80078cc:	d015      	beq.n	80078fa <_svfiprintf_r+0xea>
 80078ce:	9a07      	ldr	r2, [sp, #28]
 80078d0:	462f      	mov	r7, r5
 80078d2:	2000      	movs	r0, #0
 80078d4:	250a      	movs	r5, #10
 80078d6:	4639      	mov	r1, r7
 80078d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078dc:	3b30      	subs	r3, #48	; 0x30
 80078de:	2b09      	cmp	r3, #9
 80078e0:	d94d      	bls.n	800797e <_svfiprintf_r+0x16e>
 80078e2:	b1b8      	cbz	r0, 8007914 <_svfiprintf_r+0x104>
 80078e4:	e00f      	b.n	8007906 <_svfiprintf_r+0xf6>
 80078e6:	462f      	mov	r7, r5
 80078e8:	e7b8      	b.n	800785c <_svfiprintf_r+0x4c>
 80078ea:	4a40      	ldr	r2, [pc, #256]	; (80079ec <_svfiprintf_r+0x1dc>)
 80078ec:	1a80      	subs	r0, r0, r2
 80078ee:	fa0b f000 	lsl.w	r0, fp, r0
 80078f2:	4318      	orrs	r0, r3
 80078f4:	9004      	str	r0, [sp, #16]
 80078f6:	463d      	mov	r5, r7
 80078f8:	e7d3      	b.n	80078a2 <_svfiprintf_r+0x92>
 80078fa:	9a03      	ldr	r2, [sp, #12]
 80078fc:	1d11      	adds	r1, r2, #4
 80078fe:	6812      	ldr	r2, [r2, #0]
 8007900:	9103      	str	r1, [sp, #12]
 8007902:	2a00      	cmp	r2, #0
 8007904:	db01      	blt.n	800790a <_svfiprintf_r+0xfa>
 8007906:	9207      	str	r2, [sp, #28]
 8007908:	e004      	b.n	8007914 <_svfiprintf_r+0x104>
 800790a:	4252      	negs	r2, r2
 800790c:	f043 0302 	orr.w	r3, r3, #2
 8007910:	9207      	str	r2, [sp, #28]
 8007912:	9304      	str	r3, [sp, #16]
 8007914:	783b      	ldrb	r3, [r7, #0]
 8007916:	2b2e      	cmp	r3, #46	; 0x2e
 8007918:	d10c      	bne.n	8007934 <_svfiprintf_r+0x124>
 800791a:	787b      	ldrb	r3, [r7, #1]
 800791c:	2b2a      	cmp	r3, #42	; 0x2a
 800791e:	d133      	bne.n	8007988 <_svfiprintf_r+0x178>
 8007920:	9b03      	ldr	r3, [sp, #12]
 8007922:	1d1a      	adds	r2, r3, #4
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	9203      	str	r2, [sp, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	bfb8      	it	lt
 800792c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007930:	3702      	adds	r7, #2
 8007932:	9305      	str	r3, [sp, #20]
 8007934:	4d2e      	ldr	r5, [pc, #184]	; (80079f0 <_svfiprintf_r+0x1e0>)
 8007936:	7839      	ldrb	r1, [r7, #0]
 8007938:	2203      	movs	r2, #3
 800793a:	4628      	mov	r0, r5
 800793c:	f7f8 fc50 	bl	80001e0 <memchr>
 8007940:	b138      	cbz	r0, 8007952 <_svfiprintf_r+0x142>
 8007942:	2340      	movs	r3, #64	; 0x40
 8007944:	1b40      	subs	r0, r0, r5
 8007946:	fa03 f000 	lsl.w	r0, r3, r0
 800794a:	9b04      	ldr	r3, [sp, #16]
 800794c:	4303      	orrs	r3, r0
 800794e:	3701      	adds	r7, #1
 8007950:	9304      	str	r3, [sp, #16]
 8007952:	7839      	ldrb	r1, [r7, #0]
 8007954:	4827      	ldr	r0, [pc, #156]	; (80079f4 <_svfiprintf_r+0x1e4>)
 8007956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800795a:	2206      	movs	r2, #6
 800795c:	1c7e      	adds	r6, r7, #1
 800795e:	f7f8 fc3f 	bl	80001e0 <memchr>
 8007962:	2800      	cmp	r0, #0
 8007964:	d038      	beq.n	80079d8 <_svfiprintf_r+0x1c8>
 8007966:	4b24      	ldr	r3, [pc, #144]	; (80079f8 <_svfiprintf_r+0x1e8>)
 8007968:	bb13      	cbnz	r3, 80079b0 <_svfiprintf_r+0x1a0>
 800796a:	9b03      	ldr	r3, [sp, #12]
 800796c:	3307      	adds	r3, #7
 800796e:	f023 0307 	bic.w	r3, r3, #7
 8007972:	3308      	adds	r3, #8
 8007974:	9303      	str	r3, [sp, #12]
 8007976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007978:	444b      	add	r3, r9
 800797a:	9309      	str	r3, [sp, #36]	; 0x24
 800797c:	e76d      	b.n	800785a <_svfiprintf_r+0x4a>
 800797e:	fb05 3202 	mla	r2, r5, r2, r3
 8007982:	2001      	movs	r0, #1
 8007984:	460f      	mov	r7, r1
 8007986:	e7a6      	b.n	80078d6 <_svfiprintf_r+0xc6>
 8007988:	2300      	movs	r3, #0
 800798a:	3701      	adds	r7, #1
 800798c:	9305      	str	r3, [sp, #20]
 800798e:	4619      	mov	r1, r3
 8007990:	250a      	movs	r5, #10
 8007992:	4638      	mov	r0, r7
 8007994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007998:	3a30      	subs	r2, #48	; 0x30
 800799a:	2a09      	cmp	r2, #9
 800799c:	d903      	bls.n	80079a6 <_svfiprintf_r+0x196>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d0c8      	beq.n	8007934 <_svfiprintf_r+0x124>
 80079a2:	9105      	str	r1, [sp, #20]
 80079a4:	e7c6      	b.n	8007934 <_svfiprintf_r+0x124>
 80079a6:	fb05 2101 	mla	r1, r5, r1, r2
 80079aa:	2301      	movs	r3, #1
 80079ac:	4607      	mov	r7, r0
 80079ae:	e7f0      	b.n	8007992 <_svfiprintf_r+0x182>
 80079b0:	ab03      	add	r3, sp, #12
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	4622      	mov	r2, r4
 80079b6:	4b11      	ldr	r3, [pc, #68]	; (80079fc <_svfiprintf_r+0x1ec>)
 80079b8:	a904      	add	r1, sp, #16
 80079ba:	4640      	mov	r0, r8
 80079bc:	f3af 8000 	nop.w
 80079c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80079c4:	4681      	mov	r9, r0
 80079c6:	d1d6      	bne.n	8007976 <_svfiprintf_r+0x166>
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	065b      	lsls	r3, r3, #25
 80079cc:	f53f af35 	bmi.w	800783a <_svfiprintf_r+0x2a>
 80079d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079d2:	b01d      	add	sp, #116	; 0x74
 80079d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d8:	ab03      	add	r3, sp, #12
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	4622      	mov	r2, r4
 80079de:	4b07      	ldr	r3, [pc, #28]	; (80079fc <_svfiprintf_r+0x1ec>)
 80079e0:	a904      	add	r1, sp, #16
 80079e2:	4640      	mov	r0, r8
 80079e4:	f000 f882 	bl	8007aec <_printf_i>
 80079e8:	e7ea      	b.n	80079c0 <_svfiprintf_r+0x1b0>
 80079ea:	bf00      	nop
 80079ec:	080083c8 	.word	0x080083c8
 80079f0:	080083ce 	.word	0x080083ce
 80079f4:	080083d2 	.word	0x080083d2
 80079f8:	00000000 	.word	0x00000000
 80079fc:	0800775b 	.word	0x0800775b

08007a00 <_printf_common>:
 8007a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a04:	4691      	mov	r9, r2
 8007a06:	461f      	mov	r7, r3
 8007a08:	688a      	ldr	r2, [r1, #8]
 8007a0a:	690b      	ldr	r3, [r1, #16]
 8007a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a10:	4293      	cmp	r3, r2
 8007a12:	bfb8      	it	lt
 8007a14:	4613      	movlt	r3, r2
 8007a16:	f8c9 3000 	str.w	r3, [r9]
 8007a1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a1e:	4606      	mov	r6, r0
 8007a20:	460c      	mov	r4, r1
 8007a22:	b112      	cbz	r2, 8007a2a <_printf_common+0x2a>
 8007a24:	3301      	adds	r3, #1
 8007a26:	f8c9 3000 	str.w	r3, [r9]
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	0699      	lsls	r1, r3, #26
 8007a2e:	bf42      	ittt	mi
 8007a30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007a34:	3302      	addmi	r3, #2
 8007a36:	f8c9 3000 	strmi.w	r3, [r9]
 8007a3a:	6825      	ldr	r5, [r4, #0]
 8007a3c:	f015 0506 	ands.w	r5, r5, #6
 8007a40:	d107      	bne.n	8007a52 <_printf_common+0x52>
 8007a42:	f104 0a19 	add.w	sl, r4, #25
 8007a46:	68e3      	ldr	r3, [r4, #12]
 8007a48:	f8d9 2000 	ldr.w	r2, [r9]
 8007a4c:	1a9b      	subs	r3, r3, r2
 8007a4e:	42ab      	cmp	r3, r5
 8007a50:	dc28      	bgt.n	8007aa4 <_printf_common+0xa4>
 8007a52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007a56:	6822      	ldr	r2, [r4, #0]
 8007a58:	3300      	adds	r3, #0
 8007a5a:	bf18      	it	ne
 8007a5c:	2301      	movne	r3, #1
 8007a5e:	0692      	lsls	r2, r2, #26
 8007a60:	d42d      	bmi.n	8007abe <_printf_common+0xbe>
 8007a62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a66:	4639      	mov	r1, r7
 8007a68:	4630      	mov	r0, r6
 8007a6a:	47c0      	blx	r8
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	d020      	beq.n	8007ab2 <_printf_common+0xb2>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	68e5      	ldr	r5, [r4, #12]
 8007a74:	f8d9 2000 	ldr.w	r2, [r9]
 8007a78:	f003 0306 	and.w	r3, r3, #6
 8007a7c:	2b04      	cmp	r3, #4
 8007a7e:	bf08      	it	eq
 8007a80:	1aad      	subeq	r5, r5, r2
 8007a82:	68a3      	ldr	r3, [r4, #8]
 8007a84:	6922      	ldr	r2, [r4, #16]
 8007a86:	bf0c      	ite	eq
 8007a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a8c:	2500      	movne	r5, #0
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	bfc4      	itt	gt
 8007a92:	1a9b      	subgt	r3, r3, r2
 8007a94:	18ed      	addgt	r5, r5, r3
 8007a96:	f04f 0900 	mov.w	r9, #0
 8007a9a:	341a      	adds	r4, #26
 8007a9c:	454d      	cmp	r5, r9
 8007a9e:	d11a      	bne.n	8007ad6 <_printf_common+0xd6>
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	e008      	b.n	8007ab6 <_printf_common+0xb6>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	4652      	mov	r2, sl
 8007aa8:	4639      	mov	r1, r7
 8007aaa:	4630      	mov	r0, r6
 8007aac:	47c0      	blx	r8
 8007aae:	3001      	adds	r0, #1
 8007ab0:	d103      	bne.n	8007aba <_printf_common+0xba>
 8007ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aba:	3501      	adds	r5, #1
 8007abc:	e7c3      	b.n	8007a46 <_printf_common+0x46>
 8007abe:	18e1      	adds	r1, r4, r3
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	2030      	movs	r0, #48	; 0x30
 8007ac4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ac8:	4422      	add	r2, r4
 8007aca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ace:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ad2:	3302      	adds	r3, #2
 8007ad4:	e7c5      	b.n	8007a62 <_printf_common+0x62>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	4622      	mov	r2, r4
 8007ada:	4639      	mov	r1, r7
 8007adc:	4630      	mov	r0, r6
 8007ade:	47c0      	blx	r8
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	d0e6      	beq.n	8007ab2 <_printf_common+0xb2>
 8007ae4:	f109 0901 	add.w	r9, r9, #1
 8007ae8:	e7d8      	b.n	8007a9c <_printf_common+0x9c>
	...

08007aec <_printf_i>:
 8007aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007af0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007af4:	460c      	mov	r4, r1
 8007af6:	7e09      	ldrb	r1, [r1, #24]
 8007af8:	b085      	sub	sp, #20
 8007afa:	296e      	cmp	r1, #110	; 0x6e
 8007afc:	4617      	mov	r7, r2
 8007afe:	4606      	mov	r6, r0
 8007b00:	4698      	mov	r8, r3
 8007b02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b04:	f000 80b3 	beq.w	8007c6e <_printf_i+0x182>
 8007b08:	d822      	bhi.n	8007b50 <_printf_i+0x64>
 8007b0a:	2963      	cmp	r1, #99	; 0x63
 8007b0c:	d036      	beq.n	8007b7c <_printf_i+0x90>
 8007b0e:	d80a      	bhi.n	8007b26 <_printf_i+0x3a>
 8007b10:	2900      	cmp	r1, #0
 8007b12:	f000 80b9 	beq.w	8007c88 <_printf_i+0x19c>
 8007b16:	2958      	cmp	r1, #88	; 0x58
 8007b18:	f000 8083 	beq.w	8007c22 <_printf_i+0x136>
 8007b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007b24:	e032      	b.n	8007b8c <_printf_i+0xa0>
 8007b26:	2964      	cmp	r1, #100	; 0x64
 8007b28:	d001      	beq.n	8007b2e <_printf_i+0x42>
 8007b2a:	2969      	cmp	r1, #105	; 0x69
 8007b2c:	d1f6      	bne.n	8007b1c <_printf_i+0x30>
 8007b2e:	6820      	ldr	r0, [r4, #0]
 8007b30:	6813      	ldr	r3, [r2, #0]
 8007b32:	0605      	lsls	r5, r0, #24
 8007b34:	f103 0104 	add.w	r1, r3, #4
 8007b38:	d52a      	bpl.n	8007b90 <_printf_i+0xa4>
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6011      	str	r1, [r2, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	da03      	bge.n	8007b4a <_printf_i+0x5e>
 8007b42:	222d      	movs	r2, #45	; 0x2d
 8007b44:	425b      	negs	r3, r3
 8007b46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007b4a:	486f      	ldr	r0, [pc, #444]	; (8007d08 <_printf_i+0x21c>)
 8007b4c:	220a      	movs	r2, #10
 8007b4e:	e039      	b.n	8007bc4 <_printf_i+0xd8>
 8007b50:	2973      	cmp	r1, #115	; 0x73
 8007b52:	f000 809d 	beq.w	8007c90 <_printf_i+0x1a4>
 8007b56:	d808      	bhi.n	8007b6a <_printf_i+0x7e>
 8007b58:	296f      	cmp	r1, #111	; 0x6f
 8007b5a:	d020      	beq.n	8007b9e <_printf_i+0xb2>
 8007b5c:	2970      	cmp	r1, #112	; 0x70
 8007b5e:	d1dd      	bne.n	8007b1c <_printf_i+0x30>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	f043 0320 	orr.w	r3, r3, #32
 8007b66:	6023      	str	r3, [r4, #0]
 8007b68:	e003      	b.n	8007b72 <_printf_i+0x86>
 8007b6a:	2975      	cmp	r1, #117	; 0x75
 8007b6c:	d017      	beq.n	8007b9e <_printf_i+0xb2>
 8007b6e:	2978      	cmp	r1, #120	; 0x78
 8007b70:	d1d4      	bne.n	8007b1c <_printf_i+0x30>
 8007b72:	2378      	movs	r3, #120	; 0x78
 8007b74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b78:	4864      	ldr	r0, [pc, #400]	; (8007d0c <_printf_i+0x220>)
 8007b7a:	e055      	b.n	8007c28 <_printf_i+0x13c>
 8007b7c:	6813      	ldr	r3, [r2, #0]
 8007b7e:	1d19      	adds	r1, r3, #4
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6011      	str	r1, [r2, #0]
 8007b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e08c      	b.n	8007caa <_printf_i+0x1be>
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6011      	str	r1, [r2, #0]
 8007b94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b98:	bf18      	it	ne
 8007b9a:	b21b      	sxthne	r3, r3
 8007b9c:	e7cf      	b.n	8007b3e <_printf_i+0x52>
 8007b9e:	6813      	ldr	r3, [r2, #0]
 8007ba0:	6825      	ldr	r5, [r4, #0]
 8007ba2:	1d18      	adds	r0, r3, #4
 8007ba4:	6010      	str	r0, [r2, #0]
 8007ba6:	0628      	lsls	r0, r5, #24
 8007ba8:	d501      	bpl.n	8007bae <_printf_i+0xc2>
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	e002      	b.n	8007bb4 <_printf_i+0xc8>
 8007bae:	0668      	lsls	r0, r5, #25
 8007bb0:	d5fb      	bpl.n	8007baa <_printf_i+0xbe>
 8007bb2:	881b      	ldrh	r3, [r3, #0]
 8007bb4:	4854      	ldr	r0, [pc, #336]	; (8007d08 <_printf_i+0x21c>)
 8007bb6:	296f      	cmp	r1, #111	; 0x6f
 8007bb8:	bf14      	ite	ne
 8007bba:	220a      	movne	r2, #10
 8007bbc:	2208      	moveq	r2, #8
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bc4:	6865      	ldr	r5, [r4, #4]
 8007bc6:	60a5      	str	r5, [r4, #8]
 8007bc8:	2d00      	cmp	r5, #0
 8007bca:	f2c0 8095 	blt.w	8007cf8 <_printf_i+0x20c>
 8007bce:	6821      	ldr	r1, [r4, #0]
 8007bd0:	f021 0104 	bic.w	r1, r1, #4
 8007bd4:	6021      	str	r1, [r4, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d13d      	bne.n	8007c56 <_printf_i+0x16a>
 8007bda:	2d00      	cmp	r5, #0
 8007bdc:	f040 808e 	bne.w	8007cfc <_printf_i+0x210>
 8007be0:	4665      	mov	r5, ip
 8007be2:	2a08      	cmp	r2, #8
 8007be4:	d10b      	bne.n	8007bfe <_printf_i+0x112>
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	07db      	lsls	r3, r3, #31
 8007bea:	d508      	bpl.n	8007bfe <_printf_i+0x112>
 8007bec:	6923      	ldr	r3, [r4, #16]
 8007bee:	6862      	ldr	r2, [r4, #4]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	bfde      	ittt	le
 8007bf4:	2330      	movle	r3, #48	; 0x30
 8007bf6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bfa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bfe:	ebac 0305 	sub.w	r3, ip, r5
 8007c02:	6123      	str	r3, [r4, #16]
 8007c04:	f8cd 8000 	str.w	r8, [sp]
 8007c08:	463b      	mov	r3, r7
 8007c0a:	aa03      	add	r2, sp, #12
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f7ff fef6 	bl	8007a00 <_printf_common>
 8007c14:	3001      	adds	r0, #1
 8007c16:	d14d      	bne.n	8007cb4 <_printf_i+0x1c8>
 8007c18:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1c:	b005      	add	sp, #20
 8007c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c22:	4839      	ldr	r0, [pc, #228]	; (8007d08 <_printf_i+0x21c>)
 8007c24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007c28:	6813      	ldr	r3, [r2, #0]
 8007c2a:	6821      	ldr	r1, [r4, #0]
 8007c2c:	1d1d      	adds	r5, r3, #4
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6015      	str	r5, [r2, #0]
 8007c32:	060a      	lsls	r2, r1, #24
 8007c34:	d50b      	bpl.n	8007c4e <_printf_i+0x162>
 8007c36:	07ca      	lsls	r2, r1, #31
 8007c38:	bf44      	itt	mi
 8007c3a:	f041 0120 	orrmi.w	r1, r1, #32
 8007c3e:	6021      	strmi	r1, [r4, #0]
 8007c40:	b91b      	cbnz	r3, 8007c4a <_printf_i+0x15e>
 8007c42:	6822      	ldr	r2, [r4, #0]
 8007c44:	f022 0220 	bic.w	r2, r2, #32
 8007c48:	6022      	str	r2, [r4, #0]
 8007c4a:	2210      	movs	r2, #16
 8007c4c:	e7b7      	b.n	8007bbe <_printf_i+0xd2>
 8007c4e:	064d      	lsls	r5, r1, #25
 8007c50:	bf48      	it	mi
 8007c52:	b29b      	uxthmi	r3, r3
 8007c54:	e7ef      	b.n	8007c36 <_printf_i+0x14a>
 8007c56:	4665      	mov	r5, ip
 8007c58:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c5c:	fb02 3311 	mls	r3, r2, r1, r3
 8007c60:	5cc3      	ldrb	r3, [r0, r3]
 8007c62:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007c66:	460b      	mov	r3, r1
 8007c68:	2900      	cmp	r1, #0
 8007c6a:	d1f5      	bne.n	8007c58 <_printf_i+0x16c>
 8007c6c:	e7b9      	b.n	8007be2 <_printf_i+0xf6>
 8007c6e:	6813      	ldr	r3, [r2, #0]
 8007c70:	6825      	ldr	r5, [r4, #0]
 8007c72:	6961      	ldr	r1, [r4, #20]
 8007c74:	1d18      	adds	r0, r3, #4
 8007c76:	6010      	str	r0, [r2, #0]
 8007c78:	0628      	lsls	r0, r5, #24
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	d501      	bpl.n	8007c82 <_printf_i+0x196>
 8007c7e:	6019      	str	r1, [r3, #0]
 8007c80:	e002      	b.n	8007c88 <_printf_i+0x19c>
 8007c82:	066a      	lsls	r2, r5, #25
 8007c84:	d5fb      	bpl.n	8007c7e <_printf_i+0x192>
 8007c86:	8019      	strh	r1, [r3, #0]
 8007c88:	2300      	movs	r3, #0
 8007c8a:	6123      	str	r3, [r4, #16]
 8007c8c:	4665      	mov	r5, ip
 8007c8e:	e7b9      	b.n	8007c04 <_printf_i+0x118>
 8007c90:	6813      	ldr	r3, [r2, #0]
 8007c92:	1d19      	adds	r1, r3, #4
 8007c94:	6011      	str	r1, [r2, #0]
 8007c96:	681d      	ldr	r5, [r3, #0]
 8007c98:	6862      	ldr	r2, [r4, #4]
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f7f8 fa9f 	bl	80001e0 <memchr>
 8007ca2:	b108      	cbz	r0, 8007ca8 <_printf_i+0x1bc>
 8007ca4:	1b40      	subs	r0, r0, r5
 8007ca6:	6060      	str	r0, [r4, #4]
 8007ca8:	6863      	ldr	r3, [r4, #4]
 8007caa:	6123      	str	r3, [r4, #16]
 8007cac:	2300      	movs	r3, #0
 8007cae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cb2:	e7a7      	b.n	8007c04 <_printf_i+0x118>
 8007cb4:	6923      	ldr	r3, [r4, #16]
 8007cb6:	462a      	mov	r2, r5
 8007cb8:	4639      	mov	r1, r7
 8007cba:	4630      	mov	r0, r6
 8007cbc:	47c0      	blx	r8
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	d0aa      	beq.n	8007c18 <_printf_i+0x12c>
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	079b      	lsls	r3, r3, #30
 8007cc6:	d413      	bmi.n	8007cf0 <_printf_i+0x204>
 8007cc8:	68e0      	ldr	r0, [r4, #12]
 8007cca:	9b03      	ldr	r3, [sp, #12]
 8007ccc:	4298      	cmp	r0, r3
 8007cce:	bfb8      	it	lt
 8007cd0:	4618      	movlt	r0, r3
 8007cd2:	e7a3      	b.n	8007c1c <_printf_i+0x130>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	464a      	mov	r2, r9
 8007cd8:	4639      	mov	r1, r7
 8007cda:	4630      	mov	r0, r6
 8007cdc:	47c0      	blx	r8
 8007cde:	3001      	adds	r0, #1
 8007ce0:	d09a      	beq.n	8007c18 <_printf_i+0x12c>
 8007ce2:	3501      	adds	r5, #1
 8007ce4:	68e3      	ldr	r3, [r4, #12]
 8007ce6:	9a03      	ldr	r2, [sp, #12]
 8007ce8:	1a9b      	subs	r3, r3, r2
 8007cea:	42ab      	cmp	r3, r5
 8007cec:	dcf2      	bgt.n	8007cd4 <_printf_i+0x1e8>
 8007cee:	e7eb      	b.n	8007cc8 <_printf_i+0x1dc>
 8007cf0:	2500      	movs	r5, #0
 8007cf2:	f104 0919 	add.w	r9, r4, #25
 8007cf6:	e7f5      	b.n	8007ce4 <_printf_i+0x1f8>
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1ac      	bne.n	8007c56 <_printf_i+0x16a>
 8007cfc:	7803      	ldrb	r3, [r0, #0]
 8007cfe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d06:	e76c      	b.n	8007be2 <_printf_i+0xf6>
 8007d08:	080083d9 	.word	0x080083d9
 8007d0c:	080083ea 	.word	0x080083ea

08007d10 <memmove>:
 8007d10:	4288      	cmp	r0, r1
 8007d12:	b510      	push	{r4, lr}
 8007d14:	eb01 0302 	add.w	r3, r1, r2
 8007d18:	d807      	bhi.n	8007d2a <memmove+0x1a>
 8007d1a:	1e42      	subs	r2, r0, #1
 8007d1c:	4299      	cmp	r1, r3
 8007d1e:	d00a      	beq.n	8007d36 <memmove+0x26>
 8007d20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d24:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007d28:	e7f8      	b.n	8007d1c <memmove+0xc>
 8007d2a:	4283      	cmp	r3, r0
 8007d2c:	d9f5      	bls.n	8007d1a <memmove+0xa>
 8007d2e:	1881      	adds	r1, r0, r2
 8007d30:	1ad2      	subs	r2, r2, r3
 8007d32:	42d3      	cmn	r3, r2
 8007d34:	d100      	bne.n	8007d38 <memmove+0x28>
 8007d36:	bd10      	pop	{r4, pc}
 8007d38:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d3c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007d40:	e7f7      	b.n	8007d32 <memmove+0x22>
	...

08007d44 <_free_r>:
 8007d44:	b538      	push	{r3, r4, r5, lr}
 8007d46:	4605      	mov	r5, r0
 8007d48:	2900      	cmp	r1, #0
 8007d4a:	d045      	beq.n	8007dd8 <_free_r+0x94>
 8007d4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d50:	1f0c      	subs	r4, r1, #4
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	bfb8      	it	lt
 8007d56:	18e4      	addlt	r4, r4, r3
 8007d58:	f000 f8d2 	bl	8007f00 <__malloc_lock>
 8007d5c:	4a1f      	ldr	r2, [pc, #124]	; (8007ddc <_free_r+0x98>)
 8007d5e:	6813      	ldr	r3, [r2, #0]
 8007d60:	4610      	mov	r0, r2
 8007d62:	b933      	cbnz	r3, 8007d72 <_free_r+0x2e>
 8007d64:	6063      	str	r3, [r4, #4]
 8007d66:	6014      	str	r4, [r2, #0]
 8007d68:	4628      	mov	r0, r5
 8007d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d6e:	f000 b8c8 	b.w	8007f02 <__malloc_unlock>
 8007d72:	42a3      	cmp	r3, r4
 8007d74:	d90c      	bls.n	8007d90 <_free_r+0x4c>
 8007d76:	6821      	ldr	r1, [r4, #0]
 8007d78:	1862      	adds	r2, r4, r1
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	bf04      	itt	eq
 8007d7e:	681a      	ldreq	r2, [r3, #0]
 8007d80:	685b      	ldreq	r3, [r3, #4]
 8007d82:	6063      	str	r3, [r4, #4]
 8007d84:	bf04      	itt	eq
 8007d86:	1852      	addeq	r2, r2, r1
 8007d88:	6022      	streq	r2, [r4, #0]
 8007d8a:	6004      	str	r4, [r0, #0]
 8007d8c:	e7ec      	b.n	8007d68 <_free_r+0x24>
 8007d8e:	4613      	mov	r3, r2
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	b10a      	cbz	r2, 8007d98 <_free_r+0x54>
 8007d94:	42a2      	cmp	r2, r4
 8007d96:	d9fa      	bls.n	8007d8e <_free_r+0x4a>
 8007d98:	6819      	ldr	r1, [r3, #0]
 8007d9a:	1858      	adds	r0, r3, r1
 8007d9c:	42a0      	cmp	r0, r4
 8007d9e:	d10b      	bne.n	8007db8 <_free_r+0x74>
 8007da0:	6820      	ldr	r0, [r4, #0]
 8007da2:	4401      	add	r1, r0
 8007da4:	1858      	adds	r0, r3, r1
 8007da6:	4282      	cmp	r2, r0
 8007da8:	6019      	str	r1, [r3, #0]
 8007daa:	d1dd      	bne.n	8007d68 <_free_r+0x24>
 8007dac:	6810      	ldr	r0, [r2, #0]
 8007dae:	6852      	ldr	r2, [r2, #4]
 8007db0:	605a      	str	r2, [r3, #4]
 8007db2:	4401      	add	r1, r0
 8007db4:	6019      	str	r1, [r3, #0]
 8007db6:	e7d7      	b.n	8007d68 <_free_r+0x24>
 8007db8:	d902      	bls.n	8007dc0 <_free_r+0x7c>
 8007dba:	230c      	movs	r3, #12
 8007dbc:	602b      	str	r3, [r5, #0]
 8007dbe:	e7d3      	b.n	8007d68 <_free_r+0x24>
 8007dc0:	6820      	ldr	r0, [r4, #0]
 8007dc2:	1821      	adds	r1, r4, r0
 8007dc4:	428a      	cmp	r2, r1
 8007dc6:	bf04      	itt	eq
 8007dc8:	6811      	ldreq	r1, [r2, #0]
 8007dca:	6852      	ldreq	r2, [r2, #4]
 8007dcc:	6062      	str	r2, [r4, #4]
 8007dce:	bf04      	itt	eq
 8007dd0:	1809      	addeq	r1, r1, r0
 8007dd2:	6021      	streq	r1, [r4, #0]
 8007dd4:	605c      	str	r4, [r3, #4]
 8007dd6:	e7c7      	b.n	8007d68 <_free_r+0x24>
 8007dd8:	bd38      	pop	{r3, r4, r5, pc}
 8007dda:	bf00      	nop
 8007ddc:	20000194 	.word	0x20000194

08007de0 <_malloc_r>:
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	1ccd      	adds	r5, r1, #3
 8007de4:	f025 0503 	bic.w	r5, r5, #3
 8007de8:	3508      	adds	r5, #8
 8007dea:	2d0c      	cmp	r5, #12
 8007dec:	bf38      	it	cc
 8007dee:	250c      	movcc	r5, #12
 8007df0:	2d00      	cmp	r5, #0
 8007df2:	4606      	mov	r6, r0
 8007df4:	db01      	blt.n	8007dfa <_malloc_r+0x1a>
 8007df6:	42a9      	cmp	r1, r5
 8007df8:	d903      	bls.n	8007e02 <_malloc_r+0x22>
 8007dfa:	230c      	movs	r3, #12
 8007dfc:	6033      	str	r3, [r6, #0]
 8007dfe:	2000      	movs	r0, #0
 8007e00:	bd70      	pop	{r4, r5, r6, pc}
 8007e02:	f000 f87d 	bl	8007f00 <__malloc_lock>
 8007e06:	4a21      	ldr	r2, [pc, #132]	; (8007e8c <_malloc_r+0xac>)
 8007e08:	6814      	ldr	r4, [r2, #0]
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	b991      	cbnz	r1, 8007e34 <_malloc_r+0x54>
 8007e0e:	4c20      	ldr	r4, [pc, #128]	; (8007e90 <_malloc_r+0xb0>)
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	b91b      	cbnz	r3, 8007e1c <_malloc_r+0x3c>
 8007e14:	4630      	mov	r0, r6
 8007e16:	f000 f863 	bl	8007ee0 <_sbrk_r>
 8007e1a:	6020      	str	r0, [r4, #0]
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f000 f85e 	bl	8007ee0 <_sbrk_r>
 8007e24:	1c43      	adds	r3, r0, #1
 8007e26:	d124      	bne.n	8007e72 <_malloc_r+0x92>
 8007e28:	230c      	movs	r3, #12
 8007e2a:	6033      	str	r3, [r6, #0]
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f000 f868 	bl	8007f02 <__malloc_unlock>
 8007e32:	e7e4      	b.n	8007dfe <_malloc_r+0x1e>
 8007e34:	680b      	ldr	r3, [r1, #0]
 8007e36:	1b5b      	subs	r3, r3, r5
 8007e38:	d418      	bmi.n	8007e6c <_malloc_r+0x8c>
 8007e3a:	2b0b      	cmp	r3, #11
 8007e3c:	d90f      	bls.n	8007e5e <_malloc_r+0x7e>
 8007e3e:	600b      	str	r3, [r1, #0]
 8007e40:	50cd      	str	r5, [r1, r3]
 8007e42:	18cc      	adds	r4, r1, r3
 8007e44:	4630      	mov	r0, r6
 8007e46:	f000 f85c 	bl	8007f02 <__malloc_unlock>
 8007e4a:	f104 000b 	add.w	r0, r4, #11
 8007e4e:	1d23      	adds	r3, r4, #4
 8007e50:	f020 0007 	bic.w	r0, r0, #7
 8007e54:	1ac3      	subs	r3, r0, r3
 8007e56:	d0d3      	beq.n	8007e00 <_malloc_r+0x20>
 8007e58:	425a      	negs	r2, r3
 8007e5a:	50e2      	str	r2, [r4, r3]
 8007e5c:	e7d0      	b.n	8007e00 <_malloc_r+0x20>
 8007e5e:	428c      	cmp	r4, r1
 8007e60:	684b      	ldr	r3, [r1, #4]
 8007e62:	bf16      	itet	ne
 8007e64:	6063      	strne	r3, [r4, #4]
 8007e66:	6013      	streq	r3, [r2, #0]
 8007e68:	460c      	movne	r4, r1
 8007e6a:	e7eb      	b.n	8007e44 <_malloc_r+0x64>
 8007e6c:	460c      	mov	r4, r1
 8007e6e:	6849      	ldr	r1, [r1, #4]
 8007e70:	e7cc      	b.n	8007e0c <_malloc_r+0x2c>
 8007e72:	1cc4      	adds	r4, r0, #3
 8007e74:	f024 0403 	bic.w	r4, r4, #3
 8007e78:	42a0      	cmp	r0, r4
 8007e7a:	d005      	beq.n	8007e88 <_malloc_r+0xa8>
 8007e7c:	1a21      	subs	r1, r4, r0
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f000 f82e 	bl	8007ee0 <_sbrk_r>
 8007e84:	3001      	adds	r0, #1
 8007e86:	d0cf      	beq.n	8007e28 <_malloc_r+0x48>
 8007e88:	6025      	str	r5, [r4, #0]
 8007e8a:	e7db      	b.n	8007e44 <_malloc_r+0x64>
 8007e8c:	20000194 	.word	0x20000194
 8007e90:	20000198 	.word	0x20000198

08007e94 <_realloc_r>:
 8007e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e96:	4607      	mov	r7, r0
 8007e98:	4614      	mov	r4, r2
 8007e9a:	460e      	mov	r6, r1
 8007e9c:	b921      	cbnz	r1, 8007ea8 <_realloc_r+0x14>
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ea4:	f7ff bf9c 	b.w	8007de0 <_malloc_r>
 8007ea8:	b922      	cbnz	r2, 8007eb4 <_realloc_r+0x20>
 8007eaa:	f7ff ff4b 	bl	8007d44 <_free_r>
 8007eae:	4625      	mov	r5, r4
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eb4:	f000 f826 	bl	8007f04 <_malloc_usable_size_r>
 8007eb8:	42a0      	cmp	r0, r4
 8007eba:	d20f      	bcs.n	8007edc <_realloc_r+0x48>
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	f7ff ff8e 	bl	8007de0 <_malloc_r>
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	d0f2      	beq.n	8007eb0 <_realloc_r+0x1c>
 8007eca:	4631      	mov	r1, r6
 8007ecc:	4622      	mov	r2, r4
 8007ece:	f7ff fbe1 	bl	8007694 <memcpy>
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	f7ff ff35 	bl	8007d44 <_free_r>
 8007eda:	e7e9      	b.n	8007eb0 <_realloc_r+0x1c>
 8007edc:	4635      	mov	r5, r6
 8007ede:	e7e7      	b.n	8007eb0 <_realloc_r+0x1c>

08007ee0 <_sbrk_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4c06      	ldr	r4, [pc, #24]	; (8007efc <_sbrk_r+0x1c>)
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	4608      	mov	r0, r1
 8007eea:	6023      	str	r3, [r4, #0]
 8007eec:	f7ff fb1c 	bl	8007528 <_sbrk>
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	d102      	bne.n	8007efa <_sbrk_r+0x1a>
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	b103      	cbz	r3, 8007efa <_sbrk_r+0x1a>
 8007ef8:	602b      	str	r3, [r5, #0]
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	20000618 	.word	0x20000618

08007f00 <__malloc_lock>:
 8007f00:	4770      	bx	lr

08007f02 <__malloc_unlock>:
 8007f02:	4770      	bx	lr

08007f04 <_malloc_usable_size_r>:
 8007f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f08:	1f18      	subs	r0, r3, #4
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	bfbc      	itt	lt
 8007f0e:	580b      	ldrlt	r3, [r1, r0]
 8007f10:	18c0      	addlt	r0, r0, r3
 8007f12:	4770      	bx	lr

08007f14 <_init>:
 8007f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f16:	bf00      	nop
 8007f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1a:	bc08      	pop	{r3}
 8007f1c:	469e      	mov	lr, r3
 8007f1e:	4770      	bx	lr

08007f20 <_fini>:
 8007f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f22:	bf00      	nop
 8007f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f26:	bc08      	pop	{r3}
 8007f28:	469e      	mov	lr, r3
 8007f2a:	4770      	bx	lr
